Optimising: ../../results/neuralnet/pianoroll/neuralnet-0.csv
[1 0 0 0 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 1 0 1 0 1 1 0 0 0; 0 1 0 0 1 0 0 2 0 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 3 0 0 0 0 0 0; 1 0 0 0 0 3 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 1 0 0 1 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 1 0 2 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 1 1 0; 0 0 0 1 0 1 0 0 0 1 1 0; 1 0 1 0 0 1 0 0 1 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 0 0 0 0 1 2 0 0 1 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 2 0 0 0 0 0 0 1 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 1 0 0 0 1 0 0; 1 0 0 0 0 1 0 0 1 1 0 0]
Key Counter is [27 6 1 11 5 32 0 12 17 4 13 0]
Key Score is [81; 106; 28; 113; 43; 94; 79; 49; 118; 33; 100; 52]
Position Counter for 9 is [17 4 13 0 27 6 1 11 5 32 0 12]
Any[[9.0, 87.25, 0.0]]
[9, 87, 0]
6 F Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 202
Best yet: 352
New solution
function cost: 150
child voicing cost: 201
Best yet: 351
New solution
function cost: 150
child voicing cost: 196
Best yet: 346
New solution
function cost: 150
child voicing cost: 193
Best yet: 343
New solution
function cost: 150
child voicing cost: 190
Best yet: 340
New solution
function cost: 150
child voicing cost: 189
Best yet: 339
New solution
function cost: 150
child voicing cost: 186
Best yet: 336
New solution
function cost: 159
child voicing cost: 175
Best yet: 334
New solution
function cost: 159
child voicing cost: 173
Best yet: 332
New solution
function cost: 150
child voicing cost: 181
Best yet: 331
New solution
function cost: 150
child voicing cost: 178
Best yet: 328
New solution
function cost: 150
child voicing cost: 177
Best yet: 327
New solution
function cost: 150
child voicing cost: 171
Best yet: 321
New solution
function cost: 150
child voicing cost: 170
Best yet: 320
New solution
function cost: 150
child voicing cost: 169
Best yet: 319
New solution
function cost: 150
child voicing cost: 168
Best yet: 318
New solution
function cost: 150
child voicing cost: 165
Best yet: 315
New solution
function cost: 150
child voicing cost: 164
Best yet: 314
New solution
function cost: 150
child voicing cost: 163
Best yet: 313
New solution
function cost: 150
child voicing cost: 162
Best yet: 312
New solution
function cost: 150
child voicing cost: 161
Best yet: 311
New solution
function cost: 150
child voicing cost: 159
Best yet: 309
New solution
function cost: 150
child voicing cost: 158
Best yet: 308
New solution
function cost: 150
child voicing cost: 157
Best yet: 307
New solution
function cost: 144
child voicing cost: 162
Best yet: 306
New solution
function cost: 162
child voicing cost: 143
Best yet: 305
New solution
function cost: 150
child voicing cost: 153
Best yet: 303
New solution
function cost: 144
child voicing cost: 158
Best yet: 302
New solution
function cost: 147
child voicing cost: 154
Best yet: 301
New solution
function cost: 162
child voicing cost: 138
Best yet: 300
New solution
function cost: 144
child voicing cost: 155
Best yet: 299
New solution
function cost: 144
child voicing cost: 154
Best yet: 298
New solution
function cost: 144
child voicing cost: 151
Best yet: 295
New solution
function cost: 144
child voicing cost: 150
Best yet: 294
New solution
function cost: 144
child voicing cost: 148
Best yet: 292
New solution
function cost: 147
child voicing cost: 142
Best yet: 289
New solution
function cost: 147
child voicing cost: 141
Best yet: 288
New solution
function cost: 147
child voicing cost: 135
Best yet: 282
New solution
function cost: 147
child voicing cost: 134
Best yet: 281
New solution
function cost: 147
child voicing cost: 131
Best yet: 278

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 110209, Pruned: 132825, completed: 40, time: 2.0180001258850098, efficiency: 19.821604313556566
Results: bestval_func: 147, bestval_voices: 131
(15, 409, 409, 409)
[1 0 0 0 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 1 0 1 0 1 1 0 0 0; 0 1 0 0 1 0 0 2 0 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 3 0 0 0 0 0 0; 1 0 0 0 0 3 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 1 0 0 1 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 1 0 2 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 1 1 0; 0 0 0 1 0 1 0 0 0 1 1 0; 1 0 1 0 0 1 0 0 1 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 0 0 0 0 1 2 0 0 1 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 2 0 0 0 0 0 0 1 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 1 0 0 0 1 0 0; 1 0 0 0 0 1 0 0 1 1 0 0]
Key Counter is [27 6 1 11 5 32 0 12 17 4 13 0]
Key Score is [81; 106; 28; 113; 43; 94; 79; 49; 118; 33; 100; 52]
Position Counter for 9 is [17 4 13 0 27 6 1 11 5 32 0 12]
Any[[9.0, 87.25, 0.0]]
[9, 87, 0]
6 F Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 165
child voicing cost: 160
Best yet: 325
New solution
function cost: 165
child voicing cost: 158
Best yet: 323
New solution
function cost: 165
child voicing cost: 156
Best yet: 321
New solution
function cost: 165
child voicing cost: 150
Best yet: 315
New solution
function cost: 165
child voicing cost: 142
Best yet: 307
New solution
function cost: 165
child voicing cost: 141
Best yet: 306
New solution
function cost: 162
child voicing cost: 143
Best yet: 305
New solution
function cost: 165
child voicing cost: 138
Best yet: 303
New solution
function cost: 165
child voicing cost: 137
Best yet: 302
New solution
function cost: 165
child voicing cost: 136
Best yet: 301
New solution
function cost: 165
child voicing cost: 131
Best yet: 296
New solution
function cost: 174
child voicing cost: 120
Best yet: 294
New solution
function cost: 174
child voicing cost: 118
Best yet: 292
New solution
function cost: 168
child voicing cost: 119
Best yet: 287
New solution
function cost: 153
child voicing cost: 133
Best yet: 286
New solution
function cost: 153
child voicing cost: 131
Best yet: 284
New solution
function cost: 153
child voicing cost: 130
Best yet: 283
New solution
function cost: 153
child voicing cost: 125
Best yet: 278
New solution
function cost: 159
child voicing cost: 114
Best yet: 273
New solution
function cost: 159
child voicing cost: 112
Best yet: 271

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(53, 1), (53, 1), (56, 3), (60, 5)])    
 (6, "D7-5", [(48, 1), (58, 7), (60, 1), (64, 3)]) 
 (6, "T", [(53, 1), (56, 3), (60, 5), (65, 1)])    
 (0, "Ts", [(49, 1), (61, 1), (65, 3), (68, 5)])   
 (6, "D7", [(48, 1), (58, 7), (67, 5), (76, 3)])   
 (18, "Ts", [(49, 1), (56, 5), (65, 3), (77, 3)])  
 (27, "D", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (3, "D/3", [(52, 3), (67, 5), (72, 1), (72, 1)])  
 (6, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])    
 (6, "S/5", [(53, 5), (65, 5), (70, 1), (73, 3)])  
 (6, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])    
 (12, "T-5", [(53, 1), (65, 1), (68, 3), (77, 1)]) 
 (12, "D7/3", [(52, 3), (60, 1), (70, 7), (79, 5)])
 ⋮                                                 
 (6, "D7/3", [(52, 3), (67, 5), (70, 7), (72, 1)]) 
 (12, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])   
 (6, "S/3", [(49, 3), (65, 5), (70, 1), (70, 1)])  
 (15, "T/5", [(48, 5), (65, 1), (68, 3), (72, 5)]) 
 (9, "S", [(46, 1), (65, 5), (70, 1), (73, 3)])    
 (6, "T/3", [(44, 3), (60, 5), (72, 5), (77, 1)])  
 (6, "D/3", [(40, 3), (60, 1), (72, 1), (79, 5)])  
 (12, "T", [(41, 1), (60, 5), (68, 3), (77, 1)])   
 (18, "D", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (12, "D", [(48, 1), (64, 3), (67, 5), (72, 1)])   
 (18, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])   
 (18, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])   

##: Done. Total checked: 117739, Pruned: 128485, completed: 20, time: 1.944000005722046, efficiency: 10.288065813339102
Results: bestval_func: 159, bestval_voices: 112
(16, 409, 409, 409)
#Key: 6Scale: Minor
#Total time for optimisation of piece: 5.5320000648498535
#Total cost of piece: 549
["T", "D7-5", "T", "Ts", "D7", "Ts", "D", "D/3", "T", "S/5", "T", "T-5", "D7/3", "T", "D", "D", "T", "T/3", "D/3", "T", "D7/3", "T", "S/3", "T/5", "S", "T/3", "D/3", "T", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-0.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-104.csv
[0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 0 1; 0 0 0 2 0 0 2 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 2 0 0 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 0 1; 0 1 0 1 0 1 0 0 0 0 0 1; 0 1 0 1 0 1 1 0 0 0 0 0; 0 0 0 2 0 1 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 3 0 0 0 1 0 0 0 0 0 0]
Key Counter is [0 38 0 17 0 19 26 0 18 0 9 4]
Key Score is [23; 127; 68; 63; 103; 28; 131; 30; 101; 86; 45; 112]
Position Counter for 7 is [26 0 18 0 9 4 0 38 0 17 0 19]
Any[[7.0, 98.0, 1.0]]
[7, 98, 1]
7 F# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 105
child voicing cost: 181
Best yet: 286
New solution
function cost: 105
child voicing cost: 176
Best yet: 281
New solution
function cost: 105
child voicing cost: 174
Best yet: 279
New solution
function cost: 105
child voicing cost: 172
Best yet: 277
New solution
function cost: 105
child voicing cost: 170
Best yet: 275
New solution
function cost: 105
child voicing cost: 165
Best yet: 270
New solution
function cost: 105
child voicing cost: 162
Best yet: 267
New solution
function cost: 93
child voicing cost: 171
Best yet: 264
New solution
function cost: 93
child voicing cost: 169
Best yet: 262
New solution
function cost: 93
child voicing cost: 161
Best yet: 254
New solution
function cost: 93
child voicing cost: 159
Best yet: 252
New solution
function cost: 93
child voicing cost: 155
Best yet: 248
New solution
function cost: 93
child voicing cost: 154
Best yet: 247
New solution
function cost: 93
child voicing cost: 149
Best yet: 242
New solution
function cost: 93
child voicing cost: 147
Best yet: 240
New solution
function cost: 90
child voicing cost: 149
Best yet: 239
New solution
function cost: 90
child voicing cost: 147
Best yet: 237
New solution
function cost: 90
child voicing cost: 146
Best yet: 236
New solution
function cost: 90
child voicing cost: 145
Best yet: 235
New solution
function cost: 93
child voicing cost: 140
Best yet: 233
New solution
function cost: 93
child voicing cost: 139
Best yet: 232
New solution
function cost: 90
child voicing cost: 140
Best yet: 230
New solution
function cost: 90
child voicing cost: 139
Best yet: 229
New solution
function cost: 99
child voicing cost: 127
Best yet: 226
New solution
function cost: 93
child voicing cost: 132
Best yet: 225
New solution
function cost: 99
child voicing cost: 118
Best yet: 217
New solution
function cost: 66
child voicing cost: 147
Best yet: 213
New solution
function cost: 63
child voicing cost: 148
Best yet: 211
New solution
function cost: 66
child voicing cost: 141
Best yet: 207
New solution
function cost: 75
child voicing cost: 130
Best yet: 205
New solution
function cost: 75
child voicing cost: 127
Best yet: 202
New solution
function cost: 66
child voicing cost: 133
Best yet: 199
New solution
function cost: 63
child voicing cost: 132
Best yet: 195
New solution
function cost: 63
child voicing cost: 131
Best yet: 194
New solution
function cost: 63
child voicing cost: 130
Best yet: 193
New solution
function cost: 63
child voicing cost: 129
Best yet: 192

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 184987, Pruned: 212238, completed: 36, time: 3.069999933242798, efficiency: 11.726384619811279
Results: bestval_func: 63, bestval_voices: 129
(15, 384, 384, 384)
[0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 0 1; 0 0 0 2 0 0 2 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 2 0 0 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 0 1; 0 1 0 1 0 1 0 0 0 0 0 1; 0 1 0 1 0 1 1 0 0 0 0 0; 0 0 0 2 0 1 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 3 0 0 0 1 0 0 0 0 0 0]
Key Counter is [0 38 0 17 0 19 26 0 18 0 9 4]
Key Score is [23; 127; 68; 63; 103; 28; 131; 30; 101; 86; 45; 112]
Position Counter for 7 is [26 0 18 0 9 4 0 38 0 17 0 19]
Any[[7.0, 98.0, 1.0]]
[7, 98, 1]
7 F# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 183
child voicing cost: 159
Best yet: 342
New solution
function cost: 183
child voicing cost: 154
Best yet: 337
New solution
function cost: 183
child voicing cost: 152
Best yet: 335
New solution
function cost: 183
child voicing cost: 148
Best yet: 331
New solution
function cost: 183
child voicing cost: 144
Best yet: 327
New solution
function cost: 183
child voicing cost: 142
Best yet: 325
New solution
function cost: 183
child voicing cost: 141
Best yet: 324
New solution
function cost: 183
child voicing cost: 139
Best yet: 322
New solution
function cost: 183
child voicing cost: 136
Best yet: 319
New solution
function cost: 183
child voicing cost: 133
Best yet: 316
New solution
function cost: 183
child voicing cost: 131
Best yet: 314
New solution
function cost: 183
child voicing cost: 130
Best yet: 313
New solution
function cost: 183
child voicing cost: 127
Best yet: 310
New solution
function cost: 174
child voicing cost: 132
Best yet: 306
New solution
function cost: 183
child voicing cost: 122
Best yet: 305
New solution
function cost: 180
child voicing cost: 122
Best yet: 302
New solution
function cost: 171
child voicing cost: 130
Best yet: 301
New solution
function cost: 171
child voicing cost: 129
Best yet: 300
New solution
function cost: 180
child voicing cost: 117
Best yet: 297
New solution
function cost: 153
child voicing cost: 141
Best yet: 294
New solution
function cost: 153
child voicing cost: 138
Best yet: 291
New solution
function cost: 153
child voicing cost: 135
Best yet: 288
New solution
function cost: 153
child voicing cost: 134
Best yet: 287
New solution
function cost: 153
child voicing cost: 129
Best yet: 282
New solution
function cost: 162
child voicing cost: 119
Best yet: 281
New solution
function cost: 165
child voicing cost: 115
Best yet: 280

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(54, 1), (54, 1), (61, 5), (70, 3)])   
 (0, "D", [(49, 1), (61, 1), (65, 3), (68, 5)])   
 (6, "T/3", [(46, 3), (61, 5), (66, 1), (73, 5)]) 
 (0, "D", [(49, 1), (61, 1), (68, 5), (77, 3)])   
 (3, "T/3", [(46, 3), (61, 5), (66, 1), (78, 1)]) 
 (0, "Ts", [(51, 1), (51, 1), (58, 5), (66, 3)])  
 (0, "D", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (6, "D", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (3, "T", [(54, 1), (58, 3), (61, 5), (66, 1)])   
 (9, "D/3", [(53, 3), (56, 5), (61, 1), (68, 5)]) 
 (12, "Ts", [(51, 1), (54, 3), (66, 3), (70, 5)]) 
 (0, "S65", [(47, 1), (56, 6), (66, 5), (75, 3)]) 
 (0, "D", [(49, 1), (56, 5), (65, 3), (73, 1)])   
 ⋮                                                
 (9, "S", [(47, 1), (59, 1), (63, 3), (66, 5)])   
 (9, "D", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (0, "T/3", [(46, 3), (54, 1), (61, 5), (66, 1)]) 
 (3, "S65", [(47, 1), (54, 5), (63, 3), (68, 6)]) 
 (12, "D64", [(49, 1), (54, 4), (61, 1), (70, 6)])
 (12, "D", [(49, 1), (53, 3), (61, 1), (68, 5)])  
 (12, "D/3", [(53, 3), (56, 5), (61, 1), (68, 5)])
 (12, "S/3", [(51, 3), (54, 5), (59, 1), (71, 1)])
 (27, "D", [(49, 1), (56, 5), (65, 3), (73, 1)])  
 (6, "D7", [(49, 1), (56, 5), (65, 3), (71, 7)])  
 (21, "T", [(42, 1), (54, 1), (61, 5), (70, 3)])  
 (21, "T", [(42, 1), (54, 1), (61, 5), (70, 3)])  

##: Done. Total checked: 85004, Pruned: 95107, completed: 26, time: 1.7340002059936523, efficiency: 14.994231206045876
Results: bestval_func: 165, bestval_voices: 115
(16, 384, 384, 384)
#Key: 7Scale: Major
#Total time for optimisation of piece: 6.2170000076293945
#Total cost of piece: 472
["T", "D", "T/3", "D", "T/3", "Ts", "D", "D", "T", "D/3", "Ts", "S65", "D", "T", "D", "D", "Ts", "D", "D/3", "Ts", "S", "D", "T/3", "S65", "D64", "D", "D/3", "S/3", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-104.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-117.csv
[0 0 0 1 0 0 1 0 0 0 0 0; 1 0 0 1 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 3 0 0 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 1 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 0 0 0 1 0 3 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 0 0 0 0 0 1 0 2 1 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 0 1 0 2 0; 1 0 0 1 0 0 0 0 1 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 1 0 0 2 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 2 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0]
Key Counter is [12 16 0 26 0 9 16 1 33 2 13 0]
Key Score is [24; 125; 35; 94; 93; 37; 113; 31; 110; 67; 63; 104]
Position Counter for 2 is [16 0 26 0 9 16 1 33 2 13 0 12]
Any[[2.0, 89.0, 1.0]]
[2, 89, 1]
2 C# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 179
Best yet: 353
New solution
function cost: 174
child voicing cost: 177
Best yet: 351
New solution
function cost: 174
child voicing cost: 174
Best yet: 348
New solution
function cost: 174
child voicing cost: 169
Best yet: 343
New solution
function cost: 174
child voicing cost: 166
Best yet: 340
New solution
function cost: 174
child voicing cost: 160
Best yet: 334
New solution
function cost: 174
child voicing cost: 158
Best yet: 332
New solution
function cost: 174
child voicing cost: 155
Best yet: 329
New solution
function cost: 174
child voicing cost: 152
Best yet: 326
New solution
function cost: 174
child voicing cost: 149
Best yet: 323
New solution
function cost: 174
child voicing cost: 148
Best yet: 322
New solution
function cost: 174
child voicing cost: 147
Best yet: 321
New solution
function cost: 174
child voicing cost: 146
Best yet: 320
New solution
function cost: 174
child voicing cost: 145
Best yet: 319
New solution
function cost: 174
child voicing cost: 143
Best yet: 317
New solution
function cost: 174
child voicing cost: 141
Best yet: 315
New solution
function cost: 147
child voicing cost: 162
Best yet: 309
New solution
function cost: 147
child voicing cost: 156
Best yet: 303
New solution
function cost: 147
child voicing cost: 155
Best yet: 302
New solution
function cost: 147
child voicing cost: 153
Best yet: 300
New solution
function cost: 147
child voicing cost: 152
Best yet: 299
New solution
function cost: 147
child voicing cost: 147
Best yet: 294
New solution
function cost: 147
child voicing cost: 146
Best yet: 293
New solution
function cost: 147
child voicing cost: 140
Best yet: 287
New solution
function cost: 147
child voicing cost: 137
Best yet: 284
New solution
function cost: 147
child voicing cost: 136
Best yet: 283
New solution
function cost: 138
child voicing cost: 143
Best yet: 281
New solution
function cost: 138
child voicing cost: 142
Best yet: 280
New solution
function cost: 144
child voicing cost: 131
Best yet: 275
New solution
function cost: 117
child voicing cost: 157
Best yet: 274
New solution
function cost: 117
child voicing cost: 156
Best yet: 273
New solution
function cost: 117
child voicing cost: 153
Best yet: 270
New solution
function cost: 123
child voicing cost: 143
Best yet: 266
New solution
function cost: 123
child voicing cost: 139
Best yet: 262
New solution
function cost: 123
child voicing cost: 138
Best yet: 261
New solution
function cost: 123
child voicing cost: 137
Best yet: 260
New solution
function cost: 123
child voicing cost: 134
Best yet: 257
New solution
function cost: 123
child voicing cost: 133
Best yet: 256
New solution
function cost: 123
child voicing cost: 130
Best yet: 253
New solution
function cost: 129
child voicing cost: 120
Best yet: 249
New solution
function cost: 129
child voicing cost: 116
Best yet: 245
New solution
function cost: 129
child voicing cost: 115
Best yet: 244

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 86581, Pruned: 108197, completed: 42, time: 1.875, efficiency: 22.4
Results: bestval_func: 129, bestval_voices: 115
(15, 365, 365, 365)
[0 0 0 1 0 0 1 0 0 0 0 0; 1 0 0 1 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 3 0 0 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 1 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 0 0 0 1 0 3 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 0 0 0 0 0 1 0 2 1 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 0 1 0 2 0; 1 0 0 1 0 0 0 0 1 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 1 0 0 2 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 2 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0]
Key Counter is [12 16 0 26 0 9 16 1 33 2 13 0]
Key Score is [24; 125; 35; 94; 93; 37; 113; 31; 110; 67; 63; 104]
Position Counter for 2 is [16 0 26 0 9 16 1 33 2 13 0 12]
Any[[2.0, 89.0, 1.0]]
[2, 89, 1]
2 C# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 165
child voicing cost: 210
Best yet: 375
New solution
function cost: 165
child voicing cost: 208
Best yet: 373
New solution
function cost: 165
child voicing cost: 200
Best yet: 365
New solution
function cost: 165
child voicing cost: 199
Best yet: 364
New solution
function cost: 165
child voicing cost: 194
Best yet: 359
New solution
function cost: 165
child voicing cost: 191
Best yet: 356
New solution
function cost: 165
child voicing cost: 190
Best yet: 355
New solution
function cost: 165
child voicing cost: 186
Best yet: 351
New solution
function cost: 165
child voicing cost: 183
Best yet: 348
New solution
function cost: 165
child voicing cost: 180
Best yet: 345
New solution
function cost: 153
child voicing cost: 188
Best yet: 341
New solution
function cost: 150
child voicing cost: 190
Best yet: 340
New solution
function cost: 150
child voicing cost: 188
Best yet: 338
New solution
function cost: 150
child voicing cost: 187
Best yet: 337
New solution
function cost: 150
child voicing cost: 184
Best yet: 334
New solution
function cost: 153
child voicing cost: 179
Best yet: 332
New solution
function cost: 153
child voicing cost: 175
Best yet: 328
New solution
function cost: 156
child voicing cost: 168
Best yet: 324
New solution
function cost: 153
child voicing cost: 170
Best yet: 323
New solution
function cost: 153
child voicing cost: 168
Best yet: 321
New solution
function cost: 153
child voicing cost: 167
Best yet: 320
New solution
function cost: 153
child voicing cost: 164
Best yet: 317

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (9, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])   
 (0, "D", [(44, 1), (56, 1), (60, 3), (63, 5)])   
 (6, "D/3", [(48, 3), (51, 5), (56, 1), (68, 1)]) 
 (24, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])  
 (0, "D/3", [(48, 3), (51, 5), (56, 1), (63, 5)]) 
 (12, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])  
 (6, "D", [(44, 1), (56, 1), (60, 3), (63, 5)])   
 (6, "D7-5", [(44, 1), (56, 1), (66, 7), (72, 3)])
 (9, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])   
 (0, "Ss", [(51, 1), (54, 3), (66, 3), (70, 5)])  
 (21, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])  
 (3, "D/3", [(48, 3), (56, 1), (63, 5), (75, 5)]) 
 (6, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])   
 ⋮                                                
 (12, "D/3", [(48, 3), (63, 5), (68, 1), (80, 1)])
 (6, "D", [(44, 1), (63, 5), (68, 1), (72, 3)])   
 (12, "T/5", [(44, 5), (56, 5), (65, 3), (73, 1)])
 (3, "D", [(44, 1), (56, 1), (63, 5), (72, 3)])   
 (0, "D7-1", [(51, 5), (54, 7), (63, 5), (72, 3)])
 (21, "T/3", [(53, 3), (56, 5), (61, 1), (73, 1)])
 (9, "Ts", [(46, 1), (58, 1), (65, 5), (73, 3)])  
 (9, "Ss", [(51, 1), (58, 5), (63, 1), (66, 3)])  
 (6, "D", [(44, 1), (60, 3), (63, 5), (68, 1)])   
 (12, "D7", [(44, 1), (60, 3), (63, 5), (66, 7)]) 
 (9, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (9, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])   

##: Done. Total checked: 84657, Pruned: 97948, completed: 22, time: 1.565000057220459, efficiency: 14.057507473241515
Results: bestval_func: 153, bestval_voices: 164
(16, 365, 365, 365)
#Key: 2Scale: Major
#Total time for optimisation of piece: 4.7230000495910645
#Total cost of piece: 561
["T", "D", "D/3", "T", "D/3", "T", "D", "D7-5", "T", "Ss", "T", "D/3", "T", "S", "D", "D", "D7-5", "T", "D/3", "D", "D/3", "D", "T/5", "D", "D7-1", "T/3", "Ts", "Ss", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-117.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-13.csv
[0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 0 1 0 0 0 2 0; 1 0 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 1 0 0 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 1 0 2 0 0 0; 0 1 0 1 0 1 1 0 0 0 0 0; 0 1 0 0 0 0 1 0 2 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 0 1 0 2 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 1 0 2 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 2 0 0 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 1 1 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 1 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0]
Key Counter is [15 24 0 20 0 14 6 1 33 0 13 0]
Key Score is [30; 125; 31; 96; 83; 43; 110; 22; 120; 63; 63; 96]
Position Counter for 2 is [24 0 20 0 14 6 1 33 0 13 0 15]
Any[[2.0, 89.75, 1.0]]
[2, 90, 1]
2 C# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 96
child voicing cost: 199
Best yet: 295
New solution
function cost: 96
child voicing cost: 197
Best yet: 293
New solution
function cost: 96
child voicing cost: 189
Best yet: 285
New solution
function cost: 96
child voicing cost: 183
Best yet: 279
New solution
function cost: 96
child voicing cost: 182
Best yet: 278
New solution
function cost: 96
child voicing cost: 177
Best yet: 273
New solution
function cost: 96
child voicing cost: 176
Best yet: 272
New solution
function cost: 105
child voicing cost: 161
Best yet: 266
New solution
function cost: 105
child voicing cost: 160
Best yet: 265
New solution
function cost: 114
child voicing cost: 148
Best yet: 262
New solution
function cost: 114
child voicing cost: 146
Best yet: 260
New solution
function cost: 114
child voicing cost: 141
Best yet: 255
New solution
function cost: 102
child voicing cost: 152
Best yet: 254
New solution
function cost: 120
child voicing cost: 132
Best yet: 252
New solution
function cost: 120
child voicing cost: 128
Best yet: 248
New solution
function cost: 120
child voicing cost: 127
Best yet: 247
New solution
function cost: 120
child voicing cost: 122
Best yet: 242
New solution
function cost: 117
child voicing cost: 123
Best yet: 240
New solution
function cost: 120
child voicing cost: 116
Best yet: 236
New solution
function cost: 117
child voicing cost: 117
Best yet: 234
New solution
function cost: 120
child voicing cost: 110
Best yet: 230
New solution
function cost: 117
child voicing cost: 112
Best yet: 229
New solution
function cost: 120
child voicing cost: 105
Best yet: 225
New solution
function cost: 114
child voicing cost: 109
Best yet: 223
New solution
function cost: 120
child voicing cost: 100
Best yet: 220
New solution
function cost: 120
child voicing cost: 96
Best yet: 216
New solution
function cost: 120
child voicing cost: 95
Best yet: 215
New solution
function cost: 120
child voicing cost: 90
Best yet: 210
New solution
function cost: 123
child voicing cost: 82
Best yet: 205
New solution
function cost: 120
child voicing cost: 83
Best yet: 203
New solution
function cost: 117
child voicing cost: 83
Best yet: 200
New solution
function cost: 120
child voicing cost: 78
Best yet: 198
New solution
function cost: 117
child voicing cost: 78
Best yet: 195

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 173755, Pruned: 207976, completed: 33, time: 2.6610000133514404, efficiency: 12.40135281263588
Results: bestval_func: 117, bestval_voices: 78
(15, 365, 365, 365)
[0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 0 1 0 0 0 2 0; 1 0 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 1 0 0 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 1 0 2 0 0 0; 0 1 0 1 0 1 1 0 0 0 0 0; 0 1 0 0 0 0 1 0 2 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 0 1 0 2 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 1 0 2 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 2 0 0 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 1 1 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 1 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0]
Key Counter is [15 24 0 20 0 14 6 1 33 0 13 0]
Key Score is [30; 125; 31; 96; 83; 43; 110; 22; 120; 63; 63; 96]
Position Counter for 2 is [24 0 20 0 14 6 1 33 0 13 0 15]
Any[[2.0, 89.75, 1.0]]
[2, 90, 1]
2 C# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 183
child voicing cost: 180
Best yet: 363
New solution
function cost: 183
child voicing cost: 178
Best yet: 361
New solution
function cost: 183
child voicing cost: 170
Best yet: 353
New solution
function cost: 183
child voicing cost: 161
Best yet: 344
New solution
function cost: 183
child voicing cost: 156
Best yet: 339
New solution
function cost: 168
child voicing cost: 165
Best yet: 333
New solution
function cost: 168
child voicing cost: 161
Best yet: 329
New solution
function cost: 168
child voicing cost: 160
Best yet: 328
New solution
function cost: 168
child voicing cost: 158
Best yet: 326
New solution
function cost: 171
child voicing cost: 154
Best yet: 325
New solution
function cost: 168
child voicing cost: 156
Best yet: 324
New solution
function cost: 168
child voicing cost: 154
Best yet: 322
New solution
function cost: 171
child voicing cost: 148
Best yet: 319
New solution
function cost: 174
child voicing cost: 144
Best yet: 318
New solution
function cost: 174
child voicing cost: 141
Best yet: 315
New solution
function cost: 174
child voicing cost: 138
Best yet: 312
New solution
function cost: 162
child voicing cost: 148
Best yet: 310
New solution
function cost: 174
child voicing cost: 134
Best yet: 308
New solution
function cost: 162
child voicing cost: 142
Best yet: 304
New solution
function cost: 144
child voicing cost: 158
Best yet: 302
New solution
function cost: 150
child voicing cost: 151
Best yet: 301
New solution
function cost: 144
child voicing cost: 152
Best yet: 296
New solution
function cost: 144
child voicing cost: 151
Best yet: 295
New solution
function cost: 144
child voicing cost: 148
Best yet: 292
New solution
function cost: 144
child voicing cost: 147
Best yet: 291
New solution
function cost: 144
child voicing cost: 142
Best yet: 286
New solution
function cost: 144
child voicing cost: 138
Best yet: 282
New solution
function cost: 132
child voicing cost: 149
Best yet: 281
New solution
function cost: 132
child voicing cost: 146
Best yet: 278
New solution
function cost: 132
child voicing cost: 144
Best yet: 276
New solution
function cost: 132
child voicing cost: 137
Best yet: 269
New solution
function cost: 132
child voicing cost: 134
Best yet: 266
New solution
function cost: 132
child voicing cost: 132
Best yet: 264
New solution
function cost: 138
child voicing cost: 125
Best yet: 263
New solution
function cost: 132
child voicing cost: 130
Best yet: 262
New solution
function cost: 132
child voicing cost: 128
Best yet: 260
New solution
function cost: 135
child voicing cost: 124
Best yet: 259
New solution
function cost: 141
child voicing cost: 117
Best yet: 258
New solution
function cost: 141
child voicing cost: 116
Best yet: 257
New solution
function cost: 141
child voicing cost: 114
Best yet: 255
New solution
function cost: 141
child voicing cost: 113
Best yet: 254
New solution
function cost: 147
child voicing cost: 106
Best yet: 253
New solution
function cost: 141
child voicing cost: 111
Best yet: 252
New solution
function cost: 147
child voicing cost: 104
Best yet: 251
New solution
function cost: 156
child voicing cost: 93
Best yet: 249
New solution
function cost: 156
child voicing cost: 92
Best yet: 248
New solution
function cost: 162
child voicing cost: 85
Best yet: 247
New solution
function cost: 150
child voicing cost: 96
Best yet: 246
New solution
function cost: 150
child voicing cost: 94
Best yet: 244
New solution
function cost: 153
child voicing cost: 90
Best yet: 243
New solution
function cost: 153
child voicing cost: 88
Best yet: 241
New solution
function cost: 132
child voicing cost: 107
Best yet: 239
New solution
function cost: 132
child voicing cost: 105
Best yet: 237
New solution
function cost: 147
child voicing cost: 89
Best yet: 236
New solution
function cost: 147
child voicing cost: 86
Best yet: 233
New solution
function cost: 141
child voicing cost: 89
Best yet: 230
New solution
function cost: 147
child voicing cost: 82
Best yet: 229
New solution
function cost: 147
child voicing cost: 80
Best yet: 227

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])    
 (0, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])    
 (0, "D7/5", [(51, 5), (54, 7), (56, 1), (60, 3)]) 
 (0, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])    
 (3, "Ts", [(46, 1), (53, 5), (58, 1), (61, 3)])   
 (12, "D", [(44, 1), (56, 1), (60, 3), (63, 5)])   
 (9, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])    
 (15, "D", [(44, 1), (51, 5), (56, 1), (60, 3)])   
 (9, "D7/7", [(42, 7), (51, 5), (56, 1), (60, 3)]) 
 (3, "T/3", [(41, 3), (49, 1), (56, 5), (61, 1)])  
 (15, "S65", [(42, 1), (49, 5), (58, 3), (63, 6)]) 
 (3, "T/5", [(44, 5), (49, 1), (56, 5), (65, 3)])  
 (12, "S/3", [(46, 3), (49, 5), (54, 1), (66, 1)]) 
 ⋮                                                 
 (12, "D7-1", [(51, 5), (54, 7), (60, 3), (63, 5)])
 (9, "D7/7", [(54, 7), (56, 1), (60, 3), (63, 5)]) 
 (3, "T/3", [(53, 3), (56, 5), (61, 1), (68, 5)])  
 (12, "D/5", [(51, 5), (56, 1), (63, 5), (72, 3)]) 
 (12, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])   
 (0, "D/3", [(48, 3), (63, 5), (68, 1), (75, 5)])  
 (12, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])   
 (12, "S65", [(54, 1), (61, 5), (70, 3), (75, 6)]) 
 (0, "D", [(56, 1), (60, 3), (68, 1), (75, 5)])    
 (0, "D", [(56, 1), (60, 3), (68, 1), (75, 5)])    
 (12, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])   
 (12, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])   

##: Done. Total checked: 256542, Pruned: 288246, completed: 58, time: 4.005999803543091, efficiency: 14.478283286160455
Results: bestval_func: 147, bestval_voices: 80
(16, 365, 365, 365)
#Key: 2Scale: Major
#Total time for optimisation of piece: 7.849999904632568
#Total cost of piece: 422
["T", "T", "D7/5", "T", "Ts", "D", "T", "D", "D7/7", "T/3", "S65", "T/5", "S/3", "D", "T", "T", "D/3", "T", "D7-1", "T", "D7-1", "D7/7", "T/3", "D/5", "T", "D/3", "T", "S65", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-13.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-130.csv
[0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 0 1 0 0 1 0 0 0 2; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 1 0 0 1 1 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 1 1 0 2 0 0 0 0 0; 0 0 0 1 0 0 2 0 1 0 0 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 0 1 0 1 0 0 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 1 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 0 0 0 1 0 1 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2]
Key Counter is [2 10 0 17 19 2 24 2 23 3 8 22]
Key Score is [50; 86; 80; 54; 118; 36; 106; 72; 64; 101; 34; 123]
Position Counter for 12 is [22 2 10 0 17 19 2 24 2 23 3 8]
Any[[12.0, 85.5, 1.0]]
[12, 86, 1]
12 B Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 96
child voicing cost: 136
Best yet: 232
New solution
function cost: 96
child voicing cost: 134
Best yet: 230
New solution
function cost: 96
child voicing cost: 126
Best yet: 222
New solution
function cost: 96
child voicing cost: 124
Best yet: 220
New solution
function cost: 96
child voicing cost: 121
Best yet: 217
New solution
function cost: 96
child voicing cost: 120
Best yet: 216
New solution
function cost: 96
child voicing cost: 117
Best yet: 213
New solution
function cost: 99
child voicing cost: 113
Best yet: 212
New solution
function cost: 96
child voicing cost: 114
Best yet: 210
New solution
function cost: 96
child voicing cost: 111
Best yet: 207
New solution
function cost: 96
child voicing cost: 108
Best yet: 204
New solution
function cost: 99
child voicing cost: 104
Best yet: 203
New solution
function cost: 96
child voicing cost: 106
Best yet: 202
New solution
function cost: 96
child voicing cost: 104
Best yet: 200
New solution
function cost: 96
child voicing cost: 103
Best yet: 199
New solution
function cost: 96
child voicing cost: 100
Best yet: 196
New solution
function cost: 96
child voicing cost: 98
Best yet: 194
New solution
function cost: 99
child voicing cost: 94
Best yet: 193

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 93523, Pruned: 103386, completed: 18, time: 1.5139999389648438, efficiency: 11.889036146399722
Results: bestval_func: 99, bestval_voices: 94
(15, 383, 383, 383)
[0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 0 1 0 0 1 0 0 0 2; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 1 0 0 1 1 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 1 1 0 2 0 0 0 0 0; 0 0 0 1 0 0 2 0 1 0 0 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 0 1 0 1 0 0 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 1 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 0 0 0 1 0 1 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2]
Key Counter is [2 10 0 17 19 2 24 2 23 3 8 22]
Key Score is [50; 86; 80; 54; 118; 36; 106; 72; 64; 101; 34; 123]
Position Counter for 12 is [22 2 10 0 17 19 2 24 2 23 3 8]
Any[[12.0, 85.5, 1.0]]
[12, 86, 1]
12 B Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 219
child voicing cost: 119
Best yet: 338
New solution
function cost: 219
child voicing cost: 114
Best yet: 333
New solution
function cost: 219
child voicing cost: 113
Best yet: 332
New solution
function cost: 219
child voicing cost: 108
Best yet: 327
New solution
function cost: 189
child voicing cost: 136
Best yet: 325
New solution
function cost: 189
child voicing cost: 135
Best yet: 324
New solution
function cost: 189
child voicing cost: 129
Best yet: 318
New solution
function cost: 189
child voicing cost: 128
Best yet: 317
New solution
function cost: 189
child voicing cost: 126
Best yet: 315
New solution
function cost: 189
child voicing cost: 122
Best yet: 311
New solution
function cost: 189
child voicing cost: 118
Best yet: 307
New solution
function cost: 189
child voicing cost: 116
Best yet: 305
New solution
function cost: 189
child voicing cost: 112
Best yet: 301

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])    
 (3, "S65", [(52, 1), (59, 5), (68, 3), (73, 6)])  
 (0, "D", [(54, 1), (58, 3), (66, 1), (73, 5)])    
 (3, "S/3", [(56, 3), (59, 5), (64, 1), (76, 1)])  
 (0, "D64", [(54, 1), (59, 4), (66, 1), (75, 6)])  
 (24, "D", [(54, 1), (58, 3), (66, 1), (73, 5)])   
 (9, "T", [(59, 1), (59, 1), (66, 5), (75, 3)])    
 (6, "S", [(52, 1), (59, 5), (68, 3), (76, 1)])    
 (3, "S", [(52, 1), (64, 1), (68, 3), (71, 5)])    
 (3, "S", [(52, 1), (64, 1), (68, 3), (71, 5)])    
 (3, "Ts", [(56, 1), (63, 5), (68, 1), (71, 3)])   
 (18, "D/3", [(58, 3), (61, 5), (66, 1), (73, 5)]) 
 (6, "S/3", [(56, 3), (59, 5), (64, 1), (76, 1)])  
 ⋮                                                 
 (6, "D7-1", [(49, 5), (52, 7), (61, 5), (70, 3)]) 
 (12, "D7/7", [(52, 7), (54, 1), (61, 5), (70, 3)])
 (18, "T/3", [(51, 3), (54, 5), (66, 5), (71, 1)]) 
 (12, "D7/5", [(49, 5), (58, 3), (66, 1), (76, 7)])
 (21, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])   
 (3, "S/3", [(44, 3), (59, 5), (64, 1), (76, 1)])  
 (9, "D7/3", [(46, 3), (61, 5), (66, 1), (76, 7)]) 
 (18, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])   
 (6, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])    
 (12, "D", [(54, 1), (58, 3), (61, 5), (66, 1)])   
 (12, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])   
 (12, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])   

##: Done. Total checked: 52604, Pruned: 58653, completed: 13, time: 1.0390000343322754, efficiency: 12.512030385402817
Results: bestval_func: 189, bestval_voices: 112
(16, 383, 383, 383)
#Key: 12Scale: Major
#Total time for optimisation of piece: 3.878999948501587
#Total cost of piece: 494
["T", "S65", "D", "S/3", "D64", "D", "T", "S", "S", "S", "Ts", "D/3", "S/3", "D", "T", "T", "Tm", "Tm", "S", "D", "D7-1", "D7/7", "T/3", "D7/5", "T", "S/3", "D7/3", "T", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-130.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-143.csv
[1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 1 0 0 1 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 0 0 0 1 0 0 2 0 1 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 3 0 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 2 0 0 1 0 0 0 0 0 0 1 0; 0 1 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 0 0 2 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 2 0 1 0 0 0 0 0 0 0 1 0; 1 0 1 0 0 2 0 0 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 1 0 1 0 0 0 0 0 0; 0 0 0 1 0 1 0 2 0 0 0 0; 1 0 1 1 0 0 0 1 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 2 0 0 0 0 0 0 0 1 0 1 0; 0 0 0 0 0 2 0 0 1 1 0 0]
Key Counter is [33 7 8 4 2 32 0 15 12 4 13 0]
Key Score is [94; 101; 36; 117; 29; 107; 68; 62; 116; 33; 109; 38]
Position Counter for 4 is [4 2 32 0 15 12 4 13 0 33 7 8]
Any[[4.0, 89.25, 0.0]]
[4, 89, 0]
1 C Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 187
Best yet: 337
New solution
function cost: 150
child voicing cost: 185
Best yet: 335
New solution
function cost: 150
child voicing cost: 177
Best yet: 327
New solution
function cost: 150
child voicing cost: 175
Best yet: 325
New solution
function cost: 150
child voicing cost: 171
Best yet: 321
New solution
function cost: 150
child voicing cost: 167
Best yet: 317
New solution
function cost: 150
child voicing cost: 164
Best yet: 314
New solution
function cost: 150
child voicing cost: 162
Best yet: 312
New solution
function cost: 150
child voicing cost: 160
Best yet: 310
New solution
function cost: 150
child voicing cost: 158
Best yet: 308
New solution
function cost: 150
child voicing cost: 157
Best yet: 307
New solution
function cost: 150
child voicing cost: 156
Best yet: 306
New solution
function cost: 150
child voicing cost: 154
Best yet: 304
New solution
function cost: 150
child voicing cost: 152
Best yet: 302
New solution
function cost: 129
child voicing cost: 166
Best yet: 295
New solution
function cost: 129
child voicing cost: 160
Best yet: 289
New solution
function cost: 129
child voicing cost: 156
Best yet: 285
New solution
function cost: 129
child voicing cost: 154
Best yet: 283
New solution
function cost: 129
child voicing cost: 151
Best yet: 280
New solution
function cost: 129
child voicing cost: 149
Best yet: 278
New solution
function cost: 129
child voicing cost: 146
Best yet: 275
New solution
function cost: 141
child voicing cost: 133
Best yet: 274
New solution
function cost: 141
child voicing cost: 132
Best yet: 273
New solution
function cost: 129
child voicing cost: 141
Best yet: 270
New solution
function cost: 129
child voicing cost: 139
Best yet: 268
New solution
function cost: 129
child voicing cost: 136
Best yet: 265
New solution
function cost: 129
child voicing cost: 134
Best yet: 263
New solution
function cost: 129
child voicing cost: 130
Best yet: 259
New solution
function cost: 129
child voicing cost: 126
Best yet: 255
New solution
function cost: 126
child voicing cost: 125
Best yet: 251
New solution
function cost: 126
child voicing cost: 123
Best yet: 249
New solution
function cost: 132
child voicing cost: 115
Best yet: 247
New solution
function cost: 132
child voicing cost: 113
Best yet: 245
New solution
function cost: 132
child voicing cost: 111
Best yet: 243

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 76017, Pruned: 90320, completed: 34, time: 1.3589999675750732, efficiency: 25.018396476247002
Results: bestval_func: 132, bestval_voices: 111
(15, 407, 407, 407)
[1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 1 0 0 1 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 0 0 0 1 0 0 2 0 1 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 3 0 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 2 0 0 1 0 0 0 0 0 0 1 0; 0 1 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 0 0 2 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 2 0 1 0 0 0 0 0 0 0 1 0; 1 0 1 0 0 2 0 0 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 1 0 1 0 0 0 0 0 0; 0 0 0 1 0 1 0 2 0 0 0 0; 1 0 1 1 0 0 0 1 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 2 0 0 0 0 0 0 0 1 0 1 0; 0 0 0 0 0 2 0 0 1 1 0 0]
Key Counter is [33 7 8 4 2 32 0 15 12 4 13 0]
Key Score is [94; 101; 36; 117; 29; 107; 68; 62; 116; 33; 109; 38]
Position Counter for 4 is [4 2 32 0 15 12 4 13 0 33 7 8]
Any[[4.0, 89.25, 0.0]]
[4, 89, 0]
1 C Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 210
child voicing cost: 173
Best yet: 383
New solution
function cost: 210
child voicing cost: 171
Best yet: 381
New solution
function cost: 210
child voicing cost: 163
Best yet: 373
New solution
function cost: 210
child voicing cost: 162
Best yet: 372
New solution
function cost: 210
child voicing cost: 157
Best yet: 367
New solution
function cost: 210
child voicing cost: 154
Best yet: 364
New solution
function cost: 198
child voicing cost: 165
Best yet: 363
New solution
function cost: 198
child voicing cost: 162
Best yet: 360
New solution
function cost: 198
child voicing cost: 160
Best yet: 358
New solution
function cost: 195
child voicing cost: 160
Best yet: 355
New solution
function cost: 195
child voicing cost: 159
Best yet: 354
New solution
function cost: 198
child voicing cost: 155
Best yet: 353
New solution
function cost: 195
child voicing cost: 157
Best yet: 352
New solution
function cost: 195
child voicing cost: 156
Best yet: 351
New solution
function cost: 207
child voicing cost: 143
Best yet: 350
New solution
function cost: 195
child voicing cost: 154
Best yet: 349
New solution
function cost: 198
child voicing cost: 149
Best yet: 347
New solution
function cost: 198
child voicing cost: 148
Best yet: 346
New solution
function cost: 198
child voicing cost: 147
Best yet: 345
New solution
function cost: 201
child voicing cost: 143
Best yet: 344
New solution
function cost: 198
child voicing cost: 145
Best yet: 343
New solution
function cost: 201
child voicing cost: 139
Best yet: 340
New solution
function cost: 192
child voicing cost: 146
Best yet: 338
New solution
function cost: 180
child voicing cost: 154
Best yet: 334
New solution
function cost: 180
child voicing cost: 152
Best yet: 332
New solution
function cost: 183
child voicing cost: 147
Best yet: 330
New solution
function cost: 183
child voicing cost: 145
Best yet: 328
New solution
function cost: 183
child voicing cost: 143
Best yet: 326
New solution
function cost: 183
child voicing cost: 139
Best yet: 322
New solution
function cost: 177
child voicing cost: 144
Best yet: 321
New solution
function cost: 177
child voicing cost: 143
Best yet: 320
New solution
function cost: 177
child voicing cost: 142
Best yet: 319
New solution
function cost: 183
child voicing cost: 134
Best yet: 317
New solution
function cost: 183
child voicing cost: 131
Best yet: 314
New solution
function cost: 183
child voicing cost: 129
Best yet: 312
New solution
function cost: 177
child voicing cost: 134
Best yet: 311
New solution
function cost: 177
child voicing cost: 133
Best yet: 310
New solution
function cost: 177
child voicing cost: 132
Best yet: 309
New solution
function cost: 183
child voicing cost: 125
Best yet: 308
New solution
function cost: 183
child voicing cost: 124
Best yet: 307

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (24, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])  
 (3, "T", [(60, 1), (60, 1), (67, 5), (75, 3)])   
 (3, "S", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (6, "D7", [(55, 1), (59, 3), (62, 5), (65, 7)])  
 (12, "Ts", [(56, 1), (60, 3), (60, 3), (63, 5)]) 
 (9, "D7", [(55, 1), (59, 3), (62, 5), (65, 7)])  
 (12, "T", [(48, 1), (55, 5), (60, 1), (63, 3)])  
 (15, "S", [(53, 1), (56, 3), (60, 5), (65, 1)])  
 (9, "D7/7", [(53, 7), (55, 1), (62, 5), (71, 3)])
 (15, "T/3", [(51, 3), (55, 5), (60, 1), (72, 1)])
 (0, "S", [(53, 1), (56, 3), (65, 1), (72, 5)])   
 (0, "T/5", [(55, 5), (55, 5), (63, 3), (72, 1)]) 
 (0, "S/3", [(56, 3), (60, 5), (65, 1), (72, 5)]) 
 ⋮                                                
 (18, "Ts", [(56, 1), (60, 3), (63, 5), (72, 3)]) 
 (12, "D7", [(55, 1), (59, 3), (65, 7), (74, 5)]) 
 (12, "Ts", [(56, 1), (60, 3), (63, 5), (72, 3)]) 
 (9, "D7", [(55, 1), (62, 5), (65, 7), (71, 3)])  
 (9, "T-5", [(48, 1), (60, 1), (63, 3), (72, 1)]) 
 (3, "D7-1", [(50, 5), (53, 7), (62, 5), (71, 3)])
 (3, "D7/3", [(47, 3), (55, 1), (62, 5), (65, 7)])
 (12, "T", [(48, 1), (55, 5), (60, 1), (63, 3)])  
 (21, "D", [(43, 1), (55, 1), (59, 3), (62, 5)])  
 (9, "D7", [(43, 1), (53, 7), (59, 3), (62, 5)])  
 (24, "T", [(48, 1), (51, 3), (55, 5), (60, 1)])  
 (24, "T", [(48, 1), (51, 3), (55, 5), (60, 1)])  

##: Done. Total checked: 129321, Pruned: 141317, completed: 40, time: 2.5429999828338623, efficiency: 15.7294535076736
Results: bestval_func: 183, bestval_voices: 124
(16, 407, 407, 407)
#Key: 1Scale: Minor
#Total time for optimisation of piece: 5.710000038146973
#Total cost of piece: 550
["T", "T", "S", "D7", "Ts", "D7", "T", "S", "D7/7", "T/3", "S", "T/5", "S/3", "D", "T", "T", "T-5", "D7", "T-5", "D7", "Ts", "D7", "Ts", "D7", "T-5", "D7-1", "D7/3", "T", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-143.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-156.csv
[1 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 0 1 0 0 0 1 0 0 0 2 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 1 0 1 0 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 1 0 1 0 0 1 0 0 0; 1 0 0 2 0 0 1 0 0 0 0 0; 1 1 0 0 0 2 0 0 0 0 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 1 0 1 2 0 0 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 0 1 0 0]
Key Counter is [20 16 1 26 0 18 2 6 27 1 13 0]
Key Score is [46; 122; 26; 111; 72; 59; 102; 30; 126; 47; 85; 84]
Position Counter for 9 is [27 1 13 0 20 16 1 26 0 18 2 6]
Any[[9.0, 87.75, 1.0]]
[9, 88, 1]
9 G# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 171
Best yet: 321
New solution
function cost: 150
child voicing cost: 170
Best yet: 320
New solution
function cost: 150
child voicing cost: 169
Best yet: 319
New solution
function cost: 150
child voicing cost: 168
Best yet: 318
New solution
function cost: 150
child voicing cost: 163
Best yet: 313
New solution
function cost: 150
child voicing cost: 161
Best yet: 311
New solution
function cost: 147
child voicing cost: 161
Best yet: 308
New solution
function cost: 150
child voicing cost: 157
Best yet: 307
New solution
function cost: 147
child voicing cost: 157
Best yet: 304
New solution
function cost: 150
child voicing cost: 153
Best yet: 303
New solution
function cost: 150
child voicing cost: 148
Best yet: 298
New solution
function cost: 150
child voicing cost: 146
Best yet: 296
New solution
function cost: 147
child voicing cost: 147
Best yet: 294
New solution
function cost: 147
child voicing cost: 145
Best yet: 292
New solution
function cost: 150
child voicing cost: 141
Best yet: 291
New solution
function cost: 147
child voicing cost: 141
Best yet: 288
New solution
function cost: 147
child voicing cost: 140
Best yet: 287
New solution
function cost: 147
child voicing cost: 139
Best yet: 286
New solution
function cost: 150
child voicing cost: 135
Best yet: 285
New solution
function cost: 147
child voicing cost: 135
Best yet: 282
New solution
function cost: 150
child voicing cost: 130
Best yet: 280
New solution
function cost: 150
child voicing cost: 128
Best yet: 278
New solution
function cost: 147
child voicing cost: 130
Best yet: 277
New solution
function cost: 147
child voicing cost: 129
Best yet: 276
New solution
function cost: 147
child voicing cost: 124
Best yet: 271
New solution
function cost: 141
child voicing cost: 129
Best yet: 270
New solution
function cost: 141
child voicing cost: 126
Best yet: 267
New solution
function cost: 141
child voicing cost: 124
Best yet: 265
New solution
function cost: 141
child voicing cost: 122
Best yet: 263
New solution
function cost: 141
child voicing cost: 119
Best yet: 260
New solution
function cost: 141
child voicing cost: 117
Best yet: 258
New solution
function cost: 141
child voicing cost: 115
Best yet: 256
New solution
function cost: 141
child voicing cost: 112
Best yet: 253
New solution
function cost: 141
child voicing cost: 110
Best yet: 251
New solution
function cost: 141
child voicing cost: 108
Best yet: 249
New solution
function cost: 141
child voicing cost: 106
Best yet: 247
New solution
function cost: 141
child voicing cost: 103
Best yet: 244
New solution
function cost: 144
child voicing cost: 98
Best yet: 242
New solution
function cost: 144
child voicing cost: 96
Best yet: 240
New solution
function cost: 144
child voicing cost: 94
Best yet: 238
New solution
function cost: 144
child voicing cost: 91
Best yet: 235
New solution
function cost: 144
child voicing cost: 88
Best yet: 232
New solution
function cost: 135
child voicing cost: 96
Best yet: 231
New solution
function cost: 135
child voicing cost: 94
Best yet: 229
New solution
function cost: 135
child voicing cost: 92
Best yet: 227

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 185863, Pruned: 212231, completed: 45, time: 4.072000026702881, efficiency: 11.05108047762876
Results: bestval_func: 135, bestval_voices: 92
(15, 360, 360, 360)
[1 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 0 1 0 0 0 1 0 0 0 2 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 1 0 1 0 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 1 0 1 0 0 1 0 0 0; 1 0 0 2 0 0 1 0 0 0 0 0; 1 1 0 0 0 2 0 0 0 0 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 1 0 1 2 0 0 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 0 1 0 0]
Key Counter is [20 16 1 26 0 18 2 6 27 1 13 0]
Key Score is [46; 122; 26; 111; 72; 59; 102; 30; 126; 47; 85; 84]
Position Counter for 9 is [27 1 13 0 20 16 1 26 0 18 2 6]
Any[[9.0, 87.75, 1.0]]
[9, 88, 1]
9 G# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 185
Best yet: 359
New solution
function cost: 174
child voicing cost: 180
Best yet: 354
New solution
function cost: 174
child voicing cost: 176
Best yet: 350
New solution
function cost: 174
child voicing cost: 174
Best yet: 348
New solution
function cost: 180
child voicing cost: 166
Best yet: 346
New solution
function cost: 171
child voicing cost: 171
Best yet: 342
New solution
function cost: 171
child voicing cost: 167
Best yet: 338
New solution
function cost: 171
child voicing cost: 166
Best yet: 337
New solution
function cost: 177
child voicing cost: 159
Best yet: 336
New solution
function cost: 171
child voicing cost: 163
Best yet: 334
New solution
function cost: 171
child voicing cost: 157
Best yet: 328
New solution
function cost: 177
child voicing cost: 149
Best yet: 326
New solution
function cost: 171
child voicing cost: 152
Best yet: 323
New solution
function cost: 159
child voicing cost: 159
Best yet: 318
New solution
function cost: 159
child voicing cost: 157
Best yet: 316
New solution
function cost: 159
child voicing cost: 154
Best yet: 313
New solution
function cost: 159
child voicing cost: 152
Best yet: 311
New solution
function cost: 159
child voicing cost: 151
Best yet: 310
New solution
function cost: 159
child voicing cost: 149
Best yet: 308
New solution
function cost: 162
child voicing cost: 144
Best yet: 306
New solution
function cost: 168
child voicing cost: 137
Best yet: 305
New solution
function cost: 168
child voicing cost: 136
Best yet: 304
New solution
function cost: 168
child voicing cost: 135
Best yet: 303
New solution
function cost: 165
child voicing cost: 136
Best yet: 301
New solution
function cost: 165
child voicing cost: 134
Best yet: 299
New solution
function cost: 174
child voicing cost: 123
Best yet: 297
New solution
function cost: 165
child voicing cost: 131
Best yet: 296
New solution
function cost: 165
child voicing cost: 129
Best yet: 294
New solution
function cost: 165
child voicing cost: 127
Best yet: 292
New solution
function cost: 165
child voicing cost: 125
Best yet: 290
New solution
function cost: 171
child voicing cost: 117
Best yet: 288
New solution
function cost: 162
child voicing cost: 123
Best yet: 285
New solution
function cost: 162
child voicing cost: 122
Best yet: 284
New solution
function cost: 168
child voicing cost: 115
Best yet: 283
New solution
function cost: 162
child voicing cost: 118
Best yet: 280
New solution
function cost: 168
child voicing cost: 111
Best yet: 279
New solution
function cost: 162
child voicing cost: 113
Best yet: 275
New solution
function cost: 153
child voicing cost: 117
Best yet: 270
New solution
function cost: 150
child voicing cost: 117
Best yet: 267
New solution
function cost: 156
child voicing cost: 109
Best yet: 265
New solution
function cost: 156
child voicing cost: 107
Best yet: 263
New solution
function cost: 156
child voicing cost: 105
Best yet: 261
New solution
function cost: 159
child voicing cost: 101
Best yet: 260
New solution
function cost: 159
child voicing cost: 96
Best yet: 255
New solution
function cost: 159
child voicing cost: 94
Best yet: 253
New solution
function cost: 159
child voicing cost: 92
Best yet: 251
New solution
function cost: 159
child voicing cost: 90
Best yet: 249

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])    
 (0, "D7/3", [(55, 3), (61, 7), (63, 1), (70, 5)]) 
 (15, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])   
 (0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])    
 (15, "D7-1", [(58, 5), (61, 7), (67, 3), (70, 5)])
 (18, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])   
 (9, "S", [(49, 1), (65, 3), (68, 5), (73, 1)])    
 (12, "S", [(49, 1), (56, 5), (65, 3), (73, 1)])   
 (0, "T/3", [(48, 3), (63, 5), (68, 1), (75, 5)])  
 (6, "S", [(49, 1), (61, 1), (68, 5), (77, 3)])    
 (9, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])    
 (12, "S/3", [(53, 3), (56, 5), (68, 5), (73, 1)]) 
 (6, "D7", [(51, 1), (58, 5), (67, 3), (73, 7)])   
 ⋮                                                 
 (18, "Ts", [(53, 1), (60, 5), (68, 3), (80, 3)])  
 (12, "D7/3", [(55, 3), (61, 7), (70, 5), (75, 1)])
 (0, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])    
 (15, "D/5", [(58, 5), (58, 5), (67, 3), (75, 1)]) 
 (0, "T/3", [(60, 3), (63, 5), (68, 1), (75, 5)])  
 (3, "D7/5", [(58, 5), (63, 1), (67, 3), (73, 7)]) 
 (6, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (9, "S/5", [(56, 5), (65, 3), (68, 5), (73, 1)])  
 (6, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (12, "D7", [(51, 1), (61, 7), (67, 3), (70, 5)])  
 (24, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])   
 (24, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])   

##: Done. Total checked: 118207, Pruned: 131055, completed: 47, time: 2.502000093460083, efficiency: 18.78497132068546
Results: bestval_func: 159, bestval_voices: 90
(16, 360, 360, 360)
#Key: 9Scale: Major
#Total time for optimisation of piece: 7.888999938964844
#Total cost of piece: 476
["T", "D7/3", "T", "T", "D7-1", "T", "S", "S", "T/3", "S", "D", "S/3", "D7", "Ts", "D", "D", "Ts", "T/3", "S65/6", "D7", "Ts", "D7/3", "T", "D/5", "T/3", "D7/5", "T", "S/5", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-156.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-169.csv
[0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 1 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 0 0 1 2 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 2 0 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 1 0 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0]
Key Counter is [19 4 5 19 0 21 0 22 15 1 26 0]
Key Score is [68; 104; 32; 127; 39; 94; 85; 47; 126; 25; 113; 64]
Position Counter for 4 is [19 0 21 0 22 15 1 26 0 19 4 5]
Any[[4.0, 80.5, 1.0]]
[4, 80, 1]
4 D# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 162
child voicing cost: 177
Best yet: 339
New solution
function cost: 162
child voicing cost: 175
Best yet: 337
New solution
function cost: 162
child voicing cost: 167
Best yet: 329
New solution
function cost: 162
child voicing cost: 166
Best yet: 328
New solution
function cost: 162
child voicing cost: 165
Best yet: 327
New solution
function cost: 162
child voicing cost: 164
Best yet: 326
New solution
function cost: 162
child voicing cost: 159
Best yet: 321
New solution
function cost: 162
child voicing cost: 156
Best yet: 318
New solution
function cost: 162
child voicing cost: 155
Best yet: 317
New solution
function cost: 162
child voicing cost: 150
Best yet: 312
New solution
function cost: 150
child voicing cost: 161
Best yet: 311
New solution
function cost: 150
child voicing cost: 160
Best yet: 310
New solution
function cost: 150
child voicing cost: 159
Best yet: 309
New solution
function cost: 150
child voicing cost: 158
Best yet: 308
New solution
function cost: 150
child voicing cost: 153
Best yet: 303
New solution
function cost: 150
child voicing cost: 152
Best yet: 302
New solution
function cost: 150
child voicing cost: 148
Best yet: 298
New solution
function cost: 150
child voicing cost: 147
Best yet: 297
New solution
function cost: 150
child voicing cost: 143
Best yet: 293
New solution
function cost: 150
child voicing cost: 142
Best yet: 292
New solution
function cost: 150
child voicing cost: 138
Best yet: 288
New solution
function cost: 150
child voicing cost: 137
Best yet: 287
New solution
function cost: 147
child voicing cost: 138
Best yet: 285
New solution
function cost: 147
child voicing cost: 137
Best yet: 284
New solution
function cost: 150
child voicing cost: 132
Best yet: 282
New solution
function cost: 147
child voicing cost: 133
Best yet: 280
New solution
function cost: 147
child voicing cost: 131
Best yet: 278
New solution
function cost: 147
child voicing cost: 128
Best yet: 275
New solution
function cost: 147
child voicing cost: 125
Best yet: 272
New solution
function cost: 147
child voicing cost: 122
Best yet: 269
New solution
function cost: 153
child voicing cost: 114
Best yet: 267
New solution
function cost: 153
child voicing cost: 113
Best yet: 266
New solution
function cost: 153
child voicing cost: 111
Best yet: 264
New solution
function cost: 153
child voicing cost: 110
Best yet: 263
New solution
function cost: 153
child voicing cost: 109
Best yet: 262
New solution
function cost: 153
child voicing cost: 105
Best yet: 258
New solution
function cost: 153
child voicing cost: 100
Best yet: 253
New solution
function cost: 153
child voicing cost: 99
Best yet: 252
New solution
function cost: 153
child voicing cost: 98
Best yet: 251
New solution
function cost: 147
child voicing cost: 101
Best yet: 248
New solution
function cost: 147
child voicing cost: 100
Best yet: 247
New solution
function cost: 147
child voicing cost: 95
Best yet: 242
New solution
function cost: 153
child voicing cost: 88
Best yet: 241
New solution
function cost: 147
child voicing cost: 91
Best yet: 238
New solution
function cost: 147
child voicing cost: 90
Best yet: 237
New solution
function cost: 147
child voicing cost: 87
Best yet: 234
New solution
function cost: 147
child voicing cost: 84
Best yet: 231
New solution
function cost: 147
child voicing cost: 81
Best yet: 228

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 130375, Pruned: 173296, completed: 48, time: 2.6560001373291016, efficiency: 18.072288222194615
Results: bestval_func: 147, bestval_voices: 81
(15, 381, 381, 381)
[0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 1 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 0 0 1 2 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 2 0 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 1 0 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0]
Key Counter is [19 4 5 19 0 21 0 22 15 1 26 0]
Key Score is [68; 104; 32; 127; 39; 94; 85; 47; 126; 25; 113; 64]
Position Counter for 4 is [19 0 21 0 22 15 1 26 0 19 4 5]
Any[[4.0, 80.5, 1.0]]
[4, 80, 1]
4 D# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 189
child voicing cost: 185
Best yet: 374
New solution
function cost: 189
child voicing cost: 180
Best yet: 369
New solution
function cost: 189
child voicing cost: 177
Best yet: 366
New solution
function cost: 183
child voicing cost: 175
Best yet: 358
New solution
function cost: 183
child voicing cost: 174
Best yet: 357
New solution
function cost: 183
child voicing cost: 169
Best yet: 352
New solution
function cost: 189
child voicing cost: 162
Best yet: 351
New solution
function cost: 192
child voicing cost: 158
Best yet: 350
New solution
function cost: 192
child voicing cost: 157
Best yet: 349
New solution
function cost: 183
child voicing cost: 165
Best yet: 348
New solution
function cost: 183
child voicing cost: 164
Best yet: 347
New solution
function cost: 183
child voicing cost: 159
Best yet: 342
New solution
function cost: 189
child voicing cost: 152
Best yet: 341
New solution
function cost: 186
child voicing cost: 149
Best yet: 335
New solution
function cost: 192
child voicing cost: 142
Best yet: 334
New solution
function cost: 186
child voicing cost: 145
Best yet: 331
New solution
function cost: 186
child voicing cost: 143
Best yet: 329
New solution
function cost: 186
child voicing cost: 138
Best yet: 324
New solution
function cost: 186
child voicing cost: 137
Best yet: 323
New solution
function cost: 186
child voicing cost: 132
Best yet: 318
New solution
function cost: 186
child voicing cost: 130
Best yet: 316
New solution
function cost: 168
child voicing cost: 140
Best yet: 308
New solution
function cost: 168
child voicing cost: 135
Best yet: 303
New solution
function cost: 171
child voicing cost: 129
Best yet: 300
New solution
function cost: 171
child voicing cost: 124
Best yet: 295

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (15, "T", [(51, 1), (51, 1), (58, 5), (67, 3)])   
 (0, "Ss", [(53, 1), (56, 3), (56, 3), (60, 5)])   
 (6, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])    
 (0, "D7/3", [(50, 3), (56, 7), (65, 5), (70, 1)]) 
 (15, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])   
 (12, "D7", [(58, 1), (62, 3), (65, 5), (68, 7)])  
 (18, "Ts", [(60, 1), (63, 3), (63, 3), (67, 5)])  
 (6, "D", [(58, 1), (65, 5), (70, 1), (74, 3)])    
 (6, "T/3", [(55, 3), (63, 1), (70, 5), (75, 1)])  
 (15, "D/5", [(53, 5), (62, 3), (70, 1), (77, 5)]) 
 (15, "T", [(51, 1), (63, 1), (70, 5), (79, 3)])   
 (12, "S", [(44, 1), (63, 5), (72, 3), (80, 1)])   
 (15, "D7/3", [(50, 3), (65, 5), (70, 1), (80, 7)])
 ⋮                                                 
 (12, "D64", [(58, 1), (58, 1), (67, 6), (75, 4)]) 
 (15, "D", [(58, 1), (58, 1), (65, 5), (74, 3)])   
 (3, "D7-1", [(53, 5), (56, 7), (68, 7), (74, 3)]) 
 (9, "T", [(51, 1), (58, 5), (67, 3), (75, 1)])    
 (12, "S65", [(44, 1), (60, 3), (65, 6), (75, 5)]) 
 (6, "D", [(46, 1), (58, 1), (65, 5), (74, 3)])    
 (12, "D7/7", [(44, 7), (58, 1), (65, 5), (74, 3)])
 (6, "T/3", [(43, 3), (58, 5), (63, 1), (75, 1)])  
 (12, "S", [(44, 1), (56, 1), (63, 5), (72, 3)])   
 (12, "D7", [(46, 1), (56, 7), (62, 3), (65, 5)])  
 (18, "T", [(51, 1), (55, 3), (58, 5), (63, 1)])   
 (18, "T", [(51, 1), (55, 3), (58, 5), (63, 1)])   

##: Done. Total checked: 79918, Pruned: 90045, completed: 25, time: 1.7899999618530273, efficiency: 13.966480744569251
Results: bestval_func: 171, bestval_voices: 124
(16, 381, 381, 381)
#Key: 4Scale: Major
#Total time for optimisation of piece: 6.126999855041504
#Total cost of piece: 523
["T", "Ss", "T", "D7/3", "T", "D7", "Ts", "D", "T/3", "D/5", "T", "S", "D7/3", "T", "D", "D", "D7-1", "Ts", "S65", "S65", "D64", "D", "D7-1", "T", "S65", "D", "D7/7", "T/3", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-169.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-182.csv
[0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 0 0 2 0 0 0 0 0 0 1 1; 0 1 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 1 0 0 3 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 2 0 1 0 0 1; 0 0 1 0 0 0 0 0 1 0 1 1; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 1 0 0 0 1 0; 0 0 0 0 0 2 1 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 0 1 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 2 1 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 2 0 0 0 0 1 0 0 1; 0 0 0 1 0 0 0 0 1 0 2 0; 0 0 1 2 0 1 0 0 0 0 0 0]
Key Counter is [1 12 5 24 0 16 19 0 24 0 23 7]
Key Score is [29; 119; 43; 93; 86; 45; 125; 32; 100; 67; 69; 109]
Position Counter for 7 is [19 0 24 0 23 7 1 12 5 24 0 16]
Any[[7.0, 88.25, 0.0]]
[7, 88, 0]
4 D# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 171
child voicing cost: 184
Best yet: 355
New solution
function cost: 171
child voicing cost: 179
Best yet: 350
New solution
function cost: 171
child voicing cost: 175
Best yet: 346
New solution
function cost: 171
child voicing cost: 172
Best yet: 343
New solution
function cost: 171
child voicing cost: 169
Best yet: 340
New solution
function cost: 171
child voicing cost: 168
Best yet: 339
New solution
function cost: 171
child voicing cost: 167
Best yet: 338
New solution
function cost: 171
child voicing cost: 164
Best yet: 335
New solution
function cost: 144
child voicing cost: 178
Best yet: 322
New solution
function cost: 144
child voicing cost: 176
Best yet: 320
New solution
function cost: 144
child voicing cost: 168
Best yet: 312
New solution
function cost: 144
child voicing cost: 165
Best yet: 309
New solution
function cost: 144
child voicing cost: 164
Best yet: 308
New solution
function cost: 138
child voicing cost: 167
Best yet: 305
New solution
function cost: 138
child voicing cost: 164
Best yet: 302
New solution
function cost: 138
child voicing cost: 163
Best yet: 301
New solution
function cost: 138
child voicing cost: 162
Best yet: 300
New solution
function cost: 138
child voicing cost: 161
Best yet: 299
New solution
function cost: 138
child voicing cost: 155
Best yet: 293
New solution
function cost: 141
child voicing cost: 149
Best yet: 290
New solution
function cost: 141
child voicing cost: 146
Best yet: 287
New solution
function cost: 138
child voicing cost: 148
Best yet: 286
New solution
function cost: 141
child voicing cost: 144
Best yet: 285
New solution
function cost: 138
child voicing cost: 142
Best yet: 280
New solution
function cost: 141
child voicing cost: 136
Best yet: 277
New solution
function cost: 141
child voicing cost: 133
Best yet: 274
New solution
function cost: 153
child voicing cost: 118
Best yet: 271
New solution
function cost: 153
child voicing cost: 113
Best yet: 266
New solution
function cost: 126
child voicing cost: 137
Best yet: 263
New solution
function cost: 126
child voicing cost: 135
Best yet: 261
New solution
function cost: 126
child voicing cost: 132
Best yet: 258
New solution
function cost: 126
child voicing cost: 127
Best yet: 253
New solution
function cost: 126
child voicing cost: 124
Best yet: 250
New solution
function cost: 120
child voicing cost: 128
Best yet: 248
New solution
function cost: 120
child voicing cost: 126
Best yet: 246
New solution
function cost: 120
child voicing cost: 121
Best yet: 241
New solution
function cost: 120
child voicing cost: 119
Best yet: 239
New solution
function cost: 120
child voicing cost: 117
Best yet: 237
New solution
function cost: 120
child voicing cost: 115
Best yet: 235
New solution
function cost: 120
child voicing cost: 110
Best yet: 230
New solution
function cost: 120
child voicing cost: 109
Best yet: 229
New solution
function cost: 120
child voicing cost: 107
Best yet: 227
New solution
function cost: 120
child voicing cost: 105
Best yet: 225
New solution
function cost: 120
child voicing cost: 103
Best yet: 223
New solution
function cost: 120
child voicing cost: 98
Best yet: 218

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 110996, Pruned: 130237, completed: 45, time: 1.9849998950958252, efficiency: 22.67002638699265
Results: bestval_func: 120, bestval_voices: 98
(15, 364, 364, 364)
[0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 0 0 2 0 0 0 0 0 0 1 1; 0 1 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 1 0 0 3 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 2 0 1 0 0 1; 0 0 1 0 0 0 0 0 1 0 1 1; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 1 0 0 0 1 0; 0 0 0 0 0 2 1 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 0 1 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 2 1 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 2 0 0 0 0 1 0 0 1; 0 0 0 1 0 0 0 0 1 0 2 0; 0 0 1 2 0 1 0 0 0 0 0 0]
Key Counter is [1 12 5 24 0 16 19 0 24 0 23 7]
Key Score is [29; 119; 43; 93; 86; 45; 125; 32; 100; 67; 69; 109]
Position Counter for 7 is [19 0 24 0 23 7 1 12 5 24 0 16]
Any[[7.0, 88.25, 0.0]]
[7, 88, 0]
4 D# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 165
child voicing cost: 163
Best yet: 328
New solution
function cost: 165
child voicing cost: 158
Best yet: 323
New solution
function cost: 168
child voicing cost: 153
Best yet: 321
New solution
function cost: 165
child voicing cost: 153
Best yet: 318
New solution
function cost: 159
child voicing cost: 156
Best yet: 315
New solution
function cost: 165
child voicing cost: 147
Best yet: 312
New solution
function cost: 165
child voicing cost: 142
Best yet: 307
New solution
function cost: 156
child voicing cost: 150
Best yet: 306
New solution
function cost: 156
child voicing cost: 145
Best yet: 301
New solution
function cost: 156
child voicing cost: 144
Best yet: 300
New solution
function cost: 156
child voicing cost: 139
Best yet: 295
New solution
function cost: 156
child voicing cost: 138
Best yet: 294
New solution
function cost: 156
child voicing cost: 137
Best yet: 293
New solution
function cost: 156
child voicing cost: 135
Best yet: 291
New solution
function cost: 153
child voicing cost: 133
Best yet: 286
New solution
function cost: 153
child voicing cost: 131
Best yet: 284
New solution
function cost: 150
child voicing cost: 132
Best yet: 282
New solution
function cost: 147
child voicing cost: 131
Best yet: 278
New solution
function cost: 156
child voicing cost: 120
Best yet: 276
New solution
function cost: 156
child voicing cost: 119
Best yet: 275
New solution
function cost: 156
child voicing cost: 117
Best yet: 273
New solution
function cost: 153
child voicing cost: 115
Best yet: 268
New solution
function cost: 153
child voicing cost: 113
Best yet: 266
New solution
function cost: 150
child voicing cost: 114
Best yet: 264
New solution
function cost: 147
child voicing cost: 113
Best yet: 260
New solution
function cost: 138
child voicing cost: 119
Best yet: 257
New solution
function cost: 138
child voicing cost: 117
Best yet: 255
New solution
function cost: 144
child voicing cost: 108
Best yet: 252
New solution
function cost: 144
child voicing cost: 106
Best yet: 250
New solution
function cost: 141
child voicing cost: 107
Best yet: 248
New solution
function cost: 138
child voicing cost: 106
Best yet: 244

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(51, 1), (51, 1), (58, 5), (66, 3)])   
 (0, "T", [(51, 1), (51, 1), (58, 5), (66, 3)])   
 (6, "D7", [(46, 1), (53, 5), (62, 3), (68, 7)])  
 (9, "Ts", [(47, 1), (51, 3), (63, 3), (66, 5)])  
 (3, "D7-1", [(53, 5), (56, 7), (62, 3), (65, 5)])
 (12, "D7", [(46, 1), (56, 7), (62, 3), (65, 5)]) 
 (6, "T", [(51, 1), (54, 3), (58, 5), (63, 1)])   
 (12, "D", [(46, 1), (53, 5), (58, 1), (62, 3)])  
 (6, "S/3", [(47, 3), (51, 5), (56, 1), (63, 5)]) 
 (30, "T/5", [(46, 5), (51, 1), (58, 5), (66, 3)])
 (3, "S", [(44, 1), (51, 5), (59, 3), (68, 1)])   
 (0, "Dm", [(49, 1), (53, 3), (61, 1), (68, 5)])  
 (15, "S/3", [(47, 3), (51, 5), (63, 5), (68, 1)])
 ⋮                                                
 (12, "D/3", [(50, 3), (58, 1), (70, 1), (77, 5)])
 (0, "T", [(51, 1), (63, 1), (70, 5), (78, 3)])   
 (0, "D7-1", [(53, 5), (62, 3), (68, 7), (77, 5)])
 (12, "Ts", [(59, 1), (63, 3), (66, 5), (75, 3)]) 
 (3, "D7-1", [(53, 5), (56, 7), (68, 7), (74, 3)])
 (21, "T", [(51, 1), (58, 5), (66, 3), (75, 1)])  
 (0, "Tm", [(54, 1), (58, 3), (70, 3), (73, 5)])  
 (12, "S", [(56, 1), (63, 5), (68, 1), (71, 3)])  
 (9, "D", [(58, 1), (62, 3), (65, 5), (70, 1)])   
 (9, "D7", [(58, 1), (62, 3), (65, 5), (68, 7)])  
 (9, "T", [(51, 1), (58, 5), (63, 1), (66, 3)])   
 (9, "T", [(51, 1), (58, 5), (63, 1), (66, 3)])   

##: Done. Total checked: 195876, Pruned: 225566, completed: 31, time: 3.187000036239624, efficiency: 9.727015891903546
Results: bestval_func: 138, bestval_voices: 106
(16, 364, 364, 364)
#Key: 4Scale: Minor
#Total time for optimisation of piece: 6.391000032424927
#Total cost of piece: 462
["T", "T", "D7", "Ts", "D7-1", "D7", "T", "D", "S/3", "T/5", "S", "Dm", "S/3", "D", "T", "T", "D/3", "D", "T/5", "D", "D/3", "T", "D7-1", "Ts", "D7-1", "T", "Tm", "S", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-182.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-195.csv
[1 0 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 1 0 0 0 0 0 0 1 0 2 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 0 0 2; 1 0 0 0 2 0 0 0 0 0 0 1; 0 0 0 0 1 1 0 0 0 1 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0]
Key Counter is [20 3 21 0 16 16 5 21 0 20 4 5]
Key Score is [119; 48; 91; 82; 49; 118; 33; 108; 64; 70; 102; 33]
Position Counter for 1 is [20 3 21 0 16 16 5 21 0 20 4 5]
Any[[1.0, 76.25, 1.0]]
[1, 76, 1]
1 C Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 141
child voicing cost: 197
Best yet: 338
New solution
function cost: 141
child voicing cost: 195
Best yet: 336
New solution
function cost: 141
child voicing cost: 192
Best yet: 333
New solution
function cost: 141
child voicing cost: 187
Best yet: 328
New solution
function cost: 141
child voicing cost: 184
Best yet: 325
New solution
function cost: 141
child voicing cost: 177
Best yet: 318
New solution
function cost: 141
child voicing cost: 173
Best yet: 314
New solution
function cost: 141
child voicing cost: 170
Best yet: 311
New solution
function cost: 141
child voicing cost: 168
Best yet: 309
New solution
function cost: 141
child voicing cost: 167
Best yet: 308
New solution
function cost: 141
child voicing cost: 164
Best yet: 305
New solution
function cost: 135
child voicing cost: 167
Best yet: 302
New solution
function cost: 135
child voicing cost: 166
Best yet: 301
New solution
function cost: 135
child voicing cost: 163
Best yet: 298
New solution
function cost: 135
child voicing cost: 160
Best yet: 295
New solution
function cost: 135
child voicing cost: 159
Best yet: 294
New solution
function cost: 138
child voicing cost: 155
Best yet: 293
New solution
function cost: 138
child voicing cost: 152
Best yet: 290
New solution
function cost: 138
child voicing cost: 149
Best yet: 287
New solution
function cost: 138
child voicing cost: 148
Best yet: 286
New solution
function cost: 138
child voicing cost: 147
Best yet: 285
New solution
function cost: 138
child voicing cost: 144
Best yet: 282
New solution
function cost: 138
child voicing cost: 143
Best yet: 281
New solution
function cost: 135
child voicing cost: 145
Best yet: 280
New solution
function cost: 135
child voicing cost: 144
Best yet: 279
New solution
function cost: 135
child voicing cost: 143
Best yet: 278
New solution
function cost: 135
child voicing cost: 142
Best yet: 277
New solution
function cost: 135
child voicing cost: 139
Best yet: 274
New solution
function cost: 135
child voicing cost: 138
Best yet: 273
New solution
function cost: 138
child voicing cost: 134
Best yet: 272
New solution
function cost: 138
child voicing cost: 132
Best yet: 270
New solution
function cost: 138
child voicing cost: 129
Best yet: 267
New solution
function cost: 138
child voicing cost: 128
Best yet: 266
New solution
function cost: 135
child voicing cost: 128
Best yet: 263
New solution
function cost: 135
child voicing cost: 125
Best yet: 260
New solution
function cost: 135
child voicing cost: 124
Best yet: 259
New solution
function cost: 135
child voicing cost: 123
Best yet: 258
New solution
function cost: 135
child voicing cost: 120
Best yet: 255
New solution
function cost: 135
child voicing cost: 119
Best yet: 254
New solution
function cost: 135
child voicing cost: 116
Best yet: 251
New solution
function cost: 132
child voicing cost: 117
Best yet: 249
New solution
function cost: 132
child voicing cost: 115
Best yet: 247
New solution
function cost: 132
child voicing cost: 112
Best yet: 244
New solution
function cost: 132
child voicing cost: 111
Best yet: 243
New solution
function cost: 111
child voicing cost: 129
Best yet: 240
New solution
function cost: 111
child voicing cost: 126
Best yet: 237
New solution
function cost: 111
child voicing cost: 123
Best yet: 234
New solution
function cost: 111
child voicing cost: 121
Best yet: 232
New solution
function cost: 111
child voicing cost: 118
Best yet: 229
New solution
function cost: 111
child voicing cost: 117
Best yet: 228
New solution
function cost: 108
child voicing cost: 119
Best yet: 227
New solution
function cost: 108
child voicing cost: 118
Best yet: 226
New solution
function cost: 111
child voicing cost: 114
Best yet: 225
New solution
function cost: 111
child voicing cost: 113
Best yet: 224
New solution
function cost: 108
child voicing cost: 113
Best yet: 221
New solution
function cost: 108
child voicing cost: 112
Best yet: 220

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 285323, Pruned: 335531, completed: 56, time: 5.019999980926514, efficiency: 11.155378528440629
Results: bestval_func: 108, bestval_voices: 112
(15, 412, 412, 412)
[1 0 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 1 0 0 0 0 0 0 1 0 2 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 0 0 2; 1 0 0 0 2 0 0 0 0 0 0 1; 0 0 0 0 1 1 0 0 0 1 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0]
Key Counter is [20 3 21 0 16 16 5 21 0 20 4 5]
Key Score is [119; 48; 91; 82; 49; 118; 33; 108; 64; 70; 102; 33]
Position Counter for 1 is [20 3 21 0 16 16 5 21 0 20 4 5]
Any[[1.0, 76.25, 1.0]]
[1, 76, 1]
1 C Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 153
child voicing cost: 158
Best yet: 311
New solution
function cost: 153
child voicing cost: 153
Best yet: 306
New solution
function cost: 153
child voicing cost: 151
Best yet: 304
New solution
function cost: 153
child voicing cost: 148
Best yet: 301
New solution
function cost: 153
child voicing cost: 146
Best yet: 299
New solution
function cost: 153
child voicing cost: 144
Best yet: 297
New solution
function cost: 159
child voicing cost: 137
Best yet: 296
New solution
function cost: 159
child voicing cost: 136
Best yet: 295
New solution
function cost: 159
child voicing cost: 131
Best yet: 290
New solution
function cost: 156
child voicing cost: 133
Best yet: 289
New solution
function cost: 162
child voicing cost: 125
Best yet: 287
New solution
function cost: 150
child voicing cost: 132
Best yet: 282
New solution
function cost: 150
child voicing cost: 127
Best yet: 277
New solution
function cost: 171
child voicing cost: 104
Best yet: 275
New solution
function cost: 162
child voicing cost: 112
Best yet: 274
New solution
function cost: 162
child voicing cost: 110
Best yet: 272
New solution
function cost: 162
child voicing cost: 107
Best yet: 269
New solution
function cost: 174
child voicing cost: 91
Best yet: 265
New solution
function cost: 162
child voicing cost: 102
Best yet: 264
New solution
function cost: 162
child voicing cost: 96
Best yet: 258

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (15, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (9, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])    
 (0, "S", [(53, 1), (60, 5), (69, 3), (77, 1)])    
 (12, "Ts", [(57, 1), (60, 3), (69, 1), (76, 5)])  
 (0, "Ss", [(50, 1), (62, 1), (69, 5), (77, 3)])   
 (3, "D", [(55, 1), (62, 5), (71, 3), (79, 1)])    
 (0, "T", [(60, 1), (64, 3), (72, 1), (79, 5)])    
 (0, "S", [(53, 1), (60, 5), (69, 3), (77, 1)])    
 (0, "S", [(53, 1), (65, 1), (69, 3), (72, 5)])    
 (9, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])    
 (12, "T/5", [(55, 5), (64, 3), (67, 5), (72, 1)]) 
 (12, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])   
 (12, "D7-1", [(50, 5), (62, 5), (65, 7), (71, 3)])
 ⋮                                                 
 (12, "T", [(48, 1), (64, 3), (67, 5), (72, 1)])   
 (0, "Ts", [(45, 1), (64, 5), (69, 1), (72, 3)])   
 (6, "D7-1", [(50, 5), (65, 7), (65, 7), (71, 3)]) 
 (6, "T", [(48, 1), (64, 3), (67, 5), (72, 1)])    
 (9, "D7/7", [(41, 7), (59, 3), (67, 1), (74, 5)]) 
 (0, "T/3", [(40, 3), (60, 1), (67, 5), (79, 5)])  
 (9, "S", [(41, 1), (60, 5), (69, 3), (77, 1)])    
 (6, "D7/3", [(47, 3), (62, 5), (67, 1), (77, 7)]) 
 (18, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (18, "D7", [(55, 1), (59, 3), (65, 7), (74, 5)])  
 (18, "T", [(48, 1), (55, 5), (64, 3), (72, 1)])   
 (18, "T", [(48, 1), (55, 5), (64, 3), (72, 1)])   

##: Done. Total checked: 241925, Pruned: 272969, completed: 20, time: 4.131999969482422, efficiency: 4.840271090927723
Results: bestval_func: 162, bestval_voices: 96
(16, 412, 412, 412)
#Key: 1Scale: Major
#Total time for optimisation of piece: 10.933000087738037
#Total cost of piece: 478
["T", "T", "S", "Ts", "Ss", "D", "T", "S", "S", "D", "T/5", "D", "D7-1", "T", "D", "D", "D7/7", "T/3", "Ts", "D7/3", "T", "Ts", "D7-1", "T", "D7/7", "T/3", "S", "D7/3", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-195.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-208.csv
[0 0 1 0 0 1 0 0 0 1 0 0; 0 1 0 0 1 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 1 2 0 0 0 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 0 0 2 0 0; 0 1 0 0 0 1 0 0 0 2 0 0; 0 0 0 0 1 1 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 0 0 1 1 0; 0 0 2 0 0 0 0 1 0 1 0 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 2 0 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 1 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 0 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 0 1 0 0 0 0 1 0 0; 1 1 0 0 1 0 0 0 0 1 0 0; 1 0 0 0 1 0 0 0 0 1 0 1; 1 0 1 0 0 0 0 0 0 2 0 0; 0 0 0 0 2 0 0 0 0 0 0 2]
Key Counter is [10 7 25 0 20 14 0 14 0 31 1 4]
Key Score is [118; 32; 101; 64; 62; 115; 26; 104; 46; 87; 95; 32]
Position Counter for 1 is [10 7 25 0 20 14 0 14 0 31 1 4]
Any[[1.0, 86.5, 0.0]]
[1, 86, 0]
10 A Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 171
child voicing cost: 166
Best yet: 337
New solution
function cost: 171
child voicing cost: 165
Best yet: 336
New solution
function cost: 171
child voicing cost: 162
Best yet: 333
New solution
function cost: 171
child voicing cost: 157
Best yet: 328
New solution
function cost: 171
child voicing cost: 156
Best yet: 327
New solution
function cost: 171
child voicing cost: 152
Best yet: 323
New solution
function cost: 171
child voicing cost: 151
Best yet: 322
New solution
function cost: 171
child voicing cost: 150
Best yet: 321
New solution
function cost: 171
child voicing cost: 146
Best yet: 317
New solution
function cost: 171
child voicing cost: 143
Best yet: 314
New solution
function cost: 177
child voicing cost: 133
Best yet: 310
New solution
function cost: 177
child voicing cost: 132
Best yet: 309
New solution
function cost: 177
child voicing cost: 130
Best yet: 307
New solution
function cost: 171
child voicing cost: 135
Best yet: 306
New solution
function cost: 171
child voicing cost: 133
Best yet: 304
New solution
function cost: 171
child voicing cost: 131
Best yet: 302
New solution
function cost: 171
child voicing cost: 128
Best yet: 299
New solution
function cost: 171
child voicing cost: 123
Best yet: 294
New solution
function cost: 144
child voicing cost: 146
Best yet: 290
New solution
function cost: 144
child voicing cost: 142
Best yet: 286
New solution
function cost: 144
child voicing cost: 140
Best yet: 284
New solution
function cost: 144
child voicing cost: 136
Best yet: 280
New solution
function cost: 144
child voicing cost: 134
Best yet: 278
New solution
function cost: 144
child voicing cost: 133
Best yet: 277
New solution
function cost: 144
child voicing cost: 131
Best yet: 275
New solution
function cost: 144
child voicing cost: 130
Best yet: 274
New solution
function cost: 144
child voicing cost: 127
Best yet: 271
New solution
function cost: 144
child voicing cost: 125
Best yet: 269
New solution
function cost: 144
child voicing cost: 121
Best yet: 265
New solution
function cost: 144
child voicing cost: 118
Best yet: 262
New solution
function cost: 144
child voicing cost: 116
Best yet: 260
New solution
function cost: 171
child voicing cost: 88
Best yet: 259
New solution
function cost: 177
child voicing cost: 78
Best yet: 255
New solution
function cost: 153
child voicing cost: 99
Best yet: 252
New solution
function cost: 153
child voicing cost: 97
Best yet: 250
New solution
function cost: 153
child voicing cost: 92
Best yet: 245
New solution
function cost: 153
child voicing cost: 90
Best yet: 243
New solution
function cost: 153
child voicing cost: 88
Best yet: 241
New solution
function cost: 153
child voicing cost: 86
Best yet: 239
New solution
function cost: 153
child voicing cost: 84
Best yet: 237

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 102334, Pruned: 123550, completed: 40, time: 2.1679999828338623, efficiency: 18.450184647932847
Results: bestval_func: 153, bestval_voices: 84
(15, 399, 399, 399)
[0 0 1 0 0 1 0 0 0 1 0 0; 0 1 0 0 1 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 1 2 0 0 0 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 0 0 2 0 0; 0 1 0 0 0 1 0 0 0 2 0 0; 0 0 0 0 1 1 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 0 0 1 1 0; 0 0 2 0 0 0 0 1 0 1 0 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 2 0 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 1 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 0 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 0 1 0 0 0 0 1 0 0; 1 1 0 0 1 0 0 0 0 1 0 0; 1 0 0 0 1 0 0 0 0 1 0 1; 1 0 1 0 0 0 0 0 0 2 0 0; 0 0 0 0 2 0 0 0 0 0 0 2]
Key Counter is [10 7 25 0 20 14 0 14 0 31 1 4]
Key Score is [118; 32; 101; 64; 62; 115; 26; 104; 46; 87; 95; 32]
Position Counter for 1 is [10 7 25 0 20 14 0 14 0 31 1 4]
Any[[1.0, 86.5, 0.0]]
[1, 86, 0]
10 A Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 117
child voicing cost: 181
Best yet: 298
New solution
function cost: 117
child voicing cost: 180
Best yet: 297
New solution
function cost: 117
child voicing cost: 175
Best yet: 292
New solution
function cost: 117
child voicing cost: 173
Best yet: 290
New solution
function cost: 117
child voicing cost: 168
Best yet: 285
New solution
function cost: 111
child voicing cost: 170
Best yet: 281
New solution
function cost: 111
child voicing cost: 168
Best yet: 279
New solution
function cost: 111
child voicing cost: 163
Best yet: 274
New solution
function cost: 111
child voicing cost: 161
Best yet: 272
New solution
function cost: 111
child voicing cost: 160
Best yet: 271
New solution
function cost: 111
child voicing cost: 159
Best yet: 270
New solution
function cost: 111
child voicing cost: 154
Best yet: 265
New solution
function cost: 117
child voicing cost: 147
Best yet: 264
New solution
function cost: 117
child voicing cost: 143
Best yet: 260
New solution
function cost: 120
child voicing cost: 138
Best yet: 258
New solution
function cost: 120
child voicing cost: 137
Best yet: 257
New solution
function cost: 120
child voicing cost: 134
Best yet: 254
New solution
function cost: 114
child voicing cost: 137
Best yet: 251
New solution
function cost: 114
child voicing cost: 132
Best yet: 246
New solution
function cost: 111
child voicing cost: 129
Best yet: 240
New solution
function cost: 111
child voicing cost: 124
Best yet: 235

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (9, "T", [(57, 1), (57, 1), (64, 5), (72, 3)])   
 (6, "D7", [(52, 1), (59, 5), (68, 3), (74, 7)])  
 (0, "Ts", [(53, 1), (57, 3), (69, 3), (72, 5)])  
 (6, "S/3", [(53, 3), (57, 5), (69, 5), (74, 1)]) 
 (21, "D", [(52, 1), (59, 5), (68, 3), (76, 1)])  
 (9, "D7", [(52, 1), (62, 7), (68, 3), (71, 5)])  
 (9, "T", [(57, 1), (60, 3), (64, 5), (69, 1)])   
 (6, "T", [(57, 1), (60, 3), (64, 5), (69, 1)])   
 (12, "D/3", [(56, 3), (59, 5), (64, 1), (71, 5)])
 (3, "S/3", [(53, 3), (57, 5), (62, 1), (74, 1)]) 
 (15, "T/5", [(52, 5), (57, 1), (64, 5), (72, 3)])
 (6, "S", [(50, 1), (57, 5), (65, 3), (74, 1)])   
 (15, "D/3", [(44, 3), (59, 5), (64, 1), (71, 5)])
 ⋮                                                
 (18, "T", [(57, 1), (57, 1), (60, 3), (64, 5)])  
 (18, "S", [(50, 1), (57, 5), (62, 1), (65, 3)])  
 (0, "Tm", [(48, 1), (60, 1), (64, 3), (67, 5)])  
 (6, "Ts", [(53, 1), (60, 5), (65, 1), (69, 3)])  
 (6, "S", [(50, 1), (62, 1), (69, 5), (77, 3)])   
 (12, "T/5", [(52, 5), (60, 3), (69, 1), (76, 5)])
 (6, "S/3", [(53, 3), (62, 1), (69, 5), (74, 1)]) 
 (0, "S", [(50, 1), (57, 5), (65, 3), (74, 1)])   
 (6, "D64", [(52, 1), (57, 4), (64, 1), (72, 6)]) 
 (15, "D", [(52, 1), (56, 3), (64, 1), (71, 5)])  
 (6, "T", [(45, 1), (57, 1), (64, 5), (72, 3)])   
 (6, "T", [(45, 1), (57, 1), (64, 5), (72, 3)])   

##: Done. Total checked: 102874, Pruned: 112344, completed: 21, time: 1.8469998836517334, efficiency: 11.369789562996917
Results: bestval_func: 111, bestval_voices: 124
(16, 399, 399, 399)
#Key: 10Scale: Minor
#Total time for optimisation of piece: 5.599999904632568
#Total cost of piece: 472
["T", "D7", "Ts", "S/3", "D", "D7", "T", "T", "D/3", "S/3", "T/5", "S", "D/3", "T", "D", "D", "D7-5", "T", "S", "D7-5", "T", "S", "Tm", "Ts", "S", "T/5", "S/3", "S", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-208.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-221.csv
[1 0 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 1 0 0 0 0 0 0 1 0 2 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 0 0 2; 1 0 0 0 2 0 0 0 0 0 0 1; 0 0 0 0 1 1 0 0 0 1 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0]
Key Counter is [20 3 21 0 16 16 5 21 0 20 4 5]
Key Score is [119; 48; 91; 82; 49; 118; 33; 108; 64; 70; 102; 33]
Position Counter for 1 is [20 3 21 0 16 16 5 21 0 20 4 5]
Any[[1.0, 76.25, 1.0]]
[1, 76, 1]
1 C Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 141
child voicing cost: 197
Best yet: 338
New solution
function cost: 141
child voicing cost: 195
Best yet: 336
New solution
function cost: 141
child voicing cost: 192
Best yet: 333
New solution
function cost: 141
child voicing cost: 187
Best yet: 328
New solution
function cost: 141
child voicing cost: 184
Best yet: 325
New solution
function cost: 141
child voicing cost: 177
Best yet: 318
New solution
function cost: 141
child voicing cost: 173
Best yet: 314
New solution
function cost: 141
child voicing cost: 170
Best yet: 311
New solution
function cost: 141
child voicing cost: 168
Best yet: 309
New solution
function cost: 141
child voicing cost: 167
Best yet: 308
New solution
function cost: 141
child voicing cost: 164
Best yet: 305
New solution
function cost: 135
child voicing cost: 167
Best yet: 302
New solution
function cost: 135
child voicing cost: 166
Best yet: 301
New solution
function cost: 135
child voicing cost: 163
Best yet: 298
New solution
function cost: 135
child voicing cost: 160
Best yet: 295
New solution
function cost: 135
child voicing cost: 159
Best yet: 294
New solution
function cost: 138
child voicing cost: 155
Best yet: 293
New solution
function cost: 138
child voicing cost: 152
Best yet: 290
New solution
function cost: 138
child voicing cost: 149
Best yet: 287
New solution
function cost: 138
child voicing cost: 148
Best yet: 286
New solution
function cost: 138
child voicing cost: 147
Best yet: 285
New solution
function cost: 138
child voicing cost: 144
Best yet: 282
New solution
function cost: 138
child voicing cost: 143
Best yet: 281
New solution
function cost: 135
child voicing cost: 145
Best yet: 280
New solution
function cost: 135
child voicing cost: 144
Best yet: 279
New solution
function cost: 135
child voicing cost: 143
Best yet: 278
New solution
function cost: 135
child voicing cost: 142
Best yet: 277
New solution
function cost: 135
child voicing cost: 139
Best yet: 274
New solution
function cost: 135
child voicing cost: 138
Best yet: 273
New solution
function cost: 138
child voicing cost: 134
Best yet: 272
New solution
function cost: 138
child voicing cost: 132
Best yet: 270
New solution
function cost: 138
child voicing cost: 129
Best yet: 267
New solution
function cost: 138
child voicing cost: 128
Best yet: 266
New solution
function cost: 135
child voicing cost: 128
Best yet: 263
New solution
function cost: 135
child voicing cost: 125
Best yet: 260
New solution
function cost: 135
child voicing cost: 124
Best yet: 259
New solution
function cost: 135
child voicing cost: 123
Best yet: 258
New solution
function cost: 135
child voicing cost: 120
Best yet: 255
New solution
function cost: 135
child voicing cost: 119
Best yet: 254
New solution
function cost: 135
child voicing cost: 116
Best yet: 251
New solution
function cost: 132
child voicing cost: 117
Best yet: 249
New solution
function cost: 132
child voicing cost: 115
Best yet: 247
New solution
function cost: 132
child voicing cost: 112
Best yet: 244
New solution
function cost: 132
child voicing cost: 111
Best yet: 243
New solution
function cost: 111
child voicing cost: 129
Best yet: 240
New solution
function cost: 111
child voicing cost: 126
Best yet: 237
New solution
function cost: 111
child voicing cost: 123
Best yet: 234
New solution
function cost: 111
child voicing cost: 121
Best yet: 232
New solution
function cost: 111
child voicing cost: 118
Best yet: 229
New solution
function cost: 111
child voicing cost: 117
Best yet: 228
New solution
function cost: 108
child voicing cost: 119
Best yet: 227
New solution
function cost: 108
child voicing cost: 118
Best yet: 226
New solution
function cost: 111
child voicing cost: 114
Best yet: 225
New solution
function cost: 111
child voicing cost: 113
Best yet: 224
New solution
function cost: 108
child voicing cost: 113
Best yet: 221
New solution
function cost: 108
child voicing cost: 112
Best yet: 220

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 285323, Pruned: 335531, completed: 56, time: 4.878000020980835, efficiency: 11.480114751770728
Results: bestval_func: 108, bestval_voices: 112
(15, 412, 412, 412)
[1 0 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 1 0 0 0 0 0 0 1 0 2 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 0 0 2; 1 0 0 0 2 0 0 0 0 0 0 1; 0 0 0 0 1 1 0 0 0 1 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0]
Key Counter is [20 3 21 0 16 16 5 21 0 20 4 5]
Key Score is [119; 48; 91; 82; 49; 118; 33; 108; 64; 70; 102; 33]
Position Counter for 1 is [20 3 21 0 16 16 5 21 0 20 4 5]
Any[[1.0, 76.25, 1.0]]
[1, 76, 1]
1 C Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 153
child voicing cost: 158
Best yet: 311
New solution
function cost: 153
child voicing cost: 153
Best yet: 306
New solution
function cost: 153
child voicing cost: 151
Best yet: 304
New solution
function cost: 153
child voicing cost: 148
Best yet: 301
New solution
function cost: 153
child voicing cost: 146
Best yet: 299
New solution
function cost: 153
child voicing cost: 144
Best yet: 297
New solution
function cost: 159
child voicing cost: 137
Best yet: 296
New solution
function cost: 159
child voicing cost: 136
Best yet: 295
New solution
function cost: 159
child voicing cost: 131
Best yet: 290
New solution
function cost: 156
child voicing cost: 133
Best yet: 289
New solution
function cost: 162
child voicing cost: 125
Best yet: 287
New solution
function cost: 150
child voicing cost: 132
Best yet: 282
New solution
function cost: 150
child voicing cost: 127
Best yet: 277
New solution
function cost: 171
child voicing cost: 104
Best yet: 275
New solution
function cost: 162
child voicing cost: 112
Best yet: 274
New solution
function cost: 162
child voicing cost: 110
Best yet: 272
New solution
function cost: 162
child voicing cost: 107
Best yet: 269
New solution
function cost: 174
child voicing cost: 91
Best yet: 265
New solution
function cost: 162
child voicing cost: 102
Best yet: 264
New solution
function cost: 162
child voicing cost: 96
Best yet: 258

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (15, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (9, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])    
 (0, "S", [(53, 1), (60, 5), (69, 3), (77, 1)])    
 (12, "Ts", [(57, 1), (60, 3), (69, 1), (76, 5)])  
 (0, "Ss", [(50, 1), (62, 1), (69, 5), (77, 3)])   
 (3, "D", [(55, 1), (62, 5), (71, 3), (79, 1)])    
 (0, "T", [(60, 1), (64, 3), (72, 1), (79, 5)])    
 (0, "S", [(53, 1), (60, 5), (69, 3), (77, 1)])    
 (0, "S", [(53, 1), (65, 1), (69, 3), (72, 5)])    
 (9, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])    
 (12, "T/5", [(55, 5), (64, 3), (67, 5), (72, 1)]) 
 (12, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])   
 (12, "D7-1", [(50, 5), (62, 5), (65, 7), (71, 3)])
 ⋮                                                 
 (12, "T", [(48, 1), (64, 3), (67, 5), (72, 1)])   
 (0, "Ts", [(45, 1), (64, 5), (69, 1), (72, 3)])   
 (6, "D7-1", [(50, 5), (65, 7), (65, 7), (71, 3)]) 
 (6, "T", [(48, 1), (64, 3), (67, 5), (72, 1)])    
 (9, "D7/7", [(41, 7), (59, 3), (67, 1), (74, 5)]) 
 (0, "T/3", [(40, 3), (60, 1), (67, 5), (79, 5)])  
 (9, "S", [(41, 1), (60, 5), (69, 3), (77, 1)])    
 (6, "D7/3", [(47, 3), (62, 5), (67, 1), (77, 7)]) 
 (18, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (18, "D7", [(55, 1), (59, 3), (65, 7), (74, 5)])  
 (18, "T", [(48, 1), (55, 5), (64, 3), (72, 1)])   
 (18, "T", [(48, 1), (55, 5), (64, 3), (72, 1)])   

##: Done. Total checked: 241925, Pruned: 272969, completed: 20, time: 4.310999870300293, efficiency: 4.639294966762978
Results: bestval_func: 162, bestval_voices: 96
(16, 412, 412, 412)
#Key: 1Scale: Major
#Total time for optimisation of piece: 10.900000095367432
#Total cost of piece: 478
["T", "T", "S", "Ts", "Ss", "D", "T", "S", "S", "D", "T/5", "D", "D7-1", "T", "D", "D", "D7/7", "T/3", "Ts", "D7/3", "T", "Ts", "D7-1", "T", "D7/7", "T/3", "S", "D7/3", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-221.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-234.csv
[0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 0 0 1 1; 1 0 0 0 0 1 1 0 0 0 1 0; 1 0 0 0 1 0 1 0 0 0 0 1; 1 0 1 0 1 0 0 1 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 0 0 1 1 0 0 0 1; 1 0 0 0 0 0 1 1 0 1 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 1 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 2 0 0 0 0 0 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0]
Key Counter is [24 1 21 0 6 18 8 12 2 4 2 19]
Key Score is [104; 55; 71; 79; 40; 87; 50; 94; 59; 61; 81; 38]
Position Counter for 1 is [24 1 21 0 6 18 8 12 2 4 2 19]
Any[[1.0, 80.75, 1.0]]
[1, 81, 1]
1 C Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 147
child voicing cost: 171
Best yet: 318
New solution
function cost: 147
child voicing cost: 168
Best yet: 315
New solution
function cost: 147
child voicing cost: 167
Best yet: 314
New solution
function cost: 147
child voicing cost: 164
Best yet: 311
New solution
function cost: 147
child voicing cost: 163
Best yet: 310
New solution
function cost: 147
child voicing cost: 160
Best yet: 307
New solution
function cost: 147
child voicing cost: 157
Best yet: 304
New solution
function cost: 147
child voicing cost: 154
Best yet: 301
New solution
function cost: 147
child voicing cost: 153
Best yet: 300
New solution
function cost: 147
child voicing cost: 150
Best yet: 297
New solution
function cost: 147
child voicing cost: 148
Best yet: 295
New solution
function cost: 147
child voicing cost: 145
Best yet: 292
New solution
function cost: 147
child voicing cost: 142
Best yet: 289
New solution
function cost: 126
child voicing cost: 162
Best yet: 288
New solution
function cost: 126
child voicing cost: 160
Best yet: 286
New solution
function cost: 126
child voicing cost: 157
Best yet: 283
New solution
function cost: 126
child voicing cost: 155
Best yet: 281
New solution
function cost: 126
child voicing cost: 154
Best yet: 280
New solution
function cost: 126
child voicing cost: 151
Best yet: 277
New solution
function cost: 126
child voicing cost: 150
Best yet: 276
New solution
function cost: 132
child voicing cost: 143
Best yet: 275
New solution
function cost: 132
child voicing cost: 142
Best yet: 274
New solution
function cost: 132
child voicing cost: 140
Best yet: 272
New solution
function cost: 132
child voicing cost: 138
Best yet: 270
New solution
function cost: 132
child voicing cost: 135
Best yet: 267
New solution
function cost: 132
child voicing cost: 134
Best yet: 266
New solution
function cost: 126
child voicing cost: 137
Best yet: 263
New solution
function cost: 126
child voicing cost: 135
Best yet: 261
New solution
function cost: 126
child voicing cost: 130
Best yet: 256
New solution
function cost: 126
child voicing cost: 127
Best yet: 253
New solution
function cost: 126
child voicing cost: 122
Best yet: 248
New solution
function cost: 126
child voicing cost: 119
Best yet: 245
New solution
function cost: 126
child voicing cost: 116
Best yet: 242
New solution
function cost: 126
child voicing cost: 113
Best yet: 239
New solution
function cost: 126
child voicing cost: 112
Best yet: 238
New solution
function cost: 129
child voicing cost: 107
Best yet: 236
New solution
function cost: 129
child voicing cost: 106
Best yet: 235
New solution
function cost: 129
child voicing cost: 105
Best yet: 234
New solution
function cost: 132
child voicing cost: 99
Best yet: 231
New solution
function cost: 132
child voicing cost: 97
Best yet: 229
New solution
function cost: 123
child voicing cost: 105
Best yet: 228
New solution
function cost: 126
child voicing cost: 101
Best yet: 227
New solution
function cost: 126
child voicing cost: 99
Best yet: 225
New solution
function cost: 126
child voicing cost: 98
Best yet: 224
New solution
function cost: 126
child voicing cost: 97
Best yet: 223
New solution
function cost: 129
child voicing cost: 91
Best yet: 220
New solution
function cost: 129
child voicing cost: 89
Best yet: 218
New solution
function cost: 117
child voicing cost: 98
Best yet: 215
New solution
function cost: 117
child voicing cost: 95
Best yet: 212
New solution
function cost: 117
child voicing cost: 94
Best yet: 211
New solution
function cost: 132
child voicing cost: 76
Best yet: 208
New solution
function cost: 120
child voicing cost: 85
Best yet: 205

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 200568, Pruned: 237133, completed: 52, time: 3.634999990463257, efficiency: 14.30536454922327
Results: bestval_func: 120, bestval_voices: 85
(15, 412, 412, 412)
[0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 0 0 1 1; 1 0 0 0 0 1 1 0 0 0 1 0; 1 0 0 0 1 0 1 0 0 0 0 1; 1 0 1 0 1 0 0 1 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 0 0 1 1 0 0 0 1; 1 0 0 0 0 0 1 1 0 1 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 1 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 2 0 0 0 0 0 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0]
Key Counter is [24 1 21 0 6 18 8 12 2 4 2 19]
Key Score is [104; 55; 71; 79; 40; 87; 50; 94; 59; 61; 81; 38]
Position Counter for 1 is [24 1 21 0 6 18 8 12 2 4 2 19]
Any[[1.0, 80.75, 1.0]]
[1, 81, 1]
1 C Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 177
child voicing cost: 188
Best yet: 365
New solution
function cost: 177
child voicing cost: 186
Best yet: 363
New solution
function cost: 177
child voicing cost: 178
Best yet: 355
New solution
function cost: 177
child voicing cost: 174
Best yet: 351
New solution
function cost: 177
child voicing cost: 171
Best yet: 348
New solution
function cost: 177
child voicing cost: 169
Best yet: 346
New solution
function cost: 177
child voicing cost: 168
Best yet: 345
New solution
function cost: 177
child voicing cost: 163
Best yet: 340
New solution
function cost: 177
child voicing cost: 159
Best yet: 336
New solution
function cost: 177
child voicing cost: 157
Best yet: 334
New solution
function cost: 177
child voicing cost: 152
Best yet: 329
New solution
function cost: 177
child voicing cost: 149
Best yet: 326
New solution
function cost: 177
child voicing cost: 147
Best yet: 324
New solution
function cost: 165
child voicing cost: 158
Best yet: 323
New solution
function cost: 165
child voicing cost: 154
Best yet: 319
New solution
function cost: 165
child voicing cost: 153
Best yet: 318
New solution
function cost: 162
child voicing cost: 155
Best yet: 317
New solution
function cost: 177
child voicing cost: 136
Best yet: 313
New solution
function cost: 177
child voicing cost: 133
Best yet: 310
New solution
function cost: 177
child voicing cost: 131
Best yet: 308
New solution
function cost: 177
child voicing cost: 130
Best yet: 307
New solution
function cost: 177
child voicing cost: 125
Best yet: 302
New solution
function cost: 177
child voicing cost: 123
Best yet: 300
New solution
function cost: 174
child voicing cost: 123
Best yet: 297
New solution
function cost: 177
child voicing cost: 119
Best yet: 296
New solution
function cost: 180
child voicing cost: 115
Best yet: 295
New solution
function cost: 180
child voicing cost: 112
Best yet: 292
New solution
function cost: 177
child voicing cost: 113
Best yet: 290
New solution
function cost: 168
child voicing cost: 121
Best yet: 289
New solution
function cost: 171
child voicing cost: 116
Best yet: 287
New solution
function cost: 171
child voicing cost: 113
Best yet: 284
New solution
function cost: 165
child voicing cost: 115
Best yet: 280
New solution
function cost: 165
child voicing cost: 113
Best yet: 278
New solution
function cost: 162
child voicing cost: 113
Best yet: 275
New solution
function cost: 165
child voicing cost: 109
Best yet: 274
New solution
function cost: 162
child voicing cost: 109
Best yet: 271
New solution
function cost: 162
child voicing cost: 106
Best yet: 268
New solution
function cost: 165
child voicing cost: 100
Best yet: 

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (3, "T", [(48, 1), (48, 1), (55, 5), (64, 3)])    
 (0, "T", [(48, 1), (48, 1), (55, 5), (64, 3)])    
 (0, "D7-1", [(50, 5), (53, 7), (59, 3), (62, 5)]) 
 (0, "D7-1", [(50, 5), (53, 7), (59, 3), (62, 5)]) 
 (3, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])    
 (9, "D7/3", [(47, 3), (53, 7), (62, 5), (67, 1)]) 
 (9, "Ts", [(45, 1), (57, 1), (64, 5), (72, 3)])   
 (15, "Ts", [(45, 1), (57, 1), (64, 5), (72, 3)])  
 (12, "D7/3", [(47, 3), (55, 1), (65, 7), (74, 5)])
 (6, "T", [(48, 1), (55, 5), (64, 3), (72, 1)])    
 (6, "S65/6", [(50, 6), (60, 5), (65, 1), (69, 3)])
 (6, "S65/6", [(50, 6), (60, 5), (65, 1), (69, 3)])
 (6, "D7-1", [(50, 5), (62, 5), (65, 7), (71, 3)]) 
 ⋮                                                 
 (3, "T", [(48, 1), (67, 5), (72, 1), (76, 3)])    
 (3, "T", [(48, 1), (67, 5), (72, 1), (76, 3)])    
 (9, "D", [(55, 1), (67, 1), (71, 3), (74, 5)])    
 (9, "S/3", [(57, 3), (60, 5), (65, 1), (72, 5)])  
 (12, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])   
 (12, "D7/7", [(53, 7), (62, 5), (67, 1), (71, 3)])
 (15, "T/3", [(52, 3), (55, 5), (67, 5), (72, 1)]) 
 (0, "D7/5", [(50, 5), (55, 1), (65, 7), (71, 3)]) 
 (3, "T", [(48, 1), (55, 5), (64, 3), (72, 1)])    
 (15, "D", [(43, 1), (59, 3), (67, 1), (74, 5)])   
 (21, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (21, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   

265
##: Done. Total checked: 230172, Pruned: 258389, completed: 38, time: 4.082000017166138, efficiency: 9.309162136256159
Results: bestval_func: 165, bestval_voices: 100
(16, 412, 412, 412)
#Key: 1Scale: Major
#Total time for optimisation of piece: 9.481000185012817
#Total cost of piece: 470
["T", "T", "D7-1", "D7-1", "T", "D7/3", "Ts", "Ts", "D7/3", "T", "S65/6", "S65/6", "D7-1", "D7/3", "T", "T", "D7-1", "T", "S", "D7-1", "T", "T", "D", "S/3", "D", "D7/7", "T/3", "D7/5", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-234.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-247.csv
[0 0 0 1 0 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 1 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 0 0 1 0 0 2 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 0 0 0 0 1 1 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 1 1 0 0 0; 0 2 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 1 0 0 0; 0 0 0 0 0 1 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 2 0 0 1 0 0 0 0 0]
Key Counter is [16 13 0 17 0 8 4 15 31 0 17 0]
Key Score is [39; 106; 32; 104; 65; 56; 90; 35; 117; 48; 73; 82]
Position Counter for 9 is [31 0 17 0 16 13 0 17 0 8 4 15]
Any[[9.0, 86.25, 1.0]]
[9, 86, 1]
9 G# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 141
child voicing cost: 153
Best yet: 294
New solution
function cost: 141
child voicing cost: 149
Best yet: 290
New solution
function cost: 141
child voicing cost: 148
Best yet: 289
New solution
function cost: 141
child voicing cost: 146
Best yet: 287
New solution
function cost: 135
child voicing cost: 151
Best yet: 286
New solution
function cost: 135
child voicing cost: 149
Best yet: 284
New solution
function cost: 138
child voicing cost: 142
Best yet: 280
New solution
function cost: 138
child voicing cost: 141
Best yet: 279
New solution
function cost: 138
child voicing cost: 139
Best yet: 277
New solution
function cost: 123
child voicing cost: 153
Best yet: 276
New solution
function cost: 123
child voicing cost: 148
Best yet: 271
New solution
function cost: 123
child voicing cost: 147
Best yet: 270
New solution
function cost: 123
child voicing cost: 146
Best yet: 269
New solution
function cost: 123
child voicing cost: 141
Best yet: 264
New solution
function cost: 123
child voicing cost: 134
Best yet: 257
New solution
function cost: 123
child voicing cost: 133
Best yet: 256
New solution
function cost: 123
child voicing cost: 128
Best yet: 251
New solution
function cost: 123
child voicing cost: 127
Best yet: 250
New solution
function cost: 123
child voicing cost: 126
Best yet: 249
New solution
function cost: 123
child voicing cost: 121
Best yet: 244

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 60660, Pruned: 71826, completed: 20, time: 1.1299998760223389, efficiency: 17.699116986101885
Results: bestval_func: 123, bestval_voices: 121
(15, 360, 360, 360)
[0 0 0 1 0 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 1 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 0 0 1 0 0 2 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 0 0 0 0 1 1 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 1 1 0 0 0; 0 2 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 1 0 0 0; 0 0 0 0 0 1 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 2 0 0 1 0 0 0 0 0]
Key Counter is [16 13 0 17 0 8 4 15 31 0 17 0]
Key Score is [39; 106; 32; 104; 65; 56; 90; 35; 117; 48; 73; 82]
Position Counter for 9 is [31 0 17 0 16 13 0 17 0 8 4 15]
Any[[9.0, 86.25, 1.0]]
[9, 86, 1]
9 G# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 171
child voicing cost: 214
Best yet: 385
New solution
function cost: 171
child voicing cost: 209
Best yet: 380
New solution
function cost: 171
child voicing cost: 204
Best yet: 375
New solution
function cost: 171
child voicing cost: 200
Best yet: 371
New solution
function cost: 171
child voicing cost: 195
Best yet: 366
New solution
function cost: 180
child voicing cost: 184
Best yet: 364
New solution
function cost: 180
child voicing cost: 183
Best yet: 363
New solution
function cost: 180
child voicing cost: 179
Best yet: 359
New solution
function cost: 171
child voicing cost: 186
Best yet: 357
New solution
function cost: 171
child voicing cost: 181
Best yet: 352
New solution
function cost: 171
child voicing cost: 180
Best yet: 351
New solution
function cost: 171
child voicing cost: 176
Best yet: 347
New solution
function cost: 171
child voicing cost: 173
Best yet: 344
New solution
function cost: 171
child voicing cost: 172
Best yet: 343
New solution
function cost: 171
child voicing cost: 168
Best yet: 339
New solution
function cost: 177
child voicing cost: 161
Best yet: 338
New solution
function cost: 171
child voicing cost: 164
Best yet: 335
New solution
function cost: 171
child voicing cost: 160
Best yet: 331
New solution
function cost: 171
child voicing cost: 156
Best yet: 327
New solution
function cost: 171
child voicing cost: 155
Best yet: 326
New solution
function cost: 171
child voicing cost: 152
Best yet: 323
New solution
function cost: 171
child voicing cost: 151
Best yet: 322
New solution
function cost: 171
child voicing cost: 147
Best yet: 318
New solution
function cost: 177
child voicing cost: 138
Best yet: 315
New solution
function cost: 177
child voicing cost: 137
Best yet: 314
New solution
function cost: 183
child voicing cost: 129
Best yet: 312
New solution
function cost: 183
child voicing cost: 126
Best yet: 309
New solution
function cost: 177
child voicing cost: 129
Best yet: 306
New solution
function cost: 177
child voicing cost: 128
Best yet: 305
New solution
function cost: 168
child voicing cost: 135
Best yet: 303
New solution
function cost: 168
child voicing cost: 134
Best yet: 302
New solution
function cost: 168
child voicing cost: 129
Best yet: 297
New solution
function cost: 168
child voicing cost: 128
Best yet: 296
New solution
function cost: 168
child voicing cost: 124
Best yet: 292
New solution
function cost: 168
child voicing cost: 122
Best yet: 290
New solution
function cost: 162
child voicing cost: 127
Best yet: 289
New solution
function cost: 162
child voicing cost: 125
Best yet: 287
New solution
function cost: 162
child voicing cost: 124
Best yet: 286
New solution
function cost: 162
child voicing cost: 123
Best yet: 285
New solution
function cost: 162
child voicing cost: 122
Best yet: 284
New solution
function cost: 162
child voicing cost: 120
Best yet: 282
New solution
function cost: 159
child voicing cost: 121
Best yet: 280
New solution
function cost: 159
child voicing cost: 117
Best yet: 276
New solution
function cost: 159
child voicing cost: 115
Best yet: 274
New solution
function cost: 159
child voicing cost: 111
Best yet: 270
New solution
function cost: 159
child voicing cost: 108
Best yet: 267
New solution
function cost: 159
child voicing cost: 106
Best yet: 265
New solution
function cost: 159
child voicing cost: 102
Best yet: 261

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])   
 (0, "S", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (3, "D", [(51, 1), (51, 1), (58, 5), (67, 3)])   
 (0, "T", [(44, 1), (51, 5), (60, 3), (68, 1)])   
 (0, "D7-1", [(46, 5), (49, 7), (61, 7), (67, 3)])
 (15, "D7", [(51, 1), (55, 3), (58, 5), (61, 7)]) 
 (6, "T", [(44, 1), (51, 5), (56, 1), (60, 3)])   
 (9, "S", [(49, 1), (49, 1), (56, 5), (65, 3)])   
 (12, "S/3", [(53, 3), (56, 5), (61, 1), (61, 1)])
 (3, "T/5", [(51, 5), (56, 1), (60, 3), (63, 5)]) 
 (9, "S", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (0, "D7-1", [(46, 5), (58, 5), (61, 7), (67, 3)])
 (12, "T", [(44, 1), (60, 3), (63, 5), (68, 1)])  
 ⋮                                                
 (0, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])   
 (0, "S/3", [(53, 3), (61, 1), (68, 5), (73, 1)]) 
 (12, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])  
 (0, "D7-1", [(58, 5), (61, 7), (67, 3), (70, 5)])
 (12, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])  
 (12, "Ts", [(53, 1), (60, 5), (68, 3), (77, 1)]) 
 (6, "D/3", [(55, 3), (58, 5), (70, 5), (75, 1)]) 
 (0, "Ts", [(53, 1), (60, 5), (68, 3), (77, 1)])  
 (18, "S", [(49, 1), (61, 1), (68, 5), (77, 3)])  
 (24, "D7", [(51, 1), (61, 7), (67, 3), (70, 5)]) 
 (15, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])  
 (15, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])  

##: Done. Total checked: 284596, Pruned: 313674, completed: 48, time: 5.113999843597412, efficiency: 9.385999504887488
Results: bestval_func: 159, bestval_voices: 102
(16, 360, 360, 360)
#Key: 9Scale: Major
#Total time for optimisation of piece: 7.398000001907349
#Total cost of piece: 505
["T", "S", "D", "T", "D7-1", "D7", "T", "S", "S/3", "T/5", "S", "D7-1", "T", "S", "D", "D", "D7-1", "T", "D/3", "S/3", "T", "S/3", "T", "D7-1", "T", "Ts", "D/3", "Ts", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-247.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-26.csv
[0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 0 0 1 0 0 1 0 0 2; 0 0 0 0 0 0 3 0 0 0 1 0; 0 0 0 0 3 0 1 0 0 0 0 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 0 0 0 0 0 2 0 0 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 0 0 1 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 2 0 0 0 2 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1]
Key Counter is [0 12 0 10 24 1 23 0 24 0 3 34]
Key Score is [59; 73; 93; 38; 127; 28; 107; 81; 50; 117; 14; 130]
Position Counter for 12 is [34 0 12 0 10 24 1 23 0 24 0 3]
Any[[12.0, 95.5, 1.0]]
[12, 96, 1]
12 B Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 183
child voicing cost: 150
Best yet: 333
New solution
function cost: 183
child voicing cost: 149
Best yet: 332
New solution
function cost: 183
child voicing cost: 144
Best yet: 327
New solution
function cost: 183
child voicing cost: 143
Best yet: 326
New solution
function cost: 183
child voicing cost: 141
Best yet: 324
New solution
function cost: 183
child voicing cost: 138
Best yet: 321
New solution
function cost: 183
child voicing cost: 136
Best yet: 319
New solution
function cost: 183
child voicing cost: 135
Best yet: 318
New solution
function cost: 183
child voicing cost: 134
Best yet: 317
New solution
function cost: 183
child voicing cost: 128
Best yet: 311
New solution
function cost: 183
child voicing cost: 124
Best yet: 307
New solution
function cost: 177
child voicing cost: 128
Best yet: 305
New solution
function cost: 180
child voicing cost: 122
Best yet: 302
New solution
function cost: 183
child voicing cost: 118
Best yet: 301
New solution
function cost: 186
child voicing cost: 114
Best yet: 300
New solution
function cost: 177
child voicing cost: 121
Best yet: 298
New solution
function cost: 177
child voicing cost: 119
Best yet: 296
New solution
function cost: 177
child voicing cost: 117
Best yet: 294
New solution
function cost: 180
child voicing cost: 111
Best yet: 291
New solution
function cost: 177
child voicing cost: 111
Best yet: 288
New solution
function cost: 180
child voicing cost: 107
Best yet: 287
New solution
function cost: 186
child voicing cost: 100
Best yet: 286
New solution
function cost: 189
child voicing cost: 94
Best yet: 283
New solution
function cost: 180
child voicing cost: 102
Best yet: 282
New solution
function cost: 180
child voicing cost: 100
Best yet: 280
New solution
function cost: 162
child voicing cost: 117
Best yet: 279
New solution
function cost: 165
child voicing cost: 111
Best yet: 276
New solution
function cost: 165
child voicing cost: 107
Best yet: 272
New solution
function cost: 171
child voicing cost: 100
Best yet: 271
New solution
function cost: 165
child voicing cost: 102
Best yet: 267
New solution
function cost: 165
child voicing cost: 100
Best yet: 265

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 172467, Pruned: 199361, completed: 31, time: 3.127000093460083, efficiency: 9.913654964332903
Results: bestval_func: 165, bestval_voices: 100
(15, 383, 383, 383)
[0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 0 0 1 0 0 1 0 0 2; 0 0 0 0 0 0 3 0 0 0 1 0; 0 0 0 0 3 0 1 0 0 0 0 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 0 0 0 0 0 2 0 0 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 0 0 1 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 2 0 0 0 2 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1]
Key Counter is [0 12 0 10 24 1 23 0 24 0 3 34]
Key Score is [59; 73; 93; 38; 127; 28; 107; 81; 50; 117; 14; 130]
Position Counter for 12 is [34 0 12 0 10 24 1 23 0 24 0 3]
Any[[12.0, 95.5, 1.0]]
[12, 96, 1]
12 B Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 120
child voicing cost: 225
Best yet: 345
New solution
function cost: 120
child voicing cost: 223
Best yet: 343
New solution
function cost: 120
child voicing cost: 215
Best yet: 335
New solution
function cost: 120
child voicing cost: 209
Best yet: 329
New solution
function cost: 117
child voicing cost: 211
Best yet: 328
New solution
function cost: 117
child voicing cost: 209
Best yet: 326
New solution
function cost: 117
child voicing cost: 208
Best yet: 325
New solution
function cost: 117
child voicing cost: 207
Best yet: 324
New solution
function cost: 120
child voicing cost: 196
Best yet: 316
New solution
function cost: 120
child voicing cost: 191
Best yet: 311
New solution
function cost: 120
child voicing cost: 189
Best yet: 309
New solution
function cost: 117
child voicing cost: 188
Best yet: 305
New solution
function cost: 117
child voicing cost: 186
Best yet: 303
New solution
function cost: 117
child voicing cost: 182
Best yet: 299
New solution
function cost: 117
child voicing cost: 180
Best yet: 297
New solution
function cost: 123
child voicing cost: 172
Best yet: 295
New solution
function cost: 117
child voicing cost: 177
Best yet: 294
New solution
function cost: 117
child voicing cost: 176
Best yet: 293
New solution
function cost: 117
child voicing cost: 175
Best yet: 292
New solution
function cost: 117
child voicing cost: 173
Best yet: 290
New solution
function cost: 117
child voicing cost: 172
Best yet: 289
New solution
function cost: 105
child voicing cost: 182
Best yet: 287
New solution
function cost: 105
child voicing cost: 180
Best yet: 285
New solution
function cost: 105
child voicing cost: 172
Best yet: 277
New solution
function cost: 105
child voicing cost: 171
Best yet: 276
New solution
function cost: 105
child voicing cost: 166
Best yet: 271
New solution
function cost: 105
child voicing cost: 163
Best yet: 268
New solution
function cost: 111
child voicing cost: 155
Best yet: 266
New solution
function cost: 111
child voicing cost: 154
Best yet: 265
New solution
function cost: 105
child voicing cost: 159
Best yet: 264
New solution
function cost: 111
child voicing cost: 151
Best yet: 262
New solution
function cost: 111
child voicing cost: 148
Best yet: 259
New solution
function cost: 114
child voicing cost: 143
Best yet: 257
New solution
function cost: 111
child voicing cost: 144
Best yet: 255
New solution
function cost: 114
child voicing cost: 140
Best yet: 254
New solution
function cost: 114
child voicing cost: 139
Best yet: 253
New solution
function cost: 114
child voicing cost: 136
Best yet: 250
New solution
function cost: 114
child voicing cost: 135
Best yet: 249
New solution
function cost: 114
child voicing cost: 132
Best yet: 246
New solution
function cost: 111
child voicing cost: 131
Best yet: 242
New solution
function cost: 111
child voicing cost: 126
Best yet: 237
New solution
function cost: 114
child voicing cost: 120
Best yet: 234
New solution
function cost: 114
child voicing cost: 117
Best yet: 231
New solution
function cost: 111
child voicing cost: 118
Best yet: 229
New solution
function cost: 111
child voicing cost: 114
Best yet: 225
New solution
function cost: 111
child voicing cost: 109
Best yet: 220
New solution
function cost: 111
child voicing cost: 106
Best yet: 217

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(59, 1), (59, 1), (66, 5), (75, 3)])    
 (0, "D", [(54, 1), (66, 1), (70, 3), (73, 5)])    
 (0, "T", [(59, 1), (66, 5), (71, 1), (75, 3)])    
 (6, "Ts", [(56, 1), (59, 3), (71, 3), (75, 5)])   
 (0, "D-5", [(54, 1), (66, 1), (70, 3), (78, 1)])  
 (24, "D7-5", [(54, 1), (66, 1), (70, 3), (76, 7)])
 (12, "T", [(59, 1), (66, 5), (71, 1), (75, 3)])   
 (9, "T", [(59, 1), (63, 3), (66, 5), (71, 1)])    
 (15, "T", [(59, 1), (63, 3), (66, 5), (71, 1)])   
 (12, "D/3", [(58, 3), (61, 5), (66, 1), (73, 5)]) 
 (9, "S/3", [(56, 3), (59, 5), (64, 1), (76, 1)])  
 (18, "D", [(54, 1), (61, 5), (70, 3), (78, 1)])   
 (15, "S/3", [(56, 3), (59, 5), (71, 5), (76, 1)]) 
 ⋮                                                 
 (9, "S", [(40, 1), (59, 5), (68, 3), (76, 1)])    
 (3, "Ts", [(44, 1), (59, 3), (68, 1), (75, 5)])   
 (3, "S", [(40, 1), (59, 5), (68, 3), (76, 1)])    
 (6, "S/3", [(44, 3), (52, 1), (59, 5), (71, 5)])  
 (3, "D7/3", [(46, 3), (52, 7), (61, 5), (66, 1)]) 
 (3, "T", [(47, 1), (51, 3), (59, 1), (66, 5)])    
 (3, "T/3", [(51, 3), (54, 5), (59, 1), (66, 5)])  
 (9, "D7/5", [(49, 5), (54, 1), (58, 3), (64, 7)]) 
 (0, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])    
 (15, "D7", [(42, 1), (52, 7), (58, 3), (61, 5)])  
 (18, "T", [(47, 1), (51, 3), (54, 5), (59, 1)])   
 (18, "T", [(47, 1), (51, 3), (54, 5), (59, 1)])   

##: Done. Total checked: 254046, Pruned: 280054, completed: 47, time: 5.002000093460083, efficiency: 9.396241327834167
Results: bestval_func: 111, bestval_voices: 106
(16, 383, 383, 383)
#Key: 12Scale: Major
#Total time for optimisation of piece: 9.82699990272522
#Total cost of piece: 482
["T", "D", "T", "Ts", "D-5", "D7-5", "T", "T", "T", "D/3", "S/3", "D", "S/3", "D", "T", "T", "D7-1", "T", "D7/3", "Ts", "S", "Ts", "S", "S/3", "D7/3", "T", "T/3", "D7/5", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-26.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-260.csv
[0 1 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 0 1 1 0 1 0 0 1 0 0 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 0 0 0 1 1 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 0 0 1 0 1 1 0 1 0; 0 0 0 1 1 0 0 1 0 0 1 0; 0 0 0 0 1 0 0 1 1 0 1 0; 1 0 0 0 1 0 0 1 1 0 0 0; 2 0 0 0 1 0 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 1 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 0 0 0 0 1 2 0 0 0 1 0; 1 0 0 0 0 2 1 0 0 0 0 0; 1 0 1 0 0 2 0 0 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 1 0 0 0 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 0 1 0 0 1 0 1 1 0 0 0; 0 0 1 0 0 2 0 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0]
Key Counter is [10 5 11 11 4 20 10 13 16 0 18 0]
Key Score is [58; 90; 43; 99; 46; 76; 80; 48; 93; 46; 83; 64]
Position Counter for 4 is [11 4 20 10 13 16 0 18 0 10 5 11]
Any[[4.0, 66.75, 1.0]]
[4, 67, 1]
4 D# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 138
child voicing cost: 151
Best yet: 289
New solution
function cost: 138
child voicing cost: 149
Best yet: 287
New solution
function cost: 138
child voicing cost: 141
Best yet: 279
New solution
function cost: 138
child voicing cost: 138
Best yet: 276
New solution
function cost: 138
child voicing cost: 136
Best yet: 274
New solution
function cost: 138
child voicing cost: 131
Best yet: 269
New solution
function cost: 138
child voicing cost: 128
Best yet: 266
New solution
function cost: 126
child voicing cost: 137
Best yet: 263
New solution
function cost: 126
child voicing cost: 134
Best yet: 260
New solution
function cost: 120
child voicing cost: 138
Best yet: 258
New solution
function cost: 117
child voicing cost: 138
Best yet: 255
New solution
function cost: 120
child voicing cost: 131
Best yet: 251
New solution
function cost: 120
child voicing cost: 129
Best yet: 249
New solution
function cost: 126
child voicing cost: 122
Best yet: 248
New solution
function cost: 126
child voicing cost: 121
Best yet: 247
New solution
function cost: 126
child voicing cost: 118
Best yet: 244
New solution
function cost: 126
child voicing cost: 115
Best yet: 241
New solution
function cost: 117
child voicing cost: 122
Best yet: 239
New solution
function cost: 117
child voicing cost: 117
Best yet: 234
New solution
function cost: 120
child voicing cost: 113
Best yet: 233
New solution
function cost: 120
child voicing cost: 111
Best yet: 231
New solution
function cost: 126
child voicing cost: 103
Best yet: 229
New solution
function cost: 126
child voicing cost: 100
Best yet: 226
New solution
function cost: 126
child voicing cost: 97
Best yet: 223
New solution
function cost: 120
child voicing cost: 101
Best yet: 221
New solution
function cost: 120
child voicing cost: 99
Best yet: 219
New solution
function cost: 126
child voicing cost: 91
Best yet: 217
New solution
function cost: 126
child voicing cost: 88
Best yet: 214
New solution
function cost: 126
child voicing cost: 85
Best yet: 211

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 201367, Pruned: 259382, completed: 29, time: 3.8359999656677246, efficiency: 7.559958357547073
Results: bestval_func: 126, bestval_voices: 85
(15, 381, 381, 381)
[0 1 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 0 1 1 0 1 0 0 1 0 0 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 0 0 0 1 1 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 0 0 1 0 1 1 0 1 0; 0 0 0 1 1 0 0 1 0 0 1 0; 0 0 0 0 1 0 0 1 1 0 1 0; 1 0 0 0 1 0 0 1 1 0 0 0; 2 0 0 0 1 0 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 1 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 0 0 0 0 1 2 0 0 0 1 0; 1 0 0 0 0 2 1 0 0 0 0 0; 1 0 1 0 0 2 0 0 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 1 0 0 0 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 0 1 0 0 1 0 1 1 0 0 0; 0 0 1 0 0 2 0 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0]
Key Counter is [10 5 11 11 4 20 10 13 16 0 18 0]
Key Score is [58; 90; 43; 99; 46; 76; 80; 48; 93; 46; 83; 64]
Position Counter for 4 is [11 4 20 10 13 16 0 18 0 10 5 11]
Any[[4.0, 66.75, 1.0]]
[4, 67, 1]
4 D# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 210
child voicing cost: 185
Best yet: 395
New solution
function cost: 210
child voicing cost: 184
Best yet: 394
New solution
function cost: 210
child voicing cost: 179
Best yet: 389
New solution
function cost: 216
child voicing cost: 172
Best yet: 388
New solution
function cost: 210
child voicing cost: 176
Best yet: 386
New solution
function cost: 216
child voicing cost: 168
Best yet: 384
New solution
function cost: 210
child voicing cost: 168
Best yet: 378
New solution
function cost: 210
child voicing cost: 166
Best yet: 376
New solution
function cost: 216
child voicing cost: 159
Best yet: 375
New solution
function cost: 210
child voicing cost: 158
Best yet: 368
New solution
function cost: 204
child voicing cost: 162
Best yet: 366
New solution
function cost: 204
child voicing cost: 160
Best yet: 364
New solution
function cost: 198
child voicing cost: 158
Best yet: 356
New solution
function cost: 204
child voicing cost: 150
Best yet: 354
New solution
function cost: 204
child voicing cost: 146
Best yet: 350
New solution
function cost: 189
child voicing cost: 150
Best yet: 339
New solution
function cost: 195
child voicing cost: 140
Best yet: 335
New solution
function cost: 189
child voicing cost: 145
Best yet: 334
New solution
function cost: 186
child voicing cost: 145
Best yet: 331
New solution
function cost: 186
child voicing cost: 139
Best yet: 325
New solution
function cost: 186
child voicing cost: 135
Best yet: 321
New solution
function cost: 186
child voicing cost: 134
Best yet: 320
New solution
function cost: 186
child voicing cost: 131
Best yet: 317
New solution
function cost: 186
child voicing cost: 130
Best yet: 316
New solution
function cost: 174
child voicing cost: 141
Best yet: 315
New solution
function cost: 183
child voicing cost: 131
Best yet: 314
New solution
function cost: 183
child voicing cost: 130
Best yet: 313
New solution
function cost: 195
child voicing cost: 116
Best yet: 311
New solution
function cost: 198
child voicing cost: 109
Best yet: 307
New solution
function cost: 198
child voicing cost: 107
Best yet: 305
New solution
function cost: 198
child voicing cost: 106
Best yet: 304

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (6, "T", [(51, 1), (51, 1), (58, 5), (67, 3)])    
 (0, "D", [(46, 1), (58, 1), (62, 3), (65, 5)])    
 (0, "D7/3", [(50, 3), (58, 1), (65, 5), (68, 7)]) 
 (0, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])    
 (3, "S65/6", [(53, 6), (56, 1), (60, 3), (63, 5)])
 (6, "D7-1", [(53, 5), (56, 7), (62, 3), (65, 5)]) 
 (9, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])    
 (15, "S", [(44, 1), (56, 1), (63, 5), (72, 3)])   
 (6, "D", [(46, 1), (53, 5), (62, 3), (70, 1)])    
 (15, "S/3", [(48, 3), (51, 5), (63, 5), (68, 1)]) 
 (12, "D7/3", [(50, 3), (58, 1), (65, 5), (68, 7)])
 (15, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])   
 (9, "D7-1", [(53, 5), (56, 7), (62, 3), (65, 5)]) 
 ⋮                                                 
 (15, "D", [(46, 1), (62, 3), (65, 5), (70, 1)])   
 (15, "D/3", [(50, 3), (58, 1), (65, 5), (70, 1)]) 
 (21, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])   
 (12, "D7-1", [(53, 5), (56, 7), (62, 3), (65, 5)])
 (9, "Ts", [(48, 1), (55, 5), (63, 3), (72, 1)])   
 (9, "D", [(46, 1), (58, 1), (65, 5), (74, 3)])    
 (6, "D7/7", [(44, 7), (58, 1), (65, 5), (74, 3)]) 
 (6, "T/3", [(43, 3), (58, 5), (70, 5), (75, 1)])  
 (3, "S", [(44, 1), (60, 3), (68, 1), (75, 5)])    
 (15, "D7", [(46, 1), (65, 5), (68, 7), (74, 3)])  
 (15, "T", [(51, 1), (58, 5), (67, 3), (75, 1)])   
 (15, "T", [(51, 1), (58, 5), (67, 3), (75, 1)])   

##: Done. Total checked: 207047, Pruned: 234273, completed: 31, time: 3.1600000858306885, efficiency: 9.810126315819653
Results: bestval_func: 198, bestval_voices: 106
(16, 381, 381, 381)
#Key: 4Scale: Major
#Total time for optimisation of piece: 8.565000057220459
#Total cost of piece: 515
["T", "D", "D7/3", "T", "S65/6", "D7-1", "T", "S", "D", "S/3", "D7/3", "T", "D7-1", "D7/3", "T", "T", "S", "S/3", "T/5", "S65", "D", "D/3", "T", "D7-1", "Ts", "D", "D7/7", "T/3", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-260.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-273.csv
[1 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 1 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 1 0 1 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 0 0 3 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 0 2 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 3 0 0 0 0 0 0 1 0; 0 1 0 0 1 1 0 0 1 0 0 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 0 0 2 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 3 0 0 0 1 0 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0]
Key Counter is [17 14 0 32 1 14 0 6 23 0 17 0]
Key Score is [38; 117; 21; 109; 70; 55; 100; 24; 123; 38; 86; 87]
Position Counter for 9 is [23 0 17 0 17 14 0 32 1 14 0 6]
Any[[9.0, 87.0, 1.0]]
[9, 87, 1]
9 G# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 111
child voicing cost: 178
Best yet: 289
New solution
function cost: 111
child voicing cost: 170
Best yet: 281
New solution
function cost: 111
child voicing cost: 168
Best yet: 279
New solution
function cost: 111
child voicing cost: 164
Best yet: 275
New solution
function cost: 111
child voicing cost: 160
Best yet: 271
New solution
function cost: 111
child voicing cost: 155
Best yet: 266
New solution
function cost: 111
child voicing cost: 154
Best yet: 265
New solution
function cost: 114
child voicing cost: 147
Best yet: 261
New solution
function cost: 114
child voicing cost: 143
Best yet: 257
New solution
function cost: 114
child voicing cost: 141
Best yet: 255
New solution
function cost: 114
child voicing cost: 139
Best yet: 253
New solution
function cost: 114
child voicing cost: 135
Best yet: 249
New solution
function cost: 114
child voicing cost: 134
Best yet: 248
New solution
function cost: 114
child voicing cost: 131
Best yet: 245
New solution
function cost: 114
child voicing cost: 129
Best yet: 243
New solution
function cost: 114
child voicing cost: 125
Best yet: 239
New solution
function cost: 114
child voicing cost: 123
Best yet: 237
New solution
function cost: 114
child voicing cost: 122
Best yet: 236
New solution
function cost: 114
child voicing cost: 118
Best yet: 232
New solution
function cost: 114
child voicing cost: 116
Best yet: 230
New solution
function cost: 114
child voicing cost: 115
Best yet: 229
New solution
function cost: 114
child voicing cost: 110
Best yet: 224
New solution
function cost: 114
child voicing cost: 106
Best yet: 220
New solution
function cost: 114
child voicing cost: 104
Best yet: 218

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 90740, Pruned: 103237, completed: 24, time: 1.4660000801086426, efficiency: 16.371076868032233
Results: bestval_func: 114, bestval_voices: 104
(15, 360, 360, 360)
[1 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 1 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 1 0 1 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 0 0 3 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 0 2 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 3 0 0 0 0 0 0 1 0; 0 1 0 0 1 1 0 0 1 0 0 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 0 0 2 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 3 0 0 0 1 0 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0]
Key Counter is [17 14 0 32 1 14 0 6 23 0 17 0]
Key Score is [38; 117; 21; 109; 70; 55; 100; 24; 123; 38; 86; 87]
Position Counter for 9 is [23 0 17 0 17 14 0 32 1 14 0 6]
Any[[9.0, 87.0, 1.0]]
[9, 87, 1]
9 G# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 147
child voicing cost: 217
Best yet: 364
New solution
function cost: 147
child voicing cost: 209
Best yet: 356
New solution
function cost: 147
child voicing cost: 207
Best yet: 354
New solution
function cost: 147
child voicing cost: 203
Best yet: 350
New solution
function cost: 147
child voicing cost: 201
Best yet: 348
New solution
function cost: 147
child voicing cost: 200
Best yet: 347
New solution
function cost: 147
child voicing cost: 198
Best yet: 345
New solution
function cost: 147
child voicing cost: 197
Best yet: 344
New solution
function cost: 147
child voicing cost: 195
Best yet: 342
New solution
function cost: 147
child voicing cost: 194
Best yet: 341
New solution
function cost: 153
child voicing cost: 183
Best yet: 336
New solution
function cost: 144
child voicing cost: 184
Best yet: 328
New solution
function cost: 144
child voicing cost: 183
Best yet: 327
New solution
function cost: 144
child voicing cost: 178
Best yet: 322
New solution
function cost: 144
child voicing cost: 177
Best yet: 321
New solution
function cost: 144
child voicing cost: 175
Best yet: 319
New solution
function cost: 144
child voicing cost: 172
Best yet: 316
New solution
function cost: 144
child voicing cost: 170
Best yet: 314
New solution
function cost: 144
child voicing cost: 165
Best yet: 309
New solution
function cost: 144
child voicing cost: 160
Best yet: 304
New solution
function cost: 138
child voicing cost: 164
Best yet: 302
New solution
function cost: 144
child voicing cost: 156
Best yet: 300
New solution
function cost: 144
child voicing cost: 151
Best yet: 295
New solution
function cost: 141
child voicing cost: 153
Best yet: 294
New solution
function cost: 141
child voicing cost: 149
Best yet: 290
New solution
function cost: 144
child voicing cost: 141
Best yet: 285
New solution
function cost: 141
child voicing cost: 142
Best yet: 283

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])   
 (0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])   
 (0, "S", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (0, "D", [(51, 1), (55, 3), (58, 5), (63, 1)])   
 (0, "T", [(44, 1), (56, 1), (60, 3), (63, 5)])   
 (9, "D7-1", [(46, 5), (55, 3), (58, 5), (61, 7)])
 (21, "D7", [(51, 1), (55, 3), (58, 5), (61, 7)]) 
 (15, "Ts", [(53, 1), (56, 3), (56, 3), (60, 5)]) 
 (6, "S/3", [(53, 3), (56, 5), (61, 1), (61, 1)]) 
 (3, "Ts", [(53, 1), (56, 3), (60, 5), (65, 1)])  
 (12, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])  
 (6, "T/3", [(48, 3), (56, 1), (63, 5), (68, 1)]) 
 (9, "S", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 ⋮                                                
 (9, "S/3", [(53, 3), (56, 5), (61, 1), (61, 1)]) 
 (12, "D", [(51, 1), (51, 1), (58, 5), (67, 3)])  
 (6, "D7/7", [(49, 7), (58, 5), (63, 1), (67, 3)])
 (6, "T/3", [(48, 3), (56, 1), (63, 5), (68, 1)]) 
 (3, "Ts", [(41, 1), (60, 5), (65, 1), (68, 3)])  
 (0, "D/3", [(43, 3), (58, 5), (63, 1), (70, 5)]) 
 (12, "T", [(44, 1), (56, 1), (63, 5), (72, 3)])  
 (15, "S65", [(49, 1), (56, 5), (65, 3), (70, 6)])
 (12, "D64", [(51, 1), (56, 4), (63, 1), (72, 6)])
 (15, "D", [(51, 1), (55, 3), (63, 1), (70, 5)])  
 (15, "T", [(44, 1), (56, 1), (63, 5), (72, 3)])  
 (15, "T", [(44, 1), (56, 1), (63, 5), (72, 3)])  

##: Done. Total checked: 93066, Pruned: 107850, completed: 27, time: 1.5479998588562012, efficiency: 17.441862055433248
Results: bestval_func: 141, bestval_voices: 142
(16, 360, 360, 360)
#Key: 9Scale: Major
#Total time for optimisation of piece: 4.145999908447266
#Total cost of piece: 501
["T", "T", "S", "D", "T", "D7-1", "D7", "Ts", "S/3", "Ts", "D", "T/3", "S", "D", "T", "T", "D", "T/3", "S65/6", "D", "S/3", "D", "D7/7", "T/3", "Ts", "D/3", "T", "S65", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-273.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-286.csv
[0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 1 0 0 0 0 0 0 0; 1 0 0 1 1 0 0 0 0 0 0 1; 0 0 0 1 2 0 0 1 0 0 0 0; 0 1 0 1 0 0 1 0 0 1 0 0; 0 1 0 1 0 0 1 1 0 0 0 0; 0 0 0 2 0 1 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 2 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 1 0 1 1 1 0 0 0 0 0 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 0 1 1; 0 0 1 1 0 0 0 0 0 1 0 1; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 1 0 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 1 0 0 1 1 0 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 0 0 1; 1 0 0 0 0 1 1 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 1 1 0 1 1 0 0 0 0 0]
Key Counter is [4 9 3 22 24 7 11 5 11 5 8 10]
Key Score is [58; 72; 67; 60; 92; 56; 78; 62; 66; 73; 54; 95]
Position Counter for 12 is [10 4 9 3 22 24 7 11 5 11 5 8]
Any[[12.0, 63.5, 1.0]]
[12, 64, 1]
12 B Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 154
Best yet: 328
New solution
function cost: 174
child voicing cost: 149
Best yet: 323
New solution
function cost: 174
child voicing cost: 147
Best yet: 321
New solution
function cost: 168
child voicing cost: 147
Best yet: 315
New solution
function cost: 168
child voicing cost: 146
Best yet: 314
New solution
function cost: 168
child voicing cost: 141
Best yet: 309
New solution
function cost: 168
child voicing cost: 137
Best yet: 305
New solution
function cost: 168
child voicing cost: 136
Best yet: 304
New solution
function cost: 168
child voicing cost: 135
Best yet: 303
New solution
function cost: 168
child voicing cost: 133
Best yet: 301
New solution
function cost: 168
child voicing cost: 131
Best yet: 299
New solution
function cost: 168
child voicing cost: 130
Best yet: 298
New solution
function cost: 168
child voicing cost: 129
Best yet: 297
New solution
function cost: 168
child voicing cost: 127
Best yet: 295
New solution
function cost: 168
child voicing cost: 126
Best yet: 294
New solution
function cost: 168
child voicing cost: 122
Best yet: 290
New solution
function cost: 168
child voicing cost: 120
Best yet: 288
New solution
function cost: 168
child voicing cost: 119
Best yet: 287
New solution
function cost: 168
child voicing cost: 118
Best yet: 286
New solution
function cost: 168
child voicing cost: 115
Best yet: 283
New solution
function cost: 168
child voicing cost: 112
Best yet: 280
New solution
function cost: 177
child voicing cost: 100
Best yet: 277
New solution
function cost: 168
child voicing cost: 106
Best yet: 274
New solution
function cost: 168
child voicing cost: 105
Best yet: 273
New solution
function cost: 168
child voicing cost: 100
Best yet: 268
New solution
function cost: 168
child voicing cost: 98
Best yet: 266

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 89786, Pruned: 104422, completed: 26, time: 1.4709999561309814, efficiency: 17.675051512839676
Results: bestval_func: 168, bestval_voices: 98
(15, 383, 383, 383)
[0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 1 0 0 0 0 0 0 0; 1 0 0 1 1 0 0 0 0 0 0 1; 0 0 0 1 2 0 0 1 0 0 0 0; 0 1 0 1 0 0 1 0 0 1 0 0; 0 1 0 1 0 0 1 1 0 0 0 0; 0 0 0 2 0 1 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 2 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 1 0 1 1 1 0 0 0 0 0 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 0 1 1; 0 0 1 1 0 0 0 0 0 1 0 1; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 1 0 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 1 0 0 1 1 0 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 0 0 1; 1 0 0 0 0 1 1 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 1 1 0 1 1 0 0 0 0 0]
Key Counter is [4 9 3 22 24 7 11 5 11 5 8 10]
Key Score is [58; 72; 67; 60; 92; 56; 78; 62; 66; 73; 54; 95]
Position Counter for 12 is [10 4 9 3 22 24 7 11 5 11 5 8]
Any[[12.0, 63.5, 1.0]]
[12, 64, 1]
12 B Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 216
child voicing cost: 209
Best yet: 425
New solution
function cost: 216
child voicing cost: 204
Best yet: 420
New solution
function cost: 216
child voicing cost: 201
Best yet: 417
New solution
function cost: 216
child voicing cost: 199
Best yet: 415
New solution
function cost: 216
child voicing cost: 198
Best yet: 414
New solution
function cost: 216
child voicing cost: 193
Best yet: 409
New solution
function cost: 216
child voicing cost: 192
Best yet: 408
New solution
function cost: 216
child voicing cost: 187
Best yet: 403
New solution
function cost: 216
child voicing cost: 186
Best yet: 402
New solution
function cost: 216
child voicing cost: 180
Best yet: 396
New solution
function cost: 213
child voicing cost: 180
Best yet: 393
New solution
function cost: 213
child voicing cost: 175
Best yet: 388
New solution
function cost: 216
child voicing cost: 171
Best yet: 387
New solution
function cost: 216
child voicing cost: 170
Best yet: 386
New solution
function cost: 216
child voicing cost: 168
Best yet: 384
New solution
function cost: 213
child voicing cost: 169
Best yet: 382
New solution
function cost: 216
child voicing cost: 164
Best yet: 380
New solution
function cost: 216
child voicing cost: 162
Best yet: 378
New solution
function cost: 213
child voicing cost: 164
Best yet: 377
New solution
function cost: 204
child voicing cost: 172
Best yet: 376
New solution
function cost: 204
child voicing cost: 169
Best yet: 373
New solution
function cost: 204
child voicing cost: 168
Best yet: 372
New solution
function cost: 204
child voicing cost: 163
Best yet: 367
New solution
function cost: 210
child voicing cost: 156
Best yet: 366
New solution
function cost: 204
child voicing cost: 159
Best yet: 363
New solution
function cost: 204
child voicing cost: 155
Best yet: 359
New solution
function cost: 204
child voicing cost: 154
Best yet: 358
New solution
function cost: 204
child voicing cost: 148
Best yet: 352
New solution
function cost: 204
child voicing cost: 144
Best yet: 348
New solution
function cost: 204
child voicing cost: 140
Best yet: 344
New solution
function cost: 204
child voicing cost: 138
Best yet: 342
New solution
function cost: 204
child voicing cost: 135
Best yet: 339
New solution
function cost: 204
child voicing cost: 131
Best yet: 335
New solution
function cost: 204
child voicing cost: 130
Best yet: 334
New solution
function cost: 207
child voicing cost: 121
Best yet: 328

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])   
 (0, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])   
 (0, "D7", [(54, 1), (58, 3), (61, 5), (64, 7)])  
 (6, "Ts", [(56, 1), (59, 3), (59, 3), (63, 5)])  
 (0, "D7", [(54, 1), (61, 5), (64, 7), (70, 3)])  
 (15, "Ts", [(56, 1), (56, 1), (63, 5), (71, 3)]) 
 (33, "D", [(54, 1), (61, 5), (66, 1), (70, 3)])  
 (6, "D7/7", [(52, 7), (61, 5), (66, 1), (70, 3)])
 (9, "T/3", [(51, 3), (59, 1), (66, 5), (71, 1)]) 
 (24, "D", [(54, 1), (61, 5), (66, 1), (70, 3)])  
 (12, "S/3", [(56, 3), (59, 5), (71, 5), (76, 1)])
 (12, "T/5", [(54, 5), (63, 3), (71, 1), (78, 5)])
 (18, "S", [(52, 1), (64, 1), (71, 5), (80, 3)])  
 ⋮                                                
 (15, "D7", [(54, 1), (64, 7), (70, 3), (73, 5)]) 
 (21, "T", [(47, 1), (63, 3), (71, 1), (78, 5)])  
 (9, "D7-5", [(54, 1), (66, 1), (70, 3), (76, 7)])
 (21, "T", [(59, 1), (66, 5), (71, 1), (75, 3)])  
 (9, "S", [(52, 1), (68, 3), (71, 5), (76, 1)])   
 (18, "T/3", [(51, 3), (66, 5), (71, 1), (78, 5)])
 (15, "Ts", [(44, 1), (63, 5), (71, 3), (80, 1)]) 
 (12, "Tm", [(51, 1), (66, 3), (70, 5), (78, 3)]) 
 (6, "S", [(52, 1), (64, 1), (68, 3), (71, 5)])   
 (15, "D", [(54, 1), (61, 5), (66, 1), (70, 3)])  
 (9, "T", [(59, 1), (63, 3), (66, 5), (71, 1)])   
 (9, "T", [(59, 1), (63, 3), (66, 5), (71, 1)])   

##: Done. Total checked: 96032, Pruned: 107502, completed: 35, time: 1.693000078201294, efficiency: 20.673359942892205
Results: bestval_func: 207, bestval_voices: 121
(16, 383, 383, 383)
#Key: 12Scale: Major
#Total time for optimisation of piece: 4.483999967575073
#Total cost of piece: 594
["T", "S", "D7", "Ts", "D7", "Ts", "D", "D7/7", "T/3", "D", "S/3", "T/5", "S", "D", "T", "T", "D7/7", "T/3", "S65/6", "S65/6", "D7", "T", "D7-5", "T", "S", "T/3", "Ts", "Tm", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-286.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-299.csv
[0 0 0 1 0 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 1 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 0 0 1 0 0 2 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 0 0 0 0 1 1 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 1 1 0 0 0; 0 2 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 1 0 0 0; 0 0 0 0 0 1 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 2 0 0 1 0 0 0 0 0]
Key Counter is [16 13 0 17 0 8 4 15 31 0 17 0]
Key Score is [39; 106; 32; 104; 65; 56; 90; 35; 117; 48; 73; 82]
Position Counter for 9 is [31 0 17 0 16 13 0 17 0 8 4 15]
Any[[9.0, 86.25, 1.0]]
[9, 86, 1]
9 G# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 141
child voicing cost: 153
Best yet: 294
New solution
function cost: 141
child voicing cost: 149
Best yet: 290
New solution
function cost: 141
child voicing cost: 148
Best yet: 289
New solution
function cost: 141
child voicing cost: 146
Best yet: 287
New solution
function cost: 135
child voicing cost: 151
Best yet: 286
New solution
function cost: 135
child voicing cost: 149
Best yet: 284
New solution
function cost: 138
child voicing cost: 142
Best yet: 280
New solution
function cost: 138
child voicing cost: 141
Best yet: 279
New solution
function cost: 138
child voicing cost: 139
Best yet: 277
New solution
function cost: 123
child voicing cost: 153
Best yet: 276
New solution
function cost: 123
child voicing cost: 148
Best yet: 271
New solution
function cost: 123
child voicing cost: 147
Best yet: 270
New solution
function cost: 123
child voicing cost: 146
Best yet: 269
New solution
function cost: 123
child voicing cost: 141
Best yet: 264
New solution
function cost: 123
child voicing cost: 134
Best yet: 257
New solution
function cost: 123
child voicing cost: 133
Best yet: 256
New solution
function cost: 123
child voicing cost: 128
Best yet: 251
New solution
function cost: 123
child voicing cost: 127
Best yet: 250
New solution
function cost: 123
child voicing cost: 126
Best yet: 249
New solution
function cost: 123
child voicing cost: 121
Best yet: 244

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 60660, Pruned: 71826, completed: 20, time: 1.3289999961853027, efficiency: 15.048908997296488
Results: bestval_func: 123, bestval_voices: 121
(15, 360, 360, 360)
[0 0 0 1 0 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 1 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 0 0 1 0 0 2 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 0 0 0 0 1 1 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 1 1 0 0 0; 0 2 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 1 0 0 0; 0 0 0 0 0 1 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 2 0 0 1 0 0 0 0 0]
Key Counter is [16 13 0 17 0 8 4 15 31 0 17 0]
Key Score is [39; 106; 32; 104; 65; 56; 90; 35; 117; 48; 73; 82]
Position Counter for 9 is [31 0 17 0 16 13 0 17 0 8 4 15]
Any[[9.0, 86.25, 1.0]]
[9, 86, 1]
9 G# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 171
child voicing cost: 214
Best yet: 385
New solution
function cost: 171
child voicing cost: 209
Best yet: 380
New solution
function cost: 171
child voicing cost: 204
Best yet: 375
New solution
function cost: 171
child voicing cost: 200
Best yet: 371
New solution
function cost: 171
child voicing cost: 195
Best yet: 366
New solution
function cost: 180
child voicing cost: 184
Best yet: 364
New solution
function cost: 180
child voicing cost: 183
Best yet: 363
New solution
function cost: 180
child voicing cost: 179
Best yet: 359
New solution
function cost: 171
child voicing cost: 186
Best yet: 357
New solution
function cost: 171
child voicing cost: 181
Best yet: 352
New solution
function cost: 171
child voicing cost: 180
Best yet: 351
New solution
function cost: 171
child voicing cost: 176
Best yet: 347
New solution
function cost: 171
child voicing cost: 173
Best yet: 344
New solution
function cost: 171
child voicing cost: 172
Best yet: 343
New solution
function cost: 171
child voicing cost: 168
Best yet: 339
New solution
function cost: 177
child voicing cost: 161
Best yet: 338
New solution
function cost: 171
child voicing cost: 164
Best yet: 335
New solution
function cost: 171
child voicing cost: 160
Best yet: 331
New solution
function cost: 171
child voicing cost: 156
Best yet: 327
New solution
function cost: 171
child voicing cost: 155
Best yet: 326
New solution
function cost: 171
child voicing cost: 152
Best yet: 323
New solution
function cost: 171
child voicing cost: 151
Best yet: 322
New solution
function cost: 171
child voicing cost: 147
Best yet: 318
New solution
function cost: 177
child voicing cost: 138
Best yet: 315
New solution
function cost: 177
child voicing cost: 137
Best yet: 314
New solution
function cost: 183
child voicing cost: 129
Best yet: 312
New solution
function cost: 183
child voicing cost: 126
Best yet: 309
New solution
function cost: 177
child voicing cost: 129
Best yet: 306
New solution
function cost: 177
child voicing cost: 128
Best yet: 305
New solution
function cost: 168
child voicing cost: 135
Best yet: 303
New solution
function cost: 168
child voicing cost: 134
Best yet: 302
New solution
function cost: 168
child voicing cost: 129
Best yet: 297
New solution
function cost: 168
child voicing cost: 128
Best yet: 296
New solution
function cost: 168
child voicing cost: 124
Best yet: 292
New solution
function cost: 168
child voicing cost: 122
Best yet: 290
New solution
function cost: 162
child voicing cost: 127
Best yet: 289
New solution
function cost: 162
child voicing cost: 125
Best yet: 287
New solution
function cost: 162
child voicing cost: 124
Best yet: 286
New solution
function cost: 162
child voicing cost: 123
Best yet: 285
New solution
function cost: 162
child voicing cost: 122
Best yet: 284
New solution
function cost: 162
child voicing cost: 120
Best yet: 282
New solution
function cost: 159
child voicing cost: 121
Best yet: 280
New solution
function cost: 159
child voicing cost: 117
Best yet: 276
New solution
function cost: 159
child voicing cost: 115
Best yet: 274
New solution
function cost: 159
child voicing cost: 111
Best yet: 270
New solution
function cost: 159
child voicing cost: 108
Best yet: 267
New solution
function cost: 159
child voicing cost: 106
Best yet: 265
New solution
function cost: 159
child voicing cost: 102
Best yet: 261

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])   
 (0, "S", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (3, "D", [(51, 1), (51, 1), (58, 5), (67, 3)])   
 (0, "T", [(44, 1), (51, 5), (60, 3), (68, 1)])   
 (0, "D7-1", [(46, 5), (49, 7), (61, 7), (67, 3)])
 (15, "D7", [(51, 1), (55, 3), (58, 5), (61, 7)]) 
 (6, "T", [(44, 1), (51, 5), (56, 1), (60, 3)])   
 (9, "S", [(49, 1), (49, 1), (56, 5), (65, 3)])   
 (12, "S/3", [(53, 3), (56, 5), (61, 1), (61, 1)])
 (3, "T/5", [(51, 5), (56, 1), (60, 3), (63, 5)]) 
 (9, "S", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (0, "D7-1", [(46, 5), (58, 5), (61, 7), (67, 3)])
 (12, "T", [(44, 1), (60, 3), (63, 5), (68, 1)])  
 ⋮                                                
 (0, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])   
 (0, "S/3", [(53, 3), (61, 1), (68, 5), (73, 1)]) 
 (12, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])  
 (0, "D7-1", [(58, 5), (61, 7), (67, 3), (70, 5)])
 (12, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])  
 (12, "Ts", [(53, 1), (60, 5), (68, 3), (77, 1)]) 
 (6, "D/3", [(55, 3), (58, 5), (70, 5), (75, 1)]) 
 (0, "Ts", [(53, 1), (60, 5), (68, 3), (77, 1)])  
 (18, "S", [(49, 1), (61, 1), (68, 5), (77, 3)])  
 (24, "D7", [(51, 1), (61, 7), (67, 3), (70, 5)]) 
 (15, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])  
 (15, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])  

##: Done. Total checked: 284596, Pruned: 313674, completed: 48, time: 5.203000068664551, efficiency: 9.225446735832952
Results: bestval_func: 159, bestval_voices: 102
(16, 360, 360, 360)
#Key: 9Scale: Major
#Total time for optimisation of piece: 7.788000106811523
#Total cost of piece: 505
["T", "S", "D", "T", "D7-1", "D7", "T", "S", "S/3", "T/5", "S", "D7-1", "T", "S", "D", "D", "D7-1", "T", "D/3", "S/3", "T", "S/3", "T", "D7-1", "T", "Ts", "D/3", "Ts", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-299.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-312.csv
[0 1 0 0 0 0 1 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 2 0 0 0 0 1 0 0 1 0 0; 0 1 0 0 0 0 2 0 0 1 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 1 1 0 0; 0 0 1 0 1 0 1 0 1 0 0 0; 0 1 1 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 1 0 0; 0 1 0 0 0 0 0 0 1 2 0 0; 0 0 0 0 0 0 0 0 2 1 0 1; 0 2 0 0 0 0 1 0 1 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 1 0 0; 0 0 0 0 2 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 2 0 0 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 1 1 0 0 0 1 0 0 1 0 0; 0 1 1 0 0 0 1 0 1 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 1 0 0 0 2 0 1 0 0 0]
Key Counter is [0 28 9 1 13 2 31 0 18 14 0 9]
Key Score is [47; 80; 104; 30; 114; 38; 89; 76; 49; 122; 26; 100]
Position Counter for 10 is [14 0 9 0 28 9 1 13 2 31 0 18]
Any[[10.0, 83.0, 0.0]]
[10, 83, 0]
7 F# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 90
child voicing cost: 196
Best yet: 286
New solution
function cost: 90
child voicing cost: 195
Best yet: 285
New solution
function cost: 90
child voicing cost: 190
Best yet: 280
New solution
function cost: 90
child voicing cost: 187
Best yet: 277
New solution
function cost: 90
child voicing cost: 184
Best yet: 274
New solution
function cost: 90
child voicing cost: 180
Best yet: 270
New solution
function cost: 90
child voicing cost: 179
Best yet: 269
New solution
function cost: 90
child voicing cost: 178
Best yet: 268
New solution
function cost: 90
child voicing cost: 177
Best yet: 267
New solution
function cost: 90
child voicing cost: 172
Best yet: 262
New solution
function cost: 90
child voicing cost: 168
Best yet: 258
New solution
function cost: 90
child voicing cost: 167
Best yet: 257
New solution
function cost: 90
child voicing cost: 162
Best yet: 252
New solution
function cost: 105
child voicing cost: 145
Best yet: 250
New solution
function cost: 105
child voicing cost: 142
Best yet: 247
New solution
function cost: 105
child voicing cost: 141
Best yet: 246
New solution
function cost: 105
child voicing cost: 138
Best yet: 243
New solution
function cost: 90
child voicing cost: 150
Best yet: 240
New solution
function cost: 99
child voicing cost: 137
Best yet: 236
New solution
function cost: 99
child voicing cost: 134
Best yet: 233
New solution
function cost: 99
child voicing cost: 132
Best yet: 231
New solution
function cost: 96
child voicing cost: 131
Best yet: 227
New solution
function cost: 96
child voicing cost: 127
Best yet: 223
New solution
function cost: 96
child voicing cost: 126
Best yet: 222
New solution
function cost: 96
child voicing cost: 121
Best yet: 217
New solution
function cost: 78
child voicing cost: 134
Best yet: 212
New solution
function cost: 84
child voicing cost: 126
Best yet: 210
New solution
function cost: 87
child voicing cost: 118
Best yet: 205
New solution
function cost: 93
child voicing cost: 110
Best yet: 203
New solution
function cost: 75
child voicing cost: 124
Best yet: 199
New solution
function cost: 75
child voicing cost: 122
Best yet: 197
New solution
function cost: 90
child voicing cost: 106
Best yet: 196
New solution
function cost: 90
child voicing cost: 105
Best yet: 195
New solution
function cost: 93
child voicing cost: 99
Best yet: 192
New solution
function cost: 99
child voicing cost: 91
Best yet: 190
New solution
function cost: 87
child voicing cost: 99
Best yet: 186
New solution
function cost: 87
child voicing cost: 98
Best yet: 185
New solution
function cost: 87
child voicing cost: 93
Best yet: 180
New solution
function cost: 90
child voicing cost: 89
Best yet: 179
New solution
function cost: 90
child voicing cost: 86
Best yet: 176
New solution
function cost: 87
child voicing cost: 88
Best yet: 175
New solution
function cost: 87
child voicing cost: 87
Best yet: 174
New solution
function cost: 90
child voicing cost: 81
Best yet: 171
New solution
function cost: 90
child voicing cost: 79
Best yet: 169

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 187519, Pruned: 221615, completed: 44, time: 3.6740000247955322, efficiency: 11.976047823366228
Results: bestval_func: 90, bestval_voices: 79
(15, 390, 390, 390)
[0 1 0 0 0 0 1 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 2 0 0 0 0 1 0 0 1 0 0; 0 1 0 0 0 0 2 0 0 1 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 1 1 0 0; 0 0 1 0 1 0 1 0 1 0 0 0; 0 1 1 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 1 0 0; 0 1 0 0 0 0 0 0 1 2 0 0; 0 0 0 0 0 0 0 0 2 1 0 1; 0 2 0 0 0 0 1 0 1 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 1 0 0; 0 0 0 0 2 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 2 0 0 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 1 1 0 0 0 1 0 0 1 0 0; 0 1 1 0 0 0 1 0 1 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 1 0 0 0 2 0 1 0 0 0]
Key Counter is [0 28 9 1 13 2 31 0 18 14 0 9]
Key Score is [47; 80; 104; 30; 114; 38; 89; 76; 49; 122; 26; 100]
Position Counter for 10 is [14 0 9 0 28 9 1 13 2 31 0 18]
Any[[10.0, 83.0, 0.0]]
[10, 83, 0]
7 F# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 180
Best yet: 354
New solution
function cost: 174
child voicing cost: 178
Best yet: 352
New solution
function cost: 174
child voicing cost: 176
Best yet: 350
New solution
function cost: 174
child voicing cost: 170
Best yet: 344
New solution
function cost: 174
child voicing cost: 168
Best yet: 342
New solution
function cost: 174
child voicing cost: 167
Best yet: 341
New solution
function cost: 174
child voicing cost: 162
Best yet: 336
New solution
function cost: 174
child voicing cost: 159
Best yet: 333
New solution
function cost: 174
child voicing cost: 155
Best yet: 329
New solution
function cost: 165
child voicing cost: 161
Best yet: 326
New solution
function cost: 165
child voicing cost: 159
Best yet: 324
New solution
function cost: 165
child voicing cost: 157
Best yet: 322
New solution
function cost: 165
child voicing cost: 151
Best yet: 316
New solution
function cost: 165
child voicing cost: 149
Best yet: 314
New solution
function cost: 165
child voicing cost: 148
Best yet: 313
New solution
function cost: 165
child voicing cost: 146
Best yet: 311
New solution
function cost: 171
child voicing cost: 139
Best yet: 310
New solution
function cost: 171
child voicing cost: 138
Best yet: 309
New solution
function cost: 171
child voicing cost: 137
Best yet: 308
New solution
function cost: 165
child voicing cost: 141
Best yet: 306
New solution
function cost: 165
child voicing cost: 139
Best yet: 304
New solution
function cost: 165
child voicing cost: 138
Best yet: 303
New solution
function cost: 171
child voicing cost: 130
Best yet: 301
New solution
function cost: 171
child voicing cost: 128
Best yet: 299
New solution
function cost: 171
child voicing cost: 126
Best yet: 297
New solution
function cost: 171
child voicing cost: 125
Best yet: 296
New solution
function cost: 168
child voicing cost: 127
Best yet: 295
New solution
function cost: 168
child voicing cost: 126
Best yet: 294
New solution
function cost: 174
child voicing cost: 118
Best yet: 292
New solution
function cost: 168
child voicing cost: 123
Best yet: 291
New solution
function cost: 168
child voicing cost: 121
Best yet: 289
New solution
function cost: 168
child voicing cost: 120
Best yet: 288
New solution
function cost: 174
child voicing cost: 112
Best yet: 286
New solution
function cost: 168
child voicing cost: 117
Best yet: 285
New solution
function cost: 168
child voicing cost: 115
Best yet: 283
New solution
function cost: 168
child voicing cost: 113
Best yet: 281
New solution
function cost: 168
child voicing cost: 108
Best yet: 276
New solution
function cost: 183
child voicing cost: 92
Best yet: 275
New solution
function cost: 174
child voicing cost: 96
Best yet: 270
New solution
function cost: 174
child voicing cost: 95
Best yet: 269
New solution
function cost: 174
child voicing cost: 93
Best yet: 267
New solution
function cost: 165
child voicing cost: 100
Best yet: 265
New solution
function cost: 165
child voicing cost: 97
Best yet: 262
New solution
function cost: 153
child voicing cost: 108
Best yet: 261
New solution
function cost: 153
child voicing cost: 107
Best yet: 260
New solution
function cost: 153
child voicing cost: 106
Best yet: 259

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(54, 1), (54, 1), (61, 5), (69, 3)])    
 (3, "D", [(49, 1), (56, 5), (65, 3), (73, 1)])    
 (0, "S/3", [(50, 3), (54, 5), (66, 5), (71, 1)])  
 (0, "Ts", [(50, 1), (54, 3), (66, 3), (69, 5)])   
 (0, "D7", [(49, 1), (56, 5), (65, 3), (71, 7)])   
 (0, "T", [(42, 1), (54, 1), (61, 5), (69, 3)])    
 (3, "D", [(49, 1), (53, 3), (61, 1), (68, 5)])    
 (6, "T", [(42, 1), (54, 1), (61, 5), (69, 3)])    
 (12, "D7/3", [(41, 3), (56, 5), (61, 1), (71, 7)])
 (0, "T", [(42, 1), (61, 5), (66, 1), (69, 3)])    
 (3, "D/5", [(44, 5), (61, 1), (65, 3), (68, 5)])  
 (15, "T", [(42, 1), (61, 5), (66, 1), (69, 3)])   
 (12, "D7/3", [(41, 3), (59, 7), (61, 1), (68, 5)])
 ⋮                                                 
 (6, "S65/6", [(56, 6), (62, 3), (66, 5), (71, 1)])
 (9, "D7-1", [(56, 5), (68, 5), (71, 7), (77, 3)]) 
 (12, "T", [(54, 1), (61, 5), (69, 3), (78, 1)])   
 (12, "S/5", [(54, 5), (59, 1), (66, 5), (74, 3)]) 
 (6, "T", [(54, 1), (57, 3), (66, 1), (73, 5)])    
 (15, "Dm", [(52, 1), (59, 5), (68, 3), (68, 3)])  
 (0, "S/3", [(50, 3), (59, 1), (66, 5), (71, 1)])  
 (3, "T/5", [(49, 5), (57, 3), (66, 1), (73, 5)])  
 (15, "S", [(47, 1), (59, 1), (66, 5), (74, 3)])   
 (9, "D", [(49, 1), (56, 5), (65, 3), (73, 1)])    
 (12, "T", [(54, 1), (57, 3), (66, 1), (73, 5)])   
 (12, "T", [(54, 1), (57, 3), (66, 1), (73, 5)])   

##: Done. Total checked: 938325, Pruned: 1054516, completed: 46, time: 14.619999885559082, efficiency: 3.1463748536302343
Results: bestval_func: 153, bestval_voices: 106
(16, 390, 390, 390)
#Key: 7Scale: Minor
#Total time for optimisation of piece: 20.009999990463257
#Total cost of piece: 428
["T", "D", "S/3", "Ts", "D7", "T", "D", "T", "D7/3", "T", "D/5", "T", "D7/3", "T", "D", "D", "D/3", "T", "D7-1", "T/3", "S65/6", "D7-1", "T", "S/5", "T", "Dm", "S/3", "T/5", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-312.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-325.csv
[0 2 0 0 1 0 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 0; 1 0 0 1 0 0 2 0 0 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 1 1 0 0 0 0 1 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 1 1 0 0 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 1 1 0 0 0; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 0 1 0 0 0 0 0 2 0; 0 0 0 1 0 0 1 0 0 0 2 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 1 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 1 0 0 1 0 0 0 0; 0 0 0 2 0 0 2 0 0 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 0 0 2 0 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0]
Key Counter is [8 16 0 23 17 0 16 6 32 0 6 7]
Key Score is [38; 101; 62; 75; 111; 37; 100; 54; 91; 88; 43; 117]
Position Counter for 12 is [7 8 16 0 23 17 0 16 6 32 0 6]
Any[[12.0, 87.0, 0.0]]
[12, 87, 0]
9 G# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 144
child voicing cost: 201
Best yet: 345
New solution
function cost: 144
child voicing cost: 195
Best yet: 339
New solution
function cost: 144
child voicing cost: 193
Best yet: 337
New solution
function cost: 138
child voicing cost: 197
Best yet: 335
New solution
function cost: 138
child voicing cost: 189
Best yet: 327
New solution
function cost: 138
child voicing cost: 187
Best yet: 325
New solution
function cost: 138
child voicing cost: 184
Best yet: 322
New solution
function cost: 138
child voicing cost: 183
Best yet: 321
New solution
function cost: 138
child voicing cost: 180
Best yet: 318
New solution
function cost: 138
child voicing cost: 176
Best yet: 314
New solution
function cost: 138
child voicing cost: 172
Best yet: 310
New solution
function cost: 138
child voicing cost: 171
Best yet: 309
New solution
function cost: 138
child voicing cost: 166
Best yet: 304
New solution
function cost: 132
child voicing cost: 171
Best yet: 303
New solution
function cost: 132
child voicing cost: 170
Best yet: 302
New solution
function cost: 135
child voicing cost: 165
Best yet: 300
New solution
function cost: 132
child voicing cost: 162
Best yet: 294
New solution
function cost: 132
child voicing cost: 160
Best yet: 292
New solution
function cost: 132
child voicing cost: 158
Best yet: 290
New solution
function cost: 132
child voicing cost: 157
Best yet: 289
New solution
function cost: 132
child voicing cost: 155
Best yet: 287
New solution
function cost: 132
child voicing cost: 154
Best yet: 286
New solution
function cost: 132
child voicing cost: 153
Best yet: 285
New solution
function cost: 132
child voicing cost: 151
Best yet: 283
New solution
function cost: 132
child voicing cost: 149
Best yet: 281
New solution
function cost: 132
child voicing cost: 147
Best yet: 279
New solution
function cost: 132
child voicing cost: 146
Best yet: 278
New solution
function cost: 132
child voicing cost: 144
Best yet: 276
New solution
function cost: 132
child voicing cost: 143
Best yet: 275
New solution
function cost: 132
child voicing cost: 141
Best yet: 273
New solution
function cost: 132
child voicing cost: 140
Best yet: 272
New solution
function cost: 132
child voicing cost: 134
Best yet: 266
New solution
function cost: 132
child voicing cost: 132
Best yet: 264

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 70546, Pruned: 81470, completed: 33, time: 1.2569999694824219, efficiency: 26.25298393092879
Results: bestval_func: 132, bestval_voices: 132
(15, 359, 359, 359)
[0 2 0 0 1 0 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 0; 1 0 0 1 0 0 2 0 0 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 1 1 0 0 0 0 1 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 1 1 0 0 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 1 1 0 0 0; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 0 1 0 0 0 0 0 2 0; 0 0 0 1 0 0 1 0 0 0 2 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 1 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 1 0 0 1 0 0 0 0; 0 0 0 2 0 0 2 0 0 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 0 0 2 0 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0]
Key Counter is [8 16 0 23 17 0 16 6 32 0 6 7]
Key Score is [38; 101; 62; 75; 111; 37; 100; 54; 91; 88; 43; 117]
Position Counter for 12 is [7 8 16 0 23 17 0 16 6 32 0 6]
Any[[12.0, 87.0, 0.0]]
[12, 87, 0]
9 G# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 195
child voicing cost: 186
Best yet: 381
New solution
function cost: 195
child voicing cost: 181
Best yet: 376
New solution
function cost: 195
child voicing cost: 177
Best yet: 372
New solution
function cost: 195
child voicing cost: 172
Best yet: 367
New solution
function cost: 195
child voicing cost: 170
Best yet: 365
New solution
function cost: 195
child voicing cost: 168
Best yet: 363
New solution
function cost: 195
child voicing cost: 166
Best yet: 361
New solution
function cost: 195
child voicing cost: 164
Best yet: 359
New solution
function cost: 195
child voicing cost: 159
Best yet: 354
New solution
function cost: 195
child voicing cost: 154
Best yet: 349
New solution
function cost: 195
child voicing cost: 152
Best yet: 347
New solution
function cost: 195
child voicing cost: 151
Best yet: 346
New solution
function cost: 186
child voicing cost: 154
Best yet: 340
New solution
function cost: 186
child voicing cost: 149
Best yet: 335
New solution
function cost: 186
child voicing cost: 147
Best yet: 333
New solution
function cost: 186
child voicing cost: 144
Best yet: 330
New solution
function cost: 186
child voicing cost: 141
Best yet: 327
New solution
function cost: 186
child voicing cost: 140
Best yet: 326
New solution
function cost: 186
child voicing cost: 137
Best yet: 323
New solution
function cost: 186
child voicing cost: 134
Best yet: 320
New solution
function cost: 186
child voicing cost: 131
Best yet: 317
New solution
function cost: 183
child voicing cost: 133
Best yet: 316
New solution
function cost: 180
child voicing cost: 134
Best yet: 314
New solution
function cost: 189
child voicing cost: 123
Best yet: 312
New solution
function cost: 186
child voicing cost: 124
Best yet: 310
New solution
function cost: 177
child voicing cost: 132
Best yet: 309
New solution
function cost: 177
child voicing cost: 129
Best yet: 306
New solution
function cost: 180
child voicing cost: 125
Best yet: 305
New solution
function cost: 180
child voicing cost: 123
Best yet: 303
New solution
function cost: 183
child voicing cost: 119
Best yet: 302
New solution
function cost: 189
child voicing cost: 111
Best yet: 300
New solution
function cost: 183
child voicing cost: 114
Best yet: 297
New solution
function cost: 183
child voicing cost: 111
Best yet: 294
New solution
function cost: 177
child voicing cost: 116
Best yet: 293
New solution
function cost: 177
child voicing cost: 113
Best yet: 290
New solution
function cost: 177
child voicing cost: 110
Best yet: 287
New solution
function cost: 183
child voicing cost: 103
Best yet: 286
New solution
function cost: 183
child voicing cost: 100
Best yet: 283

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (24, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])   
 (9, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])    
 (0, "S", [(49, 1), (56, 5), (61, 1), (64, 3)])    
 (15, "D7-5", [(51, 1), (51, 1), (61, 7), (67, 3)])
 (9, "T", [(44, 1), (51, 5), (59, 3), (68, 1)])    
 (12, "D7", [(51, 1), (55, 3), (58, 5), (61, 7)])  
 (15, "Ts", [(52, 1), (56, 3), (56, 3), (59, 5)])  
 (15, "D", [(51, 1), (51, 1), (58, 5), (67, 3)])   
 (9, "S/3", [(52, 3), (56, 5), (61, 1), (61, 1)])  
 (9, "T/5", [(51, 5), (56, 1), (59, 3), (63, 5)])  
 (6, "S", [(49, 1), (56, 5), (61, 1), (64, 3)])    
 (3, "S/3", [(52, 3), (56, 5), (61, 1), (68, 5)])  
 (6, "D54", [(51, 1), (58, 5), (63, 1), (68, 4)])  
 ⋮                                                 
 (0, "Tm", [(47, 1), (54, 5), (63, 3), (75, 3)])   
 (21, "S", [(49, 1), (61, 1), (64, 3), (68, 5)])   
 (12, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])   
 (0, "S/3", [(52, 3), (56, 5), (61, 1), (73, 1)])  
 (12, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])   
 (21, "D7/7", [(49, 7), (58, 5), (67, 3), (75, 1)])
 (12, "T/3", [(47, 3), (56, 1), (68, 1), (75, 5)]) 
 (12, "S65", [(49, 1), (58, 6), (68, 5), (76, 3)]) 
 (9, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])    
 (15, "D7", [(51, 1), (58, 5), (67, 3), (73, 7)])  
 (18, "T", [(44, 1), (56, 1), (63, 5), (71, 3)])   
 (18, "T", [(44, 1), (56, 1), (63, 5), (71, 3)])   

##: Done. Total checked: 188475, Pruned: 216157, completed: 38, time: 3.069999933242798, efficiency: 12.377850432023017
Results: bestval_func: 183, bestval_voices: 100
(16, 359, 359, 359)
#Key: 9Scale: Minor
#Total time for optimisation of piece: 5.454999923706055
#Total cost of piece: 547
["T", "T", "S", "D7-5", "T", "D7", "Ts", "D", "S/3", "T/5", "S", "S/3", "D54", "D", "T", "T", "Ts", "T/3", "D7/5", "T", "Tm", "S", "D", "S/3", "D", "D7/7", "T/3", "S65", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-325.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-338.csv
[1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 1 0 0 2 0; 0 1 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 1 0 2 0 1 0 0 0 0 0 0; 0 0 0 1 0 0 0 1 0 0 2 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 1 0 1 0; 0 0 0 2 0 0 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 0 0 2 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 0 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 2 0 0 1 0 1 0 0 0 0 0 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 0 0 1 0; 0 0 0 0 0 0 0 1 0 0 3 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 2 0 0 0 1 0 0 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0]
Key Counter is [25 9 2 23 0 19 1 5 24 0 23 0]
Key Score is [51; 124; 17; 121; 57; 74; 99; 33; 128; 36; 97; 80]
Position Counter for 9 is [24 0 23 0 25 9 2 23 0 19 1 5]
Any[[9.0, 82.25, 0.0]]
[9, 82, 0]
6 F Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 210
child voicing cost: 164
Best yet: 374
New solution
function cost: 210
child voicing cost: 163
Best yet: 373
New solution
function cost: 210
child voicing cost: 161
Best yet: 371
New solution
function cost: 210
child voicing cost: 156
Best yet: 366
New solution
function cost: 210
child voicing cost: 153
Best yet: 363
New solution
function cost: 210
child voicing cost: 148
Best yet: 358
New solution
function cost: 210
child voicing cost: 145
Best yet: 355
New solution
function cost: 210
child voicing cost: 143
Best yet: 353
New solution
function cost: 210
child voicing cost: 138
Best yet: 348
New solution
function cost: 210
child voicing cost: 134
Best yet: 344
New solution
function cost: 198
child voicing cost: 144
Best yet: 342
New solution
function cost: 198
child voicing cost: 142
Best yet: 340
New solution
function cost: 198
child voicing cost: 140
Best yet: 338
New solution
function cost: 198
child voicing cost: 134
Best yet: 332
New solution
function cost: 198
child voicing cost: 132
Best yet: 330
New solution
function cost: 198
child voicing cost: 130
Best yet: 328
New solution
function cost: 198
child voicing cost: 128
Best yet: 326
New solution
function cost: 198
child voicing cost: 127
Best yet: 325
New solution
function cost: 174
child voicing cost: 150
Best yet: 324
New solution
function cost: 174
child voicing cost: 148
Best yet: 322
New solution
function cost: 174
child voicing cost: 145
Best yet: 319
New solution
function cost: 174
child voicing cost: 144
Best yet: 318
New solution
function cost: 189
child voicing cost: 126
Best yet: 315
New solution
function cost: 186
child voicing cost: 125
Best yet: 311
New solution
function cost: 189
child voicing cost: 120
Best yet: 309
New solution
function cost: 186
child voicing cost: 119
Best yet: 305
New solution
function cost: 189
child voicing cost: 114
Best yet: 303
New solution
function cost: 186
child voicing cost: 113
Best yet: 299
New solution
function cost: 186
child voicing cost: 111
Best yet: 297
New solution
function cost: 201
child voicing cost: 94
Best yet: 295
New solution
function cost: 186
child voicing cost: 107
Best yet: 293
New solution
function cost: 186
child voicing cost: 105
Best yet: 291
New solution
function cost: 189
child voicing cost: 99
Best yet: 288
New solution
function cost: 180
child voicing cost: 107
Best yet: 287
New solution
function cost: 168
child voicing cost: 118
Best yet: 286
New solution
function cost: 168
child voicing cost: 117
Best yet: 285
New solution
function cost: 180
child voicing cost: 101
Best yet: 281

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 171440, Pruned: 213231, completed: 37, time: 3.0230000019073486, efficiency: 12.239497180501163
Results: bestval_func: 180, bestval_voices: 101
(15, 409, 409, 409)
[1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 1 0 0 2 0; 0 1 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 1 0 2 0 1 0 0 0 0 0 0; 0 0 0 1 0 0 0 1 0 0 2 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 1 0 1 0; 0 0 0 2 0 0 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 0 0 2 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 0 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 2 0 0 1 0 1 0 0 0 0 0 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 0 0 1 0; 0 0 0 0 0 0 0 1 0 0 3 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 2 0 0 0 1 0 0 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0]
Key Counter is [25 9 2 23 0 19 1 5 24 0 23 0]
Key Score is [51; 124; 17; 121; 57; 74; 99; 33; 128; 36; 97; 80]
Position Counter for 9 is [24 0 23 0 25 9 2 23 0 19 1 5]
Any[[9.0, 82.25, 0.0]]
[9, 82, 0]
6 F Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 186
child voicing cost: 204
Best yet: 390
New solution
function cost: 186
child voicing cost: 202
Best yet: 388
New solution
function cost: 186
child voicing cost: 200
Best yet: 386
New solution
function cost: 186
child voicing cost: 194
Best yet: 380
New solution
function cost: 186
child voicing cost: 189
Best yet: 375
New solution
function cost: 186
child voicing cost: 186
Best yet: 372
New solution
function cost: 186
child voicing cost: 181
Best yet: 367
New solution
function cost: 186
child voicing cost: 180
Best yet: 366
New solution
function cost: 186
child voicing cost: 178
Best yet: 364
New solution
function cost: 186
child voicing cost: 175
Best yet: 361
New solution
function cost: 186
child voicing cost: 172
Best yet: 358
New solution
function cost: 186
child voicing cost: 167
Best yet: 353
New solution
function cost: 186
child voicing cost: 165
Best yet: 351
New solution
function cost: 186
child voicing cost: 162
Best yet: 348
New solution
function cost: 186
child voicing cost: 161
Best yet: 347
New solution
function cost: 186
child voicing cost: 159
Best yet: 345
New solution
function cost: 186
child voicing cost: 156
Best yet: 342
New solution
function cost: 186
child voicing cost: 151
Best yet: 337
New solution
function cost: 186
child voicing cost: 149
Best yet: 335
New solution
function cost: 165
child voicing cost: 164
Best yet: 329
New solution
function cost: 165
child voicing cost: 161
Best yet: 326
New solution
function cost: 180
child voicing cost: 144
Best yet: 324
New solution
function cost: 180
child voicing cost: 142
Best yet: 322
New solution
function cost: 183
child voicing cost: 138
Best yet: 321
New solution
function cost: 183
child voicing cost: 136
Best yet: 319

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (15, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])   
 (3, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])    
 (6, "S", [(58, 1), (65, 5), (70, 1), (73, 3)])    
 (9, "D7/3", [(52, 3), (67, 5), (70, 7), (72, 1)]) 
 (9, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])    
 (21, "D7-1", [(55, 5), (58, 7), (64, 3), (70, 7)])
 (6, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])    
 (21, "D", [(48, 1), (60, 1), (64, 3), (67, 5)])   
 (3, "D7-1", [(43, 5), (58, 7), (64, 3), (67, 5)]) 
 (21, "T", [(41, 1), (60, 5), (65, 1), (68, 3)])   
 (0, "Tm", [(44, 1), (60, 3), (63, 5), (72, 3)])   
 (0, "Tm", [(44, 1), (60, 3), (68, 1), (75, 5)])   
 (21, "S", [(46, 1), (58, 1), (65, 5), (73, 3)])   
 ⋮                                                 
 (3, "S", [(58, 1), (61, 3), (70, 1), (77, 5)])    
 (9, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])    
 (9, "D", [(48, 1), (64, 3), (72, 1), (79, 5)])    
 (15, "D", [(48, 1), (64, 3), (67, 5), (72, 1)])   
 (12, "S/3", [(49, 3), (58, 1), (65, 5), (70, 1)]) 
 (30, "T/5", [(48, 5), (60, 5), (65, 1), (68, 3)]) 
 (15, "S", [(46, 1), (61, 3), (65, 5), (70, 1)])   
 (9, "D7-5", [(48, 1), (60, 1), (64, 3), (70, 7)]) 
 (12, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (9, "D7", [(48, 1), (58, 7), (64, 3), (67, 5)])   
 (21, "T", [(53, 1), (56, 3), (60, 5), (65, 1)])   
 (21, "T", [(53, 1), (56, 3), (60, 5), (65, 1)])   

##: Done. Total checked: 115884, Pruned: 128911, completed: 25, time: 2.003000020980835, efficiency: 12.481277952137976
Results: bestval_func: 183, bestval_voices: 136
(16, 409, 409, 409)
#Key: 6Scale: Minor
#Total time for optimisation of piece: 6.615000009536743
#Total cost of piece: 600
["T", "T", "S", "D7/3", "T", "D7-1", "T", "D", "D7-1", "T", "Tm", "Tm", "S", "D", "T", "T", "Tm", "Tm", "S", "T/3", "S", "T", "D", "D", "S/3", "T/5", "S", "D7-5", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-338.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-351.csv
[1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 2 0 0 0 0 2 0; 1 1 0 0 0 2 0 0 0 0 0 0; 1 0 0 1 1 1 0 0 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 2 1 0 0 0 0 0 1 0 0 0 0; 1 0 0 2 0 0 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 2 0 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 0 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 1 1 0 0 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 1 0 0 0 1 0 0 0 1 1 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 0 1 0 0 0 0 2 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0]
Key Counter is [26 6 3 5 3 35 0 16 16 4 15 0]
Key Score is [87; 103; 32; 116; 34; 102; 77; 52; 119; 32; 104; 45]
Position Counter for 9 is [16 4 15 0 26 6 3 5 3 35 0 16]
Any[[9.0, 89.0, 0.0]]
[9, 89, 0]
6 F Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 180
child voicing cost: 148
Best yet: 328
New solution
function cost: 180
child voicing cost: 145
Best yet: 325
New solution
function cost: 180
child voicing cost: 141
Best yet: 321
New solution
function cost: 180
child voicing cost: 139
Best yet: 319
New solution
function cost: 180
child voicing cost: 135
Best yet: 315
New solution
function cost: 150
child voicing cost: 153
Best yet: 303
New solution
function cost: 150
child voicing cost: 151
Best yet: 301
New solution
function cost: 150
child voicing cost: 149
Best yet: 299
New solution
function cost: 150
child voicing cost: 143
Best yet: 293
New solution
function cost: 150
child voicing cost: 139
Best yet: 289
New solution
function cost: 150
child voicing cost: 138
Best yet: 288
New solution
function cost: 150
child voicing cost: 137
Best yet: 287
New solution
function cost: 150
child voicing cost: 135
Best yet: 285
New solution
function cost: 153
child voicing cost: 131
Best yet: 284
New solution
function cost: 150
child voicing cost: 132
Best yet: 282
New solution
function cost: 150
child voicing cost: 129
Best yet: 279
New solution
function cost: 144
child voicing cost: 131
Best yet: 275
New solution
function cost: 144
child voicing cost: 129
Best yet: 273
New solution
function cost: 144
child voicing cost: 125
Best yet: 269
New solution
function cost: 144
child voicing cost: 121
Best yet: 265
New solution
function cost: 144
child voicing cost: 118
Best yet: 262
New solution
function cost: 144
child voicing cost: 116
Best yet: 260
New solution
function cost: 102
child voicing cost: 157
Best yet: 259
New solution
function cost: 102
child voicing cost: 155
Best yet: 257
New solution
function cost: 105
child voicing cost: 150
Best yet: 255
New solution
function cost: 105
child voicing cost: 149
Best yet: 254
New solution
function cost: 105
child voicing cost: 147
Best yet: 252
New solution
function cost: 105
child voicing cost: 146
Best yet: 251
New solution
function cost: 105
child voicing cost: 145
Best yet: 250
New solution
function cost: 102
child voicing cost: 147
Best yet: 249
New solution
function cost: 102
child voicing cost: 144
Best yet: 246
New solution
function cost: 102
child voicing cost: 142
Best yet: 244
New solution
function cost: 102
child voicing cost: 141
Best yet: 243
New solution
function cost: 105
child voicing cost: 137
Best yet: 242
New solution
function cost: 108
child voicing cost: 133
Best yet: 241
New solution
function cost: 108
child voicing cost: 131
Best yet: 239
New solution
function cost: 108
child voicing cost: 130
Best yet: 238
New solution
function cost: 108
child voicing cost: 128
Best yet: 236
New solution
function cost: 102
child voicing cost: 133
Best yet: 235
New solution
function cost: 102
child voicing cost: 131
Best yet: 233
New solution
function cost: 102
child voicing cost: 129
Best yet: 231
New solution
function cost: 102
child voicing cost: 127
Best yet: 229
New solution
function cost: 102
child voicing cost: 126
Best yet: 228
New solution
function cost: 102
child voicing cost: 124
Best yet: 226
New solution
function cost: 87
child voicing cost: 137
Best yet: 224
New solution
function cost: 87
child voicing cost: 134
Best yet: 221
New solution
function cost: 87
child voicing cost: 132
Best yet: 219
New solution
function cost: 87
child voicing cost: 131
Best yet: 218
New solution
function cost: 90
child voicing cost: 127
Best yet: 217
New solution
function cost: 93
child voicing cost: 123
Best yet: 216
New solution
function cost: 93
child voicing cost: 121
Best yet: 214
New solution
function cost: 93
child voicing cost: 120
Best yet: 213
New solution
function cost: 93
child voicing cost: 118
Best yet: 211
New solution
function cost: 87
child voicing cost: 123
Best yet: 210
New solution
function cost: 87
child voicing cost: 121
Best yet: 208
New solution
function cost: 87
child voicing cost: 119
Best yet: 206
New solution
function cost: 87
child voicing cost: 117
Best yet: 204
New solution
function cost: 87
child voicing cost: 116
Best yet: 203
New solution
function cost: 87
child voicing cost: 114
Best yet: 201

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 125658, Pruned: 151962, completed: 59, time: 2.3310000896453857, efficiency: 25.311024337616242
Results: bestval_func: 87, bestval_voices: 114
(15, 409, 409, 409)
[1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 2 0 0 0 0 2 0; 1 1 0 0 0 2 0 0 0 0 0 0; 1 0 0 1 1 1 0 0 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 2 1 0 0 0 0 0 1 0 0 0 0; 1 0 0 2 0 0 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 2 0 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 0 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 1 1 0 0 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 1 0 0 0 1 0 0 0 1 1 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 0 1 0 0 0 0 2 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0]
Key Counter is [26 6 3 5 3 35 0 16 16 4 15 0]
Key Score is [87; 103; 32; 116; 34; 102; 77; 52; 119; 32; 104; 45]
Position Counter for 9 is [16 4 15 0 26 6 3 5 3 35 0 16]
Any[[9.0, 89.0, 0.0]]
[9, 89, 0]
6 F Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 123
child voicing cost: 193
Best yet: 316
New solution
function cost: 123
child voicing cost: 192
Best yet: 315
New solution
function cost: 123
child voicing cost: 187
Best yet: 310
New solution
function cost: 123
child voicing cost: 185
Best yet: 308
New solution
function cost: 123
child voicing cost: 180
Best yet: 303
New solution
function cost: 117
child voicing cost: 185
Best yet: 302
New solution
function cost: 123
child voicing cost: 178
Best yet: 301
New solution
function cost: 123
child voicing cost: 173
Best yet: 296
New solution
function cost: 123
child voicing cost: 171
Best yet: 294
New solution
function cost: 123
child voicing cost: 166
Best yet: 289
New solution
function cost: 117
child voicing cost: 169
Best yet: 286
New solution
function cost: 117
child voicing cost: 168
Best yet: 285
New solution
function cost: 117
child voicing cost: 165
Best yet: 282
New solution
function cost: 117
child voicing cost: 159
Best yet: 276
New solution
function cost: 117
child voicing cost: 158
Best yet: 275
New solution
function cost: 117
child voicing cost: 152
Best yet: 269
New solution
function cost: 117
child voicing cost: 149
Best yet: 266
New solution
function cost: 117
child voicing cost: 148
Best yet: 265
New solution
function cost: 117
child voicing cost: 145
Best yet: 262
New solution
function cost: 117
child voicing cost: 139
Best yet: 256
New solution
function cost: 117
child voicing cost: 138
Best yet: 255
New solution
function cost: 117
child voicing cost: 132
Best yet: 249

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])     
 (0, "D7-1", [(55, 5), (58, 7), (70, 7), (76, 3)])  
 (0, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])     
 (0, "D7-1", [(55, 5), (58, 7), (70, 7), (76, 3)])  
 (6, "D7/3", [(52, 3), (58, 7), (67, 5), (72, 1)])  
 (6, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])     
 (0, "S", [(58, 1), (58, 1), (65, 5), (73, 3)])     
 (12, "S", [(58, 1), (58, 1), (65, 5), (73, 3)])    
 (12, "S65/6", [(55, 6), (58, 1), (65, 5), (73, 3)])
 (15, "D", [(60, 1), (64, 3), (67, 5), (72, 1)])    
 (0, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])     
 (0, "D/3", [(52, 3), (60, 1), (67, 5), (72, 1)])   
 (12, "S/3", [(49, 3), (53, 5), (65, 5), (70, 1)])  
 ⋮                                                  
 (0, "T", [(53, 1), (56, 3), (60, 5), (65, 1)])     
 (3, "S65", [(46, 1), (55, 6), (61, 3), (65, 5)])   
 (18, "D", [(48, 1), (55, 5), (60, 1), (64, 3)])    
 (6, "D7-1", [(55, 5), (58, 7), (58, 7), (64, 3)])  
 (6, "T", [(53, 1), (56, 3), (60, 5), (65, 1)])     
 (3, "D7/3", [(52, 3), (58, 7), (60, 1), (67, 5)])  
 (6, "T", [(53, 1), (56, 3), (60, 5), (65, 1)])     
 (9, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])     
 (3, "S", [(46, 1), (58, 1), (65, 5), (73, 3)])     
 (6, "D7", [(48, 1), (58, 7), (64, 3), (67, 5)])    
 (18, "T", [(53, 1), (56, 3), (60, 5), (65, 1)])    
 (18, "T", [(53, 1), (56, 3), (60, 5), (65, 1)])    

##: Done. Total checked: 80093, Pruned: 88188, completed: 22, time: 1.6130001544952393, efficiency: 13.639180342722609
Results: bestval_func: 117, bestval_voices: 132
(16, 409, 409, 409)
#Key: 6Scale: Minor
#Total time for optimisation of piece: 5.582000017166138
#Total cost of piece: 450
["T", "D7-1", "T", "D7-1", "D7/3", "T", "S", "S", "S65/6", "D", "T", "D/3", "S/3", "D", "T", "T", "T/3", "Ts", "Tm", "D7/3", "T", "S65", "D", "D7-1", "T", "D7/3", "T", "T", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-351.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-364.csv
[0 0 0 0 0 0 0 0 2 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 1 1 0 0 0 0 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 1 1 0 0 0 2 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 2 0 1 0 0 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 1 0 0 2 0 0 0 0 0; 0 1 0 1 0 0 2 0 0 0 0 0; 0 0 0 2 0 0 2 0 0 0 0 0; 0 0 0 1 0 0 2 0 1 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 1 0 0 0 0 2 0 1 0]
Key Counter is [2 18 0 23 7 4 23 1 31 0 10 11]
Key Score is [25; 111; 60; 71; 113; 24; 120; 44; 89; 90; 40; 123]
Position Counter for 12 is [11 2 18 0 23 7 4 23 1 31 0 10]
Any[[12.0, 85.5, 0.0]]
[12, 86, 0]
9 G# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 177
child voicing cost: 173
Best yet: 350
New solution
function cost: 177
child voicing cost: 171
Best yet: 348
New solution
function cost: 177
child voicing cost: 168
Best yet: 345
New solution
function cost: 177
child voicing cost: 165
Best yet: 342
New solution
function cost: 177
child voicing cost: 160
Best yet: 337
New solution
function cost: 171
child voicing cost: 162
Best yet: 333
New solution
function cost: 171
child voicing cost: 160
Best yet: 331
New solution
function cost: 171
child voicing cost: 158
Best yet: 329
New solution
function cost: 138
child voicing cost: 157
Best yet: 295
New solution
function cost: 138
child voicing cost: 152
Best yet: 290
New solution
function cost: 138
child voicing cost: 147
Best yet: 285
New solution
function cost: 123
child voicing cost: 161
Best yet: 284
New solution
function cost: 123
child voicing cost: 160
Best yet: 283
New solution
function cost: 123
child voicing cost: 159
Best yet: 282
New solution
function cost: 123
child voicing cost: 156
Best yet: 279
New solution
function cost: 123
child voicing cost: 154
Best yet: 277
New solution
function cost: 123
child voicing cost: 151
Best yet: 274
New solution
function cost: 123
child voicing cost: 147
Best yet: 270
New solution
function cost: 123
child voicing cost: 145
Best yet: 268
New solution
function cost: 123
child voicing cost: 142
Best yet: 265
New solution
function cost: 126
child voicing cost: 137
Best yet: 263
New solution
function cost: 126
child voicing cost: 136
Best yet: 262
New solution
function cost: 126
child voicing cost: 135
Best yet: 261
New solution
function cost: 126
child voicing cost: 133
Best yet: 259
New solution
function cost: 126
child voicing cost: 132
Best yet: 258
New solution
function cost: 141
child voicing cost: 116
Best yet: 257
New solution
function cost: 141
child voicing cost: 115
Best yet: 256
New solution
function cost: 141
child voicing cost: 112
Best yet: 253
New solution
function cost: 141
child voicing cost: 110
Best yet: 251
New solution
function cost: 123
child voicing cost: 127
Best yet: 250
New solution
function cost: 123
child voicing cost: 126
Best yet: 249
New solution
function cost: 123
child voicing cost: 125
Best yet: 248
New solution
function cost: 123
child voicing cost: 123
Best yet: 246
New solution
function cost: 123
child voicing cost: 122
Best yet: 245
New solution
function cost: 138
child voicing cost: 106
Best yet: 244
New solution
function cost: 138
child voicing cost: 105
Best yet: 243
New solution
function cost: 138
child voicing cost: 102
Best yet: 240
New solution
function cost: 138
child voicing cost: 100
Best yet: 238

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 74889, Pruned: 97645, completed: 38, time: 1.374000072479248, efficiency: 27.65647597924266
Results: bestval_func: 138, bestval_voices: 100
(15, 359, 359, 359)
[0 0 0 0 0 0 0 0 2 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 1 1 0 0 0 0 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 1 1 0 0 0 2 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 2 0 1 0 0 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 1 0 0 2 0 0 0 0 0; 0 1 0 1 0 0 2 0 0 0 0 0; 0 0 0 2 0 0 2 0 0 0 0 0; 0 0 0 1 0 0 2 0 1 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 1 0 0 0 0 2 0 1 0]
Key Counter is [2 18 0 23 7 4 23 1 31 0 10 11]
Key Score is [25; 111; 60; 71; 113; 24; 120; 44; 89; 90; 40; 123]
Position Counter for 12 is [11 2 18 0 23 7 4 23 1 31 0 10]
Any[[12.0, 85.5, 0.0]]
[12, 86, 0]
9 G# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 219
child voicing cost: 158
Best yet: 377
New solution
function cost: 219
child voicing cost: 153
Best yet: 372
New solution
function cost: 219
child voicing cost: 150
Best yet: 369
New solution
function cost: 219
child voicing cost: 148
Best yet: 367
New solution
function cost: 219
child voicing cost: 147
Best yet: 366
New solution
function cost: 219
child voicing cost: 142
Best yet: 361
New solution
function cost: 219
child voicing cost: 141
Best yet: 360
New solution
function cost: 219
child voicing cost: 138
Best yet: 357
New solution
function cost: 219
child voicing cost: 136
Best yet: 355
New solution
function cost: 219
child voicing cost: 134
Best yet: 353
New solution
function cost: 225
child voicing cost: 124
Best yet: 349
New solution
function cost: 225
child voicing cost: 122
Best yet: 347
New solution
function cost: 225
child voicing cost: 121
Best yet: 346
New solution
function cost: 225
child voicing cost: 119
Best yet: 344
New solution
function cost: 225
child voicing cost: 117
Best yet: 342
New solution
function cost: 225
child voicing cost: 116
Best yet: 341
New solution
function cost: 225
child voicing cost: 115
Best yet: 340
New solution
function cost: 225
child voicing cost: 114
Best yet: 339
New solution
function cost: 225
child voicing cost: 112
Best yet: 337
New solution
function cost: 216
child voicing cost: 120
Best yet: 336
New solution
function cost: 216
child voicing cost: 118
Best yet: 334
New solution
function cost: 228
child voicing cost: 104
Best yet: 332
New solution
function cost: 219
child voicing cost: 110
Best yet: 329
New solution
function cost: 219
child voicing cost: 109
Best yet: 328
New solution
function cost: 219
child voicing cost: 106
Best yet: 325
New solution
function cost: 219
child voicing cost: 105
Best yet: 324
New solution
function cost: 219
child voicing cost: 102
Best yet: 321
New solution
function cost: 231
child voicing cost: 89
Best yet: 320
New solution
function cost: 231
child voicing cost: 84
Best yet: 315
New solution
function cost: 210
child voicing cost: 104
Best yet: 314
New solution
function cost: 213
child voicing cost: 100
Best yet: 313
New solution
function cost: 234
child voicing cost: 78
Best yet: 312
New solution
function cost: 210
child voicing cost: 101
Best yet: 311
New solution
function cost: 210
child voicing cost: 99
Best yet: 309
New solution
function cost: 225
child voicing cost: 81
Best yet: 306
New solution
function cost: 213
child voicing cost: 92
Best yet: 305
New solution
function cost: 225
child voicing cost: 78
Best yet: 303
New solution
function cost: 213
child voicing cost: 84
Best yet: 297

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])    
 (6, "D/3", [(55, 3), (58, 5), (63, 1), (75, 1)])  
 (3, "D7-5", [(51, 1), (63, 1), (67, 3), (73, 7)]) 
 (18, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])   
 (0, "D/3", [(55, 3), (63, 1), (63, 1), (70, 5)])  
 (6, "D", [(51, 1), (63, 1), (70, 5), (79, 3)])    
 (0, "Ts", [(52, 1), (59, 5), (68, 3), (80, 3)])   
 (12, "D", [(51, 1), (63, 1), (70, 5), (79, 3)])   
 (12, "D7/7", [(49, 7), (63, 1), (70, 5), (79, 3)])
 (18, "T/3", [(47, 3), (63, 5), (68, 1), (80, 1)]) 
 (18, "S65", [(49, 1), (64, 3), (70, 6), (80, 5)]) 
 (12, "D", [(51, 1), (63, 1), (70, 5), (79, 3)])   
 (6, "S/3", [(52, 3), (56, 5), (68, 5), (73, 1)])  
 ⋮                                                 
 (9, "S", [(49, 1), (56, 5), (61, 1), (64, 3)])    
 (9, "Dm", [(54, 1), (58, 3), (61, 5), (66, 1)])   
 (15, "Ts", [(52, 1), (59, 5), (64, 1), (68, 3)])  
 (9, "D7-1", [(46, 5), (61, 7), (67, 3), (70, 5)]) 
 (12, "T", [(44, 1), (63, 5), (68, 1), (71, 3)])   
 (15, "D7/3", [(43, 3), (63, 1), (70, 5), (73, 7)])
 (18, "T", [(44, 1), (63, 5), (68, 1), (71, 3)])   
 (15, "D", [(51, 1), (63, 1), (67, 3), (70, 5)])   
 (21, "T", [(56, 1), (59, 3), (63, 5), (68, 1)])   
 (15, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])   
 (18, "T", [(44, 1), (59, 3), (63, 5), (68, 1)])   
 (18, "T", [(44, 1), (59, 3), (63, 5), (68, 1)])   

##: Done. Total checked: 282337, Pruned: 322301, completed: 38, time: 4.19599986076355, efficiency: 9.056244342459323
Results: bestval_func: 213, bestval_voices: 84
(16, 359, 359, 359)
#Key: 9Scale: Minor
#Total time for optimisation of piece: 6.70799994468689
#Total cost of piece: 535
["T", "D/3", "D7-5", "T", "D/3", "D", "Ts", "D", "D7/7", "T/3", "S65", "D", "S/3", "D", "T", "T", "S/3", "T", "D/5", "T/3", "S", "Dm", "Ts", "D7-1", "T", "D7/3", "T", "D", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-364.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-377.csv
[0 1 0 0 0 0 0 0 2 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 0 0 0 1 0 0 1; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 0 2 0 1 0; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 0 1 0 0 1 0 0 2 0; 0 0 0 0 0 0 0 0 3 0 0 1; 1 0 0 2 0 0 0 0 1 0 0 0; 0 0 0 2 0 0 0 1 1 0 0 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 2 0 0 0; 0 3 0 0 0 0 1 0 0 0 0 0; 0 0 0 1 0 0 0 0 0 0 1 2; 0 1 0 1 0 0 0 0 0 0 1 1; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 1 0; 0 0 0 0 1 0 0 0 2 0 1 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 1 1 0 0 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 0 0 1 0 0 2 0 0 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 0 0 0 0 0 2 0 1 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0]
Key Counter is [1 14 0 23 10 0 10 6 35 0 17 15]
Key Score is [32; 100; 55; 82; 107; 34; 114; 42; 96; 84; 47; 124]
Position Counter for 12 is [15 1 14 0 23 10 0 10 6 35 0 17]
Any[[12.0, 89.5, 0.0]]
[12, 90, 0]
9 G# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 132
child voicing cost: 202
Best yet: 334
New solution
function cost: 132
child voicing cost: 201
Best yet: 333
New solution
function cost: 135
child voicing cost: 190
Best yet: 325
New solution
function cost: 135
child voicing cost: 189
Best yet: 324
New solution
function cost: 135
child voicing cost: 184
Best yet: 319
New solution
function cost: 135
child voicing cost: 181
Best yet: 316
New solution
function cost: 135
child voicing cost: 176
Best yet: 311
New solution
function cost: 132
child voicing cost: 173
Best yet: 305
New solution
function cost: 132
child voicing cost: 171
Best yet: 303
New solution
function cost: 132
child voicing cost: 168
Best yet: 300
New solution
function cost: 132
child voicing cost: 165
Best yet: 297
New solution
function cost: 114
child voicing cost: 182
Best yet: 296
New solution
function cost: 117
child voicing cost: 178
Best yet: 295
New solution
function cost: 105
child voicing cost: 189
Best yet: 294
New solution
function cost: 105
child voicing cost: 185
Best yet: 290
New solution
function cost: 105
child voicing cost: 184
Best yet: 289
New solution
function cost: 105
child voicing cost: 183
Best yet: 288
New solution
function cost: 105
child voicing cost: 180
Best yet: 285
New solution
function cost: 105
child voicing cost: 178
Best yet: 283
New solution
function cost: 105
child voicing cost: 177
Best yet: 282
New solution
function cost: 105
child voicing cost: 173
Best yet: 278
New solution
function cost: 105
child voicing cost: 170
Best yet: 275
New solution
function cost: 105
child voicing cost: 168
Best yet: 273
New solution
function cost: 105
child voicing cost: 164
Best yet: 269
New solution
function cost: 105
child voicing cost: 162
Best yet: 267
New solution
function cost: 105
child voicing cost: 158
Best yet: 263
New solution
function cost: 105
child voicing cost: 156
Best yet: 261
New solution
function cost: 105
child voicing cost: 152
Best yet: 257
New solution
function cost: 105
child voicing cost: 150
Best yet: 255
New solution
function cost: 105
child voicing cost: 146
Best yet: 251
New solution
function cost: 105
child voicing cost: 144
Best yet: 249
New solution
function cost: 108
child voicing cost: 139
Best yet: 247
New solution
function cost: 108
child voicing cost: 137
Best yet: 245
New solution
function cost: 108
child voicing cost: 134
Best yet: 242
New solution
function cost: 108
child voicing cost: 132
Best yet: 240

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 116666, Pruned: 138108, completed: 35, time: 1.9179999828338623, efficiency: 18.24817534580328
Results: bestval_func: 108, bestval_voices: 132
(15, 359, 359, 359)
[0 1 0 0 0 0 0 0 2 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 0 0 0 1 0 0 1; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 0 2 0 1 0; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 0 1 0 0 1 0 0 2 0; 0 0 0 0 0 0 0 0 3 0 0 1; 1 0 0 2 0 0 0 0 1 0 0 0; 0 0 0 2 0 0 0 1 1 0 0 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 2 0 0 0; 0 3 0 0 0 0 1 0 0 0 0 0; 0 0 0 1 0 0 0 0 0 0 1 2; 0 1 0 1 0 0 0 0 0 0 1 1; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 1 0; 0 0 0 0 1 0 0 0 2 0 1 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 1 1 0 0 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 0 0 1 0 0 2 0 0 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 0 0 0 0 0 2 0 1 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0]
Key Counter is [1 14 0 23 10 0 10 6 35 0 17 15]
Key Score is [32; 100; 55; 82; 107; 34; 114; 42; 96; 84; 47; 124]
Position Counter for 12 is [15 1 14 0 23 10 0 10 6 35 0 17]
Any[[12.0, 89.5, 0.0]]
[12, 90, 0]
9 G# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 168
child voicing cost: 212
Best yet: 380
New solution
function cost: 168
child voicing cost: 207
Best yet: 375
New solution
function cost: 168
child voicing cost: 204
Best yet: 372
New solution
function cost: 168
child voicing cost: 202
Best yet: 370
New solution
function cost: 168
child voicing cost: 199
Best yet: 367
New solution
function cost: 168
child voicing cost: 198
Best yet: 366
New solution
function cost: 168
child voicing cost: 197
Best yet: 365
New solution
function cost: 168
child voicing cost: 196
Best yet: 364
New solution
function cost: 168
child voicing cost: 195
Best yet: 363
New solution
function cost: 168
child voicing cost: 191
Best yet: 359
New solution
function cost: 168
child voicing cost: 188
Best yet: 356
New solution
function cost: 168
child voicing cost: 186
Best yet: 354
New solution
function cost: 168
child voicing cost: 184
Best yet: 352
New solution
function cost: 174
child voicing cost: 174
Best yet: 348
New solution
function cost: 168
child voicing cost: 177
Best yet: 345
New solution
function cost: 168
child voicing cost: 175
Best yet: 343
New solution
function cost: 168
child voicing cost: 173
Best yet: 341
New solution
function cost: 168
child voicing cost: 169
Best yet: 337
New solution
function cost: 168
child voicing cost: 167
Best yet: 335
New solution
function cost: 168
child voicing cost: 165
Best yet: 333
New solution
function cost: 165
child voicing cost: 167
Best yet: 332
New solution
function cost: 165
child voicing cost: 164
Best yet: 329
New solution
function cost: 156
child voicing cost: 171
Best yet: 327
New solution
function cost: 156
child voicing cost: 170
Best yet: 326
New solution
function cost: 156
child voicing cost: 165
Best yet: 321
New solution
function cost: 156
child voicing cost: 161
Best yet: 317

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (9, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])    
 (6, "D/3", [(55, 3), (58, 5), (63, 1), (75, 1)])  
 (0, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])    
 (0, "D", [(51, 1), (63, 1), (67, 3), (70, 5)])    
 (0, "D/3", [(55, 3), (58, 5), (63, 1), (75, 1)])  
 (3, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])    
 (12, "D", [(51, 1), (55, 3), (63, 1), (70, 5)])   
 (12, "D7", [(51, 1), (55, 3), (61, 7), (70, 5)])  
 (0, "T-5", [(56, 1), (56, 1), (59, 3), (68, 1)])  
 (9, "Ts", [(52, 1), (56, 3), (59, 5), (68, 3)])   
 (6, "D", [(51, 1), (55, 3), (63, 1), (70, 5)])    
 (0, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])    
 (0, "S/3", [(52, 3), (56, 5), (61, 1), (73, 1)])  
 ⋮                                                 
 (3, "D7", [(51, 1), (58, 5), (61, 7), (67, 3)])   
 (21, "T-5", [(56, 1), (56, 1), (59, 3), (68, 1)]) 
 (12, "D7/3", [(55, 3), (61, 7), (63, 1), (70, 5)])
 (12, "T", [(56, 1), (59, 3), (63, 5), (68, 1)])   
 (15, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])   
 (12, "S/3", [(52, 3), (56, 5), (68, 5), (73, 1)]) 
 (3, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])    
 (6, "D/5", [(58, 5), (63, 1), (67, 3), (70, 5)])  
 (9, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])    
 (24, "D7", [(51, 1), (67, 3), (70, 5), (73, 7)])  
 (9, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])    
 (9, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])    

##: Done. Total checked: 93707, Pruned: 102954, completed: 26, time: 1.929999828338623, efficiency: 13.471503788879218
Results: bestval_func: 156, bestval_voices: 161
(16, 359, 359, 359)
#Key: 9Scale: Minor
#Total time for optimisation of piece: 4.980999946594238
#Total cost of piece: 557
["T", "D/3", "T", "D", "D/3", "T", "D", "D7", "T-5", "Ts", "D", "T", "S/3", "D", "T", "T", "T/3", "T", "Ts", "Ts", "D7", "T-5", "D7/3", "T", "D", "S/3", "T", "D/5", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-377.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-39.csv
[0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 2 0 0; 0 0 0 0 1 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 0 0 2 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 2 0 0 0 0 0 0 0 2 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 2 0 1 0 0 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 3 0 0 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 2 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 0 0 1 0 0 1 1 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0]
Key Counter is [0 11 38 0 20 0 14 8 3 27 0 10]
Key Score is [103; 28; 128; 49; 85; 93; 38; 117; 22; 123; 73; 58]
Position Counter for 3 is [38 0 20 0 14 8 3 27 0 10 0 11]
Any[[3.0, 95.0, 1.0]]
[3, 95, 1]
3 D Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 156
child voicing cost: 155
Best yet: 311
New solution
function cost: 156
child voicing cost: 153
Best yet: 309
New solution
function cost: 156
child voicing cost: 145
Best yet: 301
New solution
function cost: 156
child voicing cost: 143
Best yet: 299
New solution
function cost: 156
child voicing cost: 141
Best yet: 297
New solution
function cost: 156
child voicing cost: 140
Best yet: 296
New solution
function cost: 156
child voicing cost: 138
Best yet: 294
New solution
function cost: 156
child voicing cost: 137
Best yet: 293
New solution
function cost: 156
child voicing cost: 136
Best yet: 292
New solution
function cost: 156
child voicing cost: 131
Best yet: 287
New solution
function cost: 156
child voicing cost: 130
Best yet: 286
New solution
function cost: 156
child voicing cost: 125
Best yet: 281
New solution
function cost: 156
child voicing cost: 124
Best yet: 280
New solution
function cost: 156
child voicing cost: 122
Best yet: 278
New solution
function cost: 156
child voicing cost: 121
Best yet: 277
New solution
function cost: 150
child voicing cost: 126
Best yet: 276
New solution
function cost: 150
child voicing cost: 124
Best yet: 274
New solution
function cost: 150
child voicing cost: 123
Best yet: 273
New solution
function cost: 150
child voicing cost: 121
Best yet: 271
New solution
function cost: 150
child voicing cost: 120
Best yet: 270
New solution
function cost: 150
child voicing cost: 119
Best yet: 269
New solution
function cost: 150
child voicing cost: 114
Best yet: 264
New solution
function cost: 150
child voicing cost: 113
Best yet: 263
New solution
function cost: 150
child voicing cost: 108
Best yet: 258
New solution
function cost: 150
child voicing cost: 107
Best yet: 257
New solution
function cost: 150
child voicing cost: 105
Best yet: 255
New solution
function cost: 150
child voicing cost: 104
Best yet: 254

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 71820, Pruned: 89026, completed: 27, time: 1.2990000247955322, efficiency: 20.785219002786324
Results: bestval_func: 150, bestval_voices: 104
(15, 381, 381, 381)
[0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 2 0 0; 0 0 0 0 1 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 0 0 2 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 2 0 0 0 0 0 0 0 2 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 2 0 1 0 0 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 3 0 0 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 2 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 0 0 1 0 0 1 1 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0]
Key Counter is [0 11 38 0 20 0 14 8 3 27 0 10]
Key Score is [103; 28; 128; 49; 85; 93; 38; 117; 22; 123; 73; 58]
Position Counter for 3 is [38 0 20 0 14 8 3 27 0 10 0 11]
Any[[3.0, 95.0, 1.0]]
[3, 95, 1]
3 D Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 114
child voicing cost: 195
Best yet: 309
New solution
function cost: 120
child voicing cost: 188
Best yet: 308
New solution
function cost: 120
child voicing cost: 187
Best yet: 307
New solution
function cost: 120
child voicing cost: 182
Best yet: 302
New solution
function cost: 114
child voicing cost: 184
Best yet: 298
New solution
function cost: 114
child voicing cost: 176
Best yet: 290
New solution
function cost: 111
child voicing cost: 174
Best yet: 285
New solution
function cost: 111
child voicing cost: 171
Best yet: 282
New solution
function cost: 114
child voicing cost: 163
Best yet: 277
New solution
function cost: 111
child voicing cost: 161
Best yet: 272
New solution
function cost: 114
child voicing cost: 157
Best yet: 271
New solution
function cost: 111
child voicing cost: 155
Best yet: 266
New solution
function cost: 132
child voicing cost: 132
Best yet: 264
New solution
function cost: 132
child voicing cost: 131
Best yet: 263
New solution
function cost: 120
child voicing cost: 138
Best yet: 258
New solution
function cost: 123
child voicing cost: 134
Best yet: 257
New solution
function cost: 120
child voicing cost: 132
Best yet: 252
New solution
function cost: 120
child voicing cost: 131
Best yet: 251
New solution
function cost: 117
child voicing cost: 129
Best yet: 246

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])    
 (0, "D/3", [(49, 3), (52, 5), (57, 1), (64, 5)])  
 (6, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])    
 (0, "D", [(45, 1), (57, 1), (61, 3), (64, 5)])    
 (18, "S/3", [(47, 3), (55, 1), (62, 5), (67, 1)]) 
 (15, "D", [(45, 1), (52, 5), (61, 3), (69, 1)])   
 (15, "D7-5", [(45, 1), (57, 1), (67, 7), (73, 3)])
 (18, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (0, "T", [(50, 1), (62, 1), (69, 5), (78, 3)])    
 (9, "D7", [(57, 1), (61, 3), (67, 7), (76, 5)])   
 (12, "Ts", [(59, 1), (62, 3), (66, 5), (74, 3)])  
 (6, "D7-1", [(52, 5), (64, 5), (67, 7), (73, 3)]) 
 (0, "T", [(50, 1), (66, 3), (69, 5), (74, 1)])    
 ⋮                                                 
 (6, "D", [(45, 1), (64, 5), (69, 1), (73, 3)])    
 (6, "S/3", [(47, 3), (62, 5), (67, 1), (74, 5)])  
 (3, "S", [(43, 1), (62, 5), (71, 3), (79, 1)])    
 (9, "D7", [(45, 1), (61, 3), (67, 7), (76, 5)])   
 (9, "T-5", [(50, 1), (62, 1), (66, 3), (74, 1)])  
 (6, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])    
 (6, "D/3", [(49, 3), (57, 1), (64, 5), (76, 5)])  
 (3, "T-5", [(50, 1), (62, 1), (66, 3), (74, 1)])  
 (15, "D", [(57, 1), (61, 3), (64, 5), (69, 1)])   
 (15, "D7", [(57, 1), (61, 3), (64, 5), (67, 7)])  
 (6, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (6, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    

##: Done. Total checked: 110678, Pruned: 121722, completed: 19, time: 1.8659999370574951, efficiency: 10.182208274862644
Results: bestval_func: 117, bestval_voices: 129
(16, 381, 381, 381)
#Key: 3Scale: Major
#Total time for optimisation of piece: 4.605000019073486
#Total cost of piece: 500
["T", "D/3", "T", "D", "S/3", "D", "D7-5", "T", "T", "D7", "Ts", "D7-1", "T", "D", "T", "T", "T/3", "T", "D/3", "Ts", "D", "S/3", "S", "D7", "T-5", "T", "D/3", "T-5", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-39.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-390.csv
[0 0 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 0 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 1 0 1 0 0 1 0 0 1 0 0 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 0 0 1 0 0 1 0 2 0; 1 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 0 0 0 2 0 0 2 0 0 0; 1 0 0 0 1 1 0 0 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 0 0 0 3 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 0 0 0 0 1 2 0 1 0; 1 0 0 0 0 0 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 1 0 0 1 0]
Key Counter is [22 1 4 8 1 31 0 18 15 1 24 1]
Key Score is [78; 101; 26; 122; 27; 101; 80; 47; 119; 23; 108; 50]
Position Counter for 4 is [8 1 31 0 18 15 1 24 1 22 1 4]
Any[[4.0, 84.5, 0.0]]
[4, 84, 0]
1 C Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 165
child voicing cost: 172
Best yet: 337
New solution
function cost: 165
child voicing cost: 171
Best yet: 336
New solution
function cost: 165
child voicing cost: 167
Best yet: 332
New solution
function cost: 165
child voicing cost: 159
Best yet: 324
New solution
function cost: 165
child voicing cost: 153
Best yet: 318
New solution
function cost: 165
child voicing cost: 152
Best yet: 317
New solution
function cost: 168
child voicing cost: 148
Best yet: 316
New solution
function cost: 168
child voicing cost: 146
Best yet: 314
New solution
function cost: 168
child voicing cost: 144
Best yet: 312
New solution
function cost: 165
child voicing cost: 145
Best yet: 310
New solution
function cost: 165
child voicing cost: 139
Best yet: 304
New solution
function cost: 165
child voicing cost: 138
Best yet: 303
New solution
function cost: 165
child voicing cost: 136
Best yet: 301
New solution
function cost: 168
child voicing cost: 132
Best yet: 300
New solution
function cost: 165
child voicing cost: 131
Best yet: 296
New solution
function cost: 165
child voicing cost: 125
Best yet: 290
New solution
function cost: 171
child voicing cost: 116
Best yet: 287
New solution
function cost: 171
child voicing cost: 112
Best yet: 283
New solution
function cost: 180
child voicing cost: 100
Best yet: 280
New solution
function cost: 168
child voicing cost: 109
Best yet: 277
New solution
function cost: 162
child voicing cost: 114
Best yet: 276
New solution
function cost: 165
child voicing cost: 110
Best yet: 275
New solution
function cost: 165
child voicing cost: 108
Best yet: 273
New solution
function cost: 168
child voicing cost: 104
Best yet: 272
New solution
function cost: 168
child voicing cost: 103
Best yet: 271
New solution
function cost: 165
child voicing cost: 105
Best yet: 270
New solution
function cost: 168
child voicing cost: 99
Best yet: 267
New solution
function cost: 165
child voicing cost: 100
Best yet: 265
New solution
function cost: 174
child voicing cost: 88
Best yet: 262

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 105726, Pruned: 126796, completed: 29, time: 1.875, efficiency: 15.466666666666667
Results: bestval_func: 174, bestval_voices: 88
(15, 407, 407, 407)
[0 0 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 0 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 1 0 1 0 0 1 0 0 1 0 0 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 0 0 1 0 0 1 0 2 0; 1 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 0 0 0 2 0 0 2 0 0 0; 1 0 0 0 1 1 0 0 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 0 0 0 3 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 0 0 0 0 1 2 0 1 0; 1 0 0 0 0 0 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 1 0 0 1 0]
Key Counter is [22 1 4 8 1 31 0 18 15 1 24 1]
Key Score is [78; 101; 26; 122; 27; 101; 80; 47; 119; 23; 108; 50]
Position Counter for 4 is [8 1 31 0 18 15 1 24 1 22 1 4]
Any[[4.0, 84.5, 0.0]]
[4, 84, 0]
1 C Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 192
child voicing cost: 211
Best yet: 403
New solution
function cost: 192
child voicing cost: 209
Best yet: 401
New solution
function cost: 192
child voicing cost: 201
Best yet: 393
New solution
function cost: 192
child voicing cost: 195
Best yet: 387
New solution
function cost: 192
child voicing cost: 191
Best yet: 383
New solution
function cost: 192
child voicing cost: 189
Best yet: 381
New solution
function cost: 192
child voicing cost: 188
Best yet: 380
New solution
function cost: 195
child voicing cost: 184
Best yet: 379
New solution
function cost: 192
child voicing cost: 185
Best yet: 377
New solution
function cost: 192
child voicing cost: 184
Best yet: 376
New solution
function cost: 192
child voicing cost: 181
Best yet: 373
New solution
function cost: 195
child voicing cost: 175
Best yet: 370
New solution
function cost: 195
child voicing cost: 174
Best yet: 369
New solution
function cost: 192
child voicing cost: 174
Best yet: 366
New solution
function cost: 195
child voicing cost: 170
Best yet: 365
New solution
function cost: 195
child voicing cost: 169
Best yet: 364
New solution
function cost: 192
child voicing cost: 170
Best yet: 362
New solution
function cost: 192
child voicing cost: 169
Best yet: 361
New solution
function cost: 195
child voicing cost: 165
Best yet: 360
New solution
function cost: 192
child voicing cost: 163
Best yet: 355
New solution
function cost: 195
child voicing cost: 159
Best yet: 354
New solution
function cost: 195
child voicing cost: 158
Best yet: 353
New solution
function cost: 195
child voicing cost: 156
Best yet: 351
New solution
function cost: 195
child voicing cost: 154
Best yet: 349
New solution
function cost: 195
child voicing cost: 152
Best yet: 347
New solution
function cost: 201
child voicing cost: 142
Best yet: 343
New solution
function cost: 198
child voicing cost: 143
Best yet: 341
New solution
function cost: 201
child voicing cost: 139
Best yet: 340
New solution
function cost: 198
child voicing cost: 141
Best yet: 339
New solution
function cost: 201
child voicing cost: 135
Best yet: 336
New solution
function cost: 204
child voicing cost: 131
Best yet: 335
New solution
function cost: 198
child voicing cost: 135
Best yet: 333
New solution
function cost: 198
child voicing cost: 132
Best yet: 330
New solution
function cost: 201
child voicing cost: 127
Best yet: 328
New solution
function cost: 201
child voicing cost: 123
Best yet: 324
New solution
function cost: 198
child voicing cost: 125
Best yet: 323
New solution
function cost: 201
child voicing cost: 119
Best yet: 320

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (15, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])   
 (6, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])    
 (0, "S/3", [(56, 3), (60, 5), (65, 1), (77, 1)])  
 (3, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])    
 (12, "T-5", [(48, 1), (60, 1), (63, 3), (72, 1)]) 
 (3, "S/3", [(44, 3), (60, 5), (65, 1), (77, 1)])  
 (27, "D", [(43, 1), (62, 5), (71, 3), (79, 1)])   
 (15, "D7", [(43, 1), (62, 5), (71, 3), (77, 7)])  
 (12, "Ts", [(44, 1), (60, 3), (72, 3), (75, 5)])  
 (12, "D7-1", [(50, 5), (65, 7), (71, 3), (74, 5)])
 (9, "T/3", [(51, 3), (67, 5), (72, 1), (72, 1)])  
 (24, "D/5", [(50, 5), (67, 1), (71, 3), (74, 5)]) 
 (6, "T", [(48, 1), (67, 5), (72, 1), (75, 3)])    
 ⋮                                                 
 (6, "T/3", [(51, 3), (55, 5), (67, 5), (72, 1)])  
 (0, "S/3", [(56, 3), (60, 5), (65, 1), (65, 1)])  
 (30, "T/5", [(55, 5), (60, 1), (63, 3), (67, 5)]) 
 (6, "S", [(53, 1), (60, 5), (65, 1), (68, 3)])    
 (12, "T/3", [(51, 3), (60, 1), (67, 5), (72, 1)]) 
 (12, "S", [(53, 1), (65, 1), (68, 3), (72, 5)])   
 (6, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])    
 (9, "S/3", [(56, 3), (60, 5), (65, 1), (72, 5)])  
 (9, "D54", [(55, 1), (62, 5), (67, 1), (72, 4)])  
 (24, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])   
 (21, "T", [(48, 1), (63, 3), (67, 5), (72, 1)])   
 (21, "T", [(48, 1), (63, 3), (67, 5), (72, 1)])   

##: Done. Total checked: 120276, Pruned: 131539, completed: 37, time: 2.0320000648498535, efficiency: 18.208660836206207
Results: bestval_func: 201, bestval_voices: 119
(16, 407, 407, 407)
#Key: 1Scale: Minor
#Total time for optimisation of piece: 5.519000053405762
#Total cost of piece: 582
["T", "D", "S/3", "D", "T-5", "S/3", "D", "D7", "Ts", "D7-1", "T/3", "D/5", "T", "S", "D", "D", "T/3", "S/3", "D7", "Ts", "T/3", "S/3", "T/5", "S", "T/3", "S", "D", "S/3", "D54", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-390.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-403.csv
[0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 0 2 0 0 0 0 0 0 0 0 1 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 0 0 1 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 0 0 0 0 0 2 0 0 0 2; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 0 0 0 0 2 1 0 1 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 1 0 0 0 0 0 2 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 1 0 1 0 1; 0 1 1 0 0 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 0 0 2; 0 2 0 0 1 0 0 0 0 0 0 1]
Key Counter is [0 14 26 0 12 0 16 17 0 26 1 17]
Key Score is [98; 31; 128; 44; 85; 82; 48; 114; 32; 111; 70; 60]
Position Counter for 3 is [26 0 12 0 16 17 0 26 1 17 0 14]
Any[[3.0, 94.25, 1.0]]
[3, 94, 1]
3 D Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 135
child voicing cost: 176
Best yet: 311
New solution
function cost: 135
child voicing cost: 175
Best yet: 310
New solution
function cost: 135
child voicing cost: 174
Best yet: 309
New solution
function cost: 135
child voicing cost: 166
Best yet: 301
New solution
function cost: 135
child voicing cost: 160
Best yet: 295
New solution
function cost: 138
child voicing cost: 155
Best yet: 293
New solution
function cost: 141
child voicing cost: 150
Best yet: 291
New solution
function cost: 141
child voicing cost: 148
Best yet: 289
New solution
function cost: 135
child voicing cost: 153
Best yet: 288
New solution
function cost: 138
child voicing cost: 148
Best yet: 286
New solution
function cost: 141
child voicing cost: 141
Best yet: 282
New solution
function cost: 144
child voicing cost: 136
Best yet: 280
New solution
function cost: 135
child voicing cost: 144
Best yet: 279
New solution
function cost: 138
child voicing cost: 139
Best yet: 277
New solution
function cost: 141
child voicing cost: 134
Best yet: 275
New solution
function cost: 135
child voicing cost: 137
Best yet: 272
New solution
function cost: 138
child voicing cost: 132
Best yet: 270
New solution
function cost: 141
child voicing cost: 127
Best yet: 268
New solution
function cost: 144
child voicing cost: 122
Best yet: 266

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 94960, Pruned: 113591, completed: 19, time: 1.7029998302459717, efficiency: 11.156783261250089
Results: bestval_func: 144, bestval_voices: 122
(15, 381, 381, 381)
[0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 0 2 0 0 0 0 0 0 0 0 1 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 0 0 1 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 0 0 0 0 0 2 0 0 0 2; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 0 0 0 0 2 1 0 1 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 1 0 0 0 0 0 2 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 1 0 1 0 1; 0 1 1 0 0 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 0 0 2; 0 2 0 0 1 0 0 0 0 0 0 1]
Key Counter is [0 14 26 0 12 0 16 17 0 26 1 17]
Key Score is [98; 31; 128; 44; 85; 82; 48; 114; 32; 111; 70; 60]
Position Counter for 3 is [26 0 12 0 16 17 0 26 1 17 0 14]
Any[[3.0, 94.25, 1.0]]
[3, 94, 1]
3 D Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 135
child voicing cost: 153
Best yet: 288
New solution
function cost: 135
child voicing cost: 151
Best yet: 286
New solution
function cost: 135
child voicing cost: 143
Best yet: 278
New solution
function cost: 135
child voicing cost: 140
Best yet: 275
New solution
function cost: 135
child voicing cost: 136
Best yet: 271
New solution
function cost: 135
child voicing cost: 131
Best yet: 266
New solution
function cost: 120
child voicing cost: 141
Best yet: 261
New solution
function cost: 120
child voicing cost: 136
Best yet: 256
New solution
function cost: 120
child voicing cost: 134
Best yet: 254
New solution
function cost: 120
child voicing cost: 132
Best yet: 252
New solution
function cost: 120
child voicing cost: 124
Best yet: 244
New solution
function cost: 120
child voicing cost: 121
Best yet: 241
New solution
function cost: 120
child voicing cost: 120
Best yet: 240
New solution
function cost: 120
child voicing cost: 117
Best yet: 237
New solution
function cost: 123
child voicing cost: 113
Best yet: 236
New solution
function cost: 129
child voicing cost: 105
Best yet: 234
New solution
function cost: 123
child voicing cost: 108
Best yet: 231
New solution
function cost: 123
child voicing cost: 105
Best yet: 228
New solution
function cost: 129
child voicing cost: 97
Best yet: 226
New solution
function cost: 129
child voicing cost: 96
Best yet: 225
New solution
function cost: 123
child voicing cost: 100
Best yet: 223
New solution
function cost: 123
child voicing cost: 99
Best yet: 222
New solution
function cost: 123
child voicing cost: 97
Best yet: 220
New solution
function cost: 123
child voicing cost: 94
Best yet: 217
New solution
function cost: 123
child voicing cost: 87
Best yet: 210
New solution
function cost: 123
child voicing cost: 78
Best yet: 201

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])    
 (0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])    
 (0, "T/3", [(54, 3), (57, 5), (57, 5), (62, 1)])  
 (0, "S", [(55, 1), (55, 1), (62, 5), (71, 3)])    
 (9, "S/3", [(59, 3), (62, 5), (67, 1), (67, 1)])  
 (0, "Ts", [(59, 1), (62, 3), (66, 5), (71, 1)])   
 (30, "D", [(57, 1), (64, 5), (69, 1), (73, 3)])   
 (15, "D7/7", [(55, 7), (64, 5), (69, 1), (73, 3)])
 (3, "T/3", [(54, 3), (57, 5), (69, 5), (74, 1)])  
 (0, "D/5", [(52, 5), (57, 1), (64, 5), (73, 3)])  
 (0, "T/3", [(54, 3), (57, 5), (69, 5), (74, 1)])  
 (9, "D/5", [(52, 5), (61, 3), (69, 1), (76, 5)])  
 (21, "T", [(50, 1), (62, 1), (69, 5), (78, 3)])   
 ⋮                                                 
 (0, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (3, "D7-1", [(52, 5), (55, 7), (61, 3), (64, 5)]) 
 (9, "T/3", [(54, 3), (57, 5), (62, 1), (62, 1)])  
 (6, "D/5", [(52, 5), (57, 1), (61, 3), (64, 5)])  
 (9, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (3, "D7/3", [(49, 3), (55, 7), (64, 5), (69, 1)]) 
 (3, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])    
 (6, "D7-1", [(52, 5), (55, 7), (61, 3), (67, 7)]) 
 (9, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (6, "D7", [(45, 1), (55, 7), (61, 3), (64, 5)])   
 (9, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])    
 (9, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])    

##: Done. Total checked: 91313, Pruned: 104301, completed: 26, time: 1.6040000915527344, efficiency: 16.209475384026312
Results: bestval_func: 123, bestval_voices: 78
(16, 381, 381, 381)
#Key: 3Scale: Major
#Total time for optimisation of piece: 4.6570000648498535
#Total cost of piece: 467
["T", "T", "T/3", "S", "S/3", "Ts", "D", "D7/7", "T/3", "D/5", "T/3", "D/5", "T", "S", "D", "D", "D7", "Ts", "T/3", "D7/5", "T", "D7-1", "T/3", "D/5", "T", "D7/3", "T", "D7-1", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-403.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-416.csv
[1 0 0 0 0 0 0 0 2 0 0 0; 0 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 1 0 0 0 2 0 0 0 0 0 0; 0 1 0 0 0 2 0 0 0 0 1 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 2 1 0 0 0 0 0 1 0 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 2 0 0 1 0 0 0 0 0 0 1 0; 1 1 0 0 0 0 0 1 0 0 1 0; 1 1 0 0 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 2 0 1 1 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 1 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0]
Key Counter is [33 12 0 16 0 21 0 9 16 1 19 0]
Key Score is [64; 117; 22; 114; 45; 83; 84; 43; 126; 29; 99; 63]
Position Counter for 9 is [16 1 19 0 33 12 0 16 0 21 0 9]
Any[[9.0, 86.25, 0.0]]
[9, 86, 0]
6 F Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 180
child voicing cost: 160
Best yet: 340
New solution
function cost: 180
child voicing cost: 159
Best yet: 339
New solution
function cost: 180
child voicing cost: 151
Best yet: 331
New solution
function cost: 180
child voicing cost: 145
Best yet: 325
New solution
function cost: 174
child voicing cost: 150
Best yet: 324
New solution
function cost: 180
child voicing cost: 141
Best yet: 321
New solution
function cost: 180
child voicing cost: 135
Best yet: 315
New solution
function cost: 183
child voicing cost: 131
Best yet: 314
New solution
function cost: 174
child voicing cost: 131
Best yet: 305
New solution
function cost: 180
child voicing cost: 124
Best yet: 304
New solution
function cost: 168
child voicing cost: 134
Best yet: 302
New solution
function cost: 168
child voicing cost: 132
Best yet: 300
New solution
function cost: 171
child voicing cost: 128
Best yet: 299
New solution
function cost: 171
child voicing cost: 127
Best yet: 298
New solution
function cost: 174
child voicing cost: 121
Best yet: 295
New solution
function cost: 171
child voicing cost: 119
Best yet: 290
New solution
function cost: 171
child voicing cost: 118
Best yet: 289
New solution
function cost: 168
child voicing cost: 120
Best yet: 288
New solution
function cost: 168
child voicing cost: 118
Best yet: 286
New solution
function cost: 171
child voicing cost: 114
Best yet: 285
New solution
function cost: 171
child voicing cost: 113
Best yet: 284
New solution
function cost: 174
child voicing cost: 105
Best yet: 279
New solution
function cost: 174
child voicing cost: 104
Best yet: 278
New solution
function cost: 177
child voicing cost: 100
Best yet: 277
New solution
function cost: 177
child voicing cost: 99
Best yet: 276
New solution
function cost: 177
child voicing cost: 94
Best yet: 271
New solution
function cost: 174
child voicing cost: 95
Best yet: 269
New solution
function cost: 177
child voicing cost: 91
Best yet: 268
New solution
function cost: 174
child voicing cost: 92
Best yet: 266
New solution
function cost: 153
child voicing cost: 112
Best yet: 265
New solution
function cost: 153
child voicing cost: 107
Best yet: 260
New solution
function cost: 147
child voicing cost: 112
Best yet: 259
New solution
function cost: 147
child voicing cost: 111
Best yet: 258
New solution
function cost: 144
child voicing cost: 110
Best yet: 254
New solution
function cost: 153
child voicing cost: 99
Best yet: 252
New solution
function cost: 156
child voicing cost: 95
Best yet: 251
New solution
function cost: 153
child voicing cost: 96
Best yet: 249
New solution
function cost: 153
child voicing cost: 94
Best yet: 247
New solution
function cost: 138
child voicing cost: 106
Best yet: 244
New solution
function cost: 144
child voicing cost: 98
Best yet: 242
New solution
function cost: 147
child voicing cost: 94
Best yet: 241
New solution
function cost: 144
child voicing cost: 93
Best yet: 237
New solution
function cost: 144
child voicing cost: 92
Best yet: 236
New solution
function cost: 138
child voicing cost: 96
Best yet: 234
New solution
function cost: 138
child voicing cost: 94
Best yet: 232
New solution
function cost: 138
child voicing cost: 92
Best yet: 230
New solution
function cost: 141
child voicing cost: 88
Best yet: 229
New solution
function cost: 138
child voicing cost: 89
Best yet: 227
New solution
function cost: 138
child voicing cost: 87
Best yet: 225
New solution
function cost: 138
child voicing cost: 86
Best yet: 224
New solution
function cost: 132
child voicing cost: 90
Best yet: 222
New solution
function cost: 129
child voicing cost: 91
Best yet: 220
New solution
function cost: 132
child voicing cost: 87
Best yet: 219
New solution
function cost: 129
child voicing cost: 86
Best yet: 215
New solution
function cost: 129
child voicing cost: 85
Best yet: 214

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 386461, Pruned: 463740, completed: 55, time: 6.019000053405762, efficiency: 9.137730438942107
Results: bestval_func: 129, bestval_voices: 85
(15, 409, 409, 409)
[1 0 0 0 0 0 0 0 2 0 0 0; 0 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 1 0 0 0 2 0 0 0 0 0 0; 0 1 0 0 0 2 0 0 0 0 1 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 2 1 0 0 0 0 0 1 0 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 2 0 0 1 0 0 0 0 0 0 1 0; 1 1 0 0 0 0 0 1 0 0 1 0; 1 1 0 0 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 2 0 1 1 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 1 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0]
Key Counter is [33 12 0 16 0 21 0 9 16 1 19 0]
Key Score is [64; 117; 22; 114; 45; 83; 84; 43; 126; 29; 99; 63]
Position Counter for 9 is [16 1 19 0 33 12 0 16 0 21 0 9]
Any[[9.0, 86.25, 0.0]]
[9, 86, 0]
6 F Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 204
child voicing cost: 182
Best yet: 386
New solution
function cost: 204
child voicing cost: 177
Best yet: 381
New solution
function cost: 204
child voicing cost: 176
Best yet: 380
New solution
function cost: 204
child voicing cost: 173
Best yet: 377
New solution
function cost: 204
child voicing cost: 171
Best yet: 375
New solution
function cost: 204
child voicing cost: 169
Best yet: 373
New solution
function cost: 204
child voicing cost: 165
Best yet: 369
New solution
function cost: 204
child voicing cost: 163
Best yet: 367
New solution
function cost: 207
child voicing cost: 159
Best yet: 366
New solution
function cost: 204
child voicing cost: 158
Best yet: 362
New solution
function cost: 204
child voicing cost: 156
Best yet: 360
New solution
function cost: 204
child voicing cost: 154
Best yet: 358
New solution
function cost: 204
child voicing cost: 149
Best yet: 353
New solution
function cost: 204
child voicing cost: 147
Best yet: 351
New solution
function cost: 201
child voicing cost: 148
Best yet: 349
New solution
function cost: 201
child voicing cost: 142
Best yet: 343
New solution
function cost: 201
child voicing cost: 141
Best yet: 342
New solution
function cost: 201
child voicing cost: 136
Best yet: 337

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (9, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])    
 (3, "D7-1", [(55, 5), (58, 7), (70, 7), (76, 3)]) 
 (0, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])    
 (3, "D7-1", [(55, 5), (58, 7), (70, 7), (76, 3)]) 
 (9, "D7/3", [(52, 3), (58, 7), (67, 5), (72, 1)]) 
 (0, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])    
 (0, "S", [(46, 1), (58, 1), (65, 5), (73, 3)])    
 (21, "D", [(48, 1), (55, 5), (64, 3), (72, 1)])   
 (18, "D7/7", [(46, 7), (55, 5), (64, 3), (72, 1)])
 (3, "T/3", [(44, 3), (53, 1), (65, 1), (72, 5)])  
 (3, "S65", [(46, 1), (55, 6), (65, 5), (73, 3)])  
 (21, "D", [(48, 1), (55, 5), (64, 3), (72, 1)])   
 (12, "S/3", [(49, 3), (53, 5), (65, 5), (70, 1)]) 
 ⋮                                                 
 (12, "D7-1", [(55, 5), (58, 7), (70, 7), (76, 3)])
 (18, "D7", [(48, 1), (58, 7), (67, 5), (76, 3)])  
 (21, "Ts", [(49, 1), (56, 5), (65, 3), (77, 3)])  
 (12, "D", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (3, "D7-5", [(60, 1), (60, 1), (70, 7), (76, 3)]) 
 (21, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])   
 (9, "D7/3", [(52, 3), (60, 1), (70, 7), (79, 5)]) 
 (6, "T-5", [(53, 1), (65, 1), (68, 3), (77, 1)])  
 (6, "D", [(60, 1), (64, 3), (67, 5), (72, 1)])    
 (15, "D7", [(60, 1), (64, 3), (67, 5), (70, 7)])  
 (21, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (21, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])   

##: Done. Total checked: 64300, Pruned: 70811, completed: 18, time: 1.1489999294281006, efficiency: 15.665797306845144
Results: bestval_func: 201, bestval_voices: 136
(16, 409, 409, 409)
#Key: 6Scale: Minor
#Total time for optimisation of piece: 8.776999950408936
#Total cost of piece: 551
["T", "D7-1", "T", "D7-1", "D7/3", "T", "S", "D", "D7/7", "T/3", "S65", "D", "S/3", "D", "T", "T", "D7-5", "T", "D", "D", "D7-1", "D7", "Ts", "D", "D7-5", "T", "D7/3", "T-5", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-416.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-429.csv
[1 0 0 0 0 0 0 0 0 2 0 0; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 1 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 1 0 0 0 1 0 0 0 1 1 0 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 1 0 1 0 0 0 0 2 0 0 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 1 0 1 0 0 0 0 0 0 1; 3 0 0 0 1 0 0 0 0 0 0 0; 2 0 1 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 3 0 0 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 2 0 1; 1 0 1 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 2 0 0 0 0; 1 0 0 0 0 0 1 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 1 1 0 0 0 0 0 0 1; 1 0 0 1 0 0 0 1 0 0 0 1]
Key Counter is [28 0 23 2 19 4 3 18 2 14 1 16]
Key Score is [122; 40; 93; 78; 56; 107; 28; 121; 55; 77; 90; 43]
Position Counter for 1 is [28 0 23 2 19 4 3 18 2 14 1 16]
Any[[1.0, 80.0, 1.0]]
[1, 80, 1]
1 C Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 180
child voicing cost: 197
Best yet: 377
New solution
function cost: 180
child voicing cost: 195
Best yet: 375
New solution
function cost: 180
child voicing cost: 187
Best yet: 367
New solution
function cost: 180
child voicing cost: 186
Best yet: 366
New solution
function cost: 180
child voicing cost: 181
Best yet: 361
New solution
function cost: 180
child voicing cost: 180
Best yet: 360
New solution
function cost: 180
child voicing cost: 177
Best yet: 357
New solution
function cost: 180
child voicing cost: 174
Best yet: 354
New solution
function cost: 180
child voicing cost: 172
Best yet: 352
New solution
function cost: 180
child voicing cost: 170
Best yet: 350
New solution
function cost: 180
child voicing cost: 166
Best yet: 346
New solution
function cost: 189
child voicing cost: 155
Best yet: 344
New solution
function cost: 174
child voicing cost: 169
Best yet: 343
New solution
function cost: 174
child voicing cost: 166
Best yet: 340
New solution
function cost: 174
child voicing cost: 164
Best yet: 338
New solution
function cost: 174
child voicing cost: 161
Best yet: 335
New solution
function cost: 174
child voicing cost: 159
Best yet: 333
New solution
function cost: 174
child voicing cost: 156
Best yet: 330
New solution
function cost: 174
child voicing cost: 155
Best yet: 329
New solution
function cost: 180
child voicing cost: 146
Best yet: 326
New solution
function cost: 180
child voicing cost: 145
Best yet: 325
New solution
function cost: 180
child voicing cost: 143
Best yet: 323
New solution
function cost: 174
child voicing cost: 148
Best yet: 322
New solution
function cost: 174
child voicing cost: 147
Best yet: 321
New solution
function cost: 174
child voicing cost: 146
Best yet: 320
New solution
function cost: 174
child voicing cost: 145
Best yet: 319
New solution
function cost: 174
child voicing cost: 143
Best yet: 317
New solution
function cost: 180
child voicing cost: 135
Best yet: 315
New solution
function cost: 165
child voicing cost: 149
Best yet: 314
New solution
function cost: 165
child voicing cost: 148
Best yet: 313
New solution
function cost: 171
child voicing cost: 139
Best yet: 310
New solution
function cost: 171
child voicing cost: 138
Best yet: 309
New solution
function cost: 171
child voicing cost: 136
Best yet: 307
New solution
function cost: 162
child voicing cost: 143
Best yet: 305
New solution
function cost: 165
child voicing cost: 137
Best yet: 302

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 164676, Pruned: 203093, completed: 35, time: 2.7279999256134033, efficiency: 12.829912373304076
Results: bestval_func: 165, bestval_voices: 137
(15, 412, 412, 412)
[1 0 0 0 0 0 0 0 0 2 0 0; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 1 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 1 0 0 0 1 0 0 0 1 1 0 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 1 0 1 0 0 0 0 2 0 0 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 1 0 1 0 0 0 0 0 0 1; 3 0 0 0 1 0 0 0 0 0 0 0; 2 0 1 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 3 0 0 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 2 0 1; 1 0 1 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 2 0 0 0 0; 1 0 0 0 0 0 1 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 1 1 0 0 0 0 0 0 1; 1 0 0 1 0 0 0 1 0 0 0 1]
Key Counter is [28 0 23 2 19 4 3 18 2 14 1 16]
Key Score is [122; 40; 93; 78; 56; 107; 28; 121; 55; 77; 90; 43]
Position Counter for 1 is [28 0 23 2 19 4 3 18 2 14 1 16]
Any[[1.0, 80.0, 1.0]]
[1, 80, 1]
1 C Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 141
child voicing cost: 185
Best yet: 326
New solution
function cost: 141
child voicing cost: 183
Best yet: 324
New solution
function cost: 141
child voicing cost: 175
Best yet: 316
New solution
function cost: 141
child voicing cost: 169
Best yet: 310
New solution
function cost: 141
child voicing cost: 168
Best yet: 309
New solution
function cost: 141
child voicing cost: 163
Best yet: 304
New solution
function cost: 141
child voicing cost: 159
Best yet: 300
New solution
function cost: 141
child voicing cost: 158
Best yet: 299
New solution
function cost: 141
child voicing cost: 156
Best yet: 297
New solution
function cost: 141
child voicing cost: 153
Best yet: 294
New solution
function cost: 141
child voicing cost: 150
Best yet: 291
New solution
function cost: 141
child voicing cost: 148
Best yet: 289
New solution
function cost: 138
child voicing cost: 150
Best yet: 288
New solution
function cost: 138
child voicing cost: 149
Best yet: 287
New solution
function cost: 138
child voicing cost: 145
Best yet: 283
New solution
function cost: 138
child voicing cost: 142
Best yet: 280
New solution
function cost: 138
child voicing cost: 140
Best yet: 278
New solution
function cost: 138
child voicing cost: 139
Best yet: 277
New solution
function cost: 144
child voicing cost: 131
Best yet: 275
New solution
function cost: 144
child voicing cost: 130
Best yet: 274
New solution
function cost: 144
child voicing cost: 128
Best yet: 272
New solution
function cost: 144
child voicing cost: 125
Best yet: 269
New solution
function cost: 144
child voicing cost: 123
Best yet: 267
New solution
function cost: 144
child voicing cost: 122
Best yet: 266
New solution
function cost: 144
child voicing cost: 121
Best yet: 265
New solution
function cost: 144
child voicing cost: 120
Best yet: 264
New solution
function cost: 144
child voicing cost: 118
Best yet: 262
New solution
function cost: 144
child voicing cost: 116
Best yet: 260
New solution
function cost: 144
child voicing cost: 115
Best yet: 259

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (15, "T", [(60, 1), (60, 1), (67, 5), (76, 3)])   
 (3, "T", [(60, 1), (60, 1), (67, 5), (76, 3)])    
 (9, "D7", [(55, 1), (65, 7), (71, 3), (74, 5)])   
 (9, "Ts", [(57, 1), (64, 5), (72, 3), (72, 3)])   
 (9, "T/3", [(52, 3), (67, 5), (67, 5), (72, 1)])  
 (12, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (12, "S", [(53, 1), (60, 5), (69, 3), (77, 1)])   
 (9, "D", [(55, 1), (67, 1), (71, 3), (74, 5)])    
 (3, "D", [(55, 1), (67, 1), (71, 3), (74, 5)])    
 (3, "D", [(55, 1), (59, 3), (67, 1), (74, 5)])    
 (27, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (6, "S65/6", [(50, 6), (60, 5), (65, 1), (69, 3)])
 (15, "D7-1", [(50, 5), (62, 5), (65, 7), (71, 3)])
 ⋮                                                 
 (0, "T-5", [(60, 1), (60, 1), (64, 3), (72, 1)])  
 (9, "S65", [(53, 1), (62, 6), (69, 3), (72, 5)])  
 (18, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])   
 (12, "T", [(60, 1), (64, 3), (67, 5), (72, 1)])   
 (0, "D/3", [(59, 3), (62, 5), (67, 1), (74, 5)])  
 (9, "D", [(55, 1), (62, 5), (71, 3), (79, 1)])    
 (9, "S/3", [(57, 3), (60, 5), (65, 1), (77, 1)])  
 (3, "D/3", [(59, 3), (62, 5), (67, 1), (74, 5)])  
 (3, "T", [(60, 1), (64, 3), (67, 5), (72, 1)])    
 (15, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])   
 (18, "T", [(48, 1), (64, 3), (67, 5), (72, 1)])   
 (18, "T", [(48, 1), (64, 3), (67, 5), (72, 1)])   

##: Done. Total checked: 76163, Pruned: 84259, completed: 29, time: 1.3229999542236328, efficiency: 21.919879821173446
Results: bestval_func: 144, bestval_voices: 115
(16, 412, 412, 412)
#Key: 1Scale: Major
#Total time for optimisation of piece: 5.651000022888184
#Total cost of piece: 561
["T", "T", "D7", "Ts", "T/3", "T", "S", "D", "D", "D", "T", "S65/6", "D7-1", "D7/3", "T", "T", "D7", "Ts", "S65", "D", "T-5", "S65", "D", "T", "D/3", "D", "S/3", "D/3", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-429.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-442.csv
[0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 0 0 1 0 0 2 0 1 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 0 1 1 0 0 0 1 0 0 0 0 1; 0 1 1 0 0 0 2 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 0 0 1 0 0 1 0 1 0 1; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 1 1 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 0 0 0 2 0 1; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 0 0 0 0 0 2 0 1 0 1; 1 0 0 0 0 0 0 2 0 0 0 1; 0 0 0 0 1 0 0 2 0 0 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 0 0 0 0 1 0 1 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 1 0 0 0 2]
Key Counter is [3 9 26 0 14 0 15 18 0 27 0 20]
Key Score is [108; 27; 129; 47; 85; 88; 44; 123; 30; 111; 74; 58]
Position Counter for 3 is [26 0 14 0 15 18 0 27 0 20 3 9]
Any[[3.0, 92.25, 1.0]]
[3, 92, 1]
3 D Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 168
child voicing cost: 177
Best yet: 345
New solution
function cost: 168
child voicing cost: 175
Best yet: 343
New solution
function cost: 168
child voicing cost: 167
Best yet: 335
New solution
function cost: 168
child voicing cost: 166
Best yet: 334
New solution
function cost: 162
child voicing cost: 171
Best yet: 333
New solution
function cost: 162
child voicing cost: 170
Best yet: 332
New solution
function cost: 162
child voicing cost: 165
Best yet: 327
New solution
function cost: 162
child voicing cost: 162
Best yet: 324
New solution
function cost: 162
child voicing cost: 158
Best yet: 320
New solution
function cost: 168
child voicing cost: 150
Best yet: 318
New solution
function cost: 162
child voicing cost: 151
Best yet: 313
New solution
function cost: 162
child voicing cost: 150
Best yet: 312
New solution
function cost: 162
child voicing cost: 145
Best yet: 307
New solution
function cost: 162
child voicing cost: 142
Best yet: 304
New solution
function cost: 162
child voicing cost: 140
Best yet: 302
New solution
function cost: 162
child voicing cost: 138
Best yet: 300
New solution
function cost: 162
child voicing cost: 136
Best yet: 298
New solution
function cost: 162
child voicing cost: 135
Best yet: 297
New solution
function cost: 162
child voicing cost: 133
Best yet: 295
New solution
function cost: 162
child voicing cost: 130
Best yet: 292
New solution
function cost: 162
child voicing cost: 128
Best yet: 290
New solution
function cost: 162
child voicing cost: 127
Best yet: 289
New solution
function cost: 162
child voicing cost: 124
Best yet: 286
New solution
function cost: 162
child voicing cost: 122
Best yet: 284
New solution
function cost: 162
child voicing cost: 121
Best yet: 283
New solution
function cost: 162
child voicing cost: 119
Best yet: 281
New solution
function cost: 162
child voicing cost: 117
Best yet: 279
New solution
function cost: 162
child voicing cost: 116
Best yet: 278
New solution
function cost: 162
child voicing cost: 114
Best yet: 276
New solution
function cost: 162
child voicing cost: 111
Best yet: 273
New solution
function cost: 162
child voicing cost: 109
Best yet: 271
New solution
function cost: 162
child voicing cost: 108
Best yet: 270
New solution
function cost: 162
child voicing cost: 105
Best yet: 267
New solution
function cost: 162
child voicing cost: 103
Best yet: 265

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 80825, Pruned: 96247, completed: 34, time: 1.4479999542236328, efficiency: 23.480663725731688
Results: bestval_func: 162, bestval_voices: 103
(15, 381, 381, 381)
[0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 0 0 1 0 0 2 0 1 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 0 1 1 0 0 0 1 0 0 0 0 1; 0 1 1 0 0 0 2 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 0 0 1 0 0 1 0 1 0 1; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 1 1 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 0 0 0 2 0 1; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 0 0 0 0 0 2 0 1 0 1; 1 0 0 0 0 0 0 2 0 0 0 1; 0 0 0 0 1 0 0 2 0 0 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 0 0 0 0 1 0 1 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 1 0 0 0 2]
Key Counter is [3 9 26 0 14 0 15 18 0 27 0 20]
Key Score is [108; 27; 129; 47; 85; 88; 44; 123; 30; 111; 74; 58]
Position Counter for 3 is [26 0 14 0 15 18 0 27 0 20 3 9]
Any[[3.0, 92.25, 1.0]]
[3, 92, 1]
3 D Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 163
Best yet: 313
New solution
function cost: 150
child voicing cost: 162
Best yet: 312
New solution
function cost: 150
child voicing cost: 157
Best yet: 307
New solution
function cost: 150
child voicing cost: 156
Best yet: 306
New solution
function cost: 150
child voicing cost: 154
Best yet: 304
New solution
function cost: 162
child voicing cost: 140
Best yet: 302
New solution
function cost: 150
child voicing cost: 151
Best yet: 301
New solution
function cost: 144
child voicing cost: 155
Best yet: 299
New solution
function cost: 144
child voicing cost: 150
Best yet: 294
New solution
function cost: 150
child voicing cost: 142
Best yet: 292
New solution
function cost: 144
child voicing cost: 147
Best yet: 291
New solution
function cost: 144
child voicing cost: 145
Best yet: 289
New solution
function cost: 144
child voicing cost: 139
Best yet: 283
New solution
function cost: 144
child voicing cost: 137
Best yet: 281
New solution
function cost: 141
child voicing cost: 139
Best yet: 280
New solution
function cost: 141
child voicing cost: 138
Best yet: 279
New solution
function cost: 141
child voicing cost: 136
Best yet: 277
New solution
function cost: 141
child voicing cost: 131
Best yet: 272
New solution
function cost: 129
child voicing cost: 140
Best yet: 269
New solution
function cost: 120
child voicing cost: 146
Best yet: 266
New solution
function cost: 129
child voicing cost: 136
Best yet: 265
New solution
function cost: 120
child voicing cost: 144
Best yet: 264
New solution
function cost: 129
child voicing cost: 134
Best yet: 263
New solution
function cost: 126
child voicing cost: 135
Best yet: 261
New solution
function cost: 129
child voicing cost: 128
Best yet: 257
New solution
function cost: 129
child voicing cost: 126
Best yet: 255
New solution
function cost: 129
child voicing cost: 124
Best yet: 253
New solution
function cost: 126
child voicing cost: 124
Best yet: 250
New solution
function cost: 129
child voicing cost: 117
Best yet: 246

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(50, 1), (62, 1), (69, 5), (78, 3)])    
 (0, "D", [(57, 1), (64, 5), (69, 1), (73, 3)])    
 (0, "Ts", [(59, 1), (59, 1), (66, 5), (74, 3)])   
 (0, "Tm", [(54, 1), (57, 3), (66, 1), (73, 5)])   
 (3, "D7/3", [(49, 3), (57, 1), (67, 7), (76, 5)]) 
 (24, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (3, "S", [(55, 1), (59, 3), (67, 1), (74, 5)])    
 (21, "D", [(57, 1), (57, 1), (64, 5), (73, 3)])   
 (12, "D7-1", [(52, 5), (55, 7), (67, 7), (73, 3)])
 (18, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (6, "D7/3", [(49, 3), (57, 1), (67, 7), (76, 5)]) 
 (21, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (24, "D/3", [(49, 3), (64, 5), (69, 1), (76, 5)]) 
 ⋮                                                 
 (0, "Ss", [(52, 1), (55, 3), (67, 3), (71, 5)])   
 (9, "Ss", [(52, 1), (55, 3), (67, 3), (71, 5)])   
 (6, "D", [(45, 1), (57, 1), (64, 5), (73, 3)])    
 (0, "D/3", [(49, 3), (57, 1), (64, 5), (69, 1)])  
 (9, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (12, "D7-1", [(52, 5), (55, 7), (61, 3), (64, 5)])
 (0, "T/3", [(54, 3), (57, 5), (62, 1), (62, 1)])  
 (9, "D", [(57, 1), (57, 1), (61, 3), (64, 5)])    
 (6, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (18, "D7", [(45, 1), (55, 7), (61, 3), (64, 5)])  
 (21, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])   
 (21, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])   

##: Done. Total checked: 170561, Pruned: 187088, completed: 29, time: 3.2230000495910645, efficiency: 8.99782797200997
Results: bestval_func: 129, bestval_voices: 117
(16, 381, 381, 381)
#Key: 3Scale: Major
#Total time for optimisation of piece: 6.031999826431274
#Total cost of piece: 511
["T", "D", "Ts", "Tm", "D7/3", "T", "S", "D", "D7-1", "T", "D7/3", "T", "D/3", "T", "D", "D", "T/3", "S/3", "T/5", "S", "Ss", "Ss", "D", "D/3", "T", "D7-1", "T/3", "D", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-442.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-455.csv
[1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 0 0 0 0 0 1 0 1 1 0; 1 0 0 0 0 1 0 1 0 1 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 0 1; 1 0 1 0 0 0 0 0 0 1 1 0; 0 0 2 0 0 2 0 0 0 0 0 0; 0 0 1 0 0 2 0 0 0 1 0 0; 1 0 0 1 0 1 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 2 0 1 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 1 1 1 0 0 0 0; 1 0 0 0 0 1 0 0 0 1 0 1; 1 0 0 0 1 0 0 1 0 0 1 0; 0 0 1 0 0 2 0 0 0 0 1 0; 0 0 2 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 0 1 0 0 0 2 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 1 0 0 1 0 1 0 0; 1 0 2 0 0 0 0 1 0 0 0 0]
Key Counter is [32 2 16 1 3 28 2 16 0 15 14 3]
Key Score is [113; 79; 57; 107; 26; 124; 50; 87; 93; 41; 122; 25]
Position Counter for 6 is [28 2 16 0 15 14 3 32 2 16 1 3]
Any[[6.0, 88.75, 1.0]]
[6, 89, 1]
6 F Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 199
Best yet: 349
New solution
function cost: 150
child voicing cost: 198
Best yet: 348
New solution
function cost: 150
child voicing cost: 193
Best yet: 343
New solution
function cost: 150
child voicing cost: 190
Best yet: 340
New solution
function cost: 150
child voicing cost: 187
Best yet: 337
New solution
function cost: 150
child voicing cost: 184
Best yet: 334
New solution
function cost: 150
child voicing cost: 181
Best yet: 331
New solution
function cost: 150
child voicing cost: 179
Best yet: 329
New solution
function cost: 150
child voicing cost: 177
Best yet: 327
New solution
function cost: 150
child voicing cost: 176
Best yet: 326
New solution
function cost: 150
child voicing cost: 175
Best yet: 325
New solution
function cost: 150
child voicing cost: 174
Best yet: 324
New solution
function cost: 150
child voicing cost: 170
Best yet: 320
New solution
function cost: 150
child voicing cost: 169
Best yet: 319
New solution
function cost: 150
child voicing cost: 165
Best yet: 315
New solution
function cost: 150
child voicing cost: 161
Best yet: 311
New solution
function cost: 150
child voicing cost: 155
Best yet: 305
New solution
function cost: 150
child voicing cost: 154
Best yet: 304
New solution
function cost: 150
child voicing cost: 150
Best yet: 300
New solution
function cost: 150
child voicing cost: 141
Best yet: 291

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 53208, Pruned: 63915, completed: 20, time: 0.9209997653961182, efficiency: 21.715532133059863
Results: bestval_func: 150, bestval_voices: 141
(15, 404, 404, 404)
[1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 0 0 0 0 0 1 0 1 1 0; 1 0 0 0 0 1 0 1 0 1 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 0 1; 1 0 1 0 0 0 0 0 0 1 1 0; 0 0 2 0 0 2 0 0 0 0 0 0; 0 0 1 0 0 2 0 0 0 1 0 0; 1 0 0 1 0 1 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 2 0 1 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 1 1 1 0 0 0 0; 1 0 0 0 0 1 0 0 0 1 0 1; 1 0 0 0 1 0 0 1 0 0 1 0; 0 0 1 0 0 2 0 0 0 0 1 0; 0 0 2 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 0 1 0 0 0 2 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 1 0 0 1 0 1 0 0; 1 0 2 0 0 0 0 1 0 0 0 0]
Key Counter is [32 2 16 1 3 28 2 16 0 15 14 3]
Key Score is [113; 79; 57; 107; 26; 124; 50; 87; 93; 41; 122; 25]
Position Counter for 6 is [28 2 16 0 15 14 3 32 2 16 1 3]
Any[[6.0, 88.75, 1.0]]
[6, 89, 1]
6 F Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 165
child voicing cost: 206
Best yet: 371
New solution
function cost: 165
child voicing cost: 200
Best yet: 365
New solution
function cost: 165
child voicing cost: 198
Best yet: 363
New solution
function cost: 165
child voicing cost: 194
Best yet: 359
New solution
function cost: 165
child voicing cost: 190
Best yet: 355
New solution
function cost: 159
child voicing cost: 183
Best yet: 342
New solution
function cost: 159
child voicing cost: 181
Best yet: 340
New solution
function cost: 159
child voicing cost: 180
Best yet: 339
New solution
function cost: 159
child voicing cost: 174
Best yet: 333
New solution
function cost: 159
child voicing cost: 172
Best yet: 331
New solution
function cost: 159
child voicing cost: 171
Best yet: 330
New solution
function cost: 159
child voicing cost: 170
Best yet: 329
New solution
function cost: 159
child voicing cost: 169
Best yet: 328
New solution
function cost: 162
child voicing cost: 165
Best yet: 327
New solution
function cost: 162
child voicing cost: 163
Best yet: 325
New solution
function cost: 159
child voicing cost: 165
Best yet: 324
New solution
function cost: 168
child voicing cost: 155
Best yet: 323
New solution
function cost: 156
child voicing cost: 165
Best yet: 321
New solution
function cost: 156
child voicing cost: 163
Best yet: 319
New solution
function cost: 156
child voicing cost: 161
Best yet: 317
New solution
function cost: 156
child voicing cost: 156
Best yet: 312
New solution
function cost: 156
child voicing cost: 155
Best yet: 311
New solution
function cost: 156
child voicing cost: 153
Best yet: 309
New solution
function cost: 156
child voicing cost: 151
Best yet: 307
New solution
function cost: 156
child voicing cost: 146
Best yet: 302
New solution
function cost: 156
child voicing cost: 145
Best yet: 301
New solution
function cost: 156
child voicing cost: 143
Best yet: 299
New solution
function cost: 156
child voicing cost: 139
Best yet: 295
New solution
function cost: 156
child voicing cost: 137
Best yet: 293
New solution
function cost: 156
child voicing cost: 135
Best yet: 291
New solution
function cost: 156
child voicing cost: 134
Best yet: 290
New solution
function cost: 156
child voicing cost: 131
Best yet: 287
New solution
function cost: 159
child voicing cost: 126
Best yet: 285
New solution
function cost: 141
child voicing cost: 141
Best yet: 282
New solution
function cost: 144
child voicing cost: 137
Best yet: 281
New solution
function cost: 144
child voicing cost: 135
Best yet: 279
New solution
function cost: 144
child voicing cost: 134
Best yet: 278
New solution
function cost: 144
child voicing cost: 132
Best yet: 276
New solution
function cost: 138
child voicing cost: 137
Best yet: 275
New solution
function cost: 138
child voicing cost: 135
Best yet: 273
New solution
function cost: 138
child voicing cost: 130
Best yet: 268
New solution
function cost: 138
child voicing cost: 129
Best yet: 267
New solution
function cost: 138
child voicing cost: 124
Best yet: 262
New solution
function cost: 138
child voicing cost: 123
Best yet: 261
New solution
function cost: 138
child voicing cost: 122
Best yet: 260
New solution
function cost: 138
child voicing cost: 121
Best yet: 259
New solution
function cost: 138
child voicing cost: 120
Best yet: 258
New solution
function cost: 138
child voicing cost: 119
Best yet: 257
New solution
function cost: 138
child voicing cost: 117
Best yet: 255
New solution
function cost: 138
child voicing cost: 115
Best yet: 253
New solution
function cost: 138
child voicing cost: 113
Best yet: 251
New solution
function cost: 138
child voicing cost: 112
Best yet: 250
New solution
function cost: 138
child voicing cost: 110
Best yet: 248
New solution
function cost: 138
child voicing cost: 109
Best yet: 247
New solution
function cost: 138
child voicing cost: 106
Best yet: 244
New solution
function cost: 138
child voicing cost: 104
Best yet: 242
New solution
function cost: 138
child voicing cost: 103
Best yet: 241
New solution
function cost: 138
child voicing cost: 102
Best yet: 240
New solution
function cost: 138
child voicing cost: 100
Best yet: 238
New solution
function cost: 138
child voicing cost: 99
Best yet: 237

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(53, 1), (53, 1), (60, 5), (69, 3)])    
 (0, "T", [(53, 1), (53, 1), (60, 5), (69, 3)])    
 (3, "S", [(46, 1), (53, 5), (58, 1), (62, 3)])    
 (0, "T", [(53, 1), (53, 1), (60, 5), (69, 3)])    
 (6, "D7-5", [(48, 1), (60, 1), (64, 3), (70, 7)]) 
 (24, "T", [(53, 1), (53, 1), (60, 5), (69, 3)])   
 (15, "S", [(46, 1), (53, 5), (58, 1), (62, 3)])   
 (12, "D", [(48, 1), (52, 3), (55, 5), (60, 1)])   
 (3, "D", [(48, 1), (52, 3), (60, 1), (67, 5)])    
 (12, "D", [(48, 1), (52, 3), (60, 1), (67, 5)])   
 (12, "D7", [(48, 1), (52, 3), (58, 7), (67, 5)])  
 (0, "Ts", [(50, 1), (53, 3), (57, 5), (62, 1)])   
 (18, "D7/3", [(52, 3), (55, 5), (58, 7), (60, 1)])
 ⋮                                                 
 (0, "D7", [(48, 1), (52, 3), (58, 7), (67, 5)])   
 (3, "Ts", [(50, 1), (53, 3), (57, 5), (65, 3)])   
 (9, "S65", [(46, 1), (53, 5), (62, 3), (67, 6)])  
 (0, "T/5", [(48, 5), (53, 1), (60, 5), (69, 3)])  
 (9, "S/3", [(50, 3), (53, 5), (58, 1), (70, 1)])  
 (3, "D", [(48, 1), (55, 5), (64, 3), (72, 1)])    
 (3, "D7/7", [(46, 7), (55, 5), (64, 3), (72, 1)]) 
 (9, "T/3", [(45, 3), (60, 5), (65, 1), (72, 5)])  
 (12, "S", [(46, 1), (62, 3), (65, 5), (70, 1)])   
 (18, "D", [(48, 1), (60, 1), (64, 3), (67, 5)])   
 (21, "T", [(53, 1), (60, 5), (65, 1), (69, 3)])   
 (21, "T", [(53, 1), (60, 5), (65, 1), (69, 3)])   

##: Done. Total checked: 147248, Pruned: 162119, completed: 60, time: 2.544999837875366, efficiency: 23.575640008719844
Results: bestval_func: 138, bestval_voices: 99
(16, 404, 404, 404)
#Key: 6Scale: Major
#Total time for optimisation of piece: 4.996000051498413
#Total cost of piece: 528
["T", "T", "S", "T", "D7-5", "T", "S", "D", "D", "D", "D7", "Ts", "D7/3", "T", "D", "D", "D7", "Ts", "D/3", "S/3", "D7", "Ts", "S65", "T/5", "S/3", "D", "D7/7", "T/3", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-455.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-468.csv
[2 0 0 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 0 0 2 0 0 0 0 0 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 1 0 0 1 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 0 0 2 0 0 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 1 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 2 0 1 0 0 0 0 0 0 0 0 1; 2 0 0 0 0 0 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 1 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 3 0 0 0 0 0 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1]
Key Counter is [27 0 32 0 8 2 4 26 0 15 2 14]
Key Score is [124; 35; 99; 89; 41; 112; 22; 126; 57; 73; 104; 28]
Position Counter for 8 is [26 0 15 2 14 27 0 32 0 8 2 4]
Any[[8.0, 98.25, 1.0]]
[8, 98, 1]
8 G Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 120
child voicing cost: 190
Best yet: 310
New solution
function cost: 102
child voicing cost: 204
Best yet: 306
New solution
function cost: 102
child voicing cost: 199
Best yet: 301
New solution
function cost: 102
child voicing cost: 194
Best yet: 296
New solution
function cost: 120
child voicing cost: 175
Best yet: 295
New solution
function cost: 102
child voicing cost: 192
Best yet: 294
New solution
function cost: 102
child voicing cost: 190
Best yet: 292
New solution
function cost: 102
child voicing cost: 189
Best yet: 291
New solution
function cost: 102
child voicing cost: 187
Best yet: 289
New solution
function cost: 105
child voicing cost: 181
Best yet: 286
New solution
function cost: 105
child voicing cost: 179
Best yet: 284
New solution
function cost: 99
child voicing cost: 179
Best yet: 278
New solution
function cost: 105
child voicing cost: 172
Best yet: 277
New solution
function cost: 105
child voicing cost: 164
Best yet: 269
New solution
function cost: 117
child voicing cost: 150
Best yet: 267
New solution
function cost: 99
child voicing cost: 166
Best yet: 265
New solution
function cost: 99
child voicing cost: 165
Best yet: 264
New solution
function cost: 99
child voicing cost: 163
Best yet: 262
New solution
function cost: 99
child voicing cost: 160
Best yet: 259
New solution
function cost: 105
child voicing cost: 152
Best yet: 257
New solution
function cost: 105
child voicing cost: 150
Best yet: 255
New solution
function cost: 105
child voicing cost: 147
Best yet: 252
New solution
function cost: 105
child voicing cost: 145
Best yet: 250
New solution
function cost: 99
child voicing cost: 150
Best yet: 249
New solution
function cost: 105
child voicing cost: 139
Best yet: 244
New solution
function cost: 105
child voicing cost: 137
Best yet: 242
New solution
function cost: 99
child voicing cost: 140
Best yet: 239
New solution
function cost: 114
child voicing cost: 124
Best yet: 238
New solution
function cost: 114
child voicing cost: 121
Best yet: 235
New solution
function cost: 105
child voicing cost: 129
Best yet: 234
New solution
function cost: 114
child voicing cost: 119
Best yet: 233
New solution
function cost: 114
child voicing cost: 118
Best yet: 232
New solution
function cost: 114
child voicing cost: 116
Best yet: 230
New solution
function cost: 114
child voicing cost: 113
Best yet: 227
New solution
function cost: 105
child voicing cost: 120
Best yet: 225
New solution
function cost: 84
child voicing cost: 140
Best yet: 224
New solution
function cost: 78
child voicing cost: 145
Best yet: 223
New solution
function cost: 78
child voicing cost: 142
Best yet: 220
New solution
function cost: 93
child voicing cost: 124
Best yet: 217
New solution
function cost: 78
child voicing cost: 136
Best yet: 214
New solution
function cost: 93
child voicing cost: 120
Best yet: 213
New solution
function cost: 93
child voicing cost: 118
Best yet: 211
New solution
function cost: 93
child voicing cost: 115
Best yet: 208
New solution
function cost: 78
child voicing cost: 129
Best yet: 207
New solution
function cost: 78
child voicing cost: 127
Best yet: 205
New solution
function cost: 78
child voicing cost: 126
Best yet: 204

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 212484, Pruned: 258164, completed: 46, time: 3.8259999752044678, efficiency: 12.023000600657788
Results: bestval_func: 78, bestval_voices: 126
(15, 405, 405, 405)
[2 0 0 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 0 0 2 0 0 0 0 0 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 1 0 0 1 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 0 0 2 0 0 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 1 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 2 0 1 0 0 0 0 0 0 0 0 1; 2 0 0 0 0 0 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 1 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 3 0 0 0 0 0 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1]
Key Counter is [27 0 32 0 8 2 4 26 0 15 2 14]
Key Score is [124; 35; 99; 89; 41; 112; 22; 126; 57; 73; 104; 28]
Position Counter for 8 is [26 0 15 2 14 27 0 32 0 8 2 4]
Any[[8.0, 98.25, 1.0]]
[8, 98, 1]
8 G Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 162
child voicing cost: 208
Best yet: 370
New solution
function cost: 162
child voicing cost: 203
Best yet: 365
New solution
function cost: 162
child voicing cost: 202
Best yet: 364
New solution
function cost: 162
child voicing cost: 197
Best yet: 359
New solution
function cost: 162
child voicing cost: 195
Best yet: 357
New solution
function cost: 162
child voicing cost: 191
Best yet: 353
New solution
function cost: 162
child voicing cost: 187
Best yet: 349
New solution
function cost: 156
child voicing cost: 186
Best yet: 342
New solution
function cost: 156
child voicing cost: 181
Best yet: 337
New solution
function cost: 162
child voicing cost: 174
Best yet: 336
New solution
function cost: 156
child voicing cost: 175
Best yet: 331
New solution
function cost: 162
child voicing cost: 168
Best yet: 330
New solution
function cost: 156
child voicing cost: 171
Best yet: 327
New solution
function cost: 162
child voicing cost: 164
Best yet: 326
New solution
function cost: 162
child voicing cost: 163
Best yet: 325
New solution
function cost: 162
child voicing cost: 162
Best yet: 324
New solution
function cost: 162
child voicing cost: 157
Best yet: 319
New solution
function cost: 162
child voicing cost: 155
Best yet: 317
New solution
function cost: 162
child voicing cost: 150
Best yet: 312
New solution
function cost: 162
child voicing cost: 149
Best yet: 311
New solution
function cost: 162
child voicing cost: 148
Best yet: 310
New solution
function cost: 162
child voicing cost: 147
Best yet: 309
New solution
function cost: 162
child voicing cost: 146
Best yet: 308
New solution
function cost: 162
child voicing cost: 144
Best yet: 306
New solution
function cost: 162
child voicing cost: 143
Best yet: 305
New solution
function cost: 162
child voicing cost: 142
Best yet: 304
New solution
function cost: 162
child voicing cost: 140
Best yet: 302
New solution
function cost: 162
child voicing cost: 135
Best yet: 297
New solution
function cost: 162
child voicing cost: 134
Best yet: 296
New solution
function cost: 162
child voicing cost: 133
Best yet: 295
New solution
function cost: 162
child voicing cost: 132
Best yet: 294
New solution
function cost: 162
child voicing cost: 131
Best yet: 293
New solution
function cost: 189
child voicing cost: 103
Best yet: 292
New solution
function cost: 177
child voicing cost: 113
Best yet: 290
New solution
function cost: 177
child voicing cost: 108
Best yet: 285
New solution
function cost: 177
child voicing cost: 107
Best yet: 284
New solution
function cost: 177
child voicing cost: 104
Best yet: 281
New solution
function cost: 177
child voicing cost: 101
Best yet: 278
New solution
function cost: 174
child voicing cost: 101
Best yet: 275
New solution
function cost: 174
child voicing cost: 100
Best yet: 274
New solution
function cost: 174
child voicing cost: 99
Best yet: 273
New solution
function cost: 177
child voicing cost: 93
Best yet: 270
New solution
function cost: 177
child voicing cost: 90
Best yet: 267
New solution
function cost: 177
child voicing cost: 89
Best yet: 266
New solution
function cost: 177
child voicing cost: 88
Best yet: 265

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (15, "T", [(55, 1), (55, 1), (62, 5), (71, 3)])    
 (0, "D", [(50, 1), (62, 1), (66, 3), (69, 5)])     
 (0, "D7/3", [(54, 3), (60, 7), (62, 1), (69, 5)])  
 (0, "T", [(55, 1), (59, 3), (62, 5), (67, 1)])     
 (3, "Ts", [(52, 1), (64, 1), (67, 3), (71, 5)])    
 (0, "D7", [(50, 1), (57, 5), (66, 3), (72, 7)])    
 (3, "T", [(43, 1), (55, 1), (62, 5), (71, 3)])     
 (9, "D", [(50, 1), (54, 3), (62, 1), (69, 5)])     
 (3, "T/3", [(47, 3), (55, 1), (62, 5), (67, 1)])   
 (3, "S", [(48, 1), (60, 1), (64, 3), (67, 5)])     
 (0, "S/3", [(52, 3), (60, 1), (67, 5), (72, 1)])   
 (12, "S", [(48, 1), (60, 1), (67, 5), (76, 3)])    
 (15, "D", [(50, 1), (57, 5), (66, 3), (74, 1)])    
 ⋮                                                  
 (0, "T/3", [(59, 3), (62, 5), (67, 1), (74, 5)])   
 (9, "S", [(60, 1), (64, 3), (67, 5), (72, 1)])     
 (12, "S65/6", [(57, 6), (64, 3), (67, 5), (72, 1)])
 (3, "D", [(50, 1), (62, 1), (69, 5), (78, 3)])     
 (6, "D7/7", [(48, 7), (62, 1), (69, 5), (78, 3)])  
 (9, "T/3", [(47, 3), (62, 5), (67, 1), (79, 1)])   
 (6, "S", [(48, 1), (60, 1), (67, 5), (76, 3)])     
 (21, "T/5", [(50, 5), (59, 3), (67, 1), (74, 5)])  
 (15, "S", [(48, 1), (60, 1), (67, 5), (76, 3)])    
 (12, "D7", [(50, 1), (60, 7), (66, 3), (69, 5)])   
 (15, "T", [(55, 1), (59, 3), (62, 5), (67, 1)])    
 (15, "T", [(55, 1), (59, 3), (62, 5), (67, 1)])    

##: Done. Total checked: 168154, Pruned: 187777, completed: 45, time: 3.065000057220459, efficiency: 14.68189205869344
Results: bestval_func: 177, bestval_voices: 88
(16, 405, 405, 405)
#Key: 8Scale: Major
#Total time for optimisation of piece: 8.535000085830688
#Total cost of piece: 469
["T", "D", "D7/3", "T", "Ts", "D7", "T", "D", "T/3", "S", "S/3", "S", "D", "D/3", "T", "T", "D7/3", "T", "D7/3", "Ts", "T/3", "S", "S65/6", "D", "D7/7", "T/3", "S", "T/5", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-468.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-481.csv
[2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 0 1; 2 0 0 0 0 0 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 0 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 2 1 0 0 0 0 0 0 1 0; 0 0 1 1 0 1 0 0 0 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 0 0 2 0 0 1 0; 0 0 0 0 0 3 0 0 1 0 0 0; 1 0 0 0 2 0 0 0 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 1 0 1 0 0 0 0 1 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 0 1 1 0]
Key Counter is [23 0 11 19 2 22 0 14 13 1 26 1]
Key Score is [74; 103; 29; 128; 36; 99; 81; 52; 117; 28; 116; 61]
Position Counter for 4 is [19 2 22 0 14 13 1 26 1 23 0 11]
Any[[4.0, 83.75, 1.0]]
[4, 84, 1]
4 D# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 168
child voicing cost: 153
Best yet: 321
New solution
function cost: 168
child voicing cost: 151
Best yet: 319
New solution
function cost: 168
child voicing cost: 143
Best yet: 311
New solution
function cost: 168
child voicing cost: 142
Best yet: 310
New solution
function cost: 168
child voicing cost: 141
Best yet: 309
New solution
function cost: 168
child voicing cost: 140
Best yet: 308
New solution
function cost: 168
child voicing cost: 135
Best yet: 303
New solution
function cost: 153
child voicing cost: 147
Best yet: 300
New solution
function cost: 153
child voicing cost: 145
Best yet: 298
New solution
function cost: 153
child voicing cost: 143
Best yet: 296
New solution
function cost: 153
child voicing cost: 139
Best yet: 292
New solution
function cost: 153
child voicing cost: 137
Best yet: 290
New solution
function cost: 153
child voicing cost: 133
Best yet: 286
New solution
function cost: 153
child voicing cost: 126
Best yet: 279
New solution
function cost: 153
child voicing cost: 125
Best yet: 278
New solution
function cost: 150
child voicing cost: 125
Best yet: 275
New solution
function cost: 150
child voicing cost: 123
Best yet: 273
New solution
function cost: 150
child voicing cost: 121
Best yet: 271
New solution
function cost: 147
child voicing cost: 123
Best yet: 270
New solution
function cost: 147
child voicing cost: 119
Best yet: 266
New solution
function cost: 147
child voicing cost: 118
Best yet: 265
New solution
function cost: 144
child voicing cost: 120
Best yet: 264
New solution
function cost: 144
child voicing cost: 116
Best yet: 260
New solution
function cost: 144
child voicing cost: 114
Best yet: 258

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 64185, Pruned: 77057, completed: 24, time: 1.1969997882843018, efficiency: 20.050128859588163
Results: bestval_func: 144, bestval_voices: 114
(15, 381, 381, 381)
[2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 0 1; 2 0 0 0 0 0 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 0 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 2 1 0 0 0 0 0 0 1 0; 0 0 1 1 0 1 0 0 0 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 0 0 2 0 0 1 0; 0 0 0 0 0 3 0 0 1 0 0 0; 1 0 0 0 2 0 0 0 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 1 0 1 0 0 0 0 1 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 0 1 1 0]
Key Counter is [23 0 11 19 2 22 0 14 13 1 26 1]
Key Score is [74; 103; 29; 128; 36; 99; 81; 52; 117; 28; 116; 61]
Position Counter for 4 is [19 2 22 0 14 13 1 26 1 23 0 11]
Any[[4.0, 83.75, 1.0]]
[4, 84, 1]
4 D# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 135
child voicing cost: 151
Best yet: 286
New solution
function cost: 135
child voicing cost: 146
Best yet: 281
New solution
function cost: 135
child voicing cost: 144
Best yet: 279
New solution
function cost: 135
child voicing cost: 132
Best yet: 267
New solution
function cost: 135
child voicing cost: 127
Best yet: 262
New solution
function cost: 138
child voicing cost: 122
Best yet: 260
New solution
function cost: 138
child voicing cost: 117
Best yet: 255

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (18, "T", [(51, 1), (51, 1), (58, 5), (67, 3)])  
 (6, "D7", [(46, 1), (56, 7), (65, 5), (74, 3)])  
 (9, "Ts", [(48, 1), (55, 5), (63, 3), (75, 3)])  
 (0, "D", [(46, 1), (58, 1), (65, 5), (74, 3)])   
 (0, "T", [(51, 1), (58, 5), (67, 3), (75, 1)])   
 (12, "Ts", [(48, 1), (60, 1), (67, 5), (75, 3)]) 
 (21, "D", [(46, 1), (65, 5), (70, 1), (74, 3)])  
 (6, "D7-1", [(53, 5), (68, 7), (68, 7), (74, 3)])
 (18, "T", [(51, 1), (67, 3), (70, 5), (75, 1)])  
 (6, "D7-1", [(53, 5), (65, 5), (68, 7), (74, 3)])
 (9, "D7/7", [(56, 7), (65, 5), (70, 1), (74, 3)])
 (6, "T/3", [(55, 3), (63, 1), (70, 5), (75, 1)]) 
 (18, "S", [(56, 1), (63, 5), (68, 1), (72, 3)])  
 ⋮                                                
 (21, "T-5", [(51, 1), (63, 1), (67, 3), (75, 1)])
 (6, "S/3", [(48, 3), (63, 5), (68, 1), (80, 1)]) 
 (15, "D7", [(46, 1), (65, 5), (68, 7), (74, 3)]) 
 (18, "Ts", [(48, 1), (60, 1), (67, 5), (75, 3)]) 
 (0, "Ss", [(53, 1), (60, 5), (68, 3), (80, 3)])  
 (15, "T", [(51, 1), (63, 1), (70, 5), (79, 3)])  
 (6, "D/3", [(50, 3), (65, 5), (70, 1), (77, 5)]) 
 (9, "S/3", [(48, 3), (63, 5), (68, 1), (80, 1)]) 
 (0, "D64", [(46, 1), (63, 4), (70, 1), (79, 6)]) 
 (0, "D", [(46, 1), (62, 3), (70, 1), (77, 5)])   
 (12, "T", [(51, 1), (63, 1), (70, 5), (79, 3)])  
 (12, "T", [(51, 1), (63, 1), (70, 5), (79, 3)])  

##: Done. Total checked: 71988, Pruned: 80023, completed: 7, time: 1.1800000667572021, efficiency: 5.932203054222645
Results: bestval_func: 138, bestval_voices: 117
(16, 381, 381, 381)
#Key: 4Scale: Major
#Total time for optimisation of piece: 3.703000068664551
#Total cost of piece: 513
["T", "D7", "Ts", "D", "T", "Ts", "D", "D7-1", "T", "D7-1", "D7/7", "T/3", "S", "D", "T", "T", "T/3", "D7/5", "T", "D7", "T-5", "S/3", "D7", "Ts", "Ss", "T", "D/3", "S/3", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-481.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-494.csv
[0 0 1 0 0 0 0 1 0 0 0 2; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 0 0 0 0 1 0 0 2 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 0 1 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 1 0 0 1 0 1 1 0 0 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 2 0 0 1 0 1 0 0 0 0 0; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 1 0 1 0 0 0 0 0 0 2; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 1 0 0 0 0]
Key Counter is [0 8 38 0 14 0 20 19 1 21 1 10]
Key Score is [102; 30; 130; 59; 74; 93; 40; 122; 29; 112; 79; 54]
Position Counter for 3 is [38 0 14 0 20 19 1 21 1 10 0 8]
Any[[3.0, 97.0, 1.0]]
[3, 97, 1]
3 D Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 135
child voicing cost: 154
Best yet: 289
New solution
function cost: 135
child voicing cost: 153
Best yet: 288
New solution
function cost: 135
child voicing cost: 152
Best yet: 287
New solution
function cost: 135
child voicing cost: 144
Best yet: 279
New solution
function cost: 135
child voicing cost: 138
Best yet: 273
New solution
function cost: 135
child voicing cost: 137
Best yet: 272
New solution
function cost: 135
child voicing cost: 136
Best yet: 271
New solution
function cost: 135
child voicing cost: 133
Best yet: 268
New solution
function cost: 126
child voicing cost: 139
Best yet: 265
New solution
function cost: 126
child voicing cost: 138
Best yet: 264
New solution
function cost: 126
child voicing cost: 135
Best yet: 261
New solution
function cost: 126
child voicing cost: 129
Best yet: 255
New solution
function cost: 126
child voicing cost: 128
Best yet: 254
New solution
function cost: 120
child voicing cost: 133
Best yet: 253
New solution
function cost: 120
child voicing cost: 130
Best yet: 250
New solution
function cost: 120
child voicing cost: 127
Best yet: 247
New solution
function cost: 120
child voicing cost: 121
Best yet: 241
New solution
function cost: 120
child voicing cost: 120
Best yet: 240
New solution
function cost: 111
child voicing cost: 126
Best yet: 237
New solution
function cost: 111
child voicing cost: 125
Best yet: 236
New solution
function cost: 105
child voicing cost: 128
Best yet: 233
New solution
function cost: 105
child voicing cost: 127
Best yet: 232
New solution
function cost: 105
child voicing cost: 124
Best yet: 229

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 64529, Pruned: 75383, completed: 23, time: 1.123999834060669, efficiency: 20.462636472914777
Results: bestval_func: 105, bestval_voices: 124
(15, 381, 381, 381)
[0 0 1 0 0 0 0 1 0 0 0 2; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 0 0 0 0 1 0 0 2 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 0 1 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 1 0 0 1 0 1 1 0 0 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 2 0 0 1 0 1 0 0 0 0 0; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 1 0 1 0 0 0 0 0 0 2; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 1 0 0 0 0]
Key Counter is [0 8 38 0 14 0 20 19 1 21 1 10]
Key Score is [102; 30; 130; 59; 74; 93; 40; 122; 29; 112; 79; 54]
Position Counter for 3 is [38 0 14 0 20 19 1 21 1 10 0 8]
Any[[3.0, 97.0, 1.0]]
[3, 97, 1]
3 D Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 183
child voicing cost: 142
Best yet: 325
New solution
function cost: 183
child voicing cost: 140
Best yet: 323
New solution
function cost: 183
child voicing cost: 132
Best yet: 315
New solution
function cost: 183
child voicing cost: 130
Best yet: 313
New solution
function cost: 183
child voicing cost: 128
Best yet: 311
New solution
function cost: 183
child voicing cost: 126
Best yet: 309
New solution
function cost: 183
child voicing cost: 122
Best yet: 305
New solution
function cost: 183
child voicing cost: 120
Best yet: 303
New solution
function cost: 183
child voicing cost: 119
Best yet: 302
New solution
function cost: 183
child voicing cost: 117
Best yet: 300
New solution
function cost: 183
child voicing cost: 115
Best yet: 298
New solution
function cost: 183
child voicing cost: 113
Best yet: 296
New solution
function cost: 183
child voicing cost: 111
Best yet: 294
New solution
function cost: 162
child voicing cost: 128
Best yet: 290
New solution
function cost: 162
child voicing cost: 126
Best yet: 288
New solution
function cost: 162
child voicing cost: 125
Best yet: 287
New solution
function cost: 162
child voicing cost: 123
Best yet: 285
New solution
function cost: 162
child voicing cost: 122
Best yet: 284
New solution
function cost: 162
child voicing cost: 121
Best yet: 283
New solution
function cost: 162
child voicing cost: 119
Best yet: 281
New solution
function cost: 162
child voicing cost: 117
Best yet: 279
New solution
function cost: 162
child voicing cost: 115
Best yet: 277
New solution
function cost: 162
child voicing cost: 113
Best yet: 275

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (18, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])   
 (6, "D7", [(45, 1), (55, 7), (64, 5), (73, 3)])   
 (9, "Ts", [(47, 1), (54, 5), (62, 3), (74, 3)])   
 (0, "D", [(45, 1), (57, 1), (64, 5), (73, 3)])    
 (0, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])    
 (6, "Ts", [(47, 1), (59, 1), (66, 5), (74, 3)])   
 (15, "D", [(45, 1), (64, 5), (69, 1), (73, 3)])   
 (3, "D7/3", [(49, 3), (64, 5), (67, 7), (69, 1)]) 
 (15, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])   
 (12, "D", [(45, 1), (61, 3), (64, 5), (69, 1)])   
 (0, "D/3", [(49, 3), (57, 1), (64, 5), (76, 5)])  
 (0, "T-5", [(50, 1), (62, 1), (66, 3), (74, 1)])  
 (0, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])    
 ⋮                                                 
 (3, "D7/3", [(49, 3), (55, 7), (64, 5), (69, 1)]) 
 (0, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])    
 (9, "Ss", [(52, 1), (55, 3), (59, 5), (67, 3)])   
 (6, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (12, "D7-1", [(52, 5), (55, 7), (61, 3), (64, 5)])
 (6, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (12, "D7-1", [(52, 5), (55, 7), (61, 3), (64, 5)])
 (6, "D7-1", [(52, 5), (55, 7), (61, 3), (64, 5)]) 
 (21, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])   
 (12, "D", [(45, 1), (57, 1), (61, 3), (64, 5)])   
 (27, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])   
 (27, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])   

##: Done. Total checked: 91861, Pruned: 101437, completed: 23, time: 1.5360000133514404, efficiency: 14.973958203174536
Results: bestval_func: 162, bestval_voices: 113
(16, 381, 381, 381)
#Key: 3Scale: Major
#Total time for optimisation of piece: 3.9560000896453857
#Total cost of piece: 504
["T", "D7", "Ts", "D", "T", "Ts", "D", "D7/3", "T", "D", "D/3", "T-5", "T", "S", "D", "D", "T", "D7-1", "D7", "Ts", "D7/3", "T", "Ss", "T", "D7-1", "T", "D7-1", "D7-1", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-494.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-507.csv
[0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 0 1 0 0 0 0; 0 1 1 0 0 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 1 0 0 0 2 0 0 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 0 2 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 1 0 2; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 2 0 0 0 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 1 0 2 0 0 0 0 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 0 0 2 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 1 0 1 0 0 0 0 0 0 2]
Key Counter is [0 16 14 0 30 0 12 2 7 26 0 24]
Key Score is [96; 35; 124; 23; 115; 72; 59; 108; 25; 129; 42; 89]
Position Counter for 10 is [26 0 24 0 16 14 0 30 0 12 2 7]
Any[[10.0, 90.0, 1.0]]
[10, 90, 1]
10 A Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 144
child voicing cost: 151
Best yet: 295
New solution
function cost: 144
child voicing cost: 149
Best yet: 293
New solution
function cost: 144
child voicing cost: 147
Best yet: 291
New solution
function cost: 144
child voicing cost: 144
Best yet: 288
New solution
function cost: 144
child voicing cost: 141
Best yet: 285
New solution
function cost: 147
child voicing cost: 137
Best yet: 284
New solution
function cost: 144
child voicing cost: 138
Best yet: 282
New solution
function cost: 144
child voicing cost: 133
Best yet: 277
New solution
function cost: 144
child voicing cost: 131
Best yet: 275
New solution
function cost: 144
child voicing cost: 128
Best yet: 272
New solution
function cost: 144
child voicing cost: 124
Best yet: 268
New solution
function cost: 135
child voicing cost: 132
Best yet: 267
New solution
function cost: 135
child voicing cost: 130
Best yet: 265
New solution
function cost: 135
child voicing cost: 127
Best yet: 262
New solution
function cost: 135
child voicing cost: 124
Best yet: 259
New solution
function cost: 138
child voicing cost: 120
Best yet: 258
New solution
function cost: 147
child voicing cost: 110
Best yet: 257
New solution
function cost: 138
child voicing cost: 116
Best yet: 254
New solution
function cost: 138
child voicing cost: 114
Best yet: 252
New solution
function cost: 138
child voicing cost: 111
Best yet: 249
New solution
function cost: 132
child voicing cost: 116
Best yet: 248
New solution
function cost: 138
child voicing cost: 106
Best yet: 244
New solution
function cost: 135
child voicing cost: 107
Best yet: 242
New solution
function cost: 135
child voicing cost: 104
Best yet: 239
New solution
function cost: 147
child voicing cost: 90
Best yet: 237
New solution
function cost: 138
child voicing cost: 96
Best yet: 234
New solution
function cost: 138
child voicing cost: 91
Best yet: 229

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 108056, Pruned: 129325, completed: 27, time: 1.7990000247955322, efficiency: 15.008337758677197
Results: bestval_func: 138, bestval_voices: 91
(15, 379, 379, 379)
[0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 0 1 0 0 0 0; 0 1 1 0 0 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 1 0 0 0 2 0 0 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 0 2 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 1 0 2; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 2 0 0 0 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 1 0 2 0 0 0 0 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 0 0 2 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 1 0 1 0 0 0 0 0 0 2]
Key Counter is [0 16 14 0 30 0 12 2 7 26 0 24]
Key Score is [96; 35; 124; 23; 115; 72; 59; 108; 25; 129; 42; 89]
Position Counter for 10 is [26 0 24 0 16 14 0 30 0 12 2 7]
Any[[10.0, 90.0, 1.0]]
[10, 90, 1]
10 A Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 159
child voicing cost: 203
Best yet: 362
New solution
function cost: 159
child voicing cost: 195
Best yet: 354
New solution
function cost: 159
child voicing cost: 191
Best yet: 350
New solution
function cost: 159
child voicing cost: 190
Best yet: 349
New solution
function cost: 159
child voicing cost: 185
Best yet: 344
New solution
function cost: 159
child voicing cost: 183
Best yet: 342
New solution
function cost: 159
child voicing cost: 178
Best yet: 337
New solution
function cost: 162
child voicing cost: 174
Best yet: 336
New solution
function cost: 162
child voicing cost: 169
Best yet: 331
New solution
function cost: 162
child voicing cost: 167
Best yet: 329
New solution
function cost: 162
child voicing cost: 162
Best yet: 324
New solution
function cost: 159
child voicing cost: 161
Best yet: 320
New solution
function cost: 162
child voicing cost: 156
Best yet: 318
New solution
function cost: 162
child voicing cost: 151
Best yet: 313
New solution
function cost: 150
child voicing cost: 162
Best yet: 312
New solution
function cost: 150
child voicing cost: 157
Best yet: 307
New solution
function cost: 150
child voicing cost: 155
Best yet: 305
New solution
function cost: 150
child voicing cost: 150
Best yet: 300
New solution
function cost: 153
child voicing cost: 146
Best yet: 299
New solution
function cost: 153
child voicing cost: 141
Best yet: 294
New solution
function cost: 153
child voicing cost: 139
Best yet: 292
New solution
function cost: 153
child voicing cost: 134
Best yet: 287
New solution
function cost: 153
child voicing cost: 130
Best yet: 283
New solution
function cost: 153
child voicing cost: 125
Best yet: 278
New solution
function cost: 144
child voicing cost: 128
Best yet: 272
New solution
function cost: 144
child voicing cost: 124
Best yet: 268
New solution
function cost: 150
child voicing cost: 116
Best yet: 266
New solution
function cost: 141
child voicing cost: 124
Best yet: 265
New solution
function cost: 141
child voicing cost: 119
Best yet: 260
New solution
function cost: 141
child voicing cost: 118
Best yet: 259
New solution
function cost: 141
child voicing cost: 113
Best yet: 254
New solution
function cost: 147
child voicing cost: 106
Best yet: 253
New solution
function cost: 141
child voicing cost: 108
Best yet: 249
New solution
function cost: 147
child voicing cost: 100
Best yet: 247
New solution
function cost: 144
child voicing cost: 102
Best yet: 246
New solution
function cost: 144
child voicing cost: 98
Best yet: 242
New solution
function cost: 144
child voicing cost: 94
Best yet: 238

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (24, "T", [(57, 1), (57, 1), (64, 5), (73, 3)])   
 (3, "T", [(57, 1), (57, 1), (64, 5), (73, 3)])    
 (6, "D7", [(52, 1), (62, 7), (68, 3), (71, 5)])   
 (6, "T", [(45, 1), (61, 3), (69, 1), (76, 5)])    
 (0, "D7/3", [(44, 3), (62, 7), (71, 5), (76, 1)]) 
 (0, "T", [(45, 1), (61, 3), (69, 1), (76, 5)])    
 (18, "S", [(50, 1), (62, 1), (69, 5), (78, 3)])   
 (15, "S", [(50, 1), (62, 1), (69, 5), (78, 3)])   
 (3, "T/3", [(49, 3), (64, 5), (69, 1), (76, 5)])  
 (12, "D7/5", [(47, 5), (64, 1), (68, 3), (74, 7)])
 (18, "T", [(45, 1), (64, 5), (69, 1), (73, 3)])   
 (6, "S65", [(50, 1), (66, 3), (69, 5), (71, 6)])  
 (15, "D", [(52, 1), (64, 1), (68, 3), (71, 5)])   
 ⋮                                                 
 (6, "T", [(45, 1), (64, 5), (69, 1), (73, 3)])    
 (6, "D/3", [(44, 3), (59, 5), (64, 1), (76, 1)])  
 (0, "T", [(45, 1), (61, 3), (69, 1), (76, 5)])    
 (15, "D7-1", [(47, 5), (62, 7), (68, 3), (74, 7)])
 (6, "T", [(45, 1), (64, 5), (69, 1), (73, 3)])    
 (0, "D/5", [(47, 5), (64, 1), (68, 3), (71, 5)])  
 (24, "T", [(45, 1), (64, 5), (69, 1), (73, 3)])   
 (6, "T/3", [(49, 3), (64, 5), (69, 1), (76, 5)])  
 (6, "S", [(50, 1), (62, 1), (69, 5), (78, 3)])    
 (9, "D", [(52, 1), (59, 5), (68, 3), (76, 1)])    
 (15, "T", [(57, 1), (61, 3), (69, 1), (76, 5)])   
 (15, "T", [(57, 1), (61, 3), (69, 1), (76, 5)])   

##: Done. Total checked: 145782, Pruned: 161872, completed: 37, time: 2.314000129699707, efficiency: 15.989627452960244
Results: bestval_func: 144, bestval_voices: 94
(16, 379, 379, 379)
#Key: 10Scale: Major
#Total time for optimisation of piece: 5.392000198364258
#Total cost of piece: 467
["T", "T", "D7", "T", "D7/3", "T", "S", "S", "T/3", "D7/5", "T", "S65", "D", "D7/3", "T", "T", "Ss", "D/3", "Ts", "D7-1", "T", "D/3", "T", "D7-1", "T", "D/5", "T", "T/3", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-507.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-52.csv
[0 1 0 2 0 0 0 1 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 0; 0 0 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 3 0 0 0 1 0 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 0 0 0 2 0 0 1; 0 0 0 0 0 0 0 1 1 0 1 1; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 0 0 0 0 1 2 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0]
Key Counter is [0 11 0 29 7 0 3 22 32 0 19 5]
Key Score is [34; 94; 48; 102; 87; 48; 99; 37; 113; 58; 70; 106]
Position Counter for 9 is [32 0 19 5 0 11 0 29 7 0 3 22]
Any[[9.0, 98.75, 1.0]]
[9, 99, 1]
9 G# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 165
child voicing cost: 203
Best yet: 368
New solution
function cost: 165
child voicing cost: 202
Best yet: 367
New solution
function cost: 180
child voicing cost: 185
Best yet: 365
New solution
function cost: 180
child voicing cost: 182
Best yet: 362
New solution
function cost: 180
child voicing cost: 179
Best yet: 359
New solution
function cost: 165
child voicing cost: 192
Best yet: 357
New solution
function cost: 165
child voicing cost: 191
Best yet: 356
New solution
function cost: 165
child voicing cost: 176
Best yet: 341
New solution
function cost: 165
child voicing cost: 174
Best yet: 339
New solution
function cost: 165
child voicing cost: 171
Best yet: 336
New solution
function cost: 165
child voicing cost: 168
Best yet: 333
New solution
function cost: 132
child voicing cost: 189
Best yet: 321
New solution
function cost: 132
child voicing cost: 183
Best yet: 315
New solution
function cost: 132
child voicing cost: 179
Best yet: 311
New solution
function cost: 132
child voicing cost: 176
Best yet: 308
New solution
function cost: 132
child voicing cost: 174
Best yet: 306
New solution
function cost: 132
child voicing cost: 171
Best yet: 303
New solution
function cost: 132
child voicing cost: 170
Best yet: 302
New solution
function cost: 132
child voicing cost: 167
Best yet: 299
New solution
function cost: 144
child voicing cost: 153
Best yet: 297
New solution
function cost: 144
child voicing cost: 152
Best yet: 296
New solution
function cost: 144
child voicing cost: 150
Best yet: 294
New solution
function cost: 144
child voicing cost: 147
Best yet: 291
New solution
function cost: 144
child voicing cost: 145
Best yet: 289
New solution
function cost: 144
child voicing cost: 144
Best yet: 288
New solution
function cost: 147
child voicing cost: 136
Best yet: 283
New solution
function cost: 144
child voicing cost: 138
Best yet: 282
New solution
function cost: 144
child voicing cost: 137
Best yet: 281
New solution
function cost: 144
child voicing cost: 134
Best yet: 278
New solution
function cost: 144
child voicing cost: 132
Best yet: 276
New solution
function cost: 156
child voicing cost: 118
Best yet: 274
New solution
function cost: 156
child voicing cost: 117
Best yet: 273
New solution
function cost: 156
child voicing cost: 112
Best yet: 268
New solution
function cost: 132
child voicing cost: 133
Best yet: 265
New solution
function cost: 141
child voicing cost: 123
Best yet: 264
New solution
function cost: 132
child voicing cost: 130
Best yet: 262
New solution
function cost: 141
child voicing cost: 119
Best yet: 260
New solution
function cost: 141
child voicing cost: 117
Best yet: 258
New solution
function cost: 141
child voicing cost: 116
Best yet: 257
New solution
function cost: 141
child voicing cost: 115
Best yet: 256
New solution
function cost: 141
child voicing cost: 114
Best yet: 255
New solution
function cost: 147
child voicing cost: 107
Best yet: 254
New solution
function cost: 147
child voicing cost: 105
Best yet: 252
New solution
function cost: 144
child voicing cost: 106
Best yet: 250
New solution
function cost: 141
child voicing cost: 107
Best yet: 248
New solution
function cost: 141
child voicing cost: 102
Best yet: 243
New solution
function cost: 141
child voicing cost: 100
Best yet: 241
New solution
function cost: 144
child voicing cost: 93
Best yet: 237
New solution
function cost: 144
child voicing cost: 91
Best yet: 235

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 370529, Pruned: 427537, completed: 49, time: 5.539000034332275, efficiency: 8.846362104402285
Results: bestval_func: 144, bestval_voices: 91
(15, 360, 360, 360)
[0 1 0 2 0 0 0 1 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 0; 0 0 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 3 0 0 0 1 0 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 0 0 0 2 0 0 1; 0 0 0 0 0 0 0 1 1 0 1 1; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 0 0 0 0 1 2 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0]
Key Counter is [0 11 0 29 7 0 3 22 32 0 19 5]
Key Score is [34; 94; 48; 102; 87; 48; 99; 37; 113; 58; 70; 106]
Position Counter for 9 is [32 0 19 5 0 11 0 29 7 0 3 22]
Any[[9.0, 98.75, 1.0]]
[9, 99, 1]
9 G# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 156
child voicing cost: 155
Best yet: 311
New solution
function cost: 156
child voicing cost: 149
Best yet: 305
New solution
function cost: 156
child voicing cost: 147
Best yet: 303
New solution
function cost: 156
child voicing cost: 145
Best yet: 301
New solution
function cost: 156
child voicing cost: 142
Best yet: 298
New solution
function cost: 156
child voicing cost: 140
Best yet: 296
New solution
function cost: 156
child voicing cost: 139
Best yet: 295
New solution
function cost: 156
child voicing cost: 137
Best yet: 293
New solution
function cost: 156
child voicing cost: 136
Best yet: 292
New solution
function cost: 156
child voicing cost: 134
Best yet: 290
New solution
function cost: 156
child voicing cost: 133
Best yet: 289
New solution
function cost: 156
child voicing cost: 131
Best yet: 287
New solution
function cost: 156
child voicing cost: 130
Best yet: 286
New solution
function cost: 156
child voicing cost: 129
Best yet: 285
New solution
function cost: 156
child voicing cost: 127
Best yet: 283
New solution
function cost: 156
child voicing cost: 124
Best yet: 280
New solution
function cost: 156
child voicing cost: 122
Best yet: 278
New solution
function cost: 156
child voicing cost: 120
Best yet: 276
New solution
function cost: 156
child voicing cost: 119
Best yet: 275
New solution
function cost: 156
child voicing cost: 117
Best yet: 273
New solution
function cost: 141
child voicing cost: 130
Best yet: 271
New solution
function cost: 141
child voicing cost: 128
Best yet: 269
New solution
function cost: 141
child voicing cost: 126
Best yet: 267
New solution
function cost: 141
child voicing cost: 124
Best yet: 265
New solution
function cost: 141
child voicing cost: 118
Best yet: 259
New solution
function cost: 138
child voicing cost: 117
Best yet: 255
New solution
function cost: 138
child voicing cost: 114
Best yet: 252
New solution
function cost: 138
child voicing cost: 112
Best yet: 250
New solution
function cost: 138
child voicing cost: 110
Best yet: 248
New solution
function cost: 138
child voicing cost: 104
Best yet: 242
New solution
function cost: 138
child voicing cost: 102
Best yet: 240

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (21, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])   
 (3, "S/3", [(53, 3), (56, 5), (61, 1), (68, 5)])  
 (12, "D7", [(51, 1), (55, 3), (61, 7), (70, 5)])  
 (12, "Ts", [(53, 1), (56, 3), (60, 5), (68, 3)])  
 (6, "D", [(51, 1), (63, 1), (67, 3), (70, 5)])    
 (18, "D7-1", [(58, 5), (61, 7), (67, 3), (70, 5)])
 (9, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (9, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (0, "D-5", [(51, 1), (63, 1), (67, 3), (75, 1)])  
 (21, "D7/7", [(49, 7), (58, 5), (67, 3), (75, 1)])
 (0, "T/3", [(48, 3), (63, 5), (68, 1), (75, 5)])  
 (9, "D7/5", [(46, 5), (63, 1), (67, 3), (73, 7)]) 
 (6, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])    
 ⋮                                                 
 (0, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])    
 (12, "T-5", [(44, 1), (56, 1), (60, 3), (68, 1)]) 
 (6, "D/3", [(43, 3), (51, 1), (58, 5), (70, 5)])  
 (6, "T", [(44, 1), (51, 5), (60, 3), (68, 1)])    
 (3, "S", [(49, 1), (53, 3), (61, 1), (68, 5)])    
 (3, "D7/7", [(49, 7), (58, 5), (63, 1), (67, 3)]) 
 (9, "T/3", [(48, 3), (56, 1), (63, 5), (68, 1)])  
 (6, "D/5", [(46, 5), (55, 3), (63, 1), (70, 5)])  
 (9, "T", [(44, 1), (56, 1), (63, 5), (72, 3)])    
 (15, "D7", [(51, 1), (55, 3), (61, 7), (70, 5)])  
 (24, "T", [(44, 1), (51, 5), (60, 3), (68, 1)])   
 (24, "T", [(44, 1), (51, 5), (60, 3), (68, 1)])   

##: Done. Total checked: 125804, Pruned: 138192, completed: 31, time: 1.9909999370574951, efficiency: 15.570065786046682
Results: bestval_func: 138, bestval_voices: 102
(16, 360, 360, 360)
#Key: 9Scale: Major
#Total time for optimisation of piece: 8.6489999294281
#Total cost of piece: 475
["T", "S/3", "D7", "Ts", "D", "D7-1", "T", "T", "D-5", "D7/7", "T/3", "D7/5", "T", "D", "T", "T", "D7", "T", "D/3", "T", "D", "T-5", "D/3", "T", "S", "D7/7", "T/3", "D/5", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-52.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-520.csv
[0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 1 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 0 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 1 0 0 2 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 2 0 0 0; 0 0 0 0 1 0 0 0 2 1 0 0; 0 0 0 0 0 0 3 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 2 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 2 0 1 0 0 0; 0 0 0 1 0 0 1 0 0 2 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 0 0 0 1 0 1 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1]
Key Counter is [0 11 0 7 27 0 21 0 25 13 3 22]
Key Score is [62; 67; 94; 35; 126; 43; 89; 83; 46; 119; 23; 116]
Position Counter for 5 is [27 0 21 0 25 13 3 22 0 11 0 7]
Any[[5.0, 83.25, 1.0]]
[5, 83, 1]
5 E Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 138
child voicing cost: 152
Best yet: 290
New solution
function cost: 138
child voicing cost: 150
Best yet: 288
New solution
function cost: 138
child voicing cost: 147
Best yet: 285
New solution
function cost: 138
child voicing cost: 145
Best yet: 283
New solution
function cost: 138
child voicing cost: 144
Best yet: 282
New solution
function cost: 141
child voicing cost: 140
Best yet: 281
New solution
function cost: 141
child voicing cost: 135
Best yet: 276
New solution
function cost: 141
child voicing cost: 133
Best yet: 274
New solution
function cost: 141
child voicing cost: 129
Best yet: 270
New solution
function cost: 141
child voicing cost: 127
Best yet: 268
New solution
function cost: 141
child voicing cost: 124
Best yet: 265
New solution
function cost: 141
child voicing cost: 121
Best yet: 262
New solution
function cost: 141
child voicing cost: 118
Best yet: 259
New solution
function cost: 141
child voicing cost: 116
Best yet: 257
New solution
function cost: 141
child voicing cost: 113
Best yet: 254
New solution
function cost: 141
child voicing cost: 110
Best yet: 251
New solution
function cost: 141
child voicing cost: 108
Best yet: 249
New solution
function cost: 141
child voicing cost: 107
Best yet: 248
New solution
function cost: 132
child voicing cost: 114
Best yet: 246
New solution
function cost: 138
child voicing cost: 107
Best yet: 245
New solution
function cost: 138
child voicing cost: 104
Best yet: 242
New solution
function cost: 132
child voicing cost: 106
Best yet: 238
New solution
function cost: 132
child voicing cost: 104
Best yet: 236
New solution
function cost: 105
child voicing cost: 129
Best yet: 234
New solution
function cost: 102
child voicing cost: 131
Best yet: 233
New solution
function cost: 102
child voicing cost: 128
Best yet: 230
New solution
function cost: 102
child voicing cost: 126
Best yet: 228
New solution
function cost: 102
child voicing cost: 125
Best yet: 227
New solution
function cost: 105
child voicing cost: 121
Best yet: 226
New solution
function cost: 105
child voicing cost: 116
Best yet: 221
New solution
function cost: 105
child voicing cost: 114
Best yet: 219
New solution
function cost: 105
child voicing cost: 113
Best yet: 218
New solution
function cost: 102
child voicing cost: 114
Best yet: 216
New solution
function cost: 102
child voicing cost: 113
Best yet: 215
New solution
function cost: 105
child voicing cost: 109
Best yet: 214
New solution
function cost: 105
child voicing cost: 104
Best yet: 209
New solution
function cost: 105
child voicing cost: 100
Best yet: 205
New solution
function cost: 111
child voicing cost: 93
Best yet: 204
New solution
function cost: 114
child voicing cost: 88
Best yet: 202

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 205086, Pruned: 253735, completed: 39, time: 3.328000068664551, efficiency: 11.718749758214337
Results: bestval_func: 114, bestval_voices: 88
(15, 392, 392, 392)
[0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 1 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 0 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 1 0 0 2 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 2 0 0 0; 0 0 0 0 1 0 0 0 2 1 0 0; 0 0 0 0 0 0 3 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 2 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 2 0 1 0 0 0; 0 0 0 1 0 0 1 0 0 2 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 0 0 0 1 0 1 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1]
Key Counter is [0 11 0 7 27 0 21 0 25 13 3 22]
Key Score is [62; 67; 94; 35; 126; 43; 89; 83; 46; 119; 23; 116]
Position Counter for 5 is [27 0 21 0 25 13 3 22 0 11 0 7]
Any[[5.0, 83.25, 1.0]]
[5, 83, 1]
5 E Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 159
child voicing cost: 171
Best yet: 330
New solution
function cost: 159
child voicing cost: 168
Best yet: 327
New solution
function cost: 159
child voicing cost: 163
Best yet: 322
New solution
function cost: 165
child voicing cost: 155
Best yet: 320
New solution
function cost: 165
child voicing cost: 153
Best yet: 318
New solution
function cost: 165
child voicing cost: 148
Best yet: 313
New solution
function cost: 165
child voicing cost: 146
Best yet: 311
New solution
function cost: 168
child voicing cost: 141
Best yet: 309
New solution
function cost: 165
child voicing cost: 142
Best yet: 307
New solution
function cost: 159
child voicing cost: 145
Best yet: 304
New solution
function cost: 159
child voicing cost: 140
Best yet: 299
New solution
function cost: 165
child voicing cost: 129
Best yet: 294
New solution
function cost: 162
child voicing cost: 131
Best yet: 293
New solution
function cost: 162
child voicing cost: 127
Best yet: 289
New solution
function cost: 162
child voicing cost: 125
Best yet: 287
New solution
function cost: 162
child voicing cost: 120
Best yet: 282
New solution
function cost: 162
child voicing cost: 118
Best yet: 280
New solution
function cost: 162
child voicing cost: 114
Best yet: 276
New solution
function cost: 162
child voicing cost: 112
Best yet: 274
New solution
function cost: 165
child voicing cost: 108
Best yet: 273
New solution
function cost: 150
child voicing cost: 122
Best yet: 272
New solution
function cost: 159
child voicing cost: 110
Best yet: 269
New solution
function cost: 159
child voicing cost: 105
Best yet: 264
New solution
function cost: 159
child voicing cost: 103
Best yet: 262
New solution
function cost: 174
child voicing cost: 86
Best yet: 260
New solution
function cost: 159
child voicing cost: 100
Best yet: 259
New solution
function cost: 156
child voicing cost: 102
Best yet: 258
New solution
function cost: 156
child voicing cost: 97
Best yet: 253
New solution
function cost: 156
child voicing cost: 92
Best yet: 248
New solution
function cost: 156
child voicing cost: 90
Best yet: 246

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (12, "T", [(52, 1), (64, 1), (71, 5), (80, 3)])   
 (0, "D", [(59, 1), (66, 5), (71, 1), (75, 3)])    
 (0, "D7/7", [(57, 7), (66, 5), (71, 1), (75, 3)]) 
 (0, "T/3", [(56, 3), (59, 5), (71, 5), (76, 1)])  
 (0, "S65/6", [(54, 6), (61, 3), (64, 5), (69, 1)])
 (9, "D", [(47, 1), (59, 1), (66, 5), (75, 3)])    
 (12, "D7", [(47, 1), (57, 7), (66, 5), (75, 3)])  
 (12, "Ts", [(49, 1), (56, 5), (64, 3), (76, 3)])  
 (9, "D/3", [(51, 3), (54, 5), (66, 5), (71, 1)])  
 (9, "Ts", [(49, 1), (56, 5), (64, 3), (73, 1)])   
 (9, "D7/3", [(51, 3), (57, 7), (66, 5), (71, 1)]) 
 (9, "T", [(52, 1), (56, 3), (64, 1), (71, 5)])    
 (18, "D7-1", [(54, 5), (57, 7), (63, 3), (69, 7)])
 ⋮                                                 
 (3, "D7-1", [(54, 5), (57, 7), (63, 3), (66, 5)]) 
 (0, "T/3", [(56, 3), (59, 5), (64, 1), (64, 1)])  
 (6, "Ts", [(49, 1), (61, 1), (64, 3), (68, 5)])   
 (6, "S", [(45, 1), (61, 3), (64, 5), (69, 1)])    
 (6, "T/3", [(44, 3), (59, 5), (64, 1), (71, 5)])  
 (6, "D7/5", [(42, 5), (57, 7), (63, 3), (71, 1)]) 
 (21, "T", [(40, 1), (56, 3), (64, 1), (71, 5)])   
 (0, "D7-1", [(42, 5), (57, 7), (63, 3), (69, 7)]) 
 (6, "T", [(40, 1), (59, 5), (64, 1), (68, 3)])    
 (6, "D7", [(47, 1), (57, 7), (63, 3), (66, 5)])   
 (9, "T", [(52, 1), (56, 3), (59, 5), (64, 1)])    
 (9, "T", [(52, 1), (56, 3), (59, 5), (64, 1)])    

##: Done. Total checked: 140257, Pruned: 154635, completed: 30, time: 2.187000036239624, efficiency: 13.717420897524383
Results: bestval_func: 156, bestval_voices: 90
(16, 392, 392, 392)
#Key: 5Scale: Major
#Total time for optimisation of piece: 6.946000099182129
#Total cost of piece: 448
["T", "D", "D7/7", "T/3", "S65/6", "D", "D7", "Ts", "D/3", "Ts", "D7/3", "T", "D7-1", "D7/3", "T", "T", "D7-1", "T", "D7/3", "T", "D7-1", "T/3", "Ts", "S", "T/3", "D7/5", "T", "D7-1", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-520.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-533.csv
[0 2 0 0 0 1 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 1 0 0 0 1 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 2 0 0 2 0 0 0 0 0 0 0 0; 2 0 0 0 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 1 1 0 0 0 0 0 0 0 1 1 0; 0 0 0 1 0 1 0 0 0 1 1 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 1 0 0 0 2 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 1 0 2 1 0 0 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 0 1 0 0; 0 0 0 2 0 1 0 0 0 0 1 0; 1 0 1 0 0 2 0 0 0 0 0 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 0 0 0 1 0 0 0 0 3 0]
Key Counter is [21 6 1 18 0 33 0 13 11 7 22 0]
Key Score is [75; 111; 27; 119; 42; 97; 90; 42; 124; 25; 115; 57]
Position Counter for 9 is [11 7 22 0 21 6 1 18 0 33 0 13]
Any[[9.0, 88.0, 0.0]]
[9, 88, 0]
6 F Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 216
child voicing cost: 170
Best yet: 386
New solution
function cost: 216
child voicing cost: 169
Best yet: 385
New solution
function cost: 216
child voicing cost: 151
Best yet: 367
New solution
function cost: 216
child voicing cost: 150
Best yet: 366
New solution
function cost: 189
child voicing cost: 166
Best yet: 355
New solution
function cost: 189
child voicing cost: 160
Best yet: 349
New solution
function cost: 189
child voicing cost: 158
Best yet: 347
New solution
function cost: 189
child voicing cost: 153
Best yet: 342
New solution
function cost: 189
child voicing cost: 150
Best yet: 339
New solution
function cost: 189
child voicing cost: 149
Best yet: 338
New solution
function cost: 186
child voicing cost: 148
Best yet: 334
New solution
function cost: 189
child voicing cost: 144
Best yet: 333
New solution
function cost: 189
child voicing cost: 143
Best yet: 332
New solution
function cost: 192
child voicing cost: 139
Best yet: 331
New solution
function cost: 186
child voicing cost: 144
Best yet: 330
New solution
function cost: 186
child voicing cost: 141
Best yet: 327
New solution
function cost: 189
child voicing cost: 137
Best yet: 326
New solution
function cost: 186
child voicing cost: 138
Best yet: 324
New solution
function cost: 186
child voicing cost: 135
Best yet: 321
New solution
function cost: 186
child voicing cost: 134
Best yet: 320
New solution
function cost: 189
child voicing cost: 128
Best yet: 317
New solution
function cost: 192
child voicing cost: 123
Best yet: 315
New solution
function cost: 189
child voicing cost: 125
Best yet: 314
New solution
function cost: 189
child voicing cost: 122
Best yet: 311
New solution
function cost: 177
child voicing cost: 133
Best yet: 310
New solution
function cost: 177
child voicing cost: 131
Best yet: 308
New solution
function cost: 177
child voicing cost: 128
Best yet: 305
New solution
function cost: 177
child voicing cost: 126
Best yet: 303
New solution
function cost: 177
child voicing cost: 120
Best yet: 297
New solution
function cost: 177
child voicing cost: 117
Best yet: 294
New solution
function cost: 177
child voicing cost: 115
Best yet: 292
New solution
function cost: 177
child voicing cost: 113
Best yet: 290
New solution
function cost: 177
child voicing cost: 110
Best yet: 287
New solution
function cost: 177
child voicing cost: 107
Best yet: 284
New solution
function cost: 177
child voicing cost: 106
Best yet: 283
New solution
function cost: 177
child voicing cost: 105
Best yet: 282
New solution
function cost: 177
child voicing cost: 102
Best yet: 279
New solution
function cost: 177
child voicing cost: 97
Best yet: 274
New solution
function cost: 177
child voicing cost: 94
Best yet: 271

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 110294, Pruned: 145022, completed: 39, time: 1.9219999313354492, efficiency: 20.291363888292086
Results: bestval_func: 177, bestval_voices: 94
(15, 409, 409, 409)
[0 2 0 0 0 1 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 1 0 0 0 1 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 2 0 0 2 0 0 0 0 0 0 0 0; 2 0 0 0 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 1 1 0 0 0 0 0 0 0 1 1 0; 0 0 0 1 0 1 0 0 0 1 1 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 1 0 0 0 2 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 1 0 2 1 0 0 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 0 1 0 0; 0 0 0 2 0 1 0 0 0 0 1 0; 1 0 1 0 0 2 0 0 0 0 0 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 0 0 0 1 0 0 0 0 3 0]
Key Counter is [21 6 1 18 0 33 0 13 11 7 22 0]
Key Score is [75; 111; 27; 119; 42; 97; 90; 42; 124; 25; 115; 57]
Position Counter for 9 is [11 7 22 0 21 6 1 18 0 33 0 13]
Any[[9.0, 88.0, 0.0]]
[9, 88, 0]
6 F Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 156
Best yet: 306
New solution
function cost: 150
child voicing cost: 153
Best yet: 303
New solution
function cost: 150
child voicing cost: 152
Best yet: 302
New solution
function cost: 150
child voicing cost: 150
Best yet: 300
New solution
function cost: 150
child voicing cost: 147
Best yet: 297
New solution
function cost: 150
child voicing cost: 145
Best yet: 295
New solution
function cost: 150
child voicing cost: 143
Best yet: 293
New solution
function cost: 150
child voicing cost: 142
Best yet: 292
New solution
function cost: 150
child voicing cost: 137
Best yet: 287
New solution
function cost: 144
child voicing cost: 142
Best yet: 286
New solution
function cost: 144
child voicing cost: 141
Best yet: 285
New solution
function cost: 144
child voicing cost: 140
Best yet: 284
New solution
function cost: 144
child voicing cost: 135
Best yet: 279
New solution
function cost: 144
child voicing cost: 132
Best yet: 276
New solution
function cost: 144
child voicing cost: 130
Best yet: 274
New solution
function cost: 144
child voicing cost: 124
Best yet: 268
New solution
function cost: 144
child voicing cost: 123
Best yet: 267
New solution
function cost: 144
child voicing cost: 118
Best yet: 262
New solution
function cost: 144
child voicing cost: 117
Best yet: 261
New solution
function cost: 144
child voicing cost: 116
Best yet: 260
New solution
function cost: 144
child voicing cost: 112
Best yet: 256
New solution
function cost: 144
child voicing cost: 111
Best yet: 255
New solution
function cost: 144
child voicing cost: 106
Best yet: 250
New solution
function cost: 144
child voicing cost: 104
Best yet: 248

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D7", "D7-1"…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "Dm"    => ["S/3", "Ts", "Dm"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "T64", "T54", "Ts"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D-5", "D/3", "D/5", "D7", …
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (21, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])   
 (3, "D7-1", [(55, 5), (58, 7), (70, 7), (76, 3)]) 
 (12, "D7", [(48, 1), (58, 7), (67, 5), (76, 3)])  
 (12, "Ts", [(49, 1), (56, 5), (65, 3), (77, 3)])  
 (12, "D7", [(48, 1), (58, 7), (67, 5), (76, 3)])  
 (27, "Ts", [(49, 1), (56, 5), (65, 3), (77, 3)])  
 (15, "D", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (6, "D7/7", [(46, 7), (60, 1), (67, 5), (76, 3)]) 
 (24, "T/3", [(44, 3), (60, 5), (65, 1), (77, 1)]) 
 (6, "S", [(46, 1), (58, 1), (65, 5), (73, 3)])    
 (21, "T/5", [(48, 5), (56, 3), (65, 1), (72, 5)]) 
 (9, "S", [(46, 1), (58, 1), (65, 5), (73, 3)])    
 (12, "D7-1", [(43, 5), (58, 7), (67, 5), (76, 3)])
 ⋮                                                 
 (3, "D7", [(48, 1), (58, 7), (67, 5), (76, 3)])   
 (6, "Ts", [(49, 1), (56, 5), (65, 3), (77, 3)])   
 (0, "T/3", [(56, 3), (60, 5), (72, 5), (77, 1)])  
 (21, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])   
 (3, "D/3", [(52, 3), (60, 1), (67, 5), (79, 5)])  
 (0, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])    
 (6, "T/3", [(56, 3), (65, 1), (65, 1), (72, 5)])  
 (6, "S65", [(58, 1), (65, 5), (67, 6), (73, 3)])  
 (12, "D", [(60, 1), (64, 3), (67, 5), (72, 1)])   
 (18, "D7", [(60, 1), (64, 3), (67, 5), (70, 7)])  
 (18, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (18, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])   

##: Done. Total checked: 96207, Pruned: 106125, completed: 24, time: 1.5930001735687256, efficiency: 15.06591172945945
Results: bestval_func: 144, bestval_voices: 104
(16, 409, 409, 409)
#Key: 6Scale: Minor
#Total time for optimisation of piece: 5.078999996185303
#Total cost of piece: 519
["T", "D7-1", "D7", "Ts", "D7", "Ts", "D", "D7/7", "T/3", "S", "T/5", "S", "D7-1", "D7/3", "T", "T", "D7-1", "T", "D7-1", "T", "D7", "Ts", "T/3", "T", "D/3", "T", "T/3", "S65", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-533.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-546.csv
[0 1 0 0 0 0 1 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 0 0 2 0; 0 1 0 2 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 3 0 0 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 2 0 0 0 0 0 0 0 0 2 0; 0 0 0 1 0 0 0 0 1 0 2 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 2 0 1 0; 0 2 0 1 0 0 1 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 0 0 1 1]
Key Counter is [4 37 0 14 0 17 8 1 25 0 24 2]
Key Score is [24; 129; 48; 85; 86; 46; 127; 15; 122; 72; 60; 110]
Position Counter for 2 is [37 0 14 0 17 8 1 25 0 24 2 4]
Any[[2.0, 87.75, 1.0]]
[2, 88, 1]
2 C# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 123
child voicing cost: 151
Best yet: 274
New solution
function cost: 123
child voicing cost: 146
Best yet: 269
New solution
function cost: 123
child voicing cost: 141
Best yet: 264
New solution
function cost: 123
child voicing cost: 139
Best yet: 262
New solution
function cost: 123
child voicing cost: 138
Best yet: 261
New solution
function cost: 123
child voicing cost: 133
Best yet: 256
New solution
function cost: 123
child voicing cost: 132
Best yet: 255
New solution
function cost: 123
child voicing cost: 124
Best yet: 247
New solution
function cost: 123
child voicing cost: 118
Best yet: 241
New solution
function cost: 123
child voicing cost: 112
Best yet: 235
New solution
function cost: 123
child voicing cost: 109
Best yet: 232
New solution
function cost: 126
child voicing cost: 103
Best yet: 229
New solution
function cost: 123
child voicing cost: 104
Best yet: 227
New solution
function cost: 117
child voicing cost: 108
Best yet: 225
New solution
function cost: 117
child voicing cost: 102
Best yet: 219
New solution
function cost: 117
child voicing cost: 98
Best yet: 215
New solution
function cost: 117
child voicing cost: 92
Best yet: 209

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 77400, Pruned: 88184, completed: 17, time: 1.3339998722076416, efficiency: 12.743629406700492
Results: bestval_func: 117, bestval_voices: 92
(15, 365, 365, 365)
[0 1 0 0 0 0 1 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 0 0 2 0; 0 1 0 2 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 3 0 0 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 2 0 0 0 0 0 0 0 0 2 0; 0 0 0 1 0 0 0 0 1 0 2 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 2 0 1 0; 0 2 0 1 0 0 1 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 0 0 1 1]
Key Counter is [4 37 0 14 0 17 8 1 25 0 24 2]
Key Score is [24; 129; 48; 85; 86; 46; 127; 15; 122; 72; 60; 110]
Position Counter for 2 is [37 0 14 0 17 8 1 25 0 24 2 4]
Any[[2.0, 87.75, 1.0]]
[2, 88, 1]
2 C# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 129
child voicing cost: 225
Best yet: 354
New solution
function cost: 129
child voicing cost: 223
Best yet: 352
New solution
function cost: 129
child voicing cost: 215
Best yet: 344
New solution
function cost: 129
child voicing cost: 213
Best yet: 342
New solution
function cost: 129
child voicing cost: 212
Best yet: 341
New solution
function cost: 129
child voicing cost: 210
Best yet: 339
New solution
function cost: 129
child voicing cost: 208
Best yet: 337
New solution
function cost: 129
child voicing cost: 204
Best yet: 333
New solution
function cost: 129
child voicing cost: 198
Best yet: 327
New solution
function cost: 132
child voicing cost: 193
Best yet: 325
New solution
function cost: 129
child voicing cost: 190
Best yet: 319
New solution
function cost: 126
child voicing cost: 187
Best yet: 313
New solution
function cost: 132
child voicing cost: 177
Best yet: 309
New solution
function cost: 138
child voicing cost: 168
Best yet: 306
New solution
function cost: 132
child voicing cost: 173
Best yet: 305
New solution
function cost: 132
child voicing cost: 171
Best yet: 303
New solution
function cost: 132
child voicing cost: 169
Best yet: 301
New solution
function cost: 129
child voicing cost: 171
Best yet: 300
New solution
function cost: 132
child voicing cost: 165
Best yet: 297
New solution
function cost: 135
child voicing cost: 160
Best yet: 295
New solution
function cost: 132
child voicing cost: 159
Best yet: 291
New solution
function cost: 129
child voicing cost: 158
Best yet: 287
New solution
function cost: 138
child voicing cost: 148
Best yet: 286
New solution
function cost: 147
child voicing cost: 138
Best yet: 285
New solution
function cost: 147
child voicing cost: 137
Best yet: 284
New solution
function cost: 147
child voicing cost: 135
Best yet: 282
New solution
function cost: 147
child voicing cost: 133
Best yet: 280
New solution
function cost: 147
child voicing cost: 129
Best yet: 276
New solution
function cost: 147
child voicing cost: 123
Best yet: 270

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (18, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])  
 (6, "D7", [(44, 1), (54, 7), (63, 5), (72, 3)])  
 (9, "Ts", [(46, 1), (53, 5), (61, 3), (73, 3)])  
 (0, "D", [(44, 1), (56, 1), (63, 5), (72, 3)])   
 (0, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])   
 (24, "D/3", [(48, 3), (56, 1), (63, 5), (75, 5)])
 (0, "Ts", [(46, 1), (61, 3), (70, 1), (77, 5)])  
 (18, "D", [(44, 1), (63, 5), (72, 3), (80, 1)])  
 (15, "S/3", [(46, 3), (61, 5), (66, 1), (78, 1)])
 (0, "D/3", [(48, 3), (63, 5), (68, 1), (75, 5)]) 
 (0, "S/3", [(46, 3), (61, 5), (66, 1), (78, 1)]) 
 (0, "T/5", [(44, 5), (61, 1), (68, 5), (77, 3)]) 
 (21, "S/3", [(46, 3), (61, 5), (66, 1), (73, 5)])
 ⋮                                                
 (6, "D/3", [(60, 3), (63, 5), (68, 1), (80, 1)]) 
 (15, "D", [(56, 1), (63, 5), (68, 1), (72, 3)])  
 (9, "S/3", [(58, 3), (61, 5), (66, 1), (73, 5)]) 
 (12, "T/5", [(56, 5), (61, 1), (68, 5), (77, 3)])
 (15, "S", [(54, 1), (61, 5), (70, 3), (78, 1)])  
 (12, "T/3", [(53, 3), (61, 1), (68, 5), (80, 5)])
 (6, "D7/5", [(51, 5), (60, 3), (68, 1), (78, 7)])
 (18, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])  
 (9, "D7-1", [(51, 5), (60, 3), (66, 7), (75, 5)])
 (12, "D7", [(56, 1), (60, 3), (66, 7), (75, 5)]) 
 (15, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])  
 (15, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])  

##: Done. Total checked: 229703, Pruned: 252483, completed: 29, time: 3.578000068664551, efficiency: 8.105086485038536
Results: bestval_func: 147, bestval_voices: 123
(16, 365, 365, 365)
#Key: 2Scale: Major
#Total time for optimisation of piece: 6.0959999561309814
#Total cost of piece: 479
["T", "D7", "Ts", "D", "T", "D/3", "Ts", "D", "S/3", "D/3", "S/3", "T/5", "S/3", "D", "T", "T", "Ts", "Ts", "D", "D", "D/3", "D", "S/3", "T/5", "S", "T/3", "D7/5", "T", "D7-1", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-546.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-559.csv
[1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 1 0 0 0 1 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 2 0 0 1 0 1 0 0 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 1 0 0 0 1 0 0 0 0 1 1 0; 1 0 0 0 0 0 0 1 0 0 2 0; 2 0 0 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 0 0 1 1 0; 2 0 1 0 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 2 0; 2 0 1 0 0 1 0 0 0 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 1 0 0 0 0 1 0 2 0 0 0 0; 1 0 1 0 1 1 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 1 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 2 0 0 2 0 0 0 0 0 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 0 1 0 1 0 1 0 1 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 1 0 0 0 0 2 0]
Key Counter is [29 1 17 6 3 29 0 13 0 14 20 0]
Key Score is [105; 85; 48; 114; 24; 125; 56; 76; 98; 35; 128; 30]
Position Counter for 11 is [20 0 29 1 17 6 3 29 0 13 0 14]
Any[[11.0, 83.75, 1.0]]
[11, 84, 1]
11 A# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 120
child voicing cost: 197
Best yet: 317
New solution
function cost: 120
child voicing cost: 196
Best yet: 316
New solution
function cost: 120
child voicing cost: 190
Best yet: 310
New solution
function cost: 120
child voicing cost: 185
Best yet: 305
New solution
function cost: 120
child voicing cost: 182
Best yet: 302
New solution
function cost: 120
child voicing cost: 180
Best yet: 300
New solution
function cost: 120
child voicing cost: 179
Best yet: 299
New solution
function cost: 120
child voicing cost: 174
Best yet: 294
New solution
function cost: 120
child voicing cost: 170
Best yet: 290
New solution
function cost: 111
child voicing cost: 175
Best yet: 286
New solution
function cost: 111
child voicing cost: 173
Best yet: 284
New solution
function cost: 111
child voicing cost: 170
Best yet: 281
New solution
function cost: 111
child voicing cost: 167
Best yet: 278
New solution
function cost: 111
child voicing cost: 166
Best yet: 277
New solution
function cost: 117
child voicing cost: 159
Best yet: 276
New solution
function cost: 117
child voicing cost: 154
Best yet: 271
New solution
function cost: 111
child voicing cost: 158
Best yet: 269
New solution
function cost: 117
child voicing cost: 147
Best yet: 264
New solution
function cost: 117
child voicing cost: 145
Best yet: 262
New solution
function cost: 111
child voicing cost: 150
Best yet: 261
New solution
function cost: 111
child voicing cost: 149
Best yet: 260
New solution
function cost: 117
child voicing cost: 142
Best yet: 259
New solution
function cost: 117
child voicing cost: 141
Best yet: 258
New solution
function cost: 117
child voicing cost: 139
Best yet: 256
New solution
function cost: 117
child voicing cost: 138
Best yet: 255
New solution
function cost: 117
child voicing cost: 136
Best yet: 253
New solution
function cost: 117
child voicing cost: 135
Best yet: 252
New solution
function cost: 117
child voicing cost: 130
Best yet: 247
New solution
function cost: 117
child voicing cost: 129
Best yet: 246
New solution
function cost: 117
child voicing cost: 124
Best yet: 241
New solution
function cost: 117
child voicing cost: 121
Best yet: 238
New solution
function cost: 117
child voicing cost: 117
Best yet: 234
New solution
function cost: 117
child voicing cost: 114
Best yet: 231

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 113866, Pruned: 144870, completed: 33, time: 1.934000015258789, efficiency: 17.06308156134335
Results: bestval_func: 117, bestval_voices: 114
(15, 367, 367, 367)
[1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 1 0 0 0 1 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 2 0 0 1 0 1 0 0 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 1 0 0 0 1 0 0 0 0 1 1 0; 1 0 0 0 0 0 0 1 0 0 2 0; 2 0 0 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 0 0 1 1 0; 2 0 1 0 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 2 0; 2 0 1 0 0 1 0 0 0 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 1 0 0 0 0 1 0 2 0 0 0 0; 1 0 1 0 1 1 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 1 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 2 0 0 2 0 0 0 0 0 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 0 1 0 1 0 1 0 1 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 1 0 0 0 0 2 0]
Key Counter is [29 1 17 6 3 29 0 13 0 14 20 0]
Key Score is [105; 85; 48; 114; 24; 125; 56; 76; 98; 35; 128; 30]
Position Counter for 11 is [20 0 29 1 17 6 3 29 0 13 0 14]
Any[[11.0, 83.75, 1.0]]
[11, 84, 1]
11 A# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 153
child voicing cost: 183
Best yet: 336
New solution
function cost: 153
child voicing cost: 177
Best yet: 330
New solution
function cost: 153
child voicing cost: 175
Best yet: 328
New solution
function cost: 153
child voicing cost: 173
Best yet: 326
New solution
function cost: 162
child voicing cost: 163
Best yet: 325
New solution
function cost: 162
child voicing cost: 162
Best yet: 324
New solution
function cost: 162
child voicing cost: 157
Best yet: 319
New solution
function cost: 153
child voicing cost: 162
Best yet: 315
New solution
function cost: 153
child voicing cost: 160
Best yet: 313
New solution
function cost: 153
child voicing cost: 155
Best yet: 308
New solution
function cost: 159
child voicing cost: 148
Best yet: 307
New solution
function cost: 156
child voicing cost: 147
Best yet: 303
New solution
function cost: 156
child voicing cost: 145
Best yet: 301
New solution
function cost: 150
child voicing cost: 149
Best yet: 299
New solution
function cost: 150
child voicing cost: 146
Best yet: 296
New solution
function cost: 162
child voicing cost: 133
Best yet: 295
New solution
function cost: 162
child voicing cost: 131
Best yet: 293
New solution
function cost: 162
child voicing cost: 128
Best yet: 290
New solution
function cost: 171
child voicing cost: 117
Best yet: 288
New solution
function cost: 171
child voicing cost: 116
Best yet: 287
New solution
function cost: 165
child voicing cost: 118
Best yet: 283
New solution
function cost: 156
child voicing cost: 126
Best yet: 282
New solution
function cost: 159
child voicing cost: 121
Best yet: 280
New solution
function cost: 159
child voicing cost: 120
Best yet: 279
New solution
function cost: 159
child voicing cost: 116
Best yet: 275
New solution
function cost: 159
child voicing cost: 114
Best yet: 273
New solution
function cost: 159
child voicing cost: 109
Best yet: 268
New solution
function cost: 159
child voicing cost: 107
Best yet: 266

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (18, "T", [(58, 1), (58, 1), (65, 5), (74, 3)])   
 (0, "D", [(53, 1), (65, 1), (69, 3), (72, 5)])    
 (0, "S/3", [(55, 3), (58, 5), (63, 1), (75, 1)])  
 (0, "D7", [(53, 1), (60, 5), (63, 7), (69, 3)])   
 (21, "Ts", [(55, 1), (58, 3), (62, 5), (70, 3)])  
 (6, "D7", [(53, 1), (57, 3), (63, 7), (72, 5)])   
 (15, "T", [(46, 1), (53, 5), (62, 3), (70, 1)])   
 (9, "D", [(53, 1), (53, 1), (60, 5), (69, 3)])    
 (12, "T", [(46, 1), (53, 5), (62, 3), (70, 1)])   
 (6, "Ts", [(43, 1), (55, 1), (62, 5), (70, 3)])   
 (0, "D/3", [(45, 3), (53, 1), (65, 1), (72, 5)])  
 (6, "T", [(46, 1), (53, 5), (62, 3), (70, 1)])    
 (12, "D7-1", [(48, 5), (51, 7), (60, 5), (69, 3)])
 ⋮                                                 
 (12, "T", [(46, 1), (62, 3), (65, 5), (70, 1)])   
 (3, "D", [(41, 1), (60, 5), (65, 1), (69, 3)])    
 (21, "D7/3", [(45, 3), (60, 5), (63, 7), (65, 1)])
 (12, "T", [(46, 1), (58, 1), (62, 3), (65, 5)])   
 (9, "S", [(51, 1), (58, 5), (63, 1), (67, 3)])    
 (6, "Tm", [(50, 1), (62, 1), (65, 3), (69, 5)])   
 (3, "Ts", [(43, 1), (62, 5), (67, 1), (70, 3)])   
 (15, "D7/3", [(45, 3), (63, 7), (65, 1), (72, 5)])
 (9, "T", [(46, 1), (62, 3), (65, 5), (70, 1)])    
 (12, "D", [(53, 1), (60, 5), (65, 1), (69, 3)])   
 (12, "T", [(46, 1), (62, 3), (65, 5), (70, 1)])   
 (12, "T", [(46, 1), (62, 3), (65, 5), (70, 1)])   

##: Done. Total checked: 154200, Pruned: 172663, completed: 28, time: 2.486999988555908, efficiency: 11.258544482848338
Results: bestval_func: 159, bestval_voices: 107
(16, 367, 367, 367)
#Key: 11Scale: Major
#Total time for optimisation of piece: 5.639999866485596
#Total cost of piece: 497
["T", "D", "S/3", "D7", "Ts", "D7", "T", "D", "T", "Ts", "D/3", "T", "D7-1", "D7/3", "T", "T", "D", "D", "T/3", "D/5", "T", "D", "D7/3", "T", "S", "Tm", "Ts", "D7/3", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-559.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-572.csv
[0 2 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 2 1 0 0 0 1 0 0 0; 0 0 0 1 2 0 0 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 1 2 0 0 0 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 1 1 0 1 0 0 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 0 0 0 0 0 2 0 0 1; 0 1 0 0 0 0 1 0 0 1 0 1; 0 2 0 0 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 0 1 1; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 1 0 0 0 0 1 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 0 0 1]
Key Counter is [0 23 0 10 28 0 14 0 25 6 3 23]
Key Score is [57; 75; 94; 38; 129; 37; 98; 71; 61; 119; 19; 126]
Position Counter for 5 is [28 0 14 0 25 6 3 23 0 23 0 10]
Any[[5.0, 82.5, 1.0]]
[5, 82, 1]
5 E Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 111
child voicing cost: 176
Best yet: 287
New solution
function cost: 111
child voicing cost: 174
Best yet: 285
New solution
function cost: 111
child voicing cost: 171
Best yet: 282
New solution
function cost: 111
child voicing cost: 170
Best yet: 281
New solution
function cost: 111
child voicing cost: 168
Best yet: 279
New solution
function cost: 111
child voicing cost: 165
Best yet: 276
New solution
function cost: 111
child voicing cost: 164
Best yet: 275
New solution
function cost: 111
child voicing cost: 161
Best yet: 272
New solution
function cost: 111
child voicing cost: 158
Best yet: 269
New solution
function cost: 111
child voicing cost: 155
Best yet: 266
New solution
function cost: 111
child voicing cost: 152
Best yet: 263
New solution
function cost: 111
child voicing cost: 150
Best yet: 261
New solution
function cost: 114
child voicing cost: 144
Best yet: 258
New solution
function cost: 105
child voicing cost: 149
Best yet: 254
New solution
function cost: 105
child voicing cost: 147
Best yet: 252
New solution
function cost: 105
child voicing cost: 141
Best yet: 246
New solution
function cost: 105
child voicing cost: 138
Best yet: 243
New solution
function cost: 105
child voicing cost: 137
Best yet: 242
New solution
function cost: 105
child voicing cost: 134
Best yet: 239
New solution
function cost: 105
child voicing cost: 131
Best yet: 236
New solution
function cost: 123
child voicing cost: 110
Best yet: 233
New solution
function cost: 123
child voicing cost: 109
Best yet: 232
New solution
function cost: 114
child voicing cost: 116
Best yet: 230
New solution
function cost: 123
child voicing cost: 104
Best yet: 227
New solution
function cost: 123
child voicing cost: 102
Best yet: 225
New solution
function cost: 123
child voicing cost: 99
Best yet: 222
New solution
function cost: 123
child voicing cost: 96
Best yet: 219
New solution
function cost: 105
child voicing cost: 112
Best yet: 217
New solution
function cost: 105
child voicing cost: 111
Best yet: 216
New solution
function cost: 105
child voicing cost: 108
Best yet: 213
New solution
function cost: 105
child voicing cost: 105
Best yet: 210
New solution
function cost: 105
child voicing cost: 102
Best yet: 207
New solution
function cost: 105
child voicing cost: 99
Best yet: 204

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 144800, Pruned: 158586, completed: 33, time: 2.2269999980926514, efficiency: 14.818141009547984
Results: bestval_func: 105, bestval_voices: 99
(15, 392, 392, 392)
[0 2 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 2 1 0 0 0 1 0 0 0; 0 0 0 1 2 0 0 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 1 2 0 0 0 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 1 1 0 1 0 0 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 0 0 0 0 0 2 0 0 1; 0 1 0 0 0 0 1 0 0 1 0 1; 0 2 0 0 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 0 1 1; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 1 0 0 0 0 1 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 0 0 1]
Key Counter is [0 23 0 10 28 0 14 0 25 6 3 23]
Key Score is [57; 75; 94; 38; 129; 37; 98; 71; 61; 119; 19; 126]
Position Counter for 5 is [28 0 14 0 25 6 3 23 0 23 0 10]
Any[[5.0, 82.5, 1.0]]
[5, 82, 1]
5 E Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 196
Best yet: 370
New solution
function cost: 174
child voicing cost: 194
Best yet: 368
New solution
function cost: 174
child voicing cost: 192
Best yet: 366
New solution
function cost: 174
child voicing cost: 186
Best yet: 360
New solution
function cost: 174
child voicing cost: 180
Best yet: 354
New solution
function cost: 174
child voicing cost: 179
Best yet: 353
New solution
function cost: 174
child voicing cost: 174
Best yet: 348
New solution
function cost: 177
child voicing cost: 169
Best yet: 346
New solution
function cost: 189
child voicing cost: 156
Best yet: 345
New solution
function cost: 189
child voicing cost: 154
Best yet: 343
New solution
function cost: 177
child voicing cost: 161
Best yet: 338
New solution
function cost: 168
child voicing cost: 169
Best yet: 337
New solution
function cost: 168
child voicing cost: 164
Best yet: 332
New solution
function cost: 168
child voicing cost: 163
Best yet: 331
New solution
function cost: 168
child voicing cost: 162
Best yet: 330
New solution
function cost: 168
child voicing cost: 157
Best yet: 325
New solution
function cost: 168
child voicing cost: 154
Best yet: 322
New solution
function cost: 168
child voicing cost: 152
Best yet: 320
New solution
function cost: 168
child voicing cost: 151
Best yet: 319
New solution
function cost: 171
child voicing cost: 146
Best yet: 317
New solution
function cost: 171
child voicing cost: 142
Best yet: 313
New solution
function cost: 168
child voicing cost: 142
Best yet: 310
New solution
function cost: 168
child voicing cost: 138
Best yet: 306
New solution
function cost: 168
child voicing cost: 135
Best yet: 303
New solution
function cost: 168
child voicing cost: 133
Best yet: 301
New solution
function cost: 183
child voicing cost: 116
Best yet: 299
New solution
function cost: 165
child voicing cost: 131
Best yet: 296
New solution
function cost: 165
child voicing cost: 128
Best yet: 293
New solution
function cost: 168
child voicing cost: 122
Best yet: 290
New solution
function cost: 168
child voicing cost: 119
Best yet: 287
New solution
function cost: 189
child voicing cost: 96
Best yet: 285
New solution
function cost: 189
child voicing cost: 92
Best yet: 281
New solution
function cost: 189
child voicing cost: 90
Best yet: 279
New solution
function cost: 174
child voicing cost: 104
Best yet: 278
New solution
function cost: 174
child voicing cost: 103
Best yet: 277
New solution
function cost: 189
child voicing cost: 84
Best yet: 273
New solution
function cost: 168
child voicing cost: 101
Best yet: 269
New solution
function cost: 156
child voicing cost: 110
Best yet: 266
New solution
function cost: 177
child voicing cost: 88
Best yet: 265
New solution
function cost: 165
child voicing cost: 99
Best yet: 264
New solution
function cost: 177
child voicing cost: 85
Best yet: 262
New solution
function cost: 162
child voicing cost: 97
Best yet: 259
New solution
function cost: 174
child voicing cost: 84
Best yet: 258
New solution
function cost: 159
child voicing cost: 96
Best yet: 255
New solution
function cost: 159
child voicing cost: 95
Best yet: 254
New solution
function cost: 159
child voicing cost: 94
Best yet: 253
New solution
function cost: 159
child voicing cost: 89
Best yet: 248

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (18, "T", [(52, 1), (64, 1), (68, 3), (71, 5)])   
 (3, "Tm", [(56, 1), (63, 5), (68, 1), (71, 3)])   
 (15, "S", [(57, 1), (61, 3), (64, 5), (69, 1)])   
 (0, "T/3", [(56, 3), (59, 5), (64, 1), (71, 5)])  
 (0, "S65/6", [(54, 6), (64, 5), (69, 1), (73, 3)])
 (0, "D", [(47, 1), (66, 5), (71, 1), (75, 3)])    
 (0, "T", [(52, 1), (68, 3), (71, 5), (76, 1)])    
 (15, "T", [(52, 1), (68, 3), (71, 5), (76, 1)])   
 (3, "T-5", [(52, 1), (64, 1), (68, 3), (76, 1)])  
 (0, "Ts", [(49, 1), (64, 3), (68, 5), (76, 3)])   
 (18, "D", [(47, 1), (66, 5), (71, 1), (75, 3)])   
 (6, "D7-1", [(42, 5), (57, 7), (69, 7), (75, 3)]) 
 (9, "T", [(40, 1), (59, 5), (68, 3), (76, 1)])    
 ⋮                                                 
 (9, "D7", [(47, 1), (66, 5), (69, 7), (75, 3)])   
 (18, "Ts", [(49, 1), (64, 3), (68, 5), (76, 3)])  
 (6, "D7/3", [(51, 3), (59, 1), (69, 7), (78, 5)]) 
 (18, "T", [(52, 1), (59, 5), (68, 3), (76, 1)])   
 (12, "D7-1", [(54, 5), (57, 7), (69, 7), (75, 3)])
 (12, "T", [(52, 1), (59, 5), (68, 3), (76, 1)])   
 (12, "D/5", [(54, 5), (59, 1), (66, 5), (75, 3)]) 
 (3, "T/3", [(56, 3), (59, 5), (64, 1), (76, 1)])  
 (3, "D54", [(59, 1), (66, 5), (71, 1), (76, 4)])  
 (6, "D", [(59, 1), (66, 5), (71, 1), (75, 3)])    
 (0, "T", [(52, 1), (68, 3), (71, 5), (76, 1)])    
 (0, "T", [(52, 1), (68, 3), (71, 5), (76, 1)])    

##: Done. Total checked: 293890, Pruned: 329929, completed: 47, time: 4.674000024795532, efficiency: 10.055626818713176
Results: bestval_func: 159, bestval_voices: 89
(16, 392, 392, 392)
#Key: 5Scale: Major
#Total time for optimisation of piece: 8.321000099182129
#Total cost of piece: 452
["T", "Tm", "S", "T/3", "S65/6", "D", "T", "T", "T-5", "Ts", "D", "D7-1", "T", "S", "D", "D", "S/3", "T/5", "S/3", "Ts", "D7", "Ts", "D7/3", "T", "D7-1", "T", "D/5", "T/3", "D54", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-572.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-585.csv
[0 0 0 1 0 0 1 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 2 0 0 1 0 0 0 1 0 0 0; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 0 0 0 0 3; 0 0 0 1 0 0 0 0 1 0 0 2; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 2 0; 0 0 0 0 1 0 1 0 2 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 0 0 0 1 0 0 0 1 2; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 1 0 0 0 0 2; 0 0 0 0 0 0 1 0 0 0 1 2; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 0 0 1 0 1 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0]
Key Counter is [0 16 0 17 13 0 23 0 21 0 16 26]
Key Score is [39; 93; 78; 54; 116; 29; 119; 62; 70; 99; 33; 132]
Position Counter for 12 is [26 0 16 0 17 13 0 23 0 21 0 16]
Any[[12.0, 91.5, 1.0]]
[12, 92, 1]
12 B Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 183
child voicing cost: 162
Best yet: 345
New solution
function cost: 183
child voicing cost: 160
Best yet: 343
New solution
function cost: 183
child voicing cost: 152
Best yet: 335
New solution
function cost: 183
child voicing cost: 150
Best yet: 333
New solution
function cost: 183
child voicing cost: 146
Best yet: 329
New solution
function cost: 183
child voicing cost: 142
Best yet: 325
New solution
function cost: 183
child voicing cost: 137
Best yet: 320
New solution
function cost: 180
child voicing cost: 139
Best yet: 319
New solution
function cost: 183
child voicing cost: 135
Best yet: 318
New solution
function cost: 183
child voicing cost: 133
Best yet: 316
New solution
function cost: 180
child voicing cost: 132
Best yet: 312
New solution
function cost: 180
child voicing cost: 127
Best yet: 307
New solution
function cost: 180
child voicing cost: 124
Best yet: 304
New solution
function cost: 180
child voicing cost: 122
Best yet: 302
New solution
function cost: 180
child voicing cost: 121
Best yet: 301
New solution
function cost: 180
child voicing cost: 113
Best yet: 293
New solution
function cost: 174
child voicing cost: 118
Best yet: 292
New solution
function cost: 171
child voicing cost: 119
Best yet: 290
New solution
function cost: 171
child voicing cost: 117
Best yet: 288
New solution
function cost: 171
child voicing cost: 114
Best yet: 285
New solution
function cost: 180
child voicing cost: 98
Best yet: 278
New solution
function cost: 171
child voicing cost: 104
Best yet: 275
New solution
function cost: 171
child voicing cost: 102
Best yet: 273
New solution
function cost: 171
child voicing cost: 99
Best yet: 270

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 95837, Pruned: 109740, completed: 24, time: 1.6679999828338623, efficiency: 14.388489356711505
Results: bestval_func: 171, bestval_voices: 99
(15, 383, 383, 383)
[0 0 0 1 0 0 1 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 2 0 0 1 0 0 0 1 0 0 0; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 0 0 0 0 3; 0 0 0 1 0 0 0 0 1 0 0 2; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 2 0; 0 0 0 0 1 0 1 0 2 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 0 0 0 1 0 0 0 1 2; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 1 0 0 0 0 2; 0 0 0 0 0 0 1 0 0 0 1 2; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 0 0 1 0 1 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0]
Key Counter is [0 16 0 17 13 0 23 0 21 0 16 26]
Key Score is [39; 93; 78; 54; 116; 29; 119; 62; 70; 99; 33; 132]
Position Counter for 12 is [26 0 16 0 17 13 0 23 0 21 0 16]
Any[[12.0, 91.5, 1.0]]
[12, 92, 1]
12 B Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 147
child voicing cost: 203
Best yet: 350
New solution
function cost: 147
child voicing cost: 198
Best yet: 345
New solution
function cost: 147
child voicing cost: 195
Best yet: 342
New solution
function cost: 147
child voicing cost: 193
Best yet: 340
New solution
function cost: 147
child voicing cost: 192
Best yet: 339
New solution
function cost: 141
child voicing cost: 196
Best yet: 337
New solution
function cost: 141
child voicing cost: 188
Best yet: 329
New solution
function cost: 141
child voicing cost: 185
Best yet: 326
New solution
function cost: 141
child voicing cost: 179
Best yet: 320
New solution
function cost: 141
child voicing cost: 177
Best yet: 318
New solution
function cost: 141
child voicing cost: 175
Best yet: 316
New solution
function cost: 141
child voicing cost: 172
Best yet: 313
New solution
function cost: 141
child voicing cost: 170
Best yet: 311
New solution
function cost: 141
child voicing cost: 167
Best yet: 308
New solution
function cost: 141
child voicing cost: 163
Best yet: 304
New solution
function cost: 138
child voicing cost: 163
Best yet: 301
New solution
function cost: 138
child voicing cost: 161
Best yet: 299
New solution
function cost: 138
child voicing cost: 160
Best yet: 298
New solution
function cost: 138
child voicing cost: 155
Best yet: 293

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (9, "T", [(47, 1), (47, 1), (54, 5), (63, 3)])    
 (3, "S65", [(40, 1), (47, 5), (56, 3), (61, 6)])  
 (9, "T/5", [(42, 5), (47, 1), (54, 5), (63, 3)])  
 (12, "S/3", [(44, 3), (47, 5), (52, 1), (64, 1)]) 
 (15, "D7/3", [(46, 3), (52, 7), (54, 1), (61, 5)])
 (15, "T", [(47, 1), (51, 3), (54, 5), (59, 1)])   
 (18, "S", [(52, 1), (52, 1), (56, 3), (59, 5)])   
 (12, "S", [(52, 1), (52, 1), (56, 3), (59, 5)])   
 (6, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])    
 (15, "S/3", [(44, 3), (52, 1), (59, 5), (64, 1)]) 
 (15, "D", [(42, 1), (49, 5), (58, 3), (66, 1)])   
 (6, "D/3", [(46, 3), (49, 5), (61, 5), (66, 1)])  
 (6, "Ts", [(44, 1), (51, 5), (59, 3), (68, 1)])   
 ⋮                                                 
 (9, "D/3", [(58, 3), (61, 5), (66, 1), (78, 1)])  
 (12, "T-5", [(59, 1), (59, 1), (63, 3), (71, 1)]) 
 (6, "T", [(59, 1), (59, 1), (66, 5), (75, 3)])    
 (3, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])    
 (6, "S/3", [(56, 3), (59, 5), (64, 1), (76, 1)])  
 (12, "D", [(54, 1), (61, 5), (66, 1), (70, 3)])   
 (15, "T/3", [(51, 3), (59, 1), (66, 5), (71, 1)]) 
 (9, "S65", [(52, 1), (59, 5), (68, 3), (73, 6)])  
 (0, "D64", [(54, 1), (59, 4), (66, 1), (75, 6)])  
 (9, "D", [(54, 1), (58, 3), (66, 1), (73, 5)])    
 (9, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])    
 (9, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])    

##: Done. Total checked: 69432, Pruned: 78916, completed: 19, time: 1.182999849319458, efficiency: 16.06086426040552
Results: bestval_func: 138, bestval_voices: 155
(16, 383, 383, 383)
#Key: 12Scale: Major
#Total time for optimisation of piece: 4.176000118255615
#Total cost of piece: 563
["T", "S65", "T/5", "S/3", "D7/3", "T", "S", "S", "T", "S/3", "D", "D/3", "Ts", "D", "T", "T", "D", "D7", "Ts", "Tm", "D/3", "T-5", "T", "S", "S/3", "D", "T/3", "S65", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-585.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-65.csv
[0 2 0 0 0 1 0 0 0 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 1 0 0 1 0; 2 0 0 1 0 0 1 0 0 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 1 0 1 0 1 0 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 0 0 0 2 0 0 1; 1 0 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 1 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 0 0 1 0 0 2 0 0 1; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 2 0 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 0 0 1 1 0 1 0 1 0; 0 0 0 2 0 0 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0]
Key Counter is [10 19 1 23 0 20 10 2 25 0 17 4]
Key Score is [37; 124; 36; 98; 81; 50; 118; 27; 116; 59; 73; 98]
Position Counter for 2 is [19 1 23 0 20 10 2 25 0 17 4 10]
Any[[2.0, 79.0, 1.0]]
[2, 79, 1]
2 C# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 139
Best yet: 289
New solution
function cost: 150
child voicing cost: 129
Best yet: 279
New solution
function cost: 150
child voicing cost: 124
Best yet: 274
New solution
function cost: 150
child voicing cost: 119
Best yet: 269
New solution
function cost: 150
child voicing cost: 117
Best yet: 267
New solution
function cost: 147
child voicing cost: 119
Best yet: 266
New solution
function cost: 147
child voicing cost: 117
Best yet: 264
New solution
function cost: 150
child voicing cost: 113
Best yet: 263
New solution
function cost: 150
child voicing cost: 112
Best yet: 262
New solution
function cost: 150
child voicing cost: 110
Best yet: 260
New solution
function cost: 150
child voicing cost: 109
Best yet: 259
New solution
function cost: 150
child voicing cost: 107
Best yet: 257
New solution
function cost: 150
child voicing cost: 106
Best yet: 256
New solution
function cost: 150
child voicing cost: 105
Best yet: 255
New solution
function cost: 150
child voicing cost: 103
Best yet: 253
New solution
function cost: 150
child voicing cost: 102
Best yet: 252
New solution
function cost: 150
child voicing cost: 100
Best yet: 250
New solution
function cost: 150
child voicing cost: 99
Best yet: 249
New solution
function cost: 150
child voicing cost: 98
Best yet: 248
New solution
function cost: 150
child voicing cost: 96
Best yet: 246
New solution
function cost: 150
child voicing cost: 95
Best yet: 245
New solution
function cost: 150
child voicing cost: 93
Best yet: 243

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 73958, Pruned: 96576, completed: 22, time: 1.2669999599456787, efficiency: 17.363852166927636
Results: bestval_func: 150, bestval_voices: 93
(15, 365, 365, 365)
[0 2 0 0 0 1 0 0 0 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 1 0 0 1 0; 2 0 0 1 0 0 1 0 0 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 1 0 1 0 1 0 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 0 0 0 2 0 0 1; 1 0 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 1 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 0 0 1 0 0 2 0 0 1; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 2 0 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 0 0 1 1 0 1 0 1 0; 0 0 0 2 0 0 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0]
Key Counter is [10 19 1 23 0 20 10 2 25 0 17 4]
Key Score is [37; 124; 36; 98; 81; 50; 118; 27; 116; 59; 73; 98]
Position Counter for 2 is [19 1 23 0 20 10 2 25 0 17 4 10]
Any[[2.0, 79.0, 1.0]]
[2, 79, 1]
2 C# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 183
Best yet: 333
New solution
function cost: 150
child voicing cost: 182
Best yet: 332
New solution
function cost: 150
child voicing cost: 177
Best yet: 327
New solution
function cost: 150
child voicing cost: 176
Best yet: 326
New solution
function cost: 150
child voicing cost: 168
Best yet: 318
New solution
function cost: 150
child voicing cost: 161
Best yet: 311
New solution
function cost: 147
child voicing cost: 163
Best yet: 310
New solution
function cost: 147
child voicing cost: 157
Best yet: 304
New solution
function cost: 147
child voicing cost: 152
Best yet: 299
New solution
function cost: 147
child voicing cost: 148
Best yet: 295
New solution
function cost: 147
child voicing cost: 143
Best yet: 290
New solution
function cost: 147
child voicing cost: 140
Best yet: 287
New solution
function cost: 147
child voicing cost: 135
Best yet: 282
New solution
function cost: 147
child voicing cost: 133
Best yet: 280
New solution
function cost: 147
child voicing cost: 127
Best yet: 274

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])     
 (3, "D", [(56, 1), (63, 5), (68, 1), (72, 3)])     
 (6, "S/3", [(58, 3), (61, 5), (66, 1), (78, 1)])   
 (12, "D7", [(56, 1), (63, 5), (66, 7), (72, 3)])   
 (15, "Ts", [(58, 1), (61, 3), (65, 5), (73, 3)])   
 (9, "D", [(56, 1), (60, 3), (68, 1), (75, 5)])     
 (6, "D7-1", [(51, 5), (63, 5), (66, 7), (72, 3)])  
 (18, "T", [(49, 1), (65, 3), (68, 5), (73, 1)])    
 (0, "T", [(49, 1), (65, 3), (68, 5), (73, 1)])     
 (0, "S65", [(54, 1), (63, 6), (70, 3), (73, 5)])   
 (21, "D", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (6, "S/3", [(58, 3), (61, 5), (66, 1), (73, 5)])   
 (6, "Ts", [(58, 1), (61, 3), (65, 5), (73, 3)])    
 ⋮                                                  
 (3, "Tm", [(53, 1), (56, 3), (68, 3), (72, 5)])    
 (9, "D/3", [(48, 3), (56, 1), (68, 1), (75, 5)])   
 (15, "Ts", [(46, 1), (58, 1), (65, 5), (73, 3)])   
 (12, "S65/6", [(51, 6), (61, 5), (66, 1), (70, 3)])
 (6, "D7-1", [(51, 5), (63, 5), (66, 7), (72, 3)])  
 (6, "T/3", [(53, 3), (61, 1), (68, 5), (73, 1)])   
 (6, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])     
 (12, "D7/3", [(48, 3), (63, 5), (68, 1), (78, 7)]) 
 (9, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])     
 (12, "D7", [(56, 1), (60, 3), (66, 7), (75, 5)])   
 (27, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])    
 (27, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])    

##: Done. Total checked: 90524, Pruned: 100670, completed: 15, time: 1.4539999961853027, efficiency: 10.316368665305243
Results: bestval_func: 147, bestval_voices: 127
(16, 365, 365, 365)
#Key: 2Scale: Major
#Total time for optimisation of piece: 3.884999990463257
#Total cost of piece: 517
["T", "D", "S/3", "D7", "Ts", "D", "D7-1", "T", "T", "S65", "D", "S/3", "Ts", "D", "T", "T", "D/3", "D7", "T", "S", "Tm", "D/3", "Ts", "S65/6", "D7-1", "T/3", "T", "D7/3", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-65.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-78.csv
[0 1 0 0 0 1 0 0 0 0 0 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 2 0 0 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 1 1 0 0 1 0 0 0 0 1 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 0 1 0 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 0 1; 0 1 0 0 1 1 0 0 1 0 0 0; 0 0 0 0 0 0 2 0 1 0 1 0; 0 1 0 0 0 0 2 0 0 0 1 0; 1 0 0 1 0 0 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 2 0 1 0 0 0 0 1 0 0 0; 0 3 0 0 0 0 0 0 0 0 1 0; 0 2 0 0 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 1 0 0 0 1 0; 0 1 0 1 0 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 1 0 1 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 0 1 0 0 2 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 2 0 0 0 0 0 0 1 0 0 1; 0 0 0 0 0 0 3 0 0 0 1 0; 0 0 0 0 0 0 3 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 0 1; 0 1 0 1 0 0 0 0 2 0 0 0]
Key Counter is [5 23 1 17 3 9 20 1 21 0 16 11]
Key Score is [30; 111; 59; 70; 95; 35; 117; 41; 92; 79; 49; 111]
Position Counter for 7 is [20 1 21 0 16 11 5 23 1 17 3 9]
Any[[7.0, 76.5, 1.0]]
[7, 76, 1]
7 F# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 120
child voicing cost: 149
Best yet: 269
New solution
function cost: 120
child voicing cost: 144
Best yet: 264
New solution
function cost: 120
child voicing cost: 143
Best yet: 263
New solution
function cost: 120
child voicing cost: 140
Best yet: 260
New solution
function cost: 120
child voicing cost: 137
Best yet: 257
New solution
function cost: 120
child voicing cost: 135
Best yet: 255
New solution
function cost: 120
child voicing cost: 132
Best yet: 252
New solution
function cost: 120
child voicing cost: 131
Best yet: 251
New solution
function cost: 120
child voicing cost: 128
Best yet: 248
New solution
function cost: 105
child voicing cost: 141
Best yet: 246
New solution
function cost: 105
child voicing cost: 138
Best yet: 243
New solution
function cost: 105
child voicing cost: 136
Best yet: 241
New solution
function cost: 105
child voicing cost: 134
Best yet: 239
New solution
function cost: 105
child voicing cost: 130
Best yet: 235
New solution
function cost: 108
child voicing cost: 125
Best yet: 233
New solution
function cost: 105
child voicing cost: 126
Best yet: 231
New solution
function cost: 108
child voicing cost: 121
Best yet: 229
New solution
function cost: 105
child voicing cost: 123
Best yet: 228
New solution
function cost: 108
child voicing cost: 118
Best yet: 226
New solution
function cost: 102
child voicing cost: 123
Best yet: 225
New solution
function cost: 105
child voicing cost: 118
Best yet: 223
New solution
function cost: 105
child voicing cost: 115
Best yet: 220
New solution
function cost: 105
child voicing cost: 114
Best yet: 219
New solution
function cost: 105
child voicing cost: 113
Best yet: 218
New solution
function cost: 105
child voicing cost: 112
Best yet: 217
New solution
function cost: 105
child voicing cost: 111
Best yet: 216
New solution
function cost: 105
child voicing cost: 108
Best yet: 213
New solution
function cost: 105
child voicing cost: 107
Best yet: 212
New solution
function cost: 105
child voicing cost: 106
Best yet: 211
New solution
function cost: 105
child voicing cost: 105
Best yet: 210
New solution
function cost: 105
child voicing cost: 104
Best yet: 209
New solution
function cost: 105
child voicing cost: 99
Best yet: 204
New solution
function cost: 105
child voicing cost: 98
Best yet: 203
New solution
function cost: 105
child voicing cost: 97
Best yet: 202

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 83560, Pruned: 116325, completed: 34, time: 1.4019999504089355, efficiency: 24.251070757943232
Results: bestval_func: 105, bestval_voices: 97
(15, 384, 384, 384)
[0 1 0 0 0 1 0 0 0 0 0 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 2 0 0 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 1 1 0 0 1 0 0 0 0 1 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 0 1 0 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 0 1; 0 1 0 0 1 1 0 0 1 0 0 0; 0 0 0 0 0 0 2 0 1 0 1 0; 0 1 0 0 0 0 2 0 0 0 1 0; 1 0 0 1 0 0 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 2 0 1 0 0 0 0 1 0 0 0; 0 3 0 0 0 0 0 0 0 0 1 0; 0 2 0 0 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 1 0 0 0 1 0; 0 1 0 1 0 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 1 0 1 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 0 1 0 0 2 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 2 0 0 0 0 0 0 1 0 0 1; 0 0 0 0 0 0 3 0 0 0 1 0; 0 0 0 0 0 0 3 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 0 1; 0 1 0 1 0 0 0 0 2 0 0 0]
Key Counter is [5 23 1 17 3 9 20 1 21 0 16 11]
Key Score is [30; 111; 59; 70; 95; 35; 117; 41; 92; 79; 49; 111]
Position Counter for 7 is [20 1 21 0 16 11 5 23 1 17 3 9]
Any[[7.0, 76.5, 1.0]]
[7, 76, 1]
7 F# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 207
child voicing cost: 189
Best yet: 396
New solution
function cost: 207
child voicing cost: 184
Best yet: 391
New solution
function cost: 207
child voicing cost: 182
Best yet: 389
New solution
function cost: 207
child voicing cost: 180
Best yet: 387
New solution
function cost: 207
child voicing cost: 178
Best yet: 385
New solution
function cost: 207
child voicing cost: 173
Best yet: 380
New solution
function cost: 207
child voicing cost: 170
Best yet: 377
New solution
function cost: 207
child voicing cost: 168
Best yet: 375
New solution
function cost: 207
child voicing cost: 165
Best yet: 372
New solution
function cost: 207
child voicing cost: 160
Best yet: 367
New solution
function cost: 207
child voicing cost: 158
Best yet: 365
New solution
function cost: 207
child voicing cost: 157
Best yet: 364
New solution
function cost: 225
child voicing cost: 136
Best yet: 361
New solution
function cost: 213
child voicing cost: 145
Best yet: 358
New solution
function cost: 207
child voicing cost: 148
Best yet: 355
New solution
function cost: 207
child voicing cost: 143
Best yet: 350
New solution
function cost: 207
child voicing cost: 140
Best yet: 347
New solution
function cost: 207
child voicing cost: 137
Best yet: 344
New solution
function cost: 207
child voicing cost: 136
Best yet: 343
New solution
function cost: 207
child voicing cost: 134
Best yet: 341
New solution
function cost: 207
child voicing cost: 132
Best yet: 339
New solution
function cost: 207
child voicing cost: 130
Best yet: 337

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (3, "T", [(54, 1), (54, 1), (61, 5), (70, 3)])    
 (3, "Ts", [(51, 1), (58, 5), (63, 1), (66, 3)])   
 (0, "D", [(49, 1), (61, 1), (65, 3), (68, 5)])    
 (3, "S/3", [(51, 3), (54, 5), (59, 1), (71, 1)])  
 (3, "T", [(54, 1), (54, 1), (61, 5), (70, 3)])    
 (0, "D/3", [(53, 3), (56, 5), (61, 1), (68, 5)])  
 (9, "Ts", [(51, 1), (58, 5), (63, 1), (66, 3)])   
 (9, "D", [(49, 1), (61, 1), (65, 3), (68, 5)])    
 (12, "T", [(42, 1), (61, 5), (66, 1), (70, 3)])   
 (0, "D7-1", [(44, 5), (59, 7), (65, 3), (71, 7)]) 
 (9, "T", [(42, 1), (61, 5), (66, 1), (70, 3)])    
 (9, "D", [(49, 1), (61, 1), (65, 3), (68, 5)])    
 (21, "D7-1", [(44, 5), (59, 7), (65, 3), (68, 5)])
 ⋮                                                 
 (6, "D7/3", [(53, 3), (59, 7), (68, 5), (73, 1)]) 
 (21, "T", [(54, 1), (58, 3), (66, 1), (73, 5)])   
 (3, "D7-1", [(56, 5), (59, 7), (65, 3), (71, 7)]) 
 (6, "D7/7", [(59, 7), (61, 1), (65, 3), (68, 5)]) 
 (15, "T/3", [(58, 3), (61, 5), (66, 1), (73, 5)]) 
 (6, "S65/6", [(56, 6), (59, 1), (66, 5), (75, 3)])
 (15, "D7-1", [(56, 5), (59, 7), (68, 5), (77, 3)])
 (0, "Ts", [(51, 1), (58, 5), (66, 3), (78, 3)])   
 (18, "D", [(49, 1), (61, 1), (68, 5), (77, 3)])   
 (27, "D7", [(49, 1), (65, 3), (68, 5), (71, 7)])  
 (15, "T", [(54, 1), (61, 5), (66, 1), (70, 3)])   
 (15, "T", [(54, 1), (61, 5), (66, 1), (70, 3)])   

##: Done. Total checked: 165733, Pruned: 182836, completed: 22, time: 2.8289999961853027, efficiency: 7.776599515611656
Results: bestval_func: 207, bestval_voices: 130
(16, 384, 384, 384)
#Key: 7Scale: Major
#Total time for optimisation of piece: 5.562000036239624
#Total cost of piece: 539
["T", "Ts", "D", "S/3", "T", "D/3", "Ts", "D", "T", "D7-1", "T", "D", "D7-1", "T", "D", "D", "D/3", "D7-5", "T", "S", "D7/3", "T", "D7-1", "D7/7", "T/3", "S65/6", "D7-1", "Ts", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-78.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-91.csv
[0 0 0 1 0 0 0 0 0 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 0 1 0 0 1 0 0 1 0 1 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 0 0 0 1 1 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 0 1 1 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 0 2 0 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 0 2; 0 2 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 1 0 0 0; 0 0 0 0 1 0 1 0 1 0 1 0; 0 0 0 0 1 0 1 0 1 0 1 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 2 1 0 1 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 0 2 0 1 0 0 0 0 1; 0 0 0 0 0 0 2 0 0 0 1 1; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 1 0]
Key Counter is [0 11 1 13 24 2 26 0 18 1 12 23]
Key Score is [51; 82; 86; 46; 116; 40; 105; 75; 56; 104; 29; 127]
Position Counter for 12 is [23 0 11 1 13 24 2 26 0 18 1 12]
Any[[12.0, 95.5, 1.0]]
[12, 96, 1]
12 B Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 117
child voicing cost: 173
Best yet: 290
New solution
function cost: 117
child voicing cost: 171
Best yet: 288
New solution
function cost: 117
child voicing cost: 163
Best yet: 280
New solution
function cost: 117
child voicing cost: 159
Best yet: 276
New solution
function cost: 117
child voicing cost: 156
Best yet: 273
New solution
function cost: 117
child voicing cost: 154
Best yet: 271
New solution
function cost: 117
child voicing cost: 153
Best yet: 270
New solution
function cost: 117
child voicing cost: 148
Best yet: 265
New solution
function cost: 117
child voicing cost: 144
Best yet: 261
New solution
function cost: 117
child voicing cost: 142
Best yet: 259
New solution
function cost: 117
child voicing cost: 139
Best yet: 256
New solution
function cost: 117
child voicing cost: 134
Best yet: 251
New solution
function cost: 117
child voicing cost: 129
Best yet: 246
New solution
function cost: 117
child voicing cost: 123
Best yet: 240
New solution
function cost: 117
child voicing cost: 122
Best yet: 239
New solution
function cost: 117
child voicing cost: 117
Best yet: 234
New solution
function cost: 117
child voicing cost: 116
Best yet: 233
New solution
function cost: 117
child voicing cost: 113
Best yet: 230
New solution
function cost: 117
child voicing cost: 112
Best yet: 229
New solution
function cost: 117
child voicing cost: 109
Best yet: 226
New solution
function cost: 117
child voicing cost: 107
Best yet: 224
New solution
function cost: 117
child voicing cost: 106
Best yet: 223
New solution
function cost: 117
child voicing cost: 103
Best yet: 220
New solution
function cost: 117
child voicing cost: 102
Best yet: 219
New solution
function cost: 117
child voicing cost: 99
Best yet: 216

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

##: Done. Total checked: 91643, Pruned: 124001, completed: 25, time: 1.559999942779541, efficiency: 16.025641613458056
Results: bestval_func: 117, bestval_voices: 99
(15, 383, 383, 383)
[0 0 0 1 0 0 0 0 0 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 0 1 0 0 1 0 0 1 0 1 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 0 0 0 1 1 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 0 1 1 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 0 2 0 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 0 2; 0 2 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 1 0 0 0; 0 0 0 0 1 0 1 0 1 0 1 0; 0 0 0 0 1 0 1 0 1 0 1 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 2 1 0 1 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 0 2 0 1 0 0 0 0 1; 0 0 0 0 0 0 2 0 0 0 1 1; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 1 0]
Key Counter is [0 11 1 13 24 2 26 0 18 1 12 23]
Key Score is [51; 82; 86; 46; 116; 40; 105; 75; 56; 104; 29; 127]
Position Counter for 12 is [23 0 11 1 13 24 2 26 0 18 1 12]
Any[[12.0, 95.5, 1.0]]
[12, 96, 1]
12 B Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "W", "O", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 171
child voicing cost: 152
Best yet: 323
New solution
function cost: 171
child voicing cost: 150
Best yet: 321
New solution
function cost: 171
child voicing cost: 146
Best yet: 317
New solution
function cost: 171
child voicing cost: 142
Best yet: 313
New solution
function cost: 171
child voicing cost: 139
Best yet: 310
New solution
function cost: 171
child voicing cost: 138
Best yet: 309
New solution
function cost: 156
child voicing cost: 150
Best yet: 306
New solution
function cost: 156
child voicing cost: 148
Best yet: 304
New solution
function cost: 159
child voicing cost: 143
Best yet: 302
New solution
function cost: 159
child voicing cost: 142
Best yet: 301
New solution
function cost: 159
child voicing cost: 141
Best yet: 300
New solution
function cost: 159
child voicing cost: 139
Best yet: 298
New solution
function cost: 147
child voicing cost: 146
Best yet: 293
New solution
function cost: 147
child voicing cost: 144
Best yet: 291
New solution
function cost: 147
child voicing cost: 142
Best yet: 289
New solution
function cost: 159
child voicing cost: 129
Best yet: 288
New solution
function cost: 159
child voicing cost: 127
Best yet: 286
New solution
function cost: 147
child voicing cost: 137
Best yet: 284
New solution
function cost: 147
child voicing cost: 136
Best yet: 283
New solution
function cost: 147
child voicing cost: 133
Best yet: 280
New solution
function cost: 147
child voicing cost: 130
Best yet: 277
New solution
function cost: 147
child voicing cost: 127
Best yet: 274
New solution
function cost: 147
child voicing cost: 126
Best yet: 273
New solution
function cost: 147
child voicing cost: 123
Best yet: 270
New solution
function cost: 147
child voicing cost: 122
Best yet: 269
New solution
function cost: 147
child voicing cost: 119
Best yet: 266
New solution
function cost: 147
child voicing cost: 116
Best yet: 263
New solution
function cost: 147
child voicing cost: 113
Best yet: 260

Dict{String,Array{String,1}} with 27 entries:
  "S65/6" => ["D", "D7", "D7-1", "D7-5", "T/5", "S65/6"]
  "S/5"   => ["T", "S6", "S65", "S65/6"]
  "T"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "Ts"    => ["T/3", "S", "S/3", "S6", "S65", "S65/6", "D", "D-5", "D/3", "D7",…
  "S/3"   => ["T", "T/3", "T/5", "S", "S6", "D", "D/3", "D7", "D7/3", "T64", "T…
  "T/5"   => ["S", "S/3", "S6", "S65", "S65/6", "D"]
  "Ss"    => ["T", "T-5", "T/3", "T/5", "D", "D-5", "D/3", "D/5", "D7", "D7-1",…
  "D7/5"  => ["T", "D7", "D7/3", "D7/5", "D7/7"]
  "T/3"   => ["T", "S", "S/3", "S6", "S65", "S65/6", "D", "D/3", "D/5", "D7-5",…
  "D/5"   => ["T", "T/3"]
  "T-5"   => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S65", "S65/6", "D" …
  "D64"   => ["D", "D7-5", "D54", "D64"]
  "D/3"   => ["T", "T-5", "S/3", "D", "D7", "D7-5", "Ts"]
  "D-5"   => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "D7"    => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts", "T64", "T54"]
  "T64"   => ["T", "T54", "T64"]
  "D7-5"  => ["T", "D7-5"]
  "D"     => ["T", "T-5", "T/3", "T/5", "S/3", "D", "D/3", "D/5", "D7", "D7-1",…
  "Tm"    => ["S", "D/3", "D7/3", "Ts", "Tm"]
  "S65"   => ["T/5", "D", "D64", "S65"]
  "T54"   => ["T", "T54"]
  "S"     => ["T", "T-5", "T/3", "T/5", "S", "S/3", "S/5", "S6", "S65", "S65/6"…
  "D7/3"  => ["T", "T-5", "D7", "D7/3", "D7/5", "D7/7", "Ts"]
  "D7-1"  => ["T", "T/3", "D7", "D7-1", "D7/3", "D7/5", "D7/7", "Ts"]
  "S6"    => ["T/3", "D", "D7", "D7-5", "D64", "S6"]
  ⋮       => ⋮

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])   
 (0, "D7", [(54, 1), (64, 7), (70, 3), (73, 5)])  
 (0, "Ts", [(56, 1), (63, 5), (71, 3), (71, 3)])  
 (9, "S65", [(52, 1), (61, 6), (71, 5), (80, 3)]) 
 (9, "D", [(54, 1), (61, 5), (70, 3), (78, 1)])   
 (12, "S/3", [(56, 3), (59, 5), (64, 1), (76, 1)])
 (9, "D", [(54, 1), (61, 5), (66, 1), (70, 3)])   
 (9, "Ts", [(56, 1), (59, 3), (63, 5), (71, 3)])  
 (9, "S/3", [(56, 3), (59, 5), (64, 1), (71, 5)]) 
 (3, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])   
 (0, "D7-1", [(49, 5), (61, 5), (64, 7), (70, 3)])
 (12, "T", [(47, 1), (63, 3), (66, 5), (71, 1)])  
 (9, "D7/3", [(46, 3), (64, 7), (66, 1), (73, 5)])
 ⋮                                                
 (24, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])  
 (9, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])   
 (6, "D7-5", [(54, 1), (58, 3), (64, 7), (66, 1)])
 (12, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])  
 (0, "D7/7", [(52, 7), (61, 5), (66, 1), (70, 3)])
 (18, "T/3", [(51, 3), (59, 1), (66, 5), (71, 1)])
 (6, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])   
 (6, "S/3", [(44, 3), (59, 5), (64, 1), (76, 1)]) 
 (6, "D", [(42, 1), (61, 5), (70, 3), (78, 1)])   
 (0, "D7", [(42, 1), (61, 5), (70, 3), (76, 7)])  
 (6, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])   
 (6, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])   

##: Done. Total checked: 93063, Pruned: 102252, completed: 28, time: 1.6399998664855957, efficiency: 17.073172121655126
Results: bestval_func: 147, bestval_voices: 113
(16, 383, 383, 383)
#Key: 12Scale: Major
#Total time for optimisation of piece: 4.5299999713897705
#Total cost of piece: 476
["T", "D7", "Ts", "S65", "D", "S/3", "D", "Ts", "S/3", "S", "D7-1", "T", "D7/3", "T", "D", "D", "D7", "Ts", "T/3", "D7/5", "T", "S", "D7-5", "T", "D7/7", "T/3", "T", "S/3", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-91.csv
 End of file 
 
