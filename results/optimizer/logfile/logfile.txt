2-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(41, 1), (53, 1), (56, 3), (60, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (53, 1), (56, 3), (60, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                       
 [(4, "D7-5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "S6"), (8, "D-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5")  …  (8, "T/3"), (8, "T/5"), (8, "Tm"), (10, "D"), (10, "D/3"), (10, "D/5"), (10, "T54"), (12, "D7-1"), (14, "T"), (20, "T-5")]             
 [(0, "Tm"), (4, "D"), (4, "D/3"), (4, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3")  …  (6, "Ts"), (8, "D7-1"), (8, "S65"), (8, "T54"), (10, "D-5"), (10, "S"), (10, "S/3"), (10, "S/5"), (14, "S6"), (14, "T-5")]              
 [(0, "Ts"), (8, "D54"), (10, "D"), (10, "D/3"), (10, "D/5"), (10, "S65"), (10, "T/3"), (10, "T/5"), (12, "T"), (14, "D7")  …  (14, "Tm"), (16, "D-5"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "T-5"), (20, "S6"), (22, "Dm"), (24, "D7-1")]     
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (4, "Dm"), (4, "S65"), (4, "S65/6"), (8, "D"), (8, "D/3"), (8, "D7-1"), (8, "S/3")  …  (10, "S"), (10, "S6"), (10, "T54"), (12, "D64"), (12, "T/3"), (14, "D7-5"), (16, "Ts"), (18, "D-5"), (18, "T"), (24, "T-5")]        
 [(6, "D/3"), (6, "T"), (6, "T/3"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "D54"), (10, "D7-1"), (10, "S"), (10, "S/3"), (10, "T54"), (12, "D"), (12, "T64"), (12, "Ts"), (14, "D7-5"), (16, "T-5"), (18, "D-5")]       
 [(6, "S65"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "T"), (10, "D64"), (10, "T/3"), (10, "T64"), (10, "Ts"), (12, "D/3"), (12, "D54"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T-5"), (16, "S6"), (18, "D"), (20, "D7-5"), (24, "D-5")]      
 [(2, "D/3"), (4, "Dm"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "T"), (10, "T/3"), (12, "D"), (12, "D7-1"), (12, "S65/6"), (12, "Ts"), (14, "D54"), (16, "D64"), (16, "S/3"), (16, "T64"), (18, "D7-5"), (18, "S"), (20, "T-5"), (22, "D-5")]     
 [(0, "T54"), (2, "S/3"), (2, "T64"), (4, "T"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S65"), (6, "S65/6"), (8, "D54")  …  (10, "D7-1"), (10, "T/3"), (12, "D7-5"), (12, "S"), (14, "T-5"), (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "S6"), (18, "Dm")]       
 [(4, "S"), (4, "S/3"), (4, "S/5"), (8, "S6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Dm"), (10, "S65")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "Tm"), (14, "Ts"), (16, "D7-5"), (18, "T-5"), (18, "T/3"), (18, "T/5"), (20, "D-5")]   
 [(2, "S/3"), (2, "S/5"), (4, "T"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65"), (8, "D54"), (10, "D")  …  (10, "T/3"), (10, "T/5"), (12, "D7-5"), (12, "S"), (14, "T-5"), (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "S6"), (18, "Dm")]          
 [(8, "S65"), (8, "T-5"), (12, "Dm"), (12, "S/3"), (12, "S/5"), (12, "Tm"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "S")  …  (14, "T/5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "Ts"), (18, "S6"), (20, "D"), (26, "D7-5"), (30, "D-5")]
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (8, "Ts"), (10, "T"), (12, "D"), (12, "D/3"), (12, "D7-1"), (12, "S/3"), (12, "T64"), (14, "D54"), (14, "S"), (16, "D64"), (16, "T-5"), (16, "T/3"), (16, "Tm"), (18, "D7-5"), (22, "D-5")]     
 [(6, "D/3"), (6, "T"), (6, "T/3"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "D54"), (10, "D7-1"), (10, "S"), (10, "S/3"), (10, "T54"), (12, "D"), (12, "T64"), (12, "Ts"), (14, "D7-5"), (16, "T-5"), (18, "D-5")]       
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D7-1"), (4, "S65/6"), (6, "D54"), (8, "D64"), (8, "S/3"), (8, "T64"), (10, "D7-5"), (10, "S"), (12, "Ts"), (14, "D-5"), (14, "T"), (14, "T/3"), (24, "T-5")]                       
 [(6, "T"), (8, "T-5"), (10, "D/3"), (10, "T54"), (14, "D54"), (16, "D"), (16, "D64"), (16, "D7"), (16, "D7/3"), (16, "D7/5")  …  (16, "S65"), (16, "Tm"), (16, "Ts"), (18, "T/3"), (20, "D7-1"), (22, "D-5"), (22, "D7-5"), (22, "S"), (22, "S/3"), (26, "S6")]  

Optimising: ../../results/neuralnet/pianoroll/neuralnet-0.csv
[1 0 0 0 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 1 0 1 0 1 1 0 0 0; 0 1 0 0 1 0 0 2 0 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 3 0 0 0 0 0 0; 1 0 0 0 0 3 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 1 0 0 1 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 1 0 2 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 1 1 0; 0 0 0 1 0 1 0 0 0 1 1 0; 1 0 1 0 0 1 0 0 1 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 0 0 0 0 1 2 0 0 1 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 2 0 0 0 0 0 0 1 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 1 0 0 0 1 0 0; 1 0 0 0 0 1 0 0 1 1 0 0]
Key Counter is [27 6 1 11 5 32 0 12 17 4 13 0]
Key Score is [81; 106; 28; 113; 43; 94; 79; 49; 118; 33; 100; 52]
Position Counter for 9 is [17 4 13 0 27 6 1 11 5 32 0 12]
Any[[9.0, 84.75, 0.0]]
[9, 85, 0]
6 F Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

2-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(41, 1), (53, 1), (56, 3), (60, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (53, 1), (56, 3), (60, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 112
child voicing cost: 193
Best yet: 305
New solution
function cost: 112
child voicing cost: 192
Best yet: 304
New solution
function cost: 112
child voicing cost: 189
Best yet: 301
New solution
function cost: 112
child voicing cost: 181
Best yet: 293
New solution
function cost: 112
child voicing cost: 176
Best yet: 288
New solution
function cost: 112
child voicing cost: 170
Best yet: 282
New solution
function cost: 112
child voicing cost: 166
Best yet: 278
New solution
function cost: 112
child voicing cost: 164
Best yet: 276
New solution
function cost: 112
child voicing cost: 163
Best yet: 275
New solution
function cost: 118
child voicing cost: 156
Best yet: 274
New solution
function cost: 112
child voicing cost: 156
Best yet: 268
New solution
function cost: 112
child voicing cost: 154
Best yet: 266
New solution
function cost: 112
child voicing cost: 152
Best yet: 264
New solution
function cost: 122
child voicing cost: 141
Best yet: 263
New solution
function cost: 112
child voicing cost: 150
Best yet: 262
New solution
function cost: 112
child voicing cost: 148
Best yet: 260
New solution
function cost: 112
child voicing cost: 146
Best yet: 258
New solution
function cost: 112
child voicing cost: 145
Best yet: 257
New solution
function cost: 122
child voicing cost: 134
Best yet: 256
New solution
function cost: 108
child voicing cost: 146
Best yet: 254
New solution
function cost: 108
child voicing cost: 145
Best yet: 253
New solution
function cost: 108
child voicing cost: 138
Best yet: 246
New solution
function cost: 118
child voicing cost: 124
Best yet: 242
New solution
function cost: 118
child voicing cost: 122
Best yet: 240
New solution
function cost: 118
child voicing cost: 120
Best yet: 238
New solution
function cost: 118
child voicing cost: 119
Best yet: 237
New solution
function cost: 122
child voicing cost: 113
Best yet: 235
New solution
function cost: 120
child voicing cost: 114
Best yet: 234
New solution
function cost: 124
child voicing cost: 107
Best yet: 231
New solution
function cost: 120
child voicing cost: 110
Best yet: 230
New solution
function cost: 124
child voicing cost: 104
Best yet: 228
New solution
function cost: 122
child voicing cost: 105
Best yet: 227
New solution
function cost: 122
child voicing cost: 103
Best yet: 225
New solution
function cost: 116
child voicing cost: 104
Best yet: 220
New solution
function cost: 122
child voicing cost: 97
Best yet: 219
New solution
function cost: 122
child voicing cost: 93
Best yet: 215
New solution
function cost: 122
child voicing cost: 91
Best yet: 213
New solution
function cost: 116
child voicing cost: 95
Best yet: 211
New solution
function cost: 104
child voicing cost: 106
Best yet: 210
New solution
function cost: 98
child voicing cost: 108
Best yet: 206
New solution
function cost: 98
child voicing cost: 107
Best yet: 205
New solution
function cost: 112
child voicing cost: 91
Best yet: 203
New solution
function cost: 112
child voicing cost: 89
Best yet: 201
New solution
function cost: 102
child voicing cost: 94
Best yet: 196
New solution
function cost: 104
child voicing cost: 91
Best yet: 195
New solution
function cost: 104
child voicing cost: 89
Best yet: 193
New solution
function cost: 104
child voicing cost: 87
Best yet: 191
New solution
function cost: 104
child voicing cost: 85
Best yet: 189
New solution
function cost: 104
child voicing cost: 84
Best yet: 188
New solution
function cost: 104
child voicing cost: 82
Best yet: 186
New solution
function cost: 104
child voicing cost: 80
Best yet: 184
New solution
function cost: 104
child voicing cost: 78
Best yet: 182
New solution
function cost: 104
child voicing cost: 76
Best yet: 180
Done. Total checked: 146483, Pruned: 178122, completed: 53, time: 3.2239999771118164, efficiency: 16.43920607204205
Results: bestval_func: 104, bestval_voices: 76
(15, 409, 409, 409)
[1 0 0 0 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 0 0 1 

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "D", [(48, 1), (52, 3), (55, 5), (60, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "T"), (8, "T-5"), (10, "D/3"), (10, "D/5"), (12, "T64"), (16, "D"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7")  …  (16, "Ts"), (18, "T/3"), (18, "T/5"), (20, "D7-1"), (22, "D-5"), (22, "D7-5"), (22, "S"), (22, "S/3"), (22, "S/5"), (26, "S6")]
 [(6, "T"), (8, "T-5"), (10, "D/3"), (10, "T54"), (12, "T64"), (14, "D54"), (16, "D"), (16, "D64"), (16, "D7"), (16, "D7/3")  …  (16, "S65/6"), (16, "Tm"), (16, "Ts"), (18, "T/3"), (20, "D7-1"), (22, "D-5"), (22, "D7-5"), (22, "S"), (22, "S/3"), (26, "S6")] 
 [(0, "T/3"), (0, "T/5"), (4, "D"), (4, "Tm"), (4, "Ts"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (10, "S/3"), (10, "S/5"), (10, "T"), (12, "T64"), (14, "D/3"), (14, "D/5"), (18, "D7-1"), (18, "S6"), (20, "Dm"), (20, "T-5")]        
 [(2, "D/3"), (2, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "Tm"), (6, "D7-1"), (6, "T"), (6, "T/3")  …  (12, "D64"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (14, "S"), (16, "Dm"), (16, "T-5"), (16, "Ts"), (18, "D-5"), (18, "S6")]        
 [(4, "Tm"), (6, "D/3"), (6, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (10, "S"), (10, "S/3"), (10, "S/5"), (12, "D"), (12, "Dm"), (12, "Ts"), (14, "D7-5"), (16, "T-5"), (18, "D-5"), (18, "S6")]           
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (4, "Tm"), (8, "D"), (8, "D64"), (8, "S65"), (8, "S65/6"), (8, "T/3"), (10, "D/3")  …  (10, "T54"), (12, "Dm"), (12, "S/3"), (12, "T64"), (14, "D-5"), (14, "D7-1"), (14, "S6"), (14, "T"), (16, "Ts"), (24, "T-5")]       
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S/3"), (6, "S/5"), (8, "T"), (10, "D"), (10, "D/3"), (10, "D/5")  …  (10, "Tm"), (10, "Ts"), (12, "D7-5"), (12, "S"), (14, "Dm"), (14, "T/3"), (14, "T/5"), (16, "D-5"), (16, "S6"), (18, "T-5")]        
 [(4, "S/3"), (4, "S/5"), (6, "T54"), (8, "Dm"), (8, "S65"), (8, "T-5"), (10, "D7-1"), (14, "S"), (14, "T"), (16, "D7")  …  (16, "T/3"), (16, "T/5"), (16, "Ts"), (18, "S6"), (20, "D"), (20, "D/3"), (20, "D/5"), (20, "Tm"), (22, "D7-5"), (26, "D-5")]         
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Tm"), (8, "D7-5"), (8, "S"), (8, "S/3"), (8, "S/5"), (10, "D")  …  (10, "S65"), (10, "T/3"), (10, "T/5"), (12, "D-5"), (12, "S6"), (14, "D7-1"), (14, "Dm"), (16, "T"), (18, "Ts"), (26, "T-5")]         
 [(6, "S"), (6, "S/3"), (8, "D7-1"), (8, "Dm"), (8, "S65"), (8, "S65/6"), (10, "S6"), (10, "T"), (10, "T54"), (12, "D64")  …  (12, "T/3"), (12, "T64"), (12, "Tm"), (12, "Ts"), (14, "D54"), (16, "D"), (16, "D/3"), (16, "T-5"), (18, "D7-5"), (22, "D-5")]      
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "T"), (8, "D"), (8, "Tm"), (10, "D7-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (12, "T64"), (14, "D-5"), (14, "D/3"), (14, "D/5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "T-5"), (18, "D7-1"), (22, "S6")]      
 [(4, "D/5"), (4, "T"), (4, "T/5"), (8, "D54"), (10, "D"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S/3"), (10, "T64"), (10, "Ts"), (14, "D7-1"), (14, "S65/6"), (16, "D7-5"), (20, "S")]                                         
 [(8, "T"), (12, "T54"), (16, "D/3"), (16, "D7-1"), (18, "D64"), (18, "S65"), (18, "T/3"), (18, "Tm"), (20, "D54"), (20, "S"), (20, "S/5"), (22, "D"), (22, "D7"), (22, "D7/3"), (22, "D7/5"), (22, "D7/7"), (24, "D7-5"), (28, "S6")]                            
 [(2, "T"), (2, "T/5"), (6, "D/5"), (8, "T64"), (10, "D54"), (12, "D"), (12, "D64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S65"), (12, "T-5"), (12, "Ts"), (16, "D7-1"), (18, "D7-5"), (18, "S"), (18, "S/5"), (22, "S6")]                  
 [(8, "D"), (12, "D7")]                                                                                                                                                                                                                                           
 [(12, "T")]                                                                                                                                                                                                                                                      
 [(12, "T")]                                                                                                                                                                                                                                                      

0 1 0 0 1 0 1 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 1 0 1 0 1 1 0 0 0; 0 1 0 0 1 0 0 2 0 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 3 0 0 0 0 0 0; 1 0 0 0 0 3 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 1 0 0 1 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 1 0 2 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 1 1 0; 0 0 0 1 0 1 0 0 0 1 1 0; 1 0 1 0 0 1 0 0 1 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 0 0 0 0 1 2 0 0 1 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 2 0 0 0 0 0 0 1 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 1 0 0 0 1 0 0; 1 0 0 0 0 1 0 0 1 1 0 0]
Key Counter is [27 6 1 11 5 32 0 12 17 4 13 0]
Key Score is [81; 106; 28; 113; 43; 94; 79; 49; 118; 33; 100; 52]
Position Counter for 9 is [17 4 13 0 27 6 1 11 5 32 0 12]
Any[[9.0, 84.75, 0.0]]
[9, 85, 0]
6 F Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "D", [(48, 1), (52, 3), (55, 5), (60, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 102
child voicing cost: 172
Best yet: 274
New solution
function cost: 102
child voicing cost: 171
Best yet: 273
New solution
function cost: 102
child voicing cost: 162
Best yet: 264
New solution
function cost: 102
child voicing cost: 159
Best yet: 261
New solution
function cost: 102
child voicing cost: 154
Best yet: 256
New solution
function cost: 102
child voicing cost: 152
Best yet: 254
New solution
function cost: 102
child voicing cost: 150
Best yet: 252
New solution
function cost: 102
child voicing cost: 148
Best yet: 250
New solution
function cost: 102
child voicing cost: 146
Best yet: 248
New solution
function cost: 102
child voicing cost: 144
Best yet: 246
New solution
function cost: 102
child voicing cost: 142
Best yet: 244
New solution
function cost: 104
child voicing cost: 134
Best yet: 238
New solution
function cost: 104
child voicing cost: 132
Best yet: 236
New solution
function cost: 104
child voicing cost: 130
Best yet: 234
New solution
function cost: 102
child voicing cost: 128
Best yet: 230
New solution
function cost: 102
child voicing cost: 124
Best yet: 226
New solution
function cost: 102
child voicing cost: 122
Best yet: 224
New solution
function cost: 102
child voicing cost: 120
Best yet: 222
New solution
function cost: 102
child voicing cost: 118
Best yet: 220
New solution
function cost: 102
child voicing cost: 116
Best yet: 218
New solution
function cost: 104
child voicing cost: 107
Best yet: 211
New solution
function cost: 104
child voicing cost: 105
Best yet: 209
New solution
function cost: 104
child voicing cost: 103
Best yet: 207

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(53, 1), (53, 1), (56, 3), (60, 5)])    
 (4, "Ts", [(49, 1), (53, 3), (56, 5), (61, 1)])   
 (4, "D7", [(48, 1), (55, 5), (58, 7), (64, 3)])   
 (0, "Ts", [(49, 1), (53, 3), (56, 5), (65, 3)])   
 (4, "D7", [(48, 1), (52, 3), (58, 7), (67, 5)])   
 (6, "T", [(41, 1), (48, 5), (56, 3), (65, 1)])    
 (8, "S", [(46, 1), (49, 3), (58, 1), (65, 5)])    
 (18, "S", [(46, 1), (49, 3), (58, 1), (65, 5)])   
 (4, "T", [(41, 1), (53, 1), (60, 5), (68, 3)])    
 (4, "S/5", [(41, 5), (53, 5), (61, 3), (70, 1)])  
 (4, "T", [(41, 1), (53, 1), (60, 5), (68, 3)])    
 (14, "D7-1", [(43, 5), (52, 3), (58, 7), (67, 5)])
 (8, "D7/3", [(40, 3), (48, 1), (58, 7), (67, 5)]) 
 ?                                                 
 (4, "D7/3", [(40, 3), (58, 7), (67, 5), (72, 1)]) 
 (8, "T", [(41, 1), (56, 3), (65, 1), (72, 5)])    
 (4, "S/5", [(41, 5), (58, 1), (61, 3), (70, 1)])  
 (16, "T", [(41, 1), (60, 5), (65, 1), (68, 3)])   
 (8, "D7-1", [(43, 5), (58, 7), (64, 3), (67, 5)]) 
 (4, "T/3", [(44, 3), (60, 5), (65, 1), (65, 1)])  
 (4, "D/5", [(43, 5), (60, 1), (64, 3), (67, 5)])  
 (8, "T", [(41, 1), (60, 5), (65, 1), (68, 3)])    
 (2, "T", [(41, 1), (56, 3), (65, 1), (72, 5)])    
 (8, "D", [(48, 1), (55, 5), (64, 3), (72, 1)])    
 (12, "T", [(41, 1), (56, 3), (65, 1), (72, 5)])   
 (12, "T", [(41, 1), (56, 3), (65, 1), (72, 5)])   

Done. Total checked: 77783, Pruned: 85934, completed: 23, time: 1.8199999332427979, efficiency: 12.637363100898353
Results: bestval_func: 104, bestval_voices: 103
(16, 409, 409, 409)
Total time for optimisation of piece: 7.243000030517578
["T", "Ts", "D7", "Ts", "D7", "T", "S", "S", "T", "S/5", "T", "D7-1", "D7/3", "T", "D", "D", "T", "T/3", "D/3", "T", "D7/3", "T", "S/5", "T", "D7-1", "T/3", "D/5", "T", "T", "D", "T", "T"]

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (58, 3), (66, 1), (73, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (61, 5), (70, 3), (78, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (61, 5), (66, 1), (70, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (66, 1), (70, 3), (73, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (54, 1), (61, 5), (70, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                    
 [(0, "D"), (0, "D/3"), (0, "D/5"), (0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D7-1"), (4, "Tm"), (6, "D7-5")  …  (6, "T54"), (8, "S6"), (8, "Ss"), (10, "D-5"), (10, "S/3"), (10, "S/5"), (10, "T64"), (10, "Ts"), (12, "S"), (12, "T-5")]        
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "T"), (6, "Tm"), (8, "D7-5"), (10, "D")  …  (10, "Ss"), (12, "D-5"), (12, "S65"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "T-5"), (18, "D7-1")]   
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]    
 [(0, "T54"), (2, "T"), (2, "T/3"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (8, "D54"), (8, "S65"), (8, "S65/6")  …  (10, "S"), (10, "S/3"), (12, "D64"), (12, "D7-5"), (12, "T-5"), (12, "Tm"), (12, "Ts"), (14, "S6"), (14, "Ss"), (16, "D-5")]     
 [(0, "Ts"), (12, "D54"), (12, "S65/6"), (14, "D"), (14, "D/3"), (14, "T"), (16, "D64"), (16, "T-5"), (16, "T/3"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (18, "S"), (18, "S/3"), (18, "Tm"), (20, "D-5"), (20, "D7-5"), (24, "D7-1")]          
 [(0, "D"), (0, "D/3"), (2, "D54"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D64"), (6, "D7-5"), (8, "D7-1")  …  (10, "S65/6"), (10, "Tm"), (12, "Ss"), (12, "T"), (12, "T/3"), (14, "S/3"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]    
 [(4, "D"), (6, "D54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (8, "Tm"), (10, "D-5")  …  (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "D7-1"), (12, "S"), (12, "Ts"), (14, "D/3"), (14, "S65"), (16, "S6"), (18, "T-5")]     
 [(2, "T"), (2, "T/3"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Ts"), (8, "D/3"), (8, "D64"), (8, "S/3")  …  (10, "D7-1"), (10, "S"), (12, "D54"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (14, "S6"), (14, "Ss"), (16, "D-5")]   
 [(4, "T"), (4, "T/3"), (4, "T/5"), (6, "D/3"), (6, "D/5"), (6, "T54"), (10, "S65"), (10, "S65/6"), (10, "T-5"), (12, "D")  …  (14, "Tm"), (14, "Ts"), (16, "D7-1"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "D7-5"), (20, "S6"), (20, "Ss"), (22, "D-5")]   
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "Ts"), (10, "D7-1")  …  (10, "T"), (10, "Tm"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (14, "D"), (14, "D/3"), (14, "D/5"), (16, "D-5"), (20, "T-5")]  
 [(0, "S65"), (0, "S65/6"), (4, "S/3"), (4, "S/5"), (4, "Ss"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7")  …  (10, "D/5"), (10, "D7-1"), (10, "S6"), (10, "T"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (20, "D-5")]
 [(0, "D"), (0, "D/3"), (2, "D54"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D64"), (6, "D7-5"), (8, "D7-1")  …  (10, "S65/6"), (10, "Tm"), (12, "Ss"), (12, "T"), (12, "T/3"), (14, "S/3"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]    
 [(4, "D"), (6, "D54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (8, "Tm"), (10, "D-5")  …  (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "D7-1"), (12, "S"), (12, "Ts"), (14, "D/3"), (14, "S65"), (16, "S6"), (18, "T-5")]     
 [(0, "T/3"), (4, "D54"), (6, "D"), (6, "T"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D7-5"), (12, "S65/6"), (14, "D7-1"), (14, "S"), (14, "S/3"), (16, "D/3"), (16, "T-5"), (16, "Ts"), (18, "Ss")]              
 [(0, "D54"), (2, "D"), (2, "D/3"), (4, "D64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-5"), (8, "S65/6"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D-5"), (12, "Tm"), (12, "Ts"), (14, "Ss"), (18, "S"), (18, "S/3"), (20, "T-5")]       

../../results/optimizer/pianoroll/optimiser-0.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-104.csv
[0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 0 1; 0 0 0 2 0 0 2 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 2 0 0 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 0 1; 0 1 0 1 0 1 0 0 0 0 0 1; 0 1 0 1 0 1 1 0 0 0 0 0; 0 0 0 2 0 1 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 3 0 0 0 1 0 0 0 0 0 0]
Key Counter is [0 38 0 17 0 19 26 0 18 0 9 4]
Key Score is [23; 127; 68; 63; 103; 28; 131; 30; 101; 86; 45; 112]
Position Counter for 7 is [26 0 18 0 9 4 0 38 0 17 0 19]
Any[[7.0, 88.5, 1.0]]
[7, 88, 1]
7 F# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (58, 3), (66, 1), (73, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (61, 5), (70, 3), (78, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (61, 5), (66, 1), (70, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (66, 1), (70, 3), (73, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (54, 1), (61, 5), (70, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 52
child voicing cost: 166
Best yet: 218
New solution
function cost: 52
child voicing cost: 152
Best yet: 204
New solution
function cost: 52
child voicing cost: 151
Best yet: 203
New solution
function cost: 52
child voicing cost: 144
Best yet: 196
New solution
function cost: 56
child voicing cost: 138
Best yet: 194
New solution
function cost: 48
child voicing cost: 144
Best yet: 192
New solution
function cost: 52
child voicing cost: 139
Best yet: 191
New solution
function cost: 52
child voicing cost: 132
Best yet: 184
New solution
function cost: 52
child voicing cost: 129
Best yet: 181
New solution
function cost: 52
child voicing cost: 127
Best yet: 179
New solution
function cost: 52
child voicing cost: 123
Best yet: 175
New solution
function cost: 48
child voicing cost: 119
Best yet: 167
New solution
function cost: 48
child voicing cost: 117
Best yet: 165
New solution
function cost: 56
child voicing cost: 108
Best yet: 164
New solution
function cost: 56
child voicing cost: 107
Best yet: 163
New solution
function cost: 46
child voicing cost: 114
Best yet: 160
New solution
function cost: 50
child voicing cost: 103
Best yet: 153
New solution
function cost: 50
child voicing cost: 100
Best yet: 150
New solution
function cost: 50
child voicing cost: 99
Best yet: 149
New solution
function cost: 54
child voicing cost: 94
Best yet: 148
New solution
function cost: 54
child voicing cost: 92
Best yet: 146
New solution
function cost: 54
child voicing cost: 90
Best yet: 144
New solution
function cost: 58
child voicing cost: 84
Best yet: 142
New solution
function cost: 54
child voicing cost: 87
Best yet: 141
New solution
function cost: 54
child voicing cost: 85
Best yet: 139
New solution
function cost: 58
child voicing cost: 79
Best yet: 137
New solution
function cost: 60
child voicing cost: 73
Best yet: 133
New solution
function cost: 64
child voicing cost: 65
Best yet: 129
New solution
function cost: 56
child voicing cost: 69
Best yet: 125
New solution
function cost: 54
child voicing cost: 67
Best yet: 121
New solution
function cost: 50
child voicing cost: 67
Best yet: 117
New solution
function cost: 54
child voicing cost: 59
Best yet: 113

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(54, 1), (54, 1), (58, 3), (61, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "D"), (2, "D/3"), (2, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-5"), (8, "S65"), (8, "S65/6")  …  (12, "D-5"), (12, "T64"), (12, "Tm"), (12, "Ts"), (14, "S6"), (14, "Ss"), (18, "S"), (18, "S/3"), (18, "S/5"), (20, "T-5")]        
 [(6, "Ts"), (8, "S/3"), (8, "T64"), (10, "T"), (10, "T/3"), (12, "D54"), (12, "D7-1"), (12, "S65"), (12, "S65/6"), (12, "T54")  …  (14, "D7/3"), (14, "D7/7"), (16, "D64"), (16, "Ss"), (16, "T-5"), (18, "S"), (18, "Tm"), (20, "D7-5"), (22, "S6"), (24, "D-5")]
 [(4, "D"), (6, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (8, "T/5"), (8, "Tm")  …  (12, "D7-1"), (12, "S"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "S65"), (14, "S65/6"), (16, "S6"), (16, "Ss"), (18, "T-5")]          
 [(4, "S65"), (4, "S65/6"), (6, "D"), (6, "D/3"), (6, "D/5"), (8, "T/3"), (8, "T/5"), (8, "Ts"), (10, "D7"), (10, "D7/3")  …  (10, "S/3"), (10, "S/5"), (10, "Tm"), (12, "D7-5"), (14, "D7-1"), (14, "S6"), (14, "Ss"), (14, "T"), (16, "D-5"), (16, "T-5")]       
 [(0, "Ts"), (8, "T/3"), (8, "T/5"), (8, "T64"), (10, "S"), (10, "S/3"), (10, "S/5"), (10, "T"), (10, "Tm"), (12, "D7-5")  …  (14, "D/3"), (14, "D/5"), (14, "S6"), (14, "Ss"), (16, "D-5"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (22, "D7-1")]   
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "T"), (6, "Tm"), (8, "D54"), (8, "D7-5"), (8, "T54")  …  (10, "Ss"), (12, "D-5"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (16, "T-5"), (18, "D7-1")]       
 [(6, "D"), (8, "D-5"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "T"), (10, "T/3"), (10, "T/5")  …  (14, "D7-1"), (14, "S"), (14, "Ts"), (16, "D/3"), (16, "D/5"), (16, "S65"), (16, "S65/6"), (18, "S6"), (18, "Ss"), (20, "T-5")]  
 [(0, "T/3"), (0, "T/5"), (2, "Tm"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3"), (10, "S/5")  …  (14, "D7/5"), (14, "D7/7"), (14, "S6"), (14, "Ss"), (16, "D/3"), (16, "D/5"), (16, "S65"), (16, "S65/6"), (18, "D7-1"), (20, "T-5")]    
 [(2, "S65"), (2, "S65/6"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "S/3"), (6, "S/5"), (6, "Ss"), (6, "T64")  …  (8, "Ts"), (10, "T54"), (10, "Tm"), (12, "S6"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "D7-5"), (14, "T-5"), (18, "D-5")]       
 [(4, "D7-5"), (6, "S"), (8, "D-5"), (8, "D64"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S6"), (10, "Ss")  …  (12, "S65"), (12, "S65/6"), (12, "T64"), (12, "Tm"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "Ts"), (16, "D54"), (20, "T-5")]   
 [(6, "S/3"), (6, "S/5"), (6, "T64"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "Ts"), (10, "S65"), (10, "S65/6"), (10, "T54")  …  (12, "T/3"), (12, "T/5"), (12, "Tm"), (14, "D-5"), (14, "D7-5"), (14, "T-5"), (16, "D7-1"), (16, "S"), (20, "S6"), (20, "Ss")]      
 [(8, "D"), (8, "D/5"), (10, "D54"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D64"), (14, "D7-5"), (14, "S/5"), (14, "T64"), (16, "D7-1"), (16, "S"), (18, "D-5"), (20, "S6"), (20, "T"), (20, "T/5")]                           
 [(2, "S65/6"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/5"), (8, "T"), (10, "D54"), (10, "T54"), (12, "D"), (12, "D/5"), (12, "D7-1"), (12, "Ss"), (14, "D64"), (14, "T/5"), (18, "D7-5")]                                  
 [(12, "D7-1"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "Tm"), (18, "D"), (18, "D/5"), (18, "S"), (18, "T"), (18, "T/5"), (20, "D54"), (20, "S/5"), (20, "T64"), (24, "D64"), (24, "D7-5")]                                      
 [(4, "D7"), (8, "D")]                                                                                                                                                                                                                                             
 [(14, "T")]                                                                                                                                                                                                                                                       
 [(12, "T")]                                                                                                                                                                                                                                                       

Done. Total checked: 196397, Pruned: 231359, completed: 32, time: 3.6399998664855957, efficiency: 8.791209113668419
Results: bestval_func: 54, bestval_voices: 59
(15, 384, 384, 384)
[0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 0 1; 0 0 0 2 0 0 2 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 2 0 0 0 1 1 0 0 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 2 0 0 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 0 1; 0 1 0 1 0 1 0 0 0 0 0 1; 0 1 0 1 0 1 1 0 0 0 0 0; 0 0 0 2 0 1 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 3 0 0 0 1 0 0 0 0 0 0]
Key Counter is [0 38 0 17 0 19 26 0 18 0 9 4]
Key Score is [23; 127; 68; 63; 103; 28; 131; 30; 101; 86; 45; 112]
Position Counter for 7 is [26 0 18 0 9 4 0 38 0 17 0 19]
Any[[7.0, 88.5, 1.0]]
[7, 88, 1]
7 F# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(54, 1), (54, 1), (58, 3), (61, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 122
child voicing cost: 148
Best yet: 270
New solution
function cost: 122
child voicing cost: 147
Best yet: 269
New solution
function cost: 122
child voicing cost: 140
Best yet: 262
New solution
function cost: 122
child voicing cost: 139
Best yet: 261
New solution
function cost: 122
child voicing cost: 131
Best yet: 253
New solution
function cost: 122
child voicing cost: 130
Best yet: 252
New solution
function cost: 122
child voicing cost: 128
Best yet: 250
New solution
function cost: 122
child voicing cost: 123
Best yet: 245
New solution
function cost: 116
child voicing cost: 128
Best yet: 244
New solution
function cost: 116
child voicing cost: 127
Best yet: 243
New solution
function cost: 116
child voicing cost: 125
Best yet: 241
New solution
function cost: 120
child voicing cost: 119
Best yet: 239
New solution
function cost: 124
child voicing cost: 114
Best yet: 238
New solution
function cost: 118
child voicing cost: 118
Best yet: 236
New solution
function cost: 118
child voicing cost: 117
Best yet: 235
New solution
function cost: 118
child voicing cost: 115
Best yet: 233
New solution
function cost: 118
child voicing cost: 113
Best yet: 231
New solution
function cost: 110
child voicing cost: 120
Best yet: 230
New solution
function cost: 110
child voicing cost: 118
Best yet: 228
New solution
function cost: 112
child voicing cost: 115
Best yet: 227
New solution
function cost: 116
child voicing cost: 109
Best yet: 225
New solution
function cost: 116
child voicing cost: 107
Best yet: 223
New solution
function cost: 110
child voicing cost: 112
Best yet: 222
New solution
function cost: 112
child voicing cost: 109
Best yet: 221
New solution
function cost: 116
child voicing cost: 103
Best yet: 219
New solution
function cost: 116
child voicing cost: 101
Best yet: 217
New solution
function cost: 118
child voicing cost: 98
Best yet: 216
New solution
function cost: 118
child voicing cost: 96
Best yet: 214

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(54, 1), (54, 1), (61, 5), (70, 3)])    
 (0, "D", [(49, 1), (56, 5), (65, 3), (73, 1)])    
 (4, "Ts", [(51, 1), (54, 3), (66, 3), (70, 5)])   
 (0, "D/3", [(53, 3), (56, 5), (61, 1), (68, 5)])  
 (2, "T", [(54, 1), (58, 3), (61, 5), (66, 1)])    
 (0, "Ts", [(51, 1), (58, 5), (63, 1), (66, 3)])   
 (0, "D", [(49, 1), (61, 1), (65, 3), (68, 5)])    
 (4, "D", [(49, 1), (56, 5), (65, 3), (73, 1)])    
 (6, "D7/7", [(47, 7), (56, 5), (65, 3), (73, 1)]) 
 (4, "T/3", [(46, 3), (54, 1), (66, 1), (73, 5)])  
 (10, "S", [(47, 1), (54, 5), (63, 3), (71, 1)])   
 (0, "S65", [(47, 1), (56, 6), (63, 3), (66, 5)])  
 (0, "D", [(49, 1), (56, 5), (61, 1), (65, 3)])    
 ?                                                 
 (6, "S", [(47, 1), (59, 1), (66, 5), (75, 3)])    
 (6, "D", [(49, 1), (56, 5), (65, 3), (73, 1)])    
 (0, "T/5", [(49, 5), (61, 5), (66, 1), (70, 3)])  
 (8, "D", [(49, 1), (61, 1), (65, 3), (68, 5)])    
 (14, "Ts", [(51, 1), (58, 5), (66, 3), (66, 3)])  
 (6, "S/3", [(51, 3), (59, 1), (66, 5), (66, 5)])  
 (12, "D7", [(49, 1), (59, 7), (65, 3), (68, 5)])  
 (8, "T", [(42, 1), (58, 3), (66, 1), (73, 5)])    
 (12, "D7-1", [(44, 5), (59, 7), (65, 3), (71, 7)])
 (4, "D7", [(49, 1), (59, 7), (65, 3), (68, 5)])   
 (14, "T", [(42, 1), (58, 3), (61, 5), (66, 1)])   
 (14, "T", [(42, 1), (58, 3), (61, 5), (66, 1)])   

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(49, 1), (53, 3), (61, 1), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(49, 1), (61, 1), (65, 3), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "T")]                                                                                                                                                                                                                                                        
 [(0, "D"), (0, "D/3"), (0, "D/5"), (0, "D7"), (0, "D7-1"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (2, "S65"), (2, "S65/6")  …  (6, "S/5"), (6, "T"), (6, "T-5"), (6, "T/3"), (6, "T/5"), (6, "T54"), (6, "T64"), (6, "Ts"), (8, "S"), (10, "D-5")]                
 [(4, "D/3"), (4, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D7-1"), (8, "S65"), (8, "S65/6"), (10, "D"), (10, "D7")  …  (10, "Ts"), (12, "Ss"), (12, "T-5"), (12, "Tm"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "S/5"), (18, "S6"), (20, "D-5")]          
 [(0, "S6"), (0, "Ss"), (4, "D7-1"), (4, "S"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "S65"), (10, "S65/6")  …  (14, "T54"), (14, "T64"), (16, "T"), (16, "T/3"), (16, "T/5"), (16, "Ts"), (18, "D7-5"), (18, "Tm"), (22, "D-5"), (22, "T-5")]     
 [(0, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (8, "Tm"), (10, "D"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D54")  …  (14, "Ts"), (16, "D64"), (16, "D7-5"), (16, "S65"), (16, "S65/6"), (16, "T-5"), (20, "D-5"), (20, "S/3"), (20, "T64"), (22, "S")]   
 [(6, "T-5"), (8, "T"), (10, "D/3"), (10, "T54"), (14, "D54"), (14, "D7-1"), (14, "S65/6"), (16, "D"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D64"), (18, "Tm"), (18, "Ts"), (20, "S"), (20, "S/3"), (22, "D-5"), (22, "D7-5"), (24, "T/3")]  
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D7-1"), (6, "D54"), (6, "S65/6"), (6, "Tm")  …  (8, "T"), (8, "T/3"), (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "Ts"), (14, "D-5"), (14, "D64"), (16, "S"), (18, "T-5")]         
 [(4, "D64"), (4, "D7-5"), (6, "D"), (6, "D/3"), (8, "D-5"), (8, "D54"), (10, "S"), (10, "T"), (10, "T/3"), (12, "T54")  …  (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Ss"), (14, "Ts"), (16, "S/3"), (16, "S65"), (16, "T64"), (18, "D7-1"), (20, "T-5")]    
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "T"), (6, "Tm"), (8, "D54"), (8, "D7-5"), (8, "T54")  …  (12, "D-5"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (16, "D/3"), (16, "T-5"), (18, "D7-1")]      
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "S/5"), (8, "T64"), (10, "S"), (10, "Ts")  …  (14, "T"), (14, "T/3"), (14, "T/5"), (16, "T-5"), (18, "D"), (18, "D/3"), (18, "D/5"), (20, "Tm"), (24, "D7-5"), (28, "D-5")]         
 [(8, "D54"), (8, "D7-5"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S6"), (10, "Ss"), (12, "D-5")  …  (14, "S"), (14, "S/3"), (14, "S/5"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "S65"), (16, "S65/6"), (18, "Ts"), (24, "T-5")] 
 [(2, "D"), (2, "D/3"), (2, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-5"), (8, "S65"), (8, "S65/6")  …  (12, "D-5"), (12, "S/3"), (12, "S/5"), (12, "Ss"), (12, "T64"), (12, "Tm"), (14, "S6"), (14, "Ts"), (18, "S"), (20, "T-5")]        
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "D/3"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "D"), (8, "D7-1"), (8, "Ts"), (10, "D64"), (12, "S6"), (14, "D7-5"), (14, "T-5"), (16, "S"), (16, "S/3"), (18, "D-5")]              
 [(0, "Ss"), (4, "D7-1"), (4, "S"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "S65/6"), (12, "D"), (12, "D/3"), (14, "D54"), (14, "D64"), (14, "S/3"), (14, "T54"), (16, "T"), (16, "T/3"), (16, "Ts"), (18, "D7-5"), (22, "D-5"), (22, "T-5")]       
 [(8, "D7-5"), (12, "D-5"), (12, "D64"), (14, "D"), (16, "D54"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (18, "S")  …  (18, "S6"), (20, "T54"), (20, "Ts"), (22, "D7-1"), (22, "T"), (24, "D/3"), (24, "S65"), (24, "T64"), (32, "T-5"), (32, "T/3")]
 [(0, "T/3"), (4, "D54"), (6, "D"), (6, "T"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D7-5"), (12, "S65/6"), (14, "S"), (14, "S/3"), (16, "D/3"), (16, "Ss"), (16, "T-5"), (16, "Ts"), (20, "D7-1")]                  

Done. Total checked: 95051, Pruned: 105786, completed: 28, time: 1.88100004196167, efficiency: 14.885698764152696
Results: bestval_func: 118, bestval_voices: 96
(16, 384, 384, 384)
Total time for optimisation of piece: 7.327000141143799
["T", "D", "Ts", "D/3", "T", "Ts", "D", "D", "D7/7", "T/3", "S", "S65", "D", "D7/3", "T", "T", "Ts", "D", "D/3", "Ts", "S", "D", "T/5", "D", "Ts", "S/3", "D7", "T", "D7-1", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-104.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-117.csv
[0 0 0 1 0 0 1 0 0 0 0 0; 1 0 0 1 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 3 0 0 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 1 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 0 0 0 1 0 3 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 0 0 0 0 0 1 0 2 1 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 0 1 0 2 0; 1 0 0 1 0 0 0 0 1 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 1 0 0 2 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 2 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0]
Key Counter is [12 16 0 26 0 9 16 1 33 2 13 0]
Key Score is [24; 125; 35; 94; 93; 37; 113; 31; 110; 67; 63; 104]
Position Counter for 2 is [16 0 26 0 9 16 1 33 2 13 0 12]
Any[[2.0, 83.0, 1.0]]
[2, 83, 1]
2 C# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(49, 1), (53, 3), (61, 1), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(49, 1), (61, 1), (65, 3), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 134
child voicing cost: 140
Best yet: 274
New solution
function cost: 134
child voicing cost: 134
Best yet: 268
New solution
function cost: 134
child voicing cost: 133
Best yet: 267
New solution
function cost: 134
child voicing cost: 132
Best yet: 266
New solution
function cost: 134
child voicing cost: 126
Best yet: 260
New solution
function cost: 134
child voicing cost: 121
Best yet: 255
New solution
function cost: 122
child voicing cost: 130
Best yet: 252
New solution
function cost: 122
child voicing cost: 128
Best yet: 250
New solution
function cost: 114
child voicing cost: 134
Best yet: 248
New solution
function cost: 102
child voicing cost: 144
Best yet: 246
New solution
function cost: 118
child voicing cost: 127
Best yet: 245
New solution
function cost: 102
child voicing cost: 141
Best yet: 243
New solution
function cost: 102
child voicing cost: 140
Best yet: 242
New solution
function cost: 102
child voicing cost: 138
Best yet: 240
New solution
function cost: 102
child voicing cost: 136
Best yet: 238
New solution
function cost: 102
child voicing cost: 134
Best yet: 236
New solution
function cost: 104
child voicing cost: 131
Best yet: 235
New solution
function cost: 102
child voicing cost: 132
Best yet: 234
New solution
function cost: 102
child voicing cost: 130
Best yet: 232
New solution
function cost: 104
child voicing cost: 127
Best yet: 231
New solution
function cost: 104
child voicing cost: 125
Best yet: 229
New solution
function cost: 104
child voicing cost: 123
Best yet: 227
New solution
function cost: 104
child voicing cost: 115
Best yet: 219
New solution
function cost: 104
child voicing cost: 113
Best yet: 217
New solution
function cost: 104
child voicing cost: 111
Best yet: 215
New solution
function cost: 104
child voicing cost: 110
Best yet: 214
New solution
function cost: 104
child voicing cost: 109
Best yet: 213
New solution
function cost: 102
child voicing cost: 110
Best yet: 212
New solution
function cost: 102
child voicing cost: 109
Best yet: 211
New solution
function cost: 102
child voicing cost: 107
Best yet: 209
New solution
function cost: 102
child voicing cost: 106
Best yet: 208
New solution
function cost: 102
child voicing cost: 104
Best yet: 206
New solution
function cost: 104
child voicing cost: 99
Best yet: 203
New solution
function cost: 104
child voicing cost: 98
Best yet: 202
New solution
function cost: 104
child voicing cost: 94
Best yet: 198
New solution
function cost: 104
child voicing cost: 93
Best yet: 197
New solution
function cost: 82
child voicing cost: 113
Best yet: 195
New solution
function cost: 82
child voicing cost: 112
Best yet: 194
New solution
function cost: 86
child voicing cost: 107
Best yet: 193
New solution
function cost: 84
child voicing cost: 105
Best yet: 189
New solution
function cost: 86
child voicing cost: 99
Best yet: 185
New solution
function cost: 90
child voicing cost: 94
Best yet: 184
New solution
function cost: 90
child voicing cost: 90
Best yet: 180
New solution
function cost: 90
child voicing cost: 88
Best yet: 178
New solution
function cost: 90
child voicing cost: 87
Best yet: 177
New solution
function cost: 82
child voicing cost: 94
Best yet: 176
New solution
function cost: 82
child voicing cost: 92
Best yet: 174
New solution
function cost: 82
child voicing cost: 91
Best yet: 173
New solution
function cost: 82
child voicing cost: 90
Best yet: 172
New solution
function cost: 82
child voicing cost: 89
Best yet: 171
New solution
function cost: 90
child voicing cost: 80
Best yet: 170
New solution
function cost: 90
child voicing cost: 78
Best yet: 168
New solution
function cost: 90
child voicing cost: 77
Best yet: 167
New solution
function cost: 82
child voicing cost: 84
Best yet: 166
New solution
function cost: 82
child voicing cost: 82
Best yet: 164
New solution
function cost: 82
child voicing cost: 81
Best yet: 163
New solution
function cost: 82
child voicing cost: 80
Best yet: 162
New solution
function cost: 82
child voicing cost: 79
Best yet: 161

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "D", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T/3"), (0, "T/5"), (4, "T54"), (6, "D"), (6, "T"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D/3"), (16, "D/5"), (16, "Ss"), (16, "T-5"), (16, "Ts"), (18, "S6"), (20, "D7-1")]        
 [(6, "D7-5"), (10, "D64"), (12, "D"), (14, "D-5"), (14, "D54"), (14, "Tm"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (16, "S")  …  (18, "T54"), (18, "Ts"), (20, "D7-1"), (20, "T"), (20, "T/3"), (22, "D/3"), (22, "S65"), (22, "S65/6"), (22, "T64"), (30, "T-5")]
 [(6, "Ts"), (8, "D/3"), (8, "D/5"), (8, "S/3"), (8, "S/5"), (8, "T64"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "D7-1")  …  (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "Ss"), (16, "T-5"), (16, "Tm"), (18, "S"), (20, "D7-5"), (22, "S6"), (24, "D-5")]     
 [(6, "D/3"), (6, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "S65")  …  (12, "Ts"), (14, "T64"), (16, "S6"), (16, "Ss"), (18, "D7-5"), (18, "T-5"), (20, "S"), (20, "S/3"), (20, "S/5"), (22, "D-5")]         
 [(4, "D"), (4, "D/3"), (4, "D/5"), (6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-5")  …  (12, "Ts"), (14, "D-5"), (14, "T54"), (14, "Tm"), (16, "S6"), (16, "Ss"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "T-5")]        
 [(8, "D"), (8, "D/3"), (10, "D54"), (10, "S65"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/7"), (12, "S6"), (12, "Ss")  …  (16, "D7-1"), (16, "S"), (16, "Ts"), (18, "D-5"), (18, "D64"), (18, "T54"), (18, "Tm"), (20, "T"), (20, "T/3"), (22, "T-5")]    
 [(4, "D"), (4, "D/3"), (4, "D/5"), (6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-5")  …  (12, "Ts"), (14, "D-5"), (14, "T54"), (14, "Tm"), (16, "S6"), (16, "Ss"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "T-5")]        
 [(6, "D/3"), (6, "D/5"), (8, "D"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "S65"), (10, "S65/6"), (12, "D7"), (12, "D7/3")  …  (14, "D7-5"), (14, "T-5"), (14, "Tm"), (16, "D7-1"), (16, "S"), (18, "D-5"), (18, "S/3"), (18, "S/5"), (20, "S6"), (20, "Ss")]       
 [(2, "D"), (2, "D/3"), (2, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-5"), (8, "S65"), (8, "S65/6")  …  (12, "D-5"), (12, "S/3"), (12, "S/5"), (12, "Ss"), (12, "T64"), (12, "Tm"), (14, "S6"), (14, "Ts"), (18, "S"), (20, "T-5")]         
 [(0, "D7-1"), (4, "Ss"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S6"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (14, "D")  …  (16, "T54"), (16, "T64"), (16, "Tm"), (18, "S"), (18, "T"), (18, "T/3"), (18, "Ts"), (20, "D7-5"), (24, "D-5"), (24, "D64")]   
 [(8, "S6"), (12, "S"), (14, "D7-5"), (14, "Ss"), (14, "T/3"), (14, "T/5"), (14, "Tm"), (16, "D7"), (16, "D7/3"), (16, "D7/5")  …  (18, "T54"), (20, "D"), (20, "T"), (22, "D/3"), (22, "D/5"), (22, "S/3"), (22, "S/5"), (22, "T64"), (22, "Ts"), (30, "T-5")]     
 [(10, "D-5"), (12, "S"), (12, "S/5"), (14, "D54"), (14, "D64"), (14, "D7-5"), (14, "S65/6"), (14, "T/5"), (16, "D"), (16, "D/5"), (16, "T"), (18, "Ss"), (20, "D7"), (20, "D7/3"), (20, "D7/5"), (20, "D7/7"), (24, "D7-1")]                                       
 [(6, "D"), (6, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ss"), (8, "D54"), (10, "D7-1"), (10, "S"), (10, "S/5"), (12, "S65"), (12, "T54"), (14, "T"), (16, "D64"), (16, "D7-5"), (16, "T/5"), (18, "Ts")]                                     
 [(2, "D64"), (2, "D7-5"), (4, "D"), (6, "D54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "T"), (12, "T/5"), (14, "D/5"), (16, "D7-1"), (18, "S/3"), (18, "S65"), (18, "T64"), (20, "Ss")]                                             
 [(8, "D7"), (12, "D")]                                                                                                                                                                                                                                             
 [(6, "T")]                                                                                                                                                                                                                                                         
 [(10, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 357676, Pruned: 412734, completed: 58, time: 6.7829999923706055, efficiency: 8.550788746165022
Results: bestval_func: 82, bestval_voices: 79
(15, 365, 365, 365)
[0 0 0 1 0 0 1 0 0 0 0 0; 1 0 0 1 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 3 0 0 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 1 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 0 0 0 1 0 3 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 0 0 0 0 0 1 0 2 1 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 0 1 0 2 0; 1 0 0 1 0 0 0 0 1 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 1 0 0 2 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 2 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0]
Key Counter is [12 16 0 26 0 9 16 1 33 2 13 0]
Key Score is [24; 125; 35; 94; 93; 37; 113; 31; 110; 67; 63; 104]
Position Counter for 2 is [16 0 26 0 9 16 1 33 2 13 0 12]
Any[[2.0, 83.0, 1.0]]
[2, 83, 1]
2 C# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "D", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 118
child voicing cost: 217
Best yet: 335
New solution
function cost: 118
child voicing cost: 203
Best yet: 321
New solution
function cost: 118
child voicing cost: 200
Best yet: 318
New solution
function cost: 118
child voicing cost: 199
Best yet: 317
New solution
function cost: 118
child voicing cost: 192
Best yet: 310
New solution
function cost: 118
child voicing cost: 191
Best yet: 309
New solution
function cost: 118
child voicing cost: 189
Best yet: 307
New solution
function cost: 118
child voicing cost: 188
Best yet: 306
New solution
function cost: 118
child voicing cost: 187
Best yet: 305
New solution
function cost: 122
child voicing cost: 182
Best yet: 304
New solution
function cost: 122
child voicing cost: 181
Best yet: 303
New solution
function cost: 124
child voicing cost: 173
Best yet: 297
New solution
function cost: 120
child voicing cost: 174
Best yet: 294
New solution
function cost: 120
child voicing cost: 173
Best yet: 293
New solution
function cost: 120
child voicing cost: 171
Best yet: 291
New solution
function cost: 112
child voicing cost: 178
Best yet: 290
New solution
function cost: 112
child voicing cost: 171
Best yet: 283
New solution
function cost: 112
child voicing cost: 170
Best yet: 282
New solution
function cost: 112
child voicing cost: 168
Best yet: 280
New solution
function cost: 120
child voicing cost: 159
Best yet: 279
New solution
function cost: 120
child voicing cost: 158
Best yet: 278
New solution
function cost: 120
child voicing cost: 151
Best yet: 271
New solution
function cost: 120
child voicing cost: 150
Best yet: 270
New solution
function cost: 120
child voicing cost: 148
Best yet: 268
New solution
function cost: 118
child voicing cost: 149
Best yet: 267
New solution
function cost: 118
child voicing cost: 146
Best yet: 264
New solution
function cost: 114
child voicing cost: 142
Best yet: 256
New solution
function cost: 114
child voicing cost: 141
Best yet: 255
New solution
function cost: 114
child voicing cost: 139
Best yet: 253

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (6, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])   
 (0, "D/3", [(48, 3), (51, 5), (56, 1), (68, 1)]) 
 (6, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (0, "Ss", [(51, 1), (54, 3), (58, 5), (66, 3)])  
 (0, "D/3", [(48, 3), (51, 5), (56, 1), (68, 1)]) 
 (18, "Ts", [(46, 1), (53, 5), (61, 3), (70, 1)]) 
 (4, "D", [(44, 1), (56, 1), (63, 5), (72, 3)])   
 (6, "D", [(44, 1), (60, 3), (63, 5), (68, 1)])   
 (4, "Ts", [(46, 1), (49, 3), (61, 3), (65, 5)])  
 (0, "Ss", [(51, 1), (54, 3), (58, 5), (63, 1)])  
 (14, "T/3", [(53, 3), (56, 5), (61, 1), (61, 1)])
 (2, "D/5", [(51, 5), (56, 1), (60, 3), (63, 5)]) 
 (4, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 ?                                                
 (8, "D/3", [(48, 3), (63, 5), (68, 1), (80, 1)]) 
 (10, "S/3", [(46, 3), (66, 1), (66, 1), (73, 5)])
 (8, "D", [(44, 1), (63, 5), (68, 1), (72, 3)])   
 (2, "D", [(44, 1), (63, 5), (68, 1), (72, 3)])   
 (0, "D7-1", [(51, 5), (63, 5), (66, 7), (72, 3)])
 (14, "T/3", [(53, 3), (61, 1), (68, 5), (73, 1)])
 (12, "S", [(54, 1), (66, 1), (70, 3), (73, 5)])  
 (6, "D", [(56, 1), (63, 5), (68, 1), (72, 3)])   
 (4, "D", [(56, 1), (60, 3), (63, 5), (68, 1)])   
 (8, "D7", [(56, 1), (60, 3), (63, 5), (66, 7)])  
 (6, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])   
 (6, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])   

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (65, 3), (68, 5), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (53, 3), (61, 1), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (61, 1), (65, 3), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                         
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3")  …  (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]          
 [(0, "D"), (0, "D-5"), (0, "D/3"), (0, "D/5"), (0, "D64"), (0, "D7"), (0, "D7-1"), (0, "D7-5"), (0, "D7/3"), (0, "D7/5")  …  (0, "S65"), (0, "S65/6"), (0, "Ss"), (0, "T"), (0, "T-5"), (0, "T/3"), (0, "T/5"), (0, "T64"), (0, "Tm"), (0, "Ts")]                  
 [(0, "T"), (0, "T-5"), (0, "T/3"), (0, "T/5"), (0, "Ts"), (2, "S"), (2, "S/3"), (2, "S/5"), (2, "S65"), (2, "S65/6")  …  (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "S6"), (6, "Ss"), (8, "D-5")]                   
 [(2, "Ts"), (6, "S/3"), (6, "T64"), (8, "S"), (10, "D64"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "T/3"), (10, "T54")  …  (14, "Ss"), (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (18, "D54"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "D7-1")]  
 [(6, "D64"), (6, "D7-5"), (8, "D"), (8, "S"), (8, "T"), (8, "T/3"), (10, "D-5"), (10, "D54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Ss"), (12, "Ts"), (14, "D/3"), (14, "S/3"), (14, "S65"), (14, "T64"), (16, "D7-1"), (18, "T-5")]         
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "T"), (8, "D54"), (8, "D7-5"), (10, "D"), (10, "Ss"), (12, "D-5"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/3"), (16, "T-5"), (18, "D7-1")]                      
 [(8, "D54"), (8, "S65/6"), (10, "D"), (10, "D/3"), (12, "D64"), (12, "S/3"), (12, "Ss"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S"), (14, "Ts"), (16, "D7-5"), (18, "D7-1"), (18, "T"), (18, "T/3"), (20, "D-5"), (20, "T-5")]                
 [(0, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (8, "Tm"), (10, "D"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D54")  …  (14, "Ts"), (16, "D64"), (16, "D7-5"), (16, "S65"), (16, "S65/6"), (16, "T-5"), (20, "D-5"), (20, "S/3"), (20, "T64"), (22, "S")]    
 [(2, "D7-5"), (2, "T/3"), (2, "T/5"), (6, "D-5"), (8, "D"), (8, "S"), (8, "S/3"), (8, "S/5"), (10, "T54"), (10, "Tm")  …  (12, "S6"), (12, "T"), (14, "S65"), (14, "S65/6"), (14, "T64"), (16, "D7-1"), (18, "D/3"), (18, "D/5"), (18, "Ss"), (22, "T-5")]         
 [(4, "D7-1"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (8, "T"), (8, "T/3"), (8, "T/5")  …  (10, "S65/6"), (12, "D"), (12, "S"), (12, "S/3"), (12, "S/5"), (12, "Ts"), (14, "T-5"), (14, "Tm"), (18, "D7-5"), (22, "D-5")]          
 [(2, "D7-5"), (2, "T/3"), (2, "T/5"), (6, "D-5"), (8, "D"), (8, "S"), (8, "S/3"), (8, "S/5"), (10, "T54"), (10, "Tm")  …  (12, "S6"), (12, "T"), (14, "S65"), (14, "S65/6"), (14, "T64"), (16, "D7-1"), (18, "D/3"), (18, "D/5"), (18, "Ss"), (22, "T-5")]         
 [(2, "T"), (2, "T/3"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ts"), (8, "D/3"), (8, "D64")  …  (8, "T64"), (10, "D"), (10, "D7-1"), (10, "S"), (12, "D54"), (12, "D7-5"), (12, "T-5"), (14, "Ss"), (16, "D-5"), (16, "S65/6")]         
 [(0, "D7-5"), (4, "D-5"), (4, "D64"), (6, "D"), (8, "D54"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (14, "D7-1"), (14, "T"), (14, "T/3"), (16, "D/3"), (16, "S/3"), (16, "S65"), (16, "T64"), (18, "Ss"), (18, "Ts"), (24, "T-5")]        
 [(0, "T/3"), (4, "D54"), (6, "D"), (6, "T"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D7-5"), (12, "S65/6"), (14, "S"), (14, "S/3"), (16, "D/3"), (16, "Ss"), (16, "T-5"), (16, "Ts"), (20, "D7-1")]                   
 [(6, "S65/6"), (8, "Ts"), (10, "D7-1"), (10, "S/3"), (10, "Ss"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S")  …  (12, "T/3"), (14, "D54"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "S6"), (18, "D64"), (18, "T-5"), (22, "D7-5"), (26, "D-5")]

Done. Total checked: 80559, Pruned: 88833, completed: 29, time: 1.7780001163482666, efficiency: 16.31046012503163
Results: bestval_func: 114, bestval_voices: 139
(16, 365, 365, 365)
Total time for optimisation of piece: 10.046000003814697
["T", "D/3", "T", "Ss", "D/3", "Ts", "D", "D", "Ts", "Ss", "T/3", "D/5", "T", "S", "D", "D", "D7-5", "T", "D/3", "D", "D/3", "S/3", "D", "D", "D7-1", "T/3", "S", "D", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-117.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-13.csv
[0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 0 1 0 0 0 2 0; 1 0 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 1 0 0 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 1 0 2 0 0 0; 0 1 0 1 0 1 1 0 0 0 0 0; 0 1 0 0 0 0 1 0 2 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 0 1 0 2 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 1 0 2 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 2 0 0 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 1 1 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 1 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0]
Key Counter is [15 24 0 20 0 14 6 1 33 0 13 0]
Key Score is [30; 125; 31; 96; 83; 43; 110; 22; 120; 63; 63; 96]
Position Counter for 2 is [24 0 20 0 14 6 1 33 0 13 0 15]
Any[[2.0, 82.25, 1.0]]
[2, 82, 1]
2 C# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (65, 3), (68, 5), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (53, 3), (61, 1), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (61, 1), (65, 3), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 98
child voicing cost: 178
Best yet: 276
New solution
function cost: 98
child voicing cost: 177
Best yet: 275
New solution
function cost: 98
child voicing cost: 176
Best yet: 274
New solution
function cost: 98
child voicing cost: 173
Best yet: 271
New solution
function cost: 98
child voicing cost: 171
Best yet: 269
New solution
function cost: 98
child voicing cost: 160
Best yet: 258
New solution
function cost: 86
child voicing cost: 162
Best yet: 248
New solution
function cost: 86
child voicing cost: 157
Best yet: 243
New solution
function cost: 86
child voicing cost: 154
Best yet: 240
New solution
function cost: 86
child voicing cost: 153
Best yet: 239
New solution
function cost: 86
child voicing cost: 150
Best yet: 236
New solution
function cost: 84
child voicing cost: 148
Best yet: 232
New solution
function cost: 84
child voicing cost: 145
Best yet: 229
New solution
function cost: 82
child voicing cost: 142
Best yet: 224
New solution
function cost: 88
child voicing cost: 135
Best yet: 223
New solution
function cost: 80
child voicing cost: 142
Best yet: 222
New solution
function cost: 80
child voicing cost: 139
Best yet: 219
New solution
function cost: 76
child voicing cost: 141
Best yet: 217
New solution
function cost: 88
child voicing cost: 127
Best yet: 215
New solution
function cost: 88
child voicing cost: 123
Best yet: 211
New solution
function cost: 80
child voicing cost: 127
Best yet: 207
New solution
function cost: 90
child voicing cost: 116
Best yet: 206
New solution
function cost: 90
child voicing cost: 113
Best yet: 203
New solution
function cost: 90
child voicing cost: 110
Best yet: 200
New solution
function cost: 90
child voicing cost: 103
Best yet: 193
New solution
function cost: 96
child voicing cost: 96
Best yet: 192
New solution
function cost: 90
child voicing cost: 99
Best yet: 189
New solution
function cost: 80
child voicing cost: 105
Best yet: 185
New solution
function cost: 90
child voicing cost: 94
Best yet: 184
New solution
function cost: 90
child voicing cost: 83
Best yet: 173
New solution
function cost: 80
child voicing cost: 89
Best yet: 169
New solution
function cost: 90
child voicing cost: 69
Best yet: 159

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (65, 3), (68, 5), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "S65"), (6, "S65/6"), (8, "Ts"), (10, "D7-1"), (10, "S/3"), (10, "S/5"), (10, "Ss"), (10, "T64"), (12, "D7"), (12, "D7/3")  …  (12, "T/5"), (14, "T54"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "S6"), (18, "T-5"), (22, "D7-5"), (26, "D-5")]  
 [(4, "D/3"), (6, "T"), (6, "T/3"), (8, "D54"), (8, "D7-1"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D"), (10, "D7")  …  (12, "D64"), (12, "Ss"), (12, "T-5"), (12, "Tm"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "T64"), (18, "S6"), (20, "D-5")]           
 [(2, "Tm"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "S/5")  …  (10, "S65/6"), (10, "T54"), (12, "D"), (12, "S6"), (12, "Ss"), (14, "D-5"), (14, "T64"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]          
 [(8, "D7-1"), (8, "S65"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Ts"), (12, "S/3"), (12, "S/5")  …  (14, "D/5"), (14, "S"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "T54"), (18, "S6"), (20, "D7-5"), (20, "T-5"), (24, "D-5")]
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "T"), (6, "Tm"), (8, "D7-5"), (8, "T54")  …  (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/3"), (16, "D/5"), (16, "T-5"), (18, "D7-1")]       
 [(8, "D7-1"), (8, "S65"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "Ts"), (12, "S/3"), (12, "Ss"), (12, "T64")  …  (14, "S"), (14, "T"), (14, "T/3"), (16, "D54"), (16, "T54"), (18, "S6"), (20, "D64"), (20, "D7-5"), (20, "T-5"), (24, "D-5")]  
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "D/3"), (8, "D/5"), (8, "Tm"), (10, "D")  …  (10, "T/3"), (10, "T/5"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "Ts"), (16, "D7-5"), (16, "T64"), (20, "D-5"), (20, "T-5")]       
 [(2, "T"), (2, "T/3"), (2, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ts"), (8, "D/3"), (8, "D/5")  …  (10, "D"), (10, "D7-1"), (10, "S"), (12, "D7-5"), (12, "T-5"), (14, "S6"), (14, "Ss"), (16, "D-5"), (16, "S65"), (16, "S65/6")]          
 [(2, "T/3"), (2, "T/5"), (4, "Tm"), (6, "D7-5"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "S"), (8, "S/3"), (8, "S/5")  …  (12, "D7/7"), (12, "S6"), (12, "Ss"), (12, "T"), (14, "S65"), (14, "S65/6"), (14, "T54"), (16, "D7-1"), (18, "T64"), (22, "T-5")]           
 [(6, "D/3"), (8, "D"), (8, "T"), (8, "T/3"), (10, "D54"), (10, "S65"), (10, "S65/6"), (10, "T54"), (12, "D7"), (12, "D7/3")  …  (14, "D7-5"), (14, "T-5"), (14, "Tm"), (16, "D7-1"), (16, "S"), (18, "D-5"), (18, "S/3"), (18, "T64"), (20, "S6"), (20, "Ss")]      
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]          
 [(6, "T64"), (8, "T"), (10, "D/5"), (10, "S65/6"), (14, "D54"), (14, "D7-1"), (14, "T-5"), (16, "D"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S"), (16, "S/5"), (18, "D64"), (18, "T/5"), (20, "S6"), (22, "D7-5")]                             
 [(8, "D7-1"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "S/3"), (12, "Ss"), (12, "Tm"), (14, "D"), (14, "D/5"), (14, "S"), (14, "T"), (14, "T/5"), (16, "D54"), (18, "S6"), (20, "D64"), (20, "D7-5"), (24, "D-5")]                  
 [(0, "D"), (0, "D/5"), (2, "D54"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D64"), (6, "D7-5"), (8, "D7-1"), (10, "S65"), (10, "T54"), (12, "S6"), (12, "T"), (12, "T/5"), (14, "S/5"), (16, "Ts"), (20, "S")]                                        
 [(0, "D"), (4, "D7")]                                                                                                                                                                                                                                               
 [(8, "T")]                                                                                                                                                                                                                                                          
 [(16, "T")]                                                                                                                                                                                                                                                         

Done. Total checked: 109695, Pruned: 134136, completed: 32, time: 2.135999917984009, efficiency: 14.981273983475672
Results: bestval_func: 90, bestval_voices: 69
(15, 365, 365, 365)
[0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 0 1 0 0 0 2 0; 1 0 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 1 0 0 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 1 0 2 0 0 0; 0 1 0 1 0 1 1 0 0 0 0 0; 0 1 0 0 0 0 1 0 2 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 0 1 0 2 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 1 0 2 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 2 0 0 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 1 1 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 1 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0]
Key Counter is [15 24 0 20 0 14 6 1 33 0 13 0]
Key Score is [30; 125; 31; 96; 83; 43; 110; 22; 120; 63; 63; 96]
Position Counter for 2 is [24 0 20 0 14 6 1 33 0 13 0 15]
Any[[2.0, 82.25, 1.0]]
[2, 82, 1]
2 C# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (65, 3), (68, 5), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 118
child voicing cost: 176
Best yet: 294
New solution
function cost: 118
child voicing cost: 175
Best yet: 293
New solution
function cost: 118
child voicing cost: 173
Best yet: 291
New solution
function cost: 118
child voicing cost: 172
Best yet: 290
New solution
function cost: 118
child voicing cost: 170
Best yet: 288
New solution
function cost: 118
child voicing cost: 168
Best yet: 286
New solution
function cost: 118
child voicing cost: 166
Best yet: 284
New solution
function cost: 118
child voicing cost: 165
Best yet: 283
New solution
function cost: 118
child voicing cost: 158
Best yet: 276
New solution
function cost: 118
child voicing cost: 157
Best yet: 275
New solution
function cost: 118
child voicing cost: 155
Best yet: 273
New solution
function cost: 118
child voicing cost: 147
Best yet: 265
New solution
function cost: 118
child voicing cost: 146
Best yet: 264
New solution
function cost: 118
child voicing cost: 144
Best yet: 262
New solution
function cost: 118
child voicing cost: 143
Best yet: 261
New solution
function cost: 118
child voicing cost: 139
Best yet: 257
New solution
function cost: 118
child voicing cost: 138
Best yet: 256
New solution
function cost: 118
child voicing cost: 136
Best yet: 254
New solution
function cost: 118
child voicing cost: 135
Best yet: 253
New solution
function cost: 108
child voicing cost: 144
Best yet: 252
New solution
function cost: 108
child voicing cost: 142
Best yet: 250
New solution
function cost: 108
child voicing cost: 141
Best yet: 249
New solution
function cost: 108
child voicing cost: 139
Best yet: 247
New solution
function cost: 108
child voicing cost: 138
Best yet: 246
New solution
function cost: 108
child voicing cost: 135
Best yet: 243
New solution
function cost: 108
child voicing cost: 134
Best yet: 242
New solution
function cost: 108
child voicing cost: 132
Best yet: 240
New solution
function cost: 108
child voicing cost: 131
Best yet: 239
New solution
function cost: 110
child voicing cost: 128
Best yet: 238
New solution
function cost: 112
child voicing cost: 125
Best yet: 237
New solution
function cost: 112
child voicing cost: 124
Best yet: 236
New solution
function cost: 112
child voicing cost: 123
Best yet: 235

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])   
 (0, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])   
 (0, "D/3", [(48, 3), (51, 5), (56, 1), (68, 1)]) 
 (0, "T", [(49, 1), (53, 3), (61, 1), (68, 5)])   
 (2, "Ts", [(46, 1), (53, 5), (61, 3), (70, 1)])  
 (8, "D", [(44, 1), (56, 1), (63, 5), (72, 3)])   
 (6, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])   
 (18, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])  
 (0, "D/3", [(48, 3), (63, 5), (68, 1), (80, 1)]) 
 (12, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])  
 (4, "D7-1", [(51, 5), (60, 3), (66, 7), (75, 5)])
 (10, "Ts", [(58, 1), (61, 3), (65, 5), (73, 3)]) 
 (6, "Ts", [(58, 1), (61, 3), (65, 5), (70, 1)])  
 ?                                                
 (8, "S65", [(54, 1), (63, 6), (70, 3), (73, 5)]) 
 (10, "D", [(56, 1), (63, 5), (68, 1), (72, 3)])  
 (2, "T", [(49, 1), (65, 3), (68, 5), (73, 1)])   
 (2, "T/3", [(53, 3), (68, 5), (68, 5), (73, 1)]) 
 (12, "Ts", [(46, 1), (65, 5), (70, 1), (73, 3)]) 
 (0, "D/3", [(48, 3), (63, 5), (68, 1), (75, 5)]) 
 (8, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])   
 (8, "D7-1", [(51, 5), (60, 3), (66, 7), (78, 7)])
 (8, "D7-1", [(51, 5), (60, 3), (66, 7), (78, 7)])
 (4, "D7", [(56, 1), (60, 3), (66, 7), (75, 5)])  
 (8, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])   
 (8, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])   

9-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (51, 3), (54, 5), (59, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (63, 3), (66, 5), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (51, 3), (59, 1), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (54, 5), (63, 3), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (66, 5), (71, 1), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (47, 1), (54, 5), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                        
 [(2, "S65"), (2, "S65/6"), (6, "T64"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (10, "T/5"), (10, "T54"), (12, "D7-1"), (12, "S6"), (12, "Ss"), (12, "Tm"), (14, "T-5"), (16, "T"), (18, "D-5"), (18, "D7-5")]      
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "S6"), (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (16, "Ts"), (20, "S"), (22, "T-5")]         
 [(2, "S/3"), (2, "S/5"), (2, "T54"), (2, "T64"), (4, "T"), (6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5")  …  (12, "D/3"), (12, "D/5"), (12, "S"), (14, "D7-5"), (14, "T/3"), (14, "T/5"), (14, "Tm"), (16, "S6"), (18, "D-5"), (18, "D7-1")]      
 [(0, "D64"), (0, "T/3"), (2, "Tm"), (4, "D54"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3")  …  (14, "D7/3"), (14, "D7/7"), (14, "S6"), (14, "Ss"), (16, "D/3"), (16, "S65"), (16, "S65/6"), (16, "T64"), (18, "D7-1"), (20, "T-5")]     
 [(4, "T"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "Ts"), (10, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Ss"), (14, "D/3"), (14, "D54"), (14, "D64"), (14, "S65/6"), (14, "T/3"), (14, "Tm"), (16, "D"), (18, "D7-5"), (22, "D-5")]      
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/3"), (6, "T"), (6, "T/3"), (8, "D64"), (8, "Ts"), (10, "D"), (12, "D/3"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (12, "Tm"), (16, "D-5"), (16, "D7-1"), (16, "T-5")]                       
 [(4, "S"), (8, "Ss"), (10, "D7-5"), (10, "S65/6"), (12, "D7-1"), (14, "D-5"), (14, "D64"), (14, "S/3"), (14, "T/3"), (14, "T54"), (14, "Ts"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "T"), (20, "D"), (20, "D/3"), (22, "D54"), (22, "T-5")]  
 [(2, "S"), (2, "S/3"), (4, "S65"), (4, "S65/6"), (6, "S6"), (6, "Ss"), (8, "D64"), (8, "T/3"), (8, "T64"), (8, "Tm")  …  (10, "D7/7"), (10, "T"), (12, "D54"), (12, "D7-5"), (12, "T54"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3")]         
 [(2, "S"), (2, "S/3"), (2, "S/5"), (4, "S65"), (4, "S65/6"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "T64")  …  (10, "D7/7"), (10, "T"), (12, "D7-5"), (12, "T54"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3"), (20, "D/5")]        
 [(2, "Ts"), (6, "S/3"), (6, "S/5"), (8, "S"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "T/3"), (10, "T/5"), (12, "S6")  …  (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "D/5"), (20, "D7-1")]
 [(6, "D7-5"), (6, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "T"), (8, "T/3"), (8, "T/5")  …  (12, "D7-1"), (12, "S6"), (12, "Ss"), (14, "S/3"), (14, "S/5"), (14, "S65"), (14, "S65/6"), (14, "T64"), (14, "Tm"), (18, "T-5")]      
 [(4, "S"), (4, "S/3"), (6, "D64"), (6, "D7-5"), (6, "T/3"), (6, "T54"), (6, "Ts"), (8, "T"), (10, "D-5"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D54"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D7-1"), (18, "T-5")]        
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D64"), (6, "D7-5"), (8, "D"), (8, "S"), (8, "S/3"), (10, "D-5"), (10, "D/3"), (10, "D54"), (10, "S65/6"), (12, "D7-1"), (12, "Ss"), (12, "T"), (12, "T/3"), (14, "T64"), (16, "Ts"), (22, "T-5")]         
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "Ss"), (18, "D-5")]       
 [(0, "S/3"), (0, "T64"), (2, "Ts"), (4, "S65/6"), (6, "T"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (12, "D54"), (14, "D"), (16, "D64"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "Tm"), (20, "D-5"), (20, "D/3")]      

Done. Total checked: 113920, Pruned: 125980, completed: 32, time: 2.443000078201294, efficiency: 13.098648782508684
Results: bestval_func: 112, bestval_voices: 123
(16, 365, 365, 365)
Total time for optimisation of piece: 6.2210001945495605
["T", "T", "D/3", "T", "Ts", "D", "T", "T", "D/3", "T", "D7-1", "Ts", "Ts", "D", "T", "T", "D/3", "D7", "Ts", "T/3", "S65", "D", "T", "T/3", "Ts", "D/3", "T", "D7-1", "D7-1", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-13.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-130.csv
[0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 0 1 0 0 1 0 0 0 2; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 1 0 0 1 1 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 1 1 0 2 0 0 0 0 0; 0 0 0 1 0 0 2 0 1 0 0 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 0 1 0 1 0 0 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 1 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 0 0 0 1 0 1 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2]
Key Counter is [2 10 0 17 19 2 24 2 23 3 8 22]
Key Score is [50; 86; 80; 54; 118; 36; 106; 72; 64; 101; 34; 123]
Position Counter for 12 is [22 2 10 0 17 19 2 24 2 23 3 8]
Any[[12.0, 81.5, 1.0]]
[12, 82, 1]
12 B Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

9-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (51, 3), (54, 5), (59, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (63, 3), (66, 5), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (51, 3), (59, 1), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (54, 5), (63, 3), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (66, 5), (71, 1), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (47, 1), (54, 5), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 76
child voicing cost: 205
Best yet: 281
New solution
function cost: 76
child voicing cost: 191
Best yet: 267
New solution
function cost: 76
child voicing cost: 186
Best yet: 262
New solution
function cost: 76
child voicing cost: 181
Best yet: 257
New solution
function cost: 76
child voicing cost: 180
Best yet: 256
New solution
function cost: 76
child voicing cost: 178
Best yet: 254
New solution
function cost: 76
child voicing cost: 176
Best yet: 252
New solution
function cost: 76
child voicing cost: 169
Best yet: 245
New solution
function cost: 76
child voicing cost: 168
Best yet: 244
New solution
function cost: 76
child voicing cost: 163
Best yet: 239
New solution
function cost: 82
child voicing cost: 156
Best yet: 238
New solution
function cost: 76
child voicing cost: 155
Best yet: 231
New solution
function cost: 82
child voicing cost: 146
Best yet: 228
New solution
function cost: 82
child voicing cost: 141
Best yet: 223
New solution
function cost: 82
child voicing cost: 138
Best yet: 220
New solution
function cost: 82
child voicing cost: 135
Best yet: 217
New solution
function cost: 82
child voicing cost: 132
Best yet: 214
New solution
function cost: 82
child voicing cost: 131
Best yet: 213
New solution
function cost: 82
child voicing cost: 130
Best yet: 212
New solution
function cost: 82
child voicing cost: 128
Best yet: 210
New solution
function cost: 82
child voicing cost: 127
Best yet: 209
New solution
function cost: 86
child voicing cost: 121
Best yet: 207
New solution
function cost: 82
child voicing cost: 124
Best yet: 206
New solution
function cost: 82
child voicing cost: 122
Best yet: 204
New solution
function cost: 82
child voicing cost: 119
Best yet: 201
New solution
function cost: 82
child voicing cost: 116
Best yet: 198
New solution
function cost: 82
child voicing cost: 113
Best yet: 195
New solution
function cost: 82
child voicing cost: 112
Best yet: 194
New solution
function cost: 82
child voicing cost: 111
Best yet: 193
New solution
function cost: 78
child voicing cost: 114
Best yet: 192
New solution
function cost: 90
child voicing cost: 101
Best yet: 191
New solution
function cost: 90
child voicing cost: 96
Best yet: 186
New solution
function cost: 90
child voicing cost: 93
Best yet: 183
New solution
function cost: 88
child voicing cost: 91
Best yet: 179
New solution
function cost: 82
child voicing cost: 92
Best yet: 174
New solution
function cost: 86
child voicing cost: 84
Best yet: 170
New solution
function cost: 86
child voicing cost: 78
Best yet: 164

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "S/3"), (0, "S/5"), (0, "T64"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "T"), (8, "Ss"), (8, "T-5")  …  (14, "D"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5"), (20, "D/3"), (20, "D/5")]            
 [(0, "Tm"), (2, "D64"), (2, "D7-5"), (4, "D"), (6, "D-5"), (6, "D54"), (12, "D7"), (12, "D7/3"), (12, "D7/7"), (12, "S")  …  (14, "D/3"), (14, "T54"), (16, "D7-1"), (16, "S6"), (16, "Ss"), (16, "Ts"), (18, "S65"), (18, "S65/6"), (18, "T64"), (22, "T-5")]       
 [(10, "D7-5"), (10, "Tm"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D-5"), (16, "D"), (16, "S"), (16, "S/3")  …  (18, "S65"), (18, "S65/6"), (18, "T54"), (18, "Ts"), (20, "D7-1"), (20, "T"), (20, "T/3"), (20, "T/5"), (22, "T64"), (30, "T-5")]
 [(4, "Tm"), (6, "D7-5"), (8, "D"), (14, "D-5"), (14, "Ts"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S")  …  (16, "Ss"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "D/3"), (18, "D/5"), (20, "D7-1"), (22, "S65"), (22, "S65/6"), (26, "T-5")]    
 [(4, "D"), (4, "D/3"), (4, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (10, "D-5")  …  (14, "T54"), (14, "Tm"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "S/3"), (18, "S/5"), (18, "T64"), (20, "Ts"), (26, "T-5")]             
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/7")  …  (12, "T54"), (14, "D"), (14, "D/3"), (14, "T"), (14, "T/3"), (16, "T-5"), (16, "Tm"), (20, "D64"), (20, "D7-5"), (24, "D-5")]       
 [(6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (10, "S/3"), (10, "S/5")  …  (12, "Ts"), (14, "D64"), (14, "D7-5"), (14, "T54"), (14, "Tm"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "D-5"), (18, "T-5")]       
 [(8, "Ts"), (10, "S/3"), (10, "S/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S6"), (12, "T")  …  (14, "D/3"), (14, "D/5"), (14, "D7-5"), (14, "S65"), (14, "S65/6"), (14, "Ss"), (14, "T-5"), (18, "D-5"), (18, "D7-1"), (20, "D")]  
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S6"), (8, "T"), (8, "T/3"), (8, "T/5"), (8, "Tm")  …  (14, "D-5"), (14, "S/3"), (14, "S/5"), (14, "S65"), (14, "S65/6"), (14, "Ss"), (14, "T64"), (16, "D"), (18, "D7-1"), (18, "T-5")]            
 [(6, "S6"), (6, "Ss"), (8, "D64"), (8, "T/3"), (10, "D7"), (10, "D7-1"), (10, "D7/3"), (10, "D7/7"), (10, "S"), (10, "S/3")  …  (12, "Ts"), (14, "D"), (14, "D/3"), (14, "T"), (16, "D-5"), (16, "S65"), (16, "S65/6"), (16, "T54"), (20, "T64"), (24, "T-5")]       
 [(2, "S"), (2, "S/3"), (2, "S/5"), (4, "S65"), (4, "S65/6"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "T64")  …  (10, "D7/7"), (10, "T"), (12, "D7-5"), (12, "T54"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3"), (20, "D/5")]           
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ss"), (8, "D/5"), (8, "D64"), (10, "D7-1"), (10, "S"), (10, "S/5"), (10, "T"), (10, "T/5"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (14, "D"), (16, "D-5"), (20, "T-5")]                                   
 [(2, "S65/6"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "S/5"), (6, "T64"), (8, "D"), (8, "D/5"), (8, "D7-1"), (8, "S"), (10, "D54"), (10, "Tm"), (12, "T"), (12, "T/5"), (14, "D7-5"), (18, "D-5"), (18, "D64")]                                       
 [(4, "S"), (4, "S/5"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ss"), (10, "D64"), (10, "D7-5"), (12, "D"), (12, "D7-1"), (12, "T"), (12, "T/5"), (14, "D-5"), (14, "D54"), (18, "D/3"), (18, "T-5")]                                    
 [(8, "D"), (12, "D7")]                                                                                                                                                                                                                                               
 [(8, "T")]                                                                                                                                                                                                                                                           
 [(10, "T")]                                                                                                                                                                                                                                                          

Done. Total checked: 232457, Pruned: 260177, completed: 37, time: 4.577000141143799, efficiency: 8.083897500329472
Results: bestval_func: 86, bestval_voices: 78
(15, 383, 383, 383)
[0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 0 1 0 0 1 0 0 0 2; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 1 0 0 1 1 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 1 1 0 2 0 0 0 0 0; 0 0 0 1 0 0 2 0 1 0 0 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 0 1 0 1 0 0 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 1 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 0 0 0 1 0 1 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2]
Key Counter is [2 10 0 17 19 2 24 2 23 3 8 22]
Key Score is [50; 86; 80; 54; 118; 36; 106; 72; 64; 101; 34; 123]
Position Counter for 12 is [22 2 10 0 17 19 2 24 2 23 3 8]
Any[[12.0, 81.5, 1.0]]
[12, 82, 1]
12 B Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 122
child voicing cost: 148
Best yet: 270
New solution
function cost: 122
child voicing cost: 147
Best yet: 269
New solution
function cost: 122
child voicing cost: 145
Best yet: 267
New solution
function cost: 122
child voicing cost: 139
Best yet: 261
New solution
function cost: 122
child voicing cost: 137
Best yet: 259
New solution
function cost: 130
child voicing cost: 127
Best yet: 257
New solution
function cost: 128
child voicing cost: 121
Best yet: 249
New solution
function cost: 128
child voicing cost: 120
Best yet: 248
New solution
function cost: 122
child voicing cost: 122
Best yet: 244
New solution
function cost: 122
child voicing cost: 116
Best yet: 238
New solution
function cost: 128
child voicing cost: 109
Best yet: 237
New solution
function cost: 124
child voicing cost: 109
Best yet: 233
New solution
function cost: 124
child voicing cost: 105
Best yet: 229
New solution
function cost: 130
child voicing cost: 96
Best yet: 226
New solution
function cost: 132
child voicing cost: 93
Best yet: 225

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])   
 (2, "S65", [(52, 1), (59, 5), (61, 6), (68, 3)]) 
 (0, "D", [(54, 1), (54, 1), (61, 5), (70, 3)])   
 (2, "S/3", [(56, 3), (59, 5), (64, 1), (64, 1)]) 
 (0, "D64", [(54, 1), (59, 4), (63, 6), (66, 1)]) 
 (16, "D", [(54, 1), (58, 3), (61, 5), (66, 1)])  
 (8, "Ts", [(56, 1), (59, 3), (59, 3), (63, 5)])  
 (14, "Ts", [(56, 1), (56, 1), (59, 3), (63, 5)]) 
 (2, "S/3", [(56, 3), (59, 5), (64, 1), (64, 1)]) 
 (8, "T/5", [(54, 5), (59, 1), (63, 3), (66, 5)]) 
 (8, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])   
 (8, "S", [(52, 1), (56, 3), (64, 1), (71, 5)])   
 (4, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])   
 ?                                                
 (10, "Ts", [(56, 1), (63, 5), (71, 3), (71, 3)]) 
 (10, "S/3", [(56, 3), (64, 1), (71, 5), (71, 5)])
 (8, "Ts", [(56, 1), (63, 5), (68, 1), (71, 3)])  
 (8, "S6", [(52, 1), (64, 1), (68, 3), (73, 6)])  
 (8, "T/3", [(51, 3), (66, 5), (66, 5), (71, 1)]) 
 (2, "S", [(52, 1), (64, 1), (68, 3), (71, 5)])   
 (10, "S", [(52, 1), (64, 1), (68, 3), (71, 5)])  
 (8, "S", [(52, 1), (68, 3), (71, 5), (76, 1)])   
 (10, "D64", [(54, 1), (66, 1), (71, 4), (75, 6)])
 (8, "D", [(54, 1), (66, 1), (70, 3), (73, 5)])   
 (8, "T", [(47, 1), (66, 5), (71, 1), (75, 3)])   
 (8, "T", [(47, 1), (66, 5), (71, 1), (75, 3)])   

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(48, 1), (63, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(60, 1), (63, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(48, 1), (51, 3), (60, 1), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(48, 1), (55, 5), (63, 3), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(48, 1), (60, 1), (63, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(16, "T")]                                                                                                                                                                                                                                                     
 [(2, "T"), (2, "T/3"), (2, "T/5"), (4, "D54"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S")  …  (4, "Ts"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "Tm"), (8, "D-5"), (8, "D7-1"), (8, "S6"), (12, "Dm"), (12, "T-5")]                 
 [(2, "S"), (2, "S/3"), (2, "S/5"), (2, "S6"), (2, "S65"), (2, "T64"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7")  …  (8, "D64"), (8, "D7-1"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D-5"), (10, "D/3"), (10, "D/5"), (10, "Tm"), (14, "T-5")]           
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (8, "D"), (8, "S/3"), (8, "S/5"), (8, "Tm"), (10, "D/3"), (10, "D/5")  …  (10, "T/5"), (12, "Dm"), (12, "S65"), (12, "Ts"), (14, "D7-1"), (14, "D7-5"), (14, "S"), (14, "S6"), (18, "D-5"), (20, "T-5")]     
 [(4, "S/3"), (4, "T64"), (6, "T54"), (8, "S65"), (8, "S65/6"), (8, "Ts"), (10, "D7-5"), (10, "S"), (10, "T"), (12, "D64")  …  (12, "T/3"), (14, "D-5"), (14, "D54"), (14, "S6"), (16, "D"), (16, "D/3"), (16, "D7-1"), (16, "Dm"), (16, "T-5"), (16, "Tm")]     
 [(4, "S"), (4, "S/3"), (6, "D64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (6, "T/3"), (8, "D54"), (8, "D7-5"), (8, "T54"), (10, "D"), (10, "Tm"), (10, "Ts"), (12, "D-5"), (12, "D/3"), (12, "T"), (14, "D7-1"), (22, "T-5")]          
 [(6, "S/3"), (6, "T64"), (8, "D7-5"), (8, "T"), (8, "T/3"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65/6"), (10, "Ts"), (12, "D-5"), (12, "D54"), (12, "S"), (14, "D"), (14, "D/3"), (14, "D7-1"), (16, "S6"), (18, "T-5")]   
 [(6, "D7-5"), (10, "D-5"), (10, "S"), (12, "D"), (12, "D/3"), (12, "D64"), (12, "S/3"), (12, "T/3"), (12, "T64"), (14, "D54"), (14, "T54"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S65"), (16, "Ts"), (18, "T"), (20, "D7-1"), (24, "T-5")]
 [(2, "S/3"), (2, "S65"), (2, "S65/6"), (2, "T64"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Ts"), (8, "D54")  …  (10, "D"), (10, "D64"), (12, "D/3"), (12, "S6"), (14, "T-5"), (14, "Tm"), (16, "D7-1"), (16, "D7-5"), (18, "Dm"), (20, "D-5")]    
 [(4, "D7-5"), (6, "Tm"), (8, "D-5"), (8, "S"), (10, "D"), (10, "D/3"), (10, "D/5"), (10, "T/3"), (10, "T/5"), (10, "Ts")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S/3"), (14, "S/5"), (14, "S65"), (14, "T64"), (16, "T"), (18, "D7-1"), (26, "T-5")]  
 [(0, "S"), (0, "S/3"), (0, "S/5"), (4, "S6"), (6, "S65"), (8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (12, "D-5"), (12, "T54"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "Dm"), (14, "Tm"), (16, "T"), (22, "T-5")]    
 [(0, "T/3"), (0, "T/5"), (4, "T54"), (6, "D"), (6, "T64"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (16, "D/3"), (16, "D/5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "T-5"), (18, "Tm"), (20, "D7-1"), (20, "S6"), (22, "Dm")]     
 [(0, "S/3"), (4, "T54"), (8, "S"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65/6"), (12, "D54"), (12, "D7-1"), (14, "D"), (14, "T-5"), (16, "D/3"), (16, "D7-5"), (18, "D64"), (18, "T/3"), (18, "Ts"), (20, "D-5")]              
 [(2, "S/3"), (2, "T64"), (4, "T"), (4, "T/3"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (8, "D54"), (10, "D"), (12, "D/3"), (12, "D7-5"), (12, "S"), (14, "D64"), (14, "T-5"), (14, "Ts"), (16, "D-5"), (16, "D7-1"), (18, "Dm")]        
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65/6"), (8, "D7-5"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (10, "T64"), (10, "Ts"), (12, "D-5"), (12, "D54"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "Tm"), (16, "T"), (22, "T-5")] 
 [(0, "S/3"), (0, "T64"), (4, "S65"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "S"), (12, "D"), (12, "D/3"), (12, "T-5"), (14, "D7-5"), (16, "D64"), (16, "T/3"), (18, "D-5"), (18, "D7-1"), (20, "Tm")]         

Done. Total checked: 111063, Pruned: 122943, completed: 15, time: 2.2660000324249268, efficiency: 6.6195939035128655
Results: bestval_func: 132, bestval_voices: 93
(16, 383, 383, 383)
Total time for optimisation of piece: 8.458999872207642
["T", "S65", "D", "S/3", "D64", "D", "Ts", "Ts", "S/3", "T/5", "S", "S", "S", "D", "T", "T", "D64", "D7-5", "T", "D", "Ts", "S/3", "Ts", "S6", "T/3", "S", "S", "S", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-130.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-143.csv
[1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 1 0 0 1 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 0 0 0 1 0 0 2 0 1 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 3 0 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 2 0 0 1 0 0 0 0 0 0 1 0; 0 1 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 0 0 2 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 2 0 1 0 0 0 0 0 0 0 1 0; 1 0 1 0 0 2 0 0 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 1 0 1 0 0 0 0 0 0; 0 0 0 1 0 1 0 2 0 0 0 0; 1 0 1 1 0 0 0 1 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 2 0 0 0 0 0 0 0 1 0 1 0; 0 0 0 0 0 2 0 0 1 1 0 0]
Key Counter is [33 7 8 4 2 32 0 15 12 4 13 0]
Key Score is [94; 101; 36; 117; 29; 107; 68; 62; 116; 33; 109; 38]
Position Counter for 4 is [4 2 32 0 15 12 4 13 0 33 7 8]
Any[[4.0, 89.25, 0.0]]
[4, 89, 0]
1 C Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(48, 1), (63, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(60, 1), (63, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(48, 1), (51, 3), (60, 1), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(48, 1), (55, 5), (63, 3), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(48, 1), (60, 1), (63, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 88
child voicing cost: 189
Best yet: 277
New solution
function cost: 88
child voicing cost: 175
Best yet: 263
New solution
function cost: 88
child voicing cost: 174
Best yet: 262
New solution
function cost: 88
child voicing cost: 170
Best yet: 258
New solution
function cost: 88
child voicing cost: 167
Best yet: 255
New solution
function cost: 88
child voicing cost: 162
Best yet: 250
New solution
function cost: 88
child voicing cost: 157
Best yet: 245
New solution
function cost: 88
child voicing cost: 153
Best yet: 241
New solution
function cost: 88
child voicing cost: 151
Best yet: 239
New solution
function cost: 88
child voicing cost: 148
Best yet: 236
New solution
function cost: 88
child voicing cost: 147
Best yet: 235
New solution
function cost: 88
child voicing cost: 138
Best yet: 226
New solution
function cost: 80
child voicing cost: 138
Best yet: 218
New solution
function cost: 80
child voicing cost: 137
Best yet: 217
New solution
function cost: 80
child voicing cost: 133
Best yet: 213
New solution
function cost: 80
child voicing cost: 131
Best yet: 211
New solution
function cost: 80
child voicing cost: 129
Best yet: 209
New solution
function cost: 86
child voicing cost: 120
Best yet: 206
New solution
function cost: 86
child voicing cost: 118
Best yet: 204
New solution
function cost: 86
child voicing cost: 114
Best yet: 200
New solution
function cost: 86
child voicing cost: 112
Best yet: 198
New solution
function cost: 86
child voicing cost: 111
Best yet: 197
New solution
function cost: 86
child voicing cost: 109
Best yet: 195
New solution
function cost: 82
child voicing cost: 112
Best yet: 194
New solution
function cost: 82
child voicing cost: 111
Best yet: 193
New solution
function cost: 82
child voicing cost: 109
Best yet: 191
New solution
function cost: 82
child voicing cost: 107
Best yet: 189
New solution
function cost: 82
child voicing cost: 103
Best yet: 185
New solution
function cost: 82
child voicing cost: 101
Best yet: 183
New solution
function cost: 82
child voicing cost: 100
Best yet: 182
New solution
function cost: 86
child voicing cost: 94
Best yet: 180
New solution
function cost: 82
child voicing cost: 97
Best yet: 179
New solution
function cost: 82
child voicing cost: 96
Best yet: 178
New solution
function cost: 82
child voicing cost: 94
Best yet: 176
New solution
function cost: 82
child voicing cost: 92
Best yet: 174
New solution
function cost: 82
child voicing cost: 88
Best yet: 170
New solution
function cost: 82
child voicing cost: 86
Best yet: 168
New solution
function cost: 82
child voicing cost: 85
Best yet: 167

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "Ts", [(56, 1), (63, 5), (72, 3), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "S/3"), (0, "S/5"), (2, "T54"), (4, "S65"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (12, "D/5"), (12, "T-5"), (14, "D7-5"), (14, "S6"), (16, "T/3"), (16, "T/5"), (18, "D-5"), (18, "D7-1"), (20, "Dm"), (20, "Tm")]        
 [(4, "T-5"), (8, "T64"), (10, "D7-1"), (10, "T54"), (12, "Dm"), (12, "S65"), (12, "S65/6"), (14, "D/3"), (14, "T"), (16, "D7")  …  (18, "S"), (20, "D"), (20, "Ts"), (22, "D7-5"), (22, "S6"), (24, "D64"), (24, "S/3"), (24, "T/3"), (24, "Tm"), (26, "D-5")]     
 [(10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Dm"), (10, "S/3"), (10, "S/5"), (12, "D7-1"), (14, "D"), (14, "S65")  …  (16, "D/3"), (16, "D/5"), (16, "S"), (16, "S6"), (16, "T"), (16, "T/3"), (16, "T/5"), (20, "D54"), (20, "D7-5"), (24, "D-5")]
 [(4, "T-5"), (6, "T"), (10, "T54"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (16, "Dm"), (16, "S65"), (16, "T/3"), (16, "T/5")  …  (18, "S/3"), (18, "S/5"), (20, "D"), (20, "D7"), (20, "D7/3"), (20, "D7/5"), (20, "D7/7"), (22, "D7-5"), (26, "D-5"), (26, "S6")]  
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (8, "D"), (8, "S/3"), (8, "S/5"), (8, "Tm"), (10, "D/3"), (10, "D/5")  …  (10, "T/5"), (12, "Dm"), (12, "S65"), (12, "Ts"), (14, "D7-1"), (14, "D7-5"), (14, "S"), (14, "S6"), (18, "D-5"), (20, "T-5")]        
 [(8, "S/3"), (8, "T64"), (10, "T54"), (12, "Dm"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (12, "Ts"), (14, "D7-5"), (14, "S")  …  (16, "D7"), (16, "D7/3"), (16, "D7/7"), (16, "Tm"), (18, "D-5"), (18, "D54"), (18, "D7-1"), (18, "S6"), (20, "D"), (20, "D/3")] 
 [(4, "S/3"), (4, "S/5"), (4, "S65"), (4, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (8, "Ts")  …  (10, "T/5"), (12, "D"), (12, "T-5"), (14, "D7-1"), (14, "S6"), (18, "D/3"), (18, "D/5"), (18, "D7-5"), (20, "Tm"), (22, "D-5")]        
 [(4, "S/3"), (4, "S/5"), (4, "S65"), (4, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (8, "Ts")  …  (10, "T/5"), (12, "D"), (12, "T-5"), (14, "D7-1"), (14, "S6"), (18, "D/3"), (18, "D/5"), (18, "D7-5"), (20, "Tm"), (22, "D-5")]        
 [(2, "S65"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Dm"), (6, "S/3"), (6, "S/5"), (8, "D54"), (8, "S")  …  (10, "D7-1"), (10, "T/3"), (10, "T/5"), (10, "Ts"), (12, "S6"), (12, "T"), (16, "D7-5"), (18, "T-5"), (18, "Tm"), (20, "D-5")]          
 [(6, "T-5"), (8, "T"), (10, "T64"), (12, "D/3"), (12, "T54"), (14, "Dm"), (14, "S65"), (14, "S65/6"), (14, "Ts"), (16, "D54")  …  (18, "D7"), (18, "D7/3"), (18, "D7/7"), (18, "T/3"), (18, "Tm"), (20, "S"), (20, "S/3"), (24, "D7-5"), (24, "S6"), (28, "D-5")]  
 [(2, "D7-1"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65"), (8, "D54"), (8, "S6"), (10, "D"), (10, "D/3")  …  (10, "T/3"), (10, "T/5"), (12, "S"), (14, "Dm"), (14, "Tm"), (14, "Ts"), (16, "D7-5"), (16, "T"), (20, "D-5"), (22, "T-5")]          
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (2, "S65/6"), (4, "D54"), (6, "D"), (6, "D/5"), (6, "D64"), (6, "D7-1"), (6, "S/5"), (6, "T/5"), (8, "S"), (10, "Tm"), (12, "D7-5"), (12, "T"), (22, "T-5")]                                                    
 [(4, "D7-1"), (8, "D/3"), (8, "T"), (8, "T/5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65/6"), (10, "Ts"), (12, "D54"), (12, "T54"), (14, "D"), (14, "D64"), (14, "S/5"), (14, "T64"), (16, "S"), (20, "D7-5")]                              
 [(8, "D7-5"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D54"), (14, "D"), (14, "S65/6"), (16, "D/3"), (16, "S"), (16, "S/5"), (18, "Dm"), (20, "D7-1"), (20, "T"), (20, "T/5")]                                        
 [(6, "D7"), (10, "D")]                                                                                                                                                                                                                                             
 [(16, "T")]                                                                                                                                                                                                                                                        
 [(12, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 129380, Pruned: 149779, completed: 38, time: 2.490000009536743, efficiency: 15.261044118256764
Results: bestval_func: 82, bestval_voices: 85
(15, 407, 407, 407)
[1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 1 0 0 1 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 0 0 0 1 0 0 2 0 1 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 3 0 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 2 0 0 1 0 0 0 0 0 0 1 0; 0 1 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 0 0 2 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 2 0 1 0 0 0 0 0 0 0 1 0; 1 0 1 0 0 2 0 0 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 1 0 1 0 0 0 0 0 0; 0 0 0 1 0 1 0 2 0 0 0 0; 1 0 1 1 0 0 0 1 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 2 0 0 0 0 0 0 0 1 0 1 0; 0 0 0 0 0 2 0 0 1 1 0 0]
Key Counter is [33 7 8 4 2 32 0 15 12 4 13 0]
Key Score is [94; 101; 36; 117; 29; 107; 68; 62; 116; 33; 109; 38]
Position Counter for 4 is [4 2 32 0 15 12 4 13 0 33 7 8]
Any[[4.0, 89.25, 0.0]]
[4, 89, 0]
1 C Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "Ts", [(56, 1), (63, 5), (72, 3), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 154
child voicing cost: 171
Best yet: 325
New solution
function cost: 154
child voicing cost: 168
Best yet: 322
New solution
function cost: 154
child voicing cost: 167
Best yet: 321
New solution
function cost: 154
child voicing cost: 164
Best yet: 318
New solution
function cost: 158
child voicing cost: 158
Best yet: 316
New solution
function cost: 154
child voicing cost: 157
Best yet: 311
New solution
function cost: 154
child voicing cost: 154
Best yet: 308
New solution
function cost: 154
child voicing cost: 153
Best yet: 307
New solution
function cost: 154
child voicing cost: 150
Best yet: 304
New solution
function cost: 158
child voicing cost: 144
Best yet: 302
New solution
function cost: 158
child voicing cost: 143
Best yet: 301
New solution
function cost: 154
child voicing cost: 143
Best yet: 297
New solution
function cost: 154
child voicing cost: 140
Best yet: 294
New solution
function cost: 154
child voicing cost: 139
Best yet: 293
New solution
function cost: 154
child voicing cost: 136
Best yet: 290
New solution
function cost: 150
child voicing cost: 139
Best yet: 289
New solution
function cost: 150
child voicing cost: 136
Best yet: 286
New solution
function cost: 158
child voicing cost: 126
Best yet: 284
New solution
function cost: 158
child voicing cost: 125
Best yet: 283
New solution
function cost: 144
child voicing cost: 137
Best yet: 281
New solution
function cost: 144
child voicing cost: 132
Best yet: 276
New solution
function cost: 142
child voicing cost: 133
Best yet: 275
New solution
function cost: 142
child voicing cost: 132
Best yet: 274
New solution
function cost: 144
child voicing cost: 127
Best yet: 271
New solution
function cost: 144
child voicing cost: 124
Best yet: 268
New solution
function cost: 140
child voicing cost: 126
Best yet: 266
New solution
function cost: 140
child voicing cost: 123
Best yet: 263
New solution
function cost: 132
child voicing cost: 129
Best yet: 261
New solution
function cost: 132
child voicing cost: 122
Best yet: 254
New solution
function cost: 132
child voicing cost: 119
Best yet: 251
New solution
function cost: 146
child voicing cost: 103
Best yet: 249
New solution
function cost: 138
child voicing cost: 109
Best yet: 247
New solution
function cost: 140
child voicing cost: 106
Best yet: 246
New solution
function cost: 126
child voicing cost: 112
Best yet: 238
New solution
function cost: 126
child voicing cost: 109
Best yet: 235
New solution
function cost: 130
child voicing cost: 101
Best yet: 231
New solution
function cost: 136
child voicing cost: 93
Best yet: 229
New solution
function cost: 136
child voicing cost: 90
Best yet: 226
New solution
function cost: 140
child voicing cost: 84
Best yet: 224
New solution
function cost: 136
child voicing cost: 86
Best yet: 222
New solution
function cost: 140
child voicing cost: 80
Best yet: 220
New solution
function cost: 136
child voicing cost: 83
Best yet: 219
New solution
function cost: 140
child voicing cost: 77
Best yet: 217
Done. Total checked: 190206, Pruned: 201823, completed: 43, time: 3.750999927520752, efficiency: 11.463609925586198
Results: bestval_func: 140

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (16, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])  
 (2, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])   
 (2, "S", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (4, "D7", [(55, 1), (59, 3), (62, 5), (65, 7)])  
 (8, "Ts", [(56, 1), (60, 3), (60, 3), (63, 5)])  
 (4, "S", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (14, "D", [(55, 1), (55, 1), (62, 5), (71, 3)])  
 (12, "D", [(55, 1), (55, 1), (62, 5), (71, 3)])  
 (2, "S/3", [(56, 3), (60, 5), (65, 1), (65, 1)]) 
 (10, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])  
 (0, "S/3", [(56, 3), (60, 5), (65, 1), (72, 5)]) 
 (0, "T/5", [(55, 5), (60, 1), (67, 5), (75, 3)]) 
 (0, "S/3", [(56, 3), (60, 5), (72, 5), (77, 1)]) 
 ?                                                
 (12, "Ts", [(56, 1), (63, 5), (72, 3), (72, 3)]) 
 (4, "S/3", [(56, 3), (65, 1), (72, 5), (72, 5)]) 
 (8, "Ts", [(56, 1), (63, 5), (72, 3), (72, 3)])  
 (6, "D7", [(55, 1), (65, 7), (71, 3), (74, 5)])  
 (8, "T", [(48, 1), (63, 3), (72, 1), (79, 5)])   
 (2, "D7-1", [(50, 5), (65, 7), (71, 3), (77, 7)])
 (6, "D7-1", [(50, 5), (65, 7), (71, 3), (74, 5)])
 (8, "T", [(48, 1), (67, 5), (72, 1), (75, 3)])   
 (16, "S", [(53, 1), (65, 1), (72, 5), (80, 3)])  
 (10, "D", [(55, 1), (62, 5), (71, 3), (79, 1)])  
 (16, "T", [(48, 1), (63, 3), (72, 1), (79, 5)])  
 (16, "T", [(48, 1), (63, 3), (72, 1), (79, 5)])  

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (68, 1), (72, 3), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                       
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D/5"), (4, "D7-1"), (6, "S65"), (6, "S65/6")  …  (8, "T/3"), (8, "T/5"), (10, "D7-5"), (10, "S/3"), (10, "S/5"), (10, "T64"), (12, "Ts"), (14, "D-5"), (16, "S"), (18, "T-5")]     
 [(0, "D/3"), (0, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "Tm"), (10, "D"), (10, "D7-1"), (10, "T")  …  (14, "Ss"), (14, "Ts"), (16, "D7-5"), (16, "S65"), (16, "S65/6"), (20, "D-5"), (20, "S/3"), (20, "S/5"), (20, "T-5"), (22, "S")]    
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (2, "Tm"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7")  …  (6, "S/3"), (6, "S/5"), (6, "S65"), (6, "S65/6"), (6, "T64"), (8, "D-5"), (8, "D7-1"), (10, "S6"), (10, "Ss"), (10, "T-5")]          
 [(8, "S65"), (8, "S65/6"), (10, "D7-1"), (10, "S6"), (10, "Ss"), (12, "T64"), (14, "D"), (14, "D/3"), (14, "D7"), (14, "D7/3")  …  (14, "T"), (16, "D54"), (16, "Ts"), (18, "Tm"), (20, "D64"), (20, "T/3"), (20, "T54"), (24, "D-5"), (24, "D7-5"), (24, "T-5")]
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65/6"), (10, "D64"), (10, "D7-5"), (10, "T/3"), (10, "T54"), (10, "Tm"), (10, "Ts")  …  (12, "T"), (14, "D-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D54"), (18, "T-5"), (20, "D"), (20, "D/3")]  
 [(4, "D7-5"), (6, "S"), (8, "D-5"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Ss"), (10, "T"), (10, "T/3"), (12, "S/3"), (12, "S65"), (12, "T64"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "Ts"), (16, "D54"), (20, "T-5")]     
 [(6, "D64"), (6, "T/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "T"), (10, "D/3"), (10, "D54"), (10, "D7-5"), (10, "S65/6"), (12, "D"), (12, "Ss"), (14, "D-5"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]                     
 [(0, "T"), (0, "T/3"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D/3"), (10, "D64"), (10, "S65")  …  (10, "Ts"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D7-5"), (16, "D"), (16, "S6"), (16, "Ss"), (18, "D-5")]       
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7-5"), (6, "T/3"), (6, "T/5"), (6, "T54"), (6, "Ts"), (8, "S6"), (8, "Ss")  …  (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "D7-1"), (18, "T-5")]        
 [(2, "Tm"), (4, "D7-5"), (6, "D"), (8, "D-5"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T"), (14, "T/3")  …  (16, "Ts"), (18, "D7-1"), (18, "S"), (18, "S/3"), (18, "S/5"), (18, "S6"), (18, "Ss"), (24, "S65"), (24, "S65/6"), (24, "T-5")]  
 [(8, "S"), (8, "S/3"), (8, "S/5"), (10, "S65"), (10, "S65/6"), (10, "Tm"), (10, "Ts"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (14, "T64"), (16, "D"), (16, "D7-1"), (16, "T"), (18, "D7-5"), (18, "T54"), (22, "D-5"), (22, "D/3"), (22, "D/5"), (22, "T-5")]
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D7-1"), (8, "S"), (8, "S/3"), (10, "D54"), (10, "D64"), (10, "D7-5"), (10, "S65/6"), (10, "T/3"), (10, "T54"), (10, "Ts"), (12, "T"), (14, "D-5"), (22, "T-5")]         
 [(2, "Ts"), (6, "S/3"), (6, "T64"), (8, "S"), (10, "D64"), (10, "D7-5"), (10, "S65/6"), (10, "T/3"), (10, "T54"), (12, "T"), (14, "D-5"), (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D54"), (20, "D"), (20, "D/3"), (20, "D7-1")]  
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "T"), (8, "D54"), (8, "D7-5"), (10, "D"), (10, "Ss"), (12, "D-5"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/3"), (16, "T-5"), (18, "D7-1")]                    
 [(4, "D64"), (4, "T/3"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/3"), (8, "D54")  …  (8, "S65/6"), (10, "D"), (10, "Ss"), (10, "T"), (12, "D-5"), (12, "D/3"), (12, "T64"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]         

, bestval_voices: 77
(16, 407, 407, 407)
Total time for optimisation of piece: 8.099999904632568
["T", "T", "S", "D7", "Ts", "S", "D", "D", "S/3", "D", "S/3", "T/5", "S/3", "D", "Ts", "Ts", "D7-1", "D7-1", "T", "D7", "Ts", "S/3", "Ts", "D7", "T", "D7-1", "D7-1", "T", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-143.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-156.csv
[1 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 0 1 0 0 0 1 0 0 0 2 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 1 0 1 0 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 1 0 1 0 0 1 0 0 0; 1 0 0 2 0 0 1 0 0 0 0 0; 1 1 0 0 0 2 0 0 0 0 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 1 0 1 2 0 0 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 0 1 0 0]
Key Counter is [20 16 1 26 0 18 2 6 27 1 13 0]
Key Score is [46; 122; 26; 111; 72; 59; 102; 30; 126; 47; 85; 84]
Position Counter for 9 is [27 1 13 0 20 16 1 26 0 18 2 6]
Any[[9.0, 84.75, 1.0]]
[9, 85, 1]
9 G# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (68, 1), (72, 3), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 94
child voicing cost: 154
Best yet: 248
New solution
function cost: 94
child voicing cost: 153
Best yet: 247
New solution
function cost: 94
child voicing cost: 152
Best yet: 246
New solution
function cost: 94
child voicing cost: 151
Best yet: 245
New solution
function cost: 94
child voicing cost: 144
Best yet: 238
New solution
function cost: 94
child voicing cost: 141
Best yet: 235
New solution
function cost: 94
child voicing cost: 140
Best yet: 234
New solution
function cost: 94
child voicing cost: 139
Best yet: 233
New solution
function cost: 94
child voicing cost: 136
Best yet: 230
New solution
function cost: 94
child voicing cost: 134
Best yet: 228
New solution
function cost: 94
child voicing cost: 131
Best yet: 225
New solution
function cost: 94
child voicing cost: 130
Best yet: 224
New solution
function cost: 94
child voicing cost: 129
Best yet: 223
New solution
function cost: 94
child voicing cost: 128
Best yet: 222
New solution
function cost: 90
child voicing cost: 130
Best yet: 220
New solution
function cost: 90
child voicing cost: 129
Best yet: 219
New solution
function cost: 90
child voicing cost: 128
Best yet: 218
New solution
function cost: 90
child voicing cost: 126
Best yet: 216
New solution
function cost: 90
child voicing cost: 124
Best yet: 214
New solution
function cost: 90
child voicing cost: 123
Best yet: 213
New solution
function cost: 90
child voicing cost: 122
Best yet: 212
New solution
function cost: 92
child voicing cost: 117
Best yet: 209
New solution
function cost: 92
child voicing cost: 115
Best yet: 207
New solution
function cost: 92
child voicing cost: 114
Best yet: 206
New solution
function cost: 92
child voicing cost: 113
Best yet: 205
New solution
function cost: 96
child voicing cost: 108
Best yet: 204
New solution
function cost: 96
child voicing cost: 107
Best yet: 203
New solution
function cost: 98
child voicing cost: 102
Best yet: 200
New solution
function cost: 98
child voicing cost: 101
Best yet: 199
New solution
function cost: 98
child voicing cost: 100
Best yet: 198
New solution
function cost: 92
child voicing cost: 104
Best yet: 196
New solution
function cost: 92
child voicing cost: 102
Best yet: 194
New solution
function cost: 92
child voicing cost: 101
Best yet: 193
New solution
function cost: 92
child voicing cost: 100
Best yet: 192

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "T/3"), (4, "T/5"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/3"), (6, "S/5")  …  (10, "S6"), (10, "Ss"), (10, "T"), (12, "D-5"), (12, "D/3"), (12, "D/5"), (12, "T64"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]           
 [(2, "Ts"), (6, "S/3"), (6, "T64"), (8, "S"), (10, "D64"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "T/3"), (10, "T54")  …  (14, "Ss"), (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (18, "D54"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "D7-1")]  
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3")  …  (10, "Ts"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "D"), (16, "S6"), (16, "Ss"), (18, "D-5")]          
 [(12, "S/3"), (12, "S/5"), (12, "T-5"), (12, "Ts"), (14, "T"), (16, "D7-1"), (16, "S65"), (16, "S65/6"), (18, "D"), (18, "D/3")  …  (18, "D7/5"), (18, "D7/7"), (20, "Ss"), (20, "T/3"), (20, "T/5"), (22, "S"), (22, "Tm"), (24, "D-5"), (24, "D7-5"), (26, "S6")]
 [(2, "T54"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "S/3"), (6, "S/5")  …  (8, "Ts"), (10, "D64"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "Tm"), (12, "S6"), (12, "Ss"), (14, "D-5"), (14, "T-5")]        
 [(0, "D7"), (0, "D7/3"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D7-1"), (6, "D54"), (6, "S65"), (6, "S65/6"), (6, "T54")  …  (8, "T"), (8, "T/3"), (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "Ts"), (14, "D-5"), (14, "D64"), (16, "S"), (18, "T-5")]          
 [(2, "Tm"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "S/5")  …  (10, "S65/6"), (10, "T54"), (12, "D"), (12, "S6"), (12, "Ss"), (14, "D-5"), (14, "T64"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]         
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D/5")  …  (10, "Ts"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "D"), (16, "S6"), (16, "Ss"), (18, "D-5")]         
 [(4, "Ts"), (8, "S65"), (8, "S65/6"), (10, "D"), (10, "D/3"), (10, "D/5"), (12, "S/3"), (12, "S/5"), (12, "Ss"), (12, "T/3")  …  (14, "D7/7"), (14, "S"), (14, "T"), (16, "D7-5"), (16, "T-5"), (16, "T54"), (18, "D7-1"), (18, "S6"), (20, "D-5"), (20, "Tm")]    
 [(0, "D64"), (0, "T/3"), (2, "Tm"), (4, "D54"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3")  …  (14, "D7/3"), (14, "D7/7"), (14, "S6"), (14, "Ss"), (16, "D/3"), (16, "S65"), (16, "S65/6"), (16, "T64"), (18, "D7-1"), (20, "T-5")]      
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "D"), (6, "D/3"), (6, "D/5")  …  (8, "Tm"), (10, "S6"), (10, "Ss"), (12, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D-5"), (16, "T-5"), (16, "Ts")]          
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/5"), (6, "D/5"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "D"), (8, "D7-1"), (10, "D64"), (12, "S6"), (14, "D7-5"), (14, "Ts"), (16, "S"), (16, "S/5")]                                        
 [(4, "D64"), (4, "T/5"), (6, "S"), (6, "S/5"), (6, "T"), (8, "D54"), (8, "D7-5"), (10, "D"), (10, "Ss"), (12, "S65"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/5"), (18, "D7-1")]                                                
 [(2, "T64"), (4, "T"), (6, "S65/6"), (6, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/5"), (14, "D/5"), (14, "D64"), (14, "T/5"), (16, "D7-1"), (16, "Ss"), (18, "D54"), (18, "D7-5"), (20, "D")]                              
 [(8, "D7"), (12, "D")]                                                                                                                                                                                                                                             
 [(16, "T")]                                                                                                                                                                                                                                                        
 [(14, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 105488, Pruned: 120333, completed: 34, time: 2.059999942779541, efficiency: 16.5048548273861
Results: bestval_func: 92, bestval_voices: 100
(15, 360, 360, 360)
[1 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 0 1 0 0 0 1 0 0 0 2 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 1 0 1 0 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 1 0 1 0 0 1 0 0 0; 1 0 0 2 0 0 1 0 0 0 0 0; 1 1 0 0 0 2 0 0 0 0 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 1 0 1 2 0 0 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 0 1 0 0]
Key Counter is [20 16 1 26 0 18 2 6 27 1 13 0]
Key Score is [46; 122; 26; 111; 72; 59; 102; 30; 126; 47; 85; 84]
Position Counter for 9 is [27 1 13 0 20 16 1 26 0 18 2 6]
Any[[9.0, 84.75, 1.0]]
[9, 85, 1]
9 G# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 108
child voicing cost: 197
Best yet: 305
New solution
function cost: 108
child voicing cost: 194
Best yet: 302
New solution
function cost: 108
child voicing cost: 192
Best yet: 300
New solution
function cost: 108
child voicing cost: 190
Best yet: 298
New solution
function cost: 94
child voicing cost: 203
Best yet: 297
New solution
function cost: 102
child voicing cost: 194
Best yet: 296
New solution
function cost: 106
child voicing cost: 186
Best yet: 292
New solution
function cost: 94
child voicing cost: 191
Best yet: 285
New solution
function cost: 106
child voicing cost: 177
Best yet: 283
New solution
function cost: 94
child voicing cost: 187
Best yet: 281
New solution
function cost: 94
child voicing cost: 186
Best yet: 280
New solution
function cost: 94
child voicing cost: 184
Best yet: 278
New solution
function cost: 110
child voicing cost: 165
Best yet: 275
New solution
function cost: 94
child voicing cost: 177
Best yet: 271
New solution
function cost: 94
child voicing cost: 176
Best yet: 270
New solution
function cost: 94
child voicing cost: 174
Best yet: 268
New solution
function cost: 94
child voicing cost: 171
Best yet: 265
New solution
function cost: 94
child voicing cost: 169
Best yet: 263
New solution
function cost: 94
child voicing cost: 167
Best yet: 261
New solution
function cost: 94
child voicing cost: 166
Best yet: 260
New solution
function cost: 94
child voicing cost: 164
Best yet: 258
New solution
function cost: 94
child voicing cost: 163
Best yet: 257
New solution
function cost: 94
child voicing cost: 161
Best yet: 255
New solution
function cost: 94
child voicing cost: 159
Best yet: 253
New solution
function cost: 94
child voicing cost: 158
Best yet: 252
New solution
function cost: 94
child voicing cost: 156
Best yet: 250
New solution
function cost: 96
child voicing cost: 152
Best yet: 248
New solution
function cost: 96
child voicing cost: 150
Best yet: 246
New solution
function cost: 96
child voicing cost: 148
Best yet: 244
New solution
function cost: 96
child voicing cost: 145
Best yet: 241
New solution
function cost: 96
child voicing cost: 143
Best yet: 239
New solution
function cost: 96
child voicing cost: 141
Best yet: 237
New solution
function cost: 92
child voicing cost: 135
Best yet: 227
New solution
function cost: 92
child voicing cost: 132
Best yet: 224
New solution
function cost: 92
child voicing cost: 130
Best yet: 222
New solution
function cost: 92
child voicing cost: 128
Best yet: 220
New solution
function cost: 100
child voicing cost: 119
Best yet: 219
New solution
function cost: 100
child voicing cost: 117
Best yet: 217
New solution
function cost: 108
child voicing cost: 106
Best yet: 214
New solution
function cost: 114
child voicing cost: 99
Best yet: 213
New solution
function cost: 114
child voicing cost: 97
Best yet: 211
New solution
function cost: 114
child voicing cost: 96
Best yet: 210
New solution
function cost: 102
child voicing cost: 107
Best yet: 209
New solution
function cost: 102
child voicing cost: 104
Best yet: 206
New solution
function cost: 102
child voicing cost: 101
Best yet: 203
New solution
function cost: 102
child voicing cost: 99
Best yet: 201
New solution
function cost: 102
child voicing cost: 97
Best yet: 199
New solution
function cost: 100
child voicing cost: 98
Best yet: 198
New solution
function cost: 106
child voicing cost: 91
Best yet: 197
New solution
function cost: 106
child voicing cost: 89
Best yet: 195
New solution
function cost: 110
child voicing cost: 84
Best yet: 194
New solution
function cost: 112
child voicing cost: 81
Best yet: 193
New solution
function cost: 114
child voicing cost: 77
Best yet: 191
New solution
function cost: 114
child voicing cost: 76
Best yet: 190
New solution
function cost: 114
child voicing cost: 75
Best yet: 189
New solution
function cost: 114
child voicing cost: 74
Best yet: 188

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])    
 (0, "D7", [(51, 1), (61, 7), (70, 5), (79, 3)])   
 (14, "Ts", [(53, 1), (60, 5), (68, 3), (80, 3)])  
 (0, "T/3", [(60, 3), (63, 5), (63, 5), (68, 1)])  
 (8, "S65/6", [(58, 6), (61, 1), (65, 3), (68, 5)])
 (12, "D7-1", [(58, 5), (61, 7), (67, 3), (70, 5)])
 (10, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])   
 (8, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])    
 (4, "S", [(49, 1), (56, 5), (65, 3), (73, 1)])    
 (2, "Tm", [(48, 1), (60, 1), (67, 5), (75, 3)])   
 (8, "S", [(49, 1), (56, 5), (65, 3), (73, 1)])    
 (4, "D7", [(51, 1), (55, 3), (61, 7), (70, 5)])   
 ?                                                 
 (0, "D7", [(51, 1), (55, 3), (61, 7), (70, 5)])   
 (14, "Ts", [(53, 1), (56, 3), (60, 5), (68, 3)])  
 (10, "D/3", [(55, 3), (58, 5), (58, 5), (63, 1)]) 
 (4, "Ts", [(53, 1), (56, 3), (60, 5), (65, 1)])   
 (0, "T/3", [(48, 3), (56, 1), (63, 5), (68, 1)])  
 (6, "D/5", [(46, 5), (55, 3), (63, 1), (70, 5)])  
 (4, "T", [(44, 1), (56, 1), (63, 5), (72, 3)])    
 (6, "T", [(44, 1), (60, 3), (68, 1), (75, 5)])    
 (4, "T", [(44, 1), (60, 3), (68, 1), (75, 5)])    
 (8, "D7", [(51, 1), (58, 5), (67, 3), (73, 7)])   
 (16, "T", [(44, 1), (56, 1), (63, 5), (72, 3)])   
 (16, "T", [(44, 1), (56, 1), (63, 5), (72, 3)])   

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(48, 1), (63, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(60, 1), (63, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(48, 1), (55, 5), (63, 3), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(60, 1), (67, 5), (72, 1), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(60, 1), (60, 1), (67, 5), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(8, "T")]                                                                                                                                                                                                                                                          
 [(4, "Ts"), (6, "D7-5"), (6, "S"), (6, "S/3"), (6, "S/5"), (8, "T/3"), (8, "T/5"), (10, "D-5"), (10, "S6"), (12, "D")  …  (12, "S65"), (12, "Tm"), (14, "T"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (20, "D7-1"), (20, "Dm"), (20, "T-5")]          
 [(4, "Tm"), (6, "D/3"), (6, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (10, "D7-1"), (12, "D"), (12, "S/3"), (12, "S/5"), (16, "S65"), (16, "T-5"), (18, "D7-5"), (18, "S"), (18, "S6"), (22, "D-5")]           
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "Dm"), (4, "S65"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7-1")  …  (10, "S"), (10, "S6"), (12, "D64"), (12, "T/3"), (12, "T/5"), (14, "D7-5"), (16, "Ts"), (18, "D-5"), (18, "T"), (24, "T-5")]            
 [(10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "Dm"), (10, "S65"), (10, "S65/6"), (10, "Tm"), (12, "D7-1"), (12, "S"), (12, "T")  …  (14, "Ts"), (16, "D/3"), (16, "D54"), (16, "D7-5"), (16, "S6"), (16, "T54"), (18, "S/3"), (18, "T-5"), (18, "T64"), (20, "D-5")]
 [(6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D"), (12, "D64"), (12, "S65/6"), (14, "D54"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "T64"), (16, "Ts"), (18, "D-5"), (20, "T-5")]                   
 [(10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65"), (10, "Tm"), (12, "D7-1"), (12, "S"), (12, "T"), (12, "T/3"), (14, "D"), (14, "D64"), (14, "Ts"), (16, "D/3"), (16, "D54"), (16, "D7-5"), (16, "T54"), (18, "S/3"), (18, "T-5"), (20, "D-5")]    
 [(10, "D/3"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S65"), (12, "T-5"), (14, "D7-1"), (16, "D"), (18, "D54"), (18, "S"), (18, "T"), (18, "T/3"), (20, "D64"), (20, "Ts"), (22, "D7-5"), (24, "S/3"), (24, "T64"), (26, "D-5")]                
 [(4, "T"), (4, "T/3"), (6, "D64"), (6, "Tm"), (6, "Ts"), (8, "D54"), (8, "T54"), (10, "D"), (10, "Dm"), (10, "S/3")  …  (14, "D7"), (14, "D7/3"), (14, "D7/7"), (14, "S65"), (14, "S65/6"), (14, "T-5"), (16, "D-5"), (16, "D7-1"), (16, "S"), (24, "S6")]          
 [(6, "T-5"), (8, "D7-1"), (8, "T"), (10, "Dm"), (10, "S65"), (10, "T64"), (12, "D/3"), (12, "D/5"), (14, "D7"), (14, "D7/3")  …  (16, "S/3"), (16, "S/5"), (18, "D"), (18, "T/3"), (18, "T/5"), (18, "Ts"), (20, "S6"), (22, "Tm"), (24, "D7-5"), (28, "D-5")]      
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S/3"), (6, "S/5"), (8, "T54"), (10, "D"), (10, "S65"), (10, "Tm")  …  (12, "S"), (12, "S6"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "Dm"), (16, "D7-1"), (16, "D7-5"), (18, "T-5"), (20, "D-5")]         
 [(6, "D-5"), (8, "Ts"), (10, "D7-5"), (10, "S"), (10, "S/3"), (10, "S/5"), (12, "T/3"), (12, "T/5"), (14, "D54"), (14, "S6")  …  (16, "S65"), (16, "Tm"), (18, "T"), (20, "D7"), (20, "D7/3"), (20, "D7/5"), (20, "D7/7"), (24, "D7-1"), (24, "Dm"), (24, "T-5")]   
 [(2, "D64"), (2, "T/3"), (2, "Ts"), (4, "D54"), (6, "D"), (6, "S65/6"), (8, "D7-5"), (8, "S"), (8, "S/3"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (14, "T64"), (16, "D/3"), (16, "S6"), (18, "T-5"), (20, "D7-1")]            
 [(6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D"), (12, "D64"), (12, "S65/6"), (14, "D54"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "T64"), (16, "Ts"), (18, "D-5"), (20, "T-5")]                   
 [(4, "D64"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S65/6"), (4, "T/3"), (6, "D54"), (6, "S"), (6, "S/3")  …  (8, "D"), (8, "Tm"), (8, "Ts"), (10, "D/3"), (10, "D7-5"), (10, "T"), (14, "D-5"), (14, "D7-1"), (16, "Dm"), (20, "T-5")]             
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (6, "D"), (6, "D/3"), (6, "D7-1"), (6, "S65"), (6, "Tm"), (8, "D54"), (10, "D64"), (10, "S/3"), (10, "T64"), (12, "D7-5"), (12, "S"), (14, "Ts"), (16, "D-5"), (16, "T"), (16, "T/3"), (26, "T-5")]              

Done. Total checked: 176386, Pruned: 197558, completed: 56, time: 3.30400013923645, efficiency: 16.949151828105407
Results: bestval_func: 114, bestval_voices: 74
(16, 360, 360, 360)
Total time for optimisation of piece: 6.722999811172485
["T", "D7", "Ts", "T/3", "S65/6", "D7-1", "T", "T", "T", "S", "Tm", "S", "D7", "Ts", "D", "D", "Ts", "D7", "Ts", "S/3", "D7", "Ts", "D/3", "Ts", "T/3", "D/5", "T", "T", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-156.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-169.csv
[0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 1 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 0 0 1 2 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 2 0 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 1 0 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0]
Key Counter is [19 4 5 19 0 21 0 22 15 1 26 0]
Key Score is [68; 104; 32; 127; 39; 94; 85; 47; 126; 25; 113; 64]
Position Counter for 4 is [19 0 21 0 22 15 1 26 0 19 4 5]
Any[[4.0, 78.25, 0.0]]
[4, 78, 0]
1 C Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(48, 1), (63, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(60, 1), (63, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(48, 1), (55, 5), (63, 3), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(60, 1), (67, 5), (72, 1), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(60, 1), (60, 1), (67, 5), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 136
child voicing cost: 172
Best yet: 308
New solution
function cost: 136
child voicing cost: 158
Best yet: 294
New solution
function cost: 136
child voicing cost: 153
Best yet: 289
New solution
function cost: 136
child voicing cost: 152
Best yet: 288
New solution
function cost: 136
child voicing cost: 150
Best yet: 286
New solution
function cost: 136
child voicing cost: 145
Best yet: 281
New solution
function cost: 136
child voicing cost: 144
Best yet: 280
New solution
function cost: 128
child voicing cost: 146
Best yet: 274
New solution
function cost: 128
child voicing cost: 141
Best yet: 269
New solution
function cost: 128
child voicing cost: 139
Best yet: 267
New solution
function cost: 126
child voicing cost: 137
Best yet: 263
New solution
function cost: 126
child voicing cost: 135
Best yet: 261
New solution
function cost: 122
child voicing cost: 136
Best yet: 258
New solution
function cost: 122
child voicing cost: 134
Best yet: 256
New solution
function cost: 122
child voicing cost: 132
Best yet: 254
New solution
function cost: 124
child voicing cost: 129
Best yet: 253
New solution
function cost: 124
child voicing cost: 127
Best yet: 251
New solution
function cost: 124
child voicing cost: 125
Best yet: 249
New solution
function cost: 124
child voicing cost: 124
Best yet: 248
New solution
function cost: 124
child voicing cost: 123
Best yet: 247
New solution
function cost: 124
child voicing cost: 121
Best yet: 245
New solution
function cost: 122
child voicing cost: 121
Best yet: 243
New solution
function cost: 122
child voicing cost: 117
Best yet: 239
New solution
function cost: 122
child voicing cost: 115
Best yet: 237
New solution
function cost: 126
child voicing cost: 109
Best yet: 235
New solution
function cost: 124
child voicing cost: 110
Best yet: 234
New solution
function cost: 124
child voicing cost: 108
Best yet: 232
New solution
function cost: 124
child voicing cost: 107
Best yet: 231
New solution
function cost: 124
child voicing cost: 105
Best yet: 229
New solution
function cost: 122
child voicing cost: 106
Best yet: 228
New solution
function cost: 122
child voicing cost: 102
Best yet: 224
New solution
function cost: 122
child voicing cost: 99
Best yet: 221
New solution
function cost: 122
child voicing cost: 98
Best yet: 220
New solution
function cost: 124
child voicing cost: 92
Best yet: 216
New solution
function cost: 124
child voicing cost: 90
Best yet: 214
New solution
function cost: 126
child voicing cost: 85
Best yet: 211
New solution
function cost: 126
child voicing cost: 83
Best yet: 209
New solution
function cost: 128
child voicing cost: 80
Best yet: 208
New solution
function cost: 128
child voicing cost: 78
Best yet: 206
New solution
function cost: 128
child voicing cost: 76
Best yet: 204
New solution
function cost: 128
child voicing cost: 75
Best yet: 203
New solution
function cost: 128
child voicing cost: 73
Best yet: 201

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "Ts", [(44, 1), (63, 5), (72, 3), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "D7-1"), (6, "Dm"), (6, "S65")  …  (10, "S/5"), (12, "D7-5"), (12, "S"), (12, "S6"), (14, "Ts"), (16, "D-5"), (16, "T"), (16, "T/3"), (16, "T/5"), (26, "T-5")]          
 [(0, "S/3"), (4, "T54"), (6, "T64"), (8, "S"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S65"), (10, "S65/6")  …  (14, "D"), (14, "Dm"), (14, "T-5"), (16, "D/3"), (16, "D7-5"), (18, "D64"), (18, "T/3"), (18, "Ts"), (20, "D-5"), (22, "Tm")]     
 [(2, "S"), (2, "S/3"), (2, "S/5"), (6, "D7-5"), (6, "S6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65")  …  (10, "T54"), (12, "D"), (12, "D/3"), (12, "D/5"), (12, "D7-1"), (12, "Tm"), (12, "Ts"), (14, "T"), (16, "Dm"), (24, "T-5")]           
 [(2, "S"), (2, "S/3"), (2, "S/5"), (6, "S6"), (8, "S65"), (10, "D7-5"), (12, "D64"), (12, "D7-1"), (12, "Dm"), (12, "T/3")  …  (14, "T"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (20, "D"), (20, "D/3"), (20, "D/5"), (20, "T-5"), (20, "Tm")]     
 [(2, "S65"), (4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T/3"), (6, "T/5")  …  (10, "Tm"), (12, "D/3"), (12, "D/5"), (12, "D7-5"), (12, "S6"), (12, "T"), (16, "D-5"), (16, "D7-1"), (18, "Dm"), (18, "T-5")]        
 [(8, "D-5"), (10, "D"), (10, "Tm"), (12, "D54"), (12, "D7-5"), (12, "T54"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/7")  …  (16, "T"), (16, "T/3"), (18, "D7-1"), (18, "S65"), (18, "S65/6"), (18, "Ts"), (20, "D/3"), (20, "S"), (24, "S6"), (26, "T-5")]
 [(2, "Tm"), (6, "D"), (6, "T/3"), (6, "T/5"), (6, "Ts"), (8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (12, "S"), (12, "T"), (16, "D/3"), (16, "D/5"), (16, "S6"), (18, "Dm"), (18, "S/3"), (18, "S/5"), (20, "D7-1"), (22, "T-5")]       
 [(2, "S6"), (6, "S"), (12, "Dm"), (12, "S65"), (14, "D7-1"), (14, "D7-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7")  …  (16, "T/5"), (16, "Tm"), (16, "Ts"), (18, "D-5"), (18, "T54"), (20, "D"), (22, "D/3"), (22, "D/5"), (22, "T"), (28, "T-5")]   
 [(4, "T"), (4, "T/3"), (4, "T/5"), (6, "Tm"), (6, "Ts"), (8, "T54"), (10, "D"), (10, "Dm"), (10, "S/3"), (10, "S/5")  …  (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65"), (14, "T-5"), (16, "D-5"), (16, "D7-1"), (16, "S"), (24, "S6")]        
 [(0, "T54"), (2, "S/3"), (2, "T64"), (4, "T"), (4, "T/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S65"), (6, "S65/6")  …  (12, "D7-5"), (12, "S"), (14, "D64"), (14, "T-5"), (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "D7-1"), (16, "S6"), (18, "Dm")]        
 [(4, "Dm"), (4, "S65"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-1"), (10, "S"), (10, "T"), (10, "T/3")  …  (12, "D/3"), (12, "D/5"), (12, "Ts"), (14, "S6"), (16, "S/3"), (16, "S/5"), (16, "T-5"), (16, "Tm"), (18, "D7-5"), (22, "D-5")]     
 [(4, "D"), (4, "D64"), (6, "D54"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D-5"), (12, "S65/6"), (14, "D/5"), (14, "S"), (14, "T"), (14, "T/5"), (18, "D7-1"), (18, "T54"), (20, "S/5"), (24, "T-5")]                                
 [(6, "D"), (6, "D64"), (6, "T/5"), (8, "D54"), (8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65/6"), (12, "S"), (12, "T"), (16, "D/5"), (16, "T54"), (18, "S/3"), (18, "T64"), (20, "D7-1")]                                          
 [(4, "D"), (4, "D/5"), (6, "D54"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (8, "T/3"), (8, "Ts"), (10, "D7-5"), (12, "D7-1"), (12, "S/5"), (12, "Tm"), (14, "S"), (14, "T"), (24, "T-5")]                                       
 [(4, "D"), (8, "D7")]                                                                                                                                                                                                                                             
 [(10, "T")]                                                                                                                                                                                                                                                       
 [(12, "T")]                                                                                                                                                                                                                                                       

Done. Total checked: 120651, Pruned: 152299, completed: 42, time: 2.4120001792907715, efficiency: 17.412934029030524
Results: bestval_func: 128, bestval_voices: 73
(15, 407, 407, 407)
[0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 0 1 0 1 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 1 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 0 0 1 2 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 2 0 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 1 0 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0]
Key Counter is [19 4 5 19 0 21 0 22 15 1 26 0]
Key Score is [68; 104; 32; 127; 39; 94; 85; 47; 126; 25; 113; 64]
Position Counter for 4 is [19 0 21 0 22 15 1 26 0 19 4 5]
Any[[4.0, 78.25, 0.0]]
[4, 78, 0]
1 C Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "Ts", [(44, 1), (63, 5), (72, 3), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 98
child voicing cost: 229
Best yet: 327
New solution
function cost: 98
child voicing cost: 215
Best yet: 313
New solution
function cost: 98
child voicing cost: 212
Best yet: 310
New solution
function cost: 98
child voicing cost: 204
Best yet: 302
New solution
function cost: 98
child voicing cost: 196
Best yet: 294
New solution
function cost: 98
child voicing cost: 193
Best yet: 291
New solution
function cost: 102
child voicing cost: 188
Best yet: 290
New solution
function cost: 98
child voicing cost: 187
Best yet: 285
New solution
function cost: 98
child voicing cost: 185
Best yet: 283
New solution
function cost: 100
child voicing cost: 179
Best yet: 279
New solution
function cost: 100
child voicing cost: 171
Best yet: 271
New solution
function cost: 104
child voicing cost: 164
Best yet: 268
New solution
function cost: 98
child voicing cost: 169
Best yet: 267
New solution
function cost: 98
child voicing cost: 168
Best yet: 266
New solution
function cost: 98
child voicing cost: 160
Best yet: 258
New solution
function cost: 90
child voicing cost: 166
Best yet: 256
New solution
function cost: 90
child voicing cost: 165
Best yet: 255
New solution
function cost: 92
child voicing cost: 162
Best yet: 254
New solution
function cost: 92
child voicing cost: 161
Best yet: 253
New solution
function cost: 92
child voicing cost: 160
Best yet: 252
New solution
function cost: 92
child voicing cost: 159
Best yet: 251
New solution
function cost: 100
child voicing cost: 147
Best yet: 247
New solution
function cost: 100
child voicing cost: 142
Best yet: 242
New solution
function cost: 100
child voicing cost: 141
Best yet: 241
New solution
function cost: 100
child voicing cost: 140
Best yet: 240
New solution
function cost: 100
child voicing cost: 138
Best yet: 238
New solution
function cost: 98
child voicing cost: 138
Best yet: 236
New solution
function cost: 98
child voicing cost: 133
Best yet: 231
New solution
function cost: 98
child voicing cost: 132
Best yet: 230
New solution
function cost: 98
child voicing cost: 131
Best yet: 229
New solution
function cost: 106
child voicing cost: 121
Best yet: 227
New solution
function cost: 106
child voicing cost: 120
Best yet: 226
New solution
function cost: 106
child voicing cost: 119
Best yet: 225
New solution
function cost: 106
child voicing cost: 117
Best yet: 223
New solution
function cost: 106
child voicing cost: 116
Best yet: 222
New solution
function cost: 106
child voicing cost: 115
Best yet: 221
New solution
function cost: 106
child voicing cost: 114
Best yet: 220
New solution
function cost: 106
child voicing cost: 113
Best yet: 219
New solution
function cost: 92
child voicing cost: 121
Best yet: 213
New solution
function cost: 92
child voicing cost: 120
Best yet: 212
Iterations done: 10000
Nodes in active set: 166
Lowest depth: 3 current depth: 7

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (8, "T", [(60, 1), (60, 1), (67, 5), (75, 3)])    
 (4, "Ts", [(56, 1), (63, 5), (68, 1), (72, 3)])   
 (4, "Tm", [(51, 1), (67, 3), (67, 3), (70, 5)])   
 (4, "D7/3", [(47, 3), (65, 7), (67, 1), (74, 5)]) 
 (12, "T", [(48, 1), (63, 3), (67, 5), (72, 1)])   
 (10, "D7-1", [(50, 5), (65, 7), (65, 7), (71, 3)])
 (12, "T", [(48, 1), (63, 3), (67, 5), (72, 1)])   
 (18, "T", [(48, 1), (60, 1), (67, 5), (75, 3)])   
 (4, "T", [(48, 1), (60, 1), (67, 5), (75, 3)])    
 (10, "Dm", [(46, 1), (62, 3), (70, 1), (77, 5)])  
 (6, "S/3", [(44, 3), (60, 5), (72, 5), (77, 1)])  
 (8, "Ts", [(44, 1), (60, 3), (72, 3), (75, 5)])   
 (6, "D", [(43, 1), (62, 5), (71, 3), (79, 1)])    
 ?                                                 
 (10, "D", [(43, 1), (55, 1), (59, 3), (62, 5)])   
 (6, "Ts", [(44, 1), (51, 5), (60, 3), (60, 3)])   
 (6, "S", [(41, 1), (53, 1), (56, 3), (60, 5)])    
 (4, "T/5", [(43, 5), (51, 3), (55, 5), (60, 1)])  
 (6, "S65", [(41, 1), (56, 3), (60, 5), (62, 6)])  
 (4, "S65", [(41, 1), (60, 5), (62, 6), (68, 3)])  
 (4, "D64", [(43, 1), (60, 4), (63, 6), (67, 1)])  
 (6, "D", [(43, 1), (59, 3), (62, 5), (67, 1)])    
 (4, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])    
 (4, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])    
 (10, "T", [(48, 1), (63, 3), (67, 5), (72, 1)])   
 (10, "T", [(48, 1), (63, 3), (67, 5), (72, 1)])   

Done. Total checked: 633735, Pruned: 705883, completed: 40, time: 11.962000131607056, efficiency: 3.3439223842096824
Results: bestval_func: 92, bestval_voices: 120
(16, 407, 407, 407)
Total time for optimisation of piece: 16.218000173568726
["T", "Ts", "Tm", "D7/3", "T", "D7-1", "T", "T", "T", "Dm", "S/3", "Ts", "D", "D7", "Ts", "Ts", "S", "S", "S/3", "S", "D", "Ts", "S", "T/5", "S65", "S65", "D64", "D", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-169.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-182.csv
[0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 0 0 2 0 0 0 0 0 0 1 1; 0 1 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 1 0 0 3 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 2 0 1 0 0 1; 0 0 1 0 0 0 0 0 1 0 1 1; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 1 0 0 0 1 0; 0 0 0 0 0 2 1 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 0 1 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 2 1 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 2 0 0 0 0 1 0 0 1; 0 0 0 1 0 0 0 0 1 0 2 0; 0 0 1 2 0 1 0 0 0 0 0 0]
Key Counter is [1 12 5 24 0 16 19 0 24 0 23 7]
Key Score is [29; 119; 43; 93; 86; 45; 125; 32; 100; 67; 69; 109]
Position Counter for 7 is [19

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (54, 3), (58, 5), (63, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (66, 3), (70, 5), (75, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (54, 3), (63, 1), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (58, 5), (66, 3), (75, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (58, 5), (63, 1), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (63, 1), (66, 3), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (51, 1), (58, 5), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                        
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D/3"), (8, "D/5"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]     
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "Dm"), (4, "S65"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7-1")  …  (10, "S"), (10, "S6"), (12, "D64"), (12, "T/3"), (12, "T/5"), (14, "D7-5"), (16, "Ts"), (18, "D-5"), (18, "T"), (24, "T-5")]          
 [(0, "Tm"), (4, "D"), (4, "D/3"), (4, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3")  …  (6, "Ts"), (8, "D7-1"), (8, "S65"), (8, "T54"), (10, "D-5"), (10, "S"), (10, "S/3"), (10, "S/5"), (14, "S6"), (14, "T-5")]               
 [(2, "D7-1"), (4, "S6"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Dm"), (8, "S"), (10, "D"), (10, "D/3"), (10, "Tm")  …  (14, "S65"), (14, "S65/6"), (16, "D7-5"), (18, "S/3"), (18, "T64"), (20, "D-5"), (20, "T"), (20, "T/3"), (22, "Ts"), (26, "T-5")]       
 [(6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D"), (12, "D64"), (12, "S65/6"), (12, "Ts"), (14, "D54"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "T64"), (18, "D-5"), (20, "T-5")]                 
 [(4, "T"), (8, "D7-1"), (10, "Dm"), (10, "S65/6"), (10, "T-5"), (12, "D/3"), (12, "S"), (12, "S/3"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T/3"), (14, "Ts"), (16, "D54"), (18, "D"), (20, "D7-5"), (24, "D-5")]               
 [(6, "D54"), (8, "D"), (8, "D/3"), (8, "D64"), (8, "S65/6"), (8, "T/3"), (8, "Ts"), (10, "T"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D-5"), (14, "D7-5"), (14, "S"), (14, "S/3"), (16, "Dm"), (16, "T-5"), (22, "D7-1")]                    
 [(4, "S"), (4, "S/3"), (8, "S6"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "Dm"), (10, "S65"), (10, "S65/6")  …  (14, "D"), (14, "D64"), (14, "T64"), (14, "Ts"), (16, "D/3"), (16, "D54"), (16, "D7-5"), (18, "T-5"), (18, "Tm"), (20, "D-5")]   
 [(6, "S6"), (10, "S"), (14, "D7-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "Dm"), (16, "S65"), (18, "D-5")  …  (20, "D/5"), (20, "S/3"), (20, "S/5"), (20, "T/3"), (20, "T/5"), (20, "Tm"), (24, "D7-1"), (24, "Ts"), (26, "T"), (32, "T-5")]
 [(2, "S"), (2, "S/3"), (2, "S/5"), (6, "S6"), (8, "S65"), (10, "D7-5"), (12, "D7"), (12, "D7-1"), (12, "D7/3"), (12, "D7/5")  …  (12, "T/5"), (12, "Ts"), (14, "D-5"), (14, "T54"), (16, "D"), (16, "D/3"), (16, "D/5"), (18, "T"), (20, "T-5"), (20, "Tm")]      
 [(0, "Dm"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (10, "D7-1"), (12, "D"), (12, "D/3"), (12, "D/5")  …  (12, "Tm"), (14, "S"), (14, "S6"), (14, "T"), (14, "T/3"), (14, "T/5"), (18, "D7-5"), (20, "T-5"), (20, "Ts"), (22, "D-5")]       
 [(8, "Dm"), (8, "S65/6"), (10, "D7-1"), (10, "S"), (10, "S/3"), (12, "D64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "T/3"), (12, "T64"), (14, "D54"), (16, "D"), (16, "Ts"), (18, "D/3"), (18, "D7-5"), (18, "T"), (22, "D-5"), (24, "T-5")]  
 [(2, "D7-5"), (6, "D-5"), (6, "S"), (8, "D"), (8, "D/3"), (8, "D64"), (10, "D54"), (10, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S/3"), (12, "S65"), (12, "T64"), (14, "T"), (14, "T/3"), (16, "D7-1"), (16, "Ts"), (24, "T-5")]       
 [(0, "T"), (0, "T/3"), (4, "T54"), (8, "D/3"), (10, "D64"), (10, "T-5"), (10, "Ts"), (12, "D54"), (12, "D7-1"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (20, "D-5")]                  
 [(4, "D/3"), (4, "T"), (4, "T/3"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (8, "D54"), (8, "D7-1"), (10, "D"), (10, "D64"), (10, "S/3"), (10, "T64"), (12, "S"), (14, "T-5"), (14, "Ts"), (16, "D7-5"), (20, "D-5")]                      

 0 24 0 23 7 1 12 5 24 0 16]
Any[[7.0, 85.75, 0.0]]
[7, 86, 0]
4 D# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (54, 3), (58, 5), (63, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (66, 3), (70, 5), (75, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (54, 3), (63, 1), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (58, 5), (66, 3), (75, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (58, 5), (63, 1), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (63, 1), (66, 3), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(51, 1), (51, 1), (58, 5), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 124
child voicing cost: 157
Best yet: 281
New solution
function cost: 124
child voicing cost: 156
Best yet: 280
New solution
function cost: 124
child voicing cost: 155
Best yet: 279
New solution
function cost: 124
child voicing cost: 153
Best yet: 277
New solution
function cost: 124
child voicing cost: 151
Best yet: 275
New solution
function cost: 124
child voicing cost: 150
Best yet: 274
New solution
function cost: 124
child voicing cost: 149
Best yet: 273
New solution
function cost: 124
child voicing cost: 148
Best yet: 272
New solution
function cost: 124
child voicing cost: 141
Best yet: 265
New solution
function cost: 102
child voicing cost: 161
Best yet: 263
New solution
function cost: 102
child voicing cost: 149
Best yet: 251
New solution
function cost: 102
child voicing cost: 148
Best yet: 250
New solution
function cost: 102
child voicing cost: 141
Best yet: 243
New solution
function cost: 94
child voicing cost: 143
Best yet: 237
New solution
function cost: 98
child voicing cost: 137
Best yet: 235
New solution
function cost: 94
child voicing cost: 139
Best yet: 233
New solution
function cost: 94
child voicing cost: 135
Best yet: 229
New solution
function cost: 94
child voicing cost: 129
Best yet: 223
New solution
function cost: 94
child voicing cost: 127
Best yet: 221
New solution
function cost: 94
child voicing cost: 126
Best yet: 220
New solution
function cost: 94
child voicing cost: 118
Best yet: 212
New solution
function cost: 94
child voicing cost: 115
Best yet: 209
New solution
function cost: 94
child voicing cost: 113
Best yet: 207
New solution
function cost: 94
child voicing cost: 111
Best yet: 205
New solution
function cost: 94
child voicing cost: 109
Best yet: 203
New solution
function cost: 94
child voicing cost: 107
Best yet: 201
New solution
function cost: 94
child voicing cost: 105
Best yet: 199
New solution
function cost: 98
child voicing cost: 97
Best yet: 195
New solution
function cost: 98
child voicing cost: 96
Best yet: 194
New solution
function cost: 88
child voicing cost: 105
Best yet: 193
New solution
function cost: 90
child voicing cost: 102
Best yet: 192
New solution
function cost: 88
child voicing cost: 102
Best yet: 190
New solution
function cost: 88
child voicing cost: 101
Best yet: 189
New solution
function cost: 88
child voicing cost: 99
Best yet: 187
New solution
function cost: 90
child voicing cost: 96
Best yet: 186
New solution
function cost: 88
child voicing cost: 97
Best yet: 185
New solution
function cost: 88
child voicing cost: 95
Best yet: 183
New solution
function cost: 90
child voicing cost: 92
Best yet: 182
New solution
function cost: 92
child voicing cost: 87
Best yet: 179
New solution
function cost: 98
child voicing cost: 77
Best yet: 175
New solution
function cost: 92
child voicing cost: 82
Best yet: 174
New solution
function cost: 88
child voicing cost: 85
Best yet: 173
New solution
function cost: 88
child voicing cost: 84
Best yet: 172
New solution
function cost: 88
child voicing cost: 82
Best yet: 170
New solution
function cost: 92
child voicing cost: 77
Best yet: 169
New solution
function cost: 92
child voicing cost: 76
Best yet: 168
New solution
function cost: 92
child voicing cost: 74
Best yet: 166

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (54, 3), (63, 1), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "D/3"), (4, "D/5"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65")  …  (10, "D"), (10, "Dm"), (10, "S/3"), (10, "S/5"), (12, "S"), (14, "T-5"), (14, "Ts"), (16, "D7-5"), (16, "S6"), (20, "D-5")]           
 [(8, "D/3"), (8, "T"), (8, "T/3"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S65"), (10, "S65/6"), (10, "Tm"), (12, "D54")  …  (14, "D64"), (14, "D7-1"), (14, "S/3"), (14, "T64"), (16, "S"), (18, "Dm"), (18, "T-5"), (18, "Ts"), (20, "D7-5"), (24, "D-5")]
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D64"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1")  …  (12, "S/3"), (12, "S/5"), (12, "Tm"), (14, "S"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "Ts"), (18, "S6"), (24, "T-5")]          
 [(2, "D"), (2, "Tm"), (4, "D7-5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D-5"), (10, "S65"), (12, "D/3")  …  (12, "T"), (12, "T/3"), (12, "T/5"), (14, "Dm"), (14, "Ts"), (16, "D7-1"), (18, "S/3"), (18, "S/5"), (20, "S6"), (22, "T-5")]       
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D64"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1")  …  (12, "S/3"), (12, "S/5"), (12, "Tm"), (14, "S"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "Ts"), (18, "S6"), (24, "T-5")]          
 [(8, "D/3"), (8, "T"), (8, "T/3"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S65"), (10, "S65/6"), (10, "Tm"), (12, "D54")  …  (14, "D64"), (14, "D7-1"), (14, "S/3"), (14, "T64"), (16, "S"), (18, "Dm"), (18, "T-5"), (18, "Ts"), (20, "D7-5"), (24, "D-5")]
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D/3"), (8, "D/5"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]     
 [(0, "D7-1"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Dm"), (10, "S65"), (12, "D54"), (12, "S6"), (14, "D")  …  (14, "S/5"), (16, "S"), (18, "Tm"), (20, "D7-5"), (20, "T"), (20, "T/3"), (20, "T/5"), (22, "Ts"), (24, "D-5"), (26, "T-5")]  
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S65"), (4, "T/3"), (4, "T/5"), (6, "S"), (6, "S/3"), (6, "S/5")  …  (8, "Ts"), (10, "D/3"), (10, "D/5"), (10, "D7-5"), (10, "T"), (14, "D-5"), (14, "D7-1"), (14, "S6"), (16, "Dm"), (20, "T-5")]         
 [(2, "D7-1"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S65"), (6, "S65/6"), (8, "D54"), (8, "S6"), (8, "T54"), (10, "D")  …  (10, "T/3"), (10, "T64"), (12, "S"), (14, "Dm"), (14, "Tm"), (14, "Ts"), (16, "D7-5"), (16, "T"), (20, "D-5"), (22, "T-5")]         
 [(0, "Dm"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (10, "D7-1"), (12, "D"), (12, "D/3"), (12, "D/5")  …  (12, "Tm"), (14, "S"), (14, "S6"), (14, "T"), (14, "T/3"), (14, "T/5"), (18, "D7-5"), (20, "T-5"), (20, "Ts"), (22, "D-5")]       
 [(6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-1"), (10, "T"), (10, "T/5"), (12, "D"), (12, "D64"), (12, "S65/6"), (14, "D54"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "T64"), (18, "S6")]                                           
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (8, "S"), (10, "D"), (10, "D64"), (10, "S/5"), (10, "T/5"), (12, "D/3"), (12, "D54"), (12, "D7-5"), (12, "T54"), (14, "Ts"), (16, "D7-1"), (16, "T")]                                            
 [(2, "D64"), (2, "T/5"), (4, "D54"), (6, "D"), (6, "S65/6"), (8, "D7-5"), (8, "S"), (8, "S/5"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "T54"), (14, "T64"), (16, "D/5"), (18, "T-5"), (20, "D7-1")]                                 
 [(6, "D7"), (10, "D")]                                                                                                                                                                                                                                            
 [(6, "T")]                                                                                                                                                                                                                                                        
 [(14, "T")]                                                                                                                                                                                                                                                       

Done. Total checked: 240951, Pruned: 288357, completed: 47, time: 5.073999881744385, efficiency: 9.26290916345901
Results: bestval_func: 92, bestval_voices: 74
(15, 364, 364, 364)
[0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 0 0 2 0 0 0 0 0 0 1 1; 0 1 0 1 0 0 0 0 2 0 0 0; 0 0 0 0 0 1 0 0 3 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 2 0 1 0 0 1; 0 0 1 0 0 0 0 0 1 0 1 1; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 1 0 0 0 1 0; 0 0 0 0 0 2 1 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 0 1 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 2 1 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 2 0 0 0 0 1 0 0 1; 0 0 0 1 0 0 0 0 1 0 2 0; 0 0 1 2 0 1 0 0 0 0 0 0]
Key Counter is [1 12 5 24 0 16 19 0 24 0 23 7]
Key Score is [29; 119; 43; 93; 86; 45; 125; 32; 100; 67; 69; 109]
Position Counter for 7 is [19 0 24 0 23 7 1 12 5 24 0 16]
Any[[7.0, 85.75, 0.0]]
[7, 86, 0]
4 D# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (54, 3), (63, 1), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 112
child voicing cost: 215
Best yet: 327
New solution
function cost: 112
child voicing cost: 212
Best yet: 324
New solution
function cost: 116
child voicing cost: 205
Best yet: 321
New solution
function cost: 116
child voicing cost: 203
Best yet: 319
New solution
function cost: 116
child voicing cost: 200
Best yet: 316
New solution
function cost: 116
child voicing cost: 198
Best yet: 314
New solution
function cost: 116
child voicing cost: 189
Best yet: 305
New solution
function cost: 116
child voicing cost: 184
Best yet: 300
New solution
function cost: 114
child voicing cost: 185
Best yet: 299
New solution
function cost: 116
child voicing cost: 180
Best yet: 296
New solution
function cost: 116
child voicing cost: 171
Best yet: 287
New solution
function cost: 116
child voicing cost: 166
Best yet: 282
New solution
function cost: 108
child voicing cost: 168
Best yet: 276
New solution
function cost: 108
child voicing cost: 165
Best yet: 273
New solution
function cost: 112
child voicing cost: 158
Best yet: 270
New solution
function cost: 112
child voicing cost: 155
Best yet: 267
New solution
function cost: 112
child voicing cost: 152
Best yet: 264
New solution
function cost: 106
child voicing cost: 144
Best yet: 250
New solution
function cost: 106
child voicing cost: 141
Best yet: 247
New solution
function cost: 106
child voicing cost: 139
Best yet: 245
New solution
function cost: 106
child voicing cost: 136
Best yet: 242
New solution
function cost: 108
child voicing cost: 133
Best yet: 241
New solution
function cost: 108
child voicing cost: 128
Best yet: 236
New solution
function cost: 104
child voicing cost: 131
Best yet: 235
New solution
function cost: 104
child voicing cost: 130
Best yet: 234
New solution
function cost: 104
child voicing cost: 128
Best yet: 232
New solution
function cost: 104
child voicing cost: 125
Best yet: 229
New solution
function cost: 104
child voicing cost: 121
Best yet: 225
New solution
function cost: 104
child voicing cost: 118
Best yet: 222
New solution
function cost: 106
child voicing cost: 113
Best yet: 219
New solution
function cost: 106
child voicing cost: 110
Best yet: 216
New solution
function cost: 104
child voicing cost: 110
Best yet: 214
New solution
function cost: 104
child voicing cost: 106
Best yet: 210
New solution
function cost: 104
child voicing cost: 103
Best yet: 207
New solution
function cost: 106
child voicing cost: 98
Best yet: 204
New solution
function cost: 106
child voicing cost: 95
Best yet: 201
New solution
function cost: 94
child voicing cost: 105
Best yet: 199
New solution
function cost: 94
child voicing cost: 101
Best yet: 195
New solution
function cost: 94
child voicing cost: 98
Best yet: 192
New solution
function cost: 94
child voicing cost: 95
Best yet: 189
New solution
function cost: 94
child voicing cost: 92
Best yet: 

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(51, 1), (51, 1), (58, 5), (66, 3)])    
 (0, "T", [(51, 1), (51, 1), (58, 5), (66, 3)])    
 (4, "Dm", [(49, 1), (53, 3), (61, 1), (68, 5)])   
 (6, "Ts", [(47, 1), (54, 5), (63, 3), (71, 1)])   
 (8, "S", [(44, 1), (56, 1), (63, 5), (71, 3)])    
 (6, "D/3", [(50, 3), (53, 5), (65, 5), (70, 1)])  
 (4, "T", [(51, 1), (54, 3), (63, 1), (70, 5)])    
 (10, "T", [(51, 1), (54, 3), (63, 1), (70, 5)])   
 (4, "S", [(44, 1), (56, 1), (63, 5), (71, 3)])    
 (10, "S", [(44, 1), (59, 3), (68, 1), (75, 5)])   
 (6, "S6", [(44, 1), (56, 1), (65, 6), (71, 3)])   
 (12, "D", [(46, 1), (53, 5), (62, 3), (70, 1)])   
 (10, "S/3", [(47, 3), (51, 5), (63, 5), (68, 1)]) 
 ?                                                 
 (8, "D/3", [(50, 3), (53, 5), (65, 5), (70, 1)])  
 (0, "T", [(51, 1), (58, 5), (63, 1), (66, 3)])    
 (0, "D7-1", [(53, 5), (56, 7), (62, 3), (65, 5)]) 
 (4, "T/3", [(54, 3), (58, 5), (63, 1), (63, 1)])  
 (6, "S65/6", [(53, 6), (59, 3), (63, 5), (68, 1)])
 (10, "D7-1", [(53, 5), (56, 7), (65, 5), (74, 3)])
 (10, "T", [(51, 1), (58, 5), (66, 3), (75, 1)])   
 (8, "S", [(56, 1), (59, 3), (68, 1), (75, 5)])    
 (2, "D64", [(58, 1), (58, 1), (66, 6), (75, 4)])  
 (10, "D", [(58, 1), (58, 1), (65, 5), (74, 3)])   
 (6, "T", [(51, 1), (58, 5), (66, 3), (75, 1)])    
 (6, "T", [(51, 1), (58, 5), (66, 3), (75, 1)])    

10-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (52, 3), (55, 5), (60, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (64, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (52, 3), (60, 1), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (64, 3), (72, 1), (79, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (55, 5), (64, 3), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (67, 5), (72, 1), (76, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (60, 1), (64, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (48, 1), (55, 5), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(10, "T")]                                                                                                                                                                                                                                                          
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D/3"), (8, "D/5"), (8, "T54")  …  (16, "D7-1"), (16, "D7-5"), (16, "S/3"), (16, "S/5"), (16, "S65"), (16, "S65/6"), (16, "Ss"), (16, "T-5"), (16, "T64"), (20, "D-5")]     
 [(0, "S"), (0, "S/3"), (0, "S/5"), (0, "S6"), (0, "Ss"), (4, "D7-1"), (6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7-5")  …  (10, "T/3"), (10, "T/5"), (10, "T64"), (10, "Ts"), (12, "D"), (12, "D-5"), (12, "D/3"), (12, "D/5"), (12, "T"), (18, "T-5")]              
 [(8, "Ts"), (10, "S/3"), (10, "S/5"), (10, "T64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S6")  …  (14, "D/5"), (14, "D7-5"), (14, "S65"), (14, "S65/6"), (14, "Ss"), (14, "T-5"), (14, "T54"), (18, "D-5"), (18, "D7-1"), (20, "D")]
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/7")  …  (12, "T54"), (14, "D"), (14, "D/3"), (14, "T"), (14, "T/3"), (16, "T-5"), (16, "Tm"), (20, "D64"), (20, "D7-5"), (24, "D-5")]       
 [(2, "D"), (2, "D/3"), (4, "D54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D64"), (8, "D7-5"), (10, "D7-1")  …  (12, "D-5"), (12, "Tm"), (14, "S"), (14, "T"), (14, "T/3"), (16, "S65"), (16, "Ts"), (20, "S/3"), (20, "T64"), (24, "T-5")]           
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "Ss"), (18, "D-5")]          
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65/6"), (10, "D64"), (10, "D7-5"), (10, "T/3"), (10, "T54"), (10, "Tm"), (10, "Ts")  …  (12, "T"), (14, "D-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D54"), (18, "T-5"), (20, "D"), (20, "D/3")]      
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65"), (6, "S65/6"), (10, "D64"), (10, "D7-5"), (10, "Ss"), (10, "T/3"), (10, "T54")  …  (12, "D7-1"), (12, "T"), (14, "D-5"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (18, "D54"), (18, "T-5"), (20, "D"), (20, "D/3")]      
 [(6, "D"), (6, "D/3"), (6, "D/5"), (8, "S65"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D7-5")  …  (14, "S"), (14, "S6"), (14, "Ss"), (16, "D-5"), (16, "T54"), (16, "Tm"), (18, "T"), (18, "T/3"), (18, "T/5"), (20, "T-5")]       
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S6"), (8, "T"), (8, "T/3"), (8, "T/5"), (8, "Tm")  …  (12, "Ts"), (14, "D-5"), (14, "S/3"), (14, "S/5"), (14, "S65"), (14, "S65/6"), (14, "Ss"), (16, "D"), (18, "D7-1"), (18, "T-5")]             
 [(8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "S65"), (10, "S65/6"), (10, "T/3")  …  (14, "T64"), (16, "S6"), (16, "Ss"), (16, "Ts"), (18, "D-5"), (18, "D7-5"), (20, "S"), (20, "S/3"), (20, "S/5"), (22, "T-5")]       
 [(8, "D7"), (8, "D7-1"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "S65/6"), (12, "D"), (12, "D/3"), (12, "S6"), (12, "T"), (14, "Tm"), (16, "S"), (16, "S/3"), (16, "Ts"), (18, "D64"), (18, "D7-5"), (18, "T/3"), (22, "D-5"), (22, "T-5")]         
 [(8, "D7"), (8, "D7-1"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "S65/6"), (12, "D"), (12, "D/3"), (12, "S6"), (12, "T"), (14, "Tm"), (16, "S"), (16, "S/3"), (16, "Ts"), (18, "D64"), (18, "D7-5"), (18, "T/3"), (22, "D-5"), (22, "T-5")]         
 [(4, "D"), (4, "D/3"), (6, "D54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ss"), (10, "D-5"), (10, "D7-5")  …  (12, "S"), (14, "D64"), (14, "S65/6"), (14, "Tm"), (16, "T"), (16, "T/3"), (18, "S/3"), (18, "T64"), (20, "Ts"), (26, "T-5")]          
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "T"), (8, "D54"), (8, "D7-5"), (10, "D"), (10, "Ss"), (12, "D-5"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/3"), (16, "T-5"), (18, "D7-1")]                        

186
Done. Total checked: 171840, Pruned: 195529, completed: 41, time: 3.5840001106262207, efficiency: 11.439731789750477
Results: bestval_func: 94, bestval_voices: 92
(16, 364, 364, 364)
Total time for optimisation of piece: 10.306999921798706
["T", "T", "Dm", "Ts", "S", "D/3", "T", "T", "S", "S", "S6", "D", "S/3", "D", "T", "T", "D/3", "D", "D-5", "D", "D/3", "T", "D7-1", "T/3", "S65/6", "D7-1", "T", "S", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-182.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-195.csv
[1 0 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 1 0 0 0 0 0 0 1 0 2 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 0 0 2; 1 0 0 0 2 0 0 0 0 0 0 1; 0 0 0 0 1 1 0 0 0 1 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0]
Key Counter is [20 3 21 0 16 16 5 21 0 20 4 5]
Key Score is [119; 48; 91; 82; 49; 118; 33; 108; 64; 70; 102; 33]
Position Counter for 1 is [20 3 21 0 16 16 5 21 0 20 4 5]
Any[[1.0, 73.75, 1.0]]
[1, 74, 1]
1 C Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

10-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (52, 3), (55, 5), (60, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (64, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (52, 3), (60, 1), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (64, 3), (72, 1), (79, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (55, 5), (64, 3), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (67, 5), (72, 1), (76, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (60, 1), (64, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (48, 1), (55, 5), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 102
child voicing cost: 178
Best yet: 280
New solution
function cost: 102
child voicing cost: 177
Best yet: 279
New solution
function cost: 102
child voicing cost: 175
Best yet: 277
New solution
function cost: 102
child voicing cost: 173
Best yet: 275
New solution
function cost: 102
child voicing cost: 166
Best yet: 268
New solution
function cost: 102
child voicing cost: 165
Best yet: 267
New solution
function cost: 102
child voicing cost: 162
Best yet: 264
New solution
function cost: 102
child voicing cost: 160
Best yet: 262
New solution
function cost: 102
child voicing cost: 159
Best yet: 261
New solution
function cost: 106
child voicing cost: 151
Best yet: 257
New solution
function cost: 102
child voicing cost: 154
Best yet: 256
New solution
function cost: 102
child voicing cost: 153
Best yet: 255
New solution
function cost: 102
child voicing cost: 151
Best yet: 253
New solution
function cost: 102
child voicing cost: 150
Best yet: 252
New solution
function cost: 102
child voicing cost: 149
Best yet: 251
New solution
function cost: 102
child voicing cost: 147
Best yet: 249
New solution
function cost: 102
child voicing cost: 145
Best yet: 247
New solution
function cost: 102
child voicing cost: 143
Best yet: 245
New solution
function cost: 102
child voicing cost: 141
Best yet: 243
New solution
function cost: 102
child voicing cost: 135
Best yet: 237
New solution
function cost: 102
child voicing cost: 133
Best yet: 235
New solution
function cost: 102
child voicing cost: 131
Best yet: 233
New solution
function cost: 98
child voicing cost: 131
Best yet: 229
New solution
function cost: 94
child voicing cost: 134
Best yet: 228
New solution
function cost: 94
child voicing cost: 132
Best yet: 226
New solution
function cost: 96
child voicing cost: 126
Best yet: 222
New solution
function cost: 94
child voicing cost: 127
Best yet: 221
New solution
function cost: 94
child voicing cost: 126
Best yet: 220
New solution
function cost: 94
child voicing cost: 124
Best yet: 218
New solution
function cost: 94
child voicing cost: 123
Best yet: 217
New solution
function cost: 94
child voicing cost: 122
Best yet: 216
New solution
function cost: 94
child voicing cost: 120
Best yet: 214
New solution
function cost: 94
child voicing cost: 119
Best yet: 213
New solution
function cost: 94
child voicing cost: 118
Best yet: 212
New solution
function cost: 98
child voicing cost: 113
Best yet: 211
New solution
function cost: 98
child voicing cost: 112
Best yet: 210
New solution
function cost: 98
child voicing cost: 110
Best yet: 208
New solution
function cost: 102
child voicing cost: 105
Best yet: 207
New solution
function cost: 102
child voicing cost: 103
Best yet: 205
New solution
function cost: 102
child voicing cost: 102
Best yet: 204
New solution
function cost: 102
child voicing cost: 100
Best yet: 202
New solution
function cost: 102
child voicing cost: 98
Best yet: 200
New solution
function cost: 102
child voicing cost: 97
Best yet: 199
New solution
function cost: 102
child voicing cost: 95
Best yet: 197
New solution
function cost: 102
child voicing cost: 94
Best yet: 196
New solution
function cost: 98
child voicing cost: 97
Best yet: 195
New solution
function cost: 98
child voicing cost: 96
Best yet: 194
New solution
function cost: 98
child voicing cost: 94
Best yet: 192
New solution
function cost: 106
child voicing cost: 84
Best yet: 190
New solution
function cost: 106
child voicing cost: 83
Best yet: 189
New solution
function cost: 106
child voicing cost: 82
Best yet: 188
New solution
function cost: 106
child voicing cost: 80
Best yet: 186
New solution
function cost: 98
child voicing cost: 87
Best yet: 185
New solution
function cost: 98
child voicing cost: 86
Best yet: 184
New solution
function cost: 98
child voicing cost: 85
Best yet: 183
New solution
function cost: 98
child voicing cost: 84
Best yet: 182
New solution
function cost: 98
child voicing cost: 82
Best yet: 180
New solution
function cost: 98
child voicing cost: 80
Best yet: 178
New solution
function cost: 98
child voicing cost: 79
Best yet: 177
New solution
function cost: 98
child voicing cost: 77
Best yet: 175
New solution
function cost: 98
child voicing cost: 76
Best yet: 174
New solution
function cost: 100
child voicing cost: 71
Best yet: 171
New solution
function cost: 98
child voicing cost: 70
Best yet: 168
New solution
function cost: 98
child voicing cost: 68
Best yet: 166

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "D", [(43, 1), (59, 3), (67, 1), (74, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "T"), (6, "Tm"), (8, "D7-5"), (8, "T54")  …  (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/3"), (16, "D/5"), (16, "T-5"), (18, "D7-1")]       
 [(6, "D"), (6, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "D54"), (10, "D7-1"), (10, "S")  …  (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "T"), (16, "D64"), (16, "T/3"), (16, "T64"), (18, "Ts"), (24, "T-5")]         
 [(8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "S65"), (10, "S65/6"), (10, "T/3")  …  (14, "T64"), (16, "S6"), (16, "Ss"), (16, "Ts"), (18, "D-5"), (18, "D7-5"), (20, "S"), (20, "S/3"), (20, "S/5"), (22, "T-5")]      
 [(6, "Ts"), (10, "D-5"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D64"), (14, "D7-5"), (14, "S65"), (14, "S65/6"), (14, "T/3")  …  (16, "S6"), (16, "T"), (16, "Tm"), (18, "Ss"), (18, "T-5"), (20, "D7"), (20, "D7/3"), (20, "D7/5"), (20, "D7/7"), (24, "D7-1")]
 [(0, "T54"), (2, "T"), (2, "T/3"), (2, "T/5"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "S65")  …  (12, "D/3"), (12, "D/5"), (12, "D7-5"), (12, "Ss"), (12, "T-5"), (12, "Tm"), (12, "Ts"), (14, "S6"), (16, "D-5"), (16, "D7-1")]         
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (6, "D/3"), (6, "Tm"), (8, "D"), (8, "D7-1"), (8, "S6"), (8, "Ss"), (8, "T")  …  (10, "Ts"), (12, "S"), (12, "S/3"), (14, "D64"), (14, "D7-5"), (14, "S65"), (14, "S65/6"), (18, "D-5"), (18, "T-5"), (18, "T64")]            
 [(0, "Ts"), (2, "T64"), (4, "T"), (6, "S65"), (6, "S65/6"), (6, "T-5"), (6, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (14, "D64"), (14, "T/3"), (14, "T/5"), (16, "D"), (16, "D7-1"), (16, "S6"), (16, "Ss"), (16, "Tm"), (18, "D7-5"), (22, "D-5")]       
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "S/5"), (10, "D7"), (10, "D7/3"), (10, "D7/5")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "T-5"), (16, "Tm"), (20, "D7-5"), (24, "D-5")]      
 [(4, "T"), (6, "T54"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "Ts"), (10, "T-5"), (10, "T64"), (12, "D7")  …  (14, "D/5"), (14, "D64"), (14, "S65"), (14, "S65/6"), (14, "T/3"), (14, "T/5"), (14, "Tm"), (16, "D"), (18, "D7-5"), (22, "D-5")]         
 [(4, "D64"), (4, "T/3"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S"), (6, "S/3"), (8, "D54"), (8, "D7-5")  …  (10, "D"), (10, "S6"), (10, "Ss"), (10, "T"), (12, "D-5"), (12, "D/3"), (12, "T64"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]              
 [(0, "T/3"), (0, "T/5"), (4, "T54"), (6, "D"), (6, "T"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D/3"), (16, "D/5"), (16, "Ss"), (16, "T-5"), (16, "Ts"), (18, "S6"), (20, "D7-1")]         
 [(4, "D64"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/5"), (8, "D54"), (8, "D7-5"), (8, "S65/6"), (10, "D"), (10, "Ss"), (10, "T"), (12, "D/3"), (12, "T64"), (14, "D7-1")]                                                   
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/5"), (6, "S/5"), (8, "D"), (8, "S"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "D7-5"), (10, "S65/6"), (12, "S6"), (14, "D7-1"), (14, "T-5")]                                                 
 [(10, "D/5"), (10, "S/5"), (10, "T64"), (12, "D"), (12, "T"), (12, "T/5"), (14, "D54"), (14, "D7-1"), (14, "S65/6"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D-5"), (18, "D64"), (18, "D7-5"), (18, "Tm"), (20, "S")]                           
 [(12, "D7"), (16, "D")]                                                                                                                                                                                                                                             
 [(12, "T")]                                                                                                                                                                                                                                                         
 [(12, "T")]                                                                                                                                                                                                                                                         

Done. Total checked: 150668, Pruned: 174761, completed: 64, time: 2.747999906539917, efficiency: 23.289666003149243
Results: bestval_func: 98, bestval_voices: 68
(15, 412, 412, 412)
[1 0 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 1 0 0 0 0 0 0 1 0 2 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 0 0 2; 1 0 0 0 2 0 0 0 0 0 0 1; 0 0 0 0 1 1 0 0 0 1 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0]
Key Counter is [20 3 21 0 16 16 5 21 0 20 4 5]
Key Score is [119; 48; 91; 82; 49; 118; 33; 108; 64; 70; 102; 33]
Position Counter for 1 is [20 3 21 0 16 16 5 21 0 20 4 5]
Any[[1.0, 73.75, 1.0]]
[1, 74, 1]
1 C Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "D", [(43, 1), (59, 3), (67, 1), (74, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 104
child voicing cost: 208
Best yet: 312
New solution
function cost: 104
child voicing cost: 194
Best yet: 298
New solution
function cost: 104
child voicing cost: 191
Best yet: 295
New solution
function cost: 104
child voicing cost: 190
Best yet: 294
New solution
function cost: 104
child voicing cost: 189
Best yet: 293
New solution
function cost: 104
child voicing cost: 187
Best yet: 291
New solution
function cost: 104
child voicing cost: 173
Best yet: 277
New solution
function cost: 104
child voicing cost: 165
Best yet: 269
New solution
function cost: 104
child voicing cost: 160
Best yet: 264
New solution
function cost: 104
child voicing cost: 159
Best yet: 263
New solution
function cost: 104
child voicing cost: 158
Best yet: 262
New solution
function cost: 104
child voicing cost: 157
Best yet: 261
New solution
function cost: 106
child voicing cost: 154
Best yet: 260
New solution
function cost: 104
child voicing cost: 154
Best yet: 258
New solution
function cost: 104
child voicing cost: 152
Best yet: 256
New solution
function cost: 104
child voicing cost: 146
Best yet: 250
New solution
function cost: 104
child voicing cost: 145
Best yet: 249
New solution
function cost: 104
child voicing cost: 143
Best yet: 247
New solution
function cost: 104
child voicing cost: 141
Best yet: 245
New solution
function cost: 110
child voicing cost: 134
Best yet: 244
New solution
function cost: 110
child voicing cost: 132
Best yet: 242
New solution
function cost: 110
child voicing cost: 131
Best yet: 241
New solution
function cost: 110
child voicing cost: 129
Best yet: 239
New solution
function cost: 106
child voicing cost: 132
Best yet: 238
New solution
function cost: 108
child voicing cost: 128
Best yet: 236
New solution
function cost: 112
child voicing cost: 119
Best yet: 231
New solution
function cost: 108
child voicing cost: 121
Best yet: 229
New solution
function cost: 108
child voicing cost: 120
Best yet: 228
New solution
function cost: 108
child voicing cost: 118
Best yet: 226
New solution
function cost: 108
child voicing cost: 116
Best yet: 224
New solution
function cost: 112
child voicing cost: 107
Best yet: 219
New solution
function cost: 108
child voicing cost: 109
Best yet: 217
New solution
function cost: 108
child voicing cost: 108
Best yet: 216
New solution
function cost: 108
child voicing cost: 106
Best yet: 214
New solution
function cost: 108
child voicing cost: 105
Best yet: 213
New solution
function cost: 112
child voicing cost: 100
Best yet: 212
New solution
function cost: 108
child voicing cost: 102
Best yet: 210
New solution
function cost: 108
child voicing cost: 101
Best yet: 209
New solution
function cost: 108
child voicing cost: 99
Best yet: 207
New solution
function cost: 106
child voicing cost: 100
Best yet: 206
New solution
function cost: 108
child voicing cost: 96
Best yet: 204
New solution
function cost: 112
child voicing cost: 87
Best yet: 199
New solution
function cost: 108
child voicing cost: 89
Best yet: 197
New solution
function cost: 108
child voicing cost: 88
Best yet: 196
New solution
function cost: 108
child voicing cost: 86
Best yet: 194
Iterations done: 10000
Nodes in active set: 74
Lowest depth: 2 current depth: 6

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (10, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])  
 (6, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (0, "Ss", [(50, 1), (57, 5), (65, 3), (74, 1)])  
 (12, "D7", [(55, 1), (59, 3), (65, 7), (74, 5)]) 
 (10, "Ts", [(57, 1), (60, 3), (64, 5), (69, 1)]) 
 (2, "D/3", [(59, 3), (62, 5), (62, 5), (67, 1)]) 
 (0, "T", [(60, 1), (60, 1), (64, 3), (67, 5)])   
 (12, "T", [(60, 1), (60, 1), (64, 3), (67, 5)])  
 (0, "S/3", [(57, 3), (60, 5), (65, 1), (65, 1)]) 
 (6, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])   
 (8, "T/5", [(55, 5), (60, 1), (64, 3), (67, 5)]) 
 (8, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])   
 (8, "D7-1", [(50, 5), (62, 5), (65, 7), (71, 3)])
 ?                                                
 (6, "D/3", [(47, 3), (62, 5), (67, 1), (74, 5)]) 
 (4, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (0, "Ss", [(50, 1), (57, 5), (65, 3), (77, 3)])  
 (4, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (10, "Ss", [(50, 1), (57, 5), (65, 3), (74, 1)]) 
 (0, "T/3", [(52, 3), (55, 5), (67, 5), (72, 1)]) 
 (6, "S", [(53, 1), (60, 5), (65, 1), (69, 3)])   
 (8, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])   
 (12, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])  
 (12, "D7", [(55, 1), (59, 3), (62, 5), (65, 7)]) 
 (12, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])  
 (12, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])  

9-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(45, 1), (60, 3), (64, 5), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(57, 1), (60, 3), (64, 5), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(57, 1), (60, 3), (69, 1), (76, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(45, 1), (52, 5), (60, 3), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(45, 1), (64, 5), (69, 1), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(57, 1), (64, 5), (69, 1), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(57, 1), (57, 1), (60, 3), (64, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(45, 1), (57, 1), (64, 5), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(57, 1), (57, 1), (64, 5), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "T")]                                                                                                                                                                                                                                                       
 [(2, "Tm"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "T")  …  (8, "D7-1"), (8, "Dm"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "S65"), (8, "T64"), (8, "Ts"), (12, "S6"), (16, "T-5")]                  
 [(0, "S"), (0, "S/3"), (0, "S/5"), (0, "S6"), (0, "S65"), (0, "T64"), (0, "Ts"), (2, "D"), (2, "D-5"), (2, "D/3")  …  (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (2, "T"), (2, "T/3"), (2, "T/5"), (2, "Tm"), (4, "Dm"), (6, "D7-1"), (8, "T-5")]                    
 [(2, "T"), (2, "T/3"), (2, "T/5"), (4, "D54"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S")  …  (4, "Ts"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "Tm"), (8, "D-5"), (8, "D7-1"), (8, "S6"), (12, "Dm"), (12, "T-5")]                  
 [(8, "S6"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "Dm"), (10, "Tm"), (12, "D7-1"), (12, "D7-5"), (12, "S"), (14, "D")  …  (16, "D/3"), (16, "D54"), (16, "T54"), (18, "S65"), (18, "S65/6"), (20, "T"), (22, "S/3"), (22, "T64"), (22, "Ts"), (26, "T-5")]
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S/3"), (6, "T64"), (8, "T"), (8, "T/3"), (10, "D"), (10, "D/3"), (10, "D64"), (10, "D7-1"), (10, "S65/6"), (10, "Ts"), (12, "D54"), (12, "D7-5"), (12, "S"), (16, "D-5"), (18, "T-5")]                   
 [(0, "S/3"), (0, "T64"), (4, "S65"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "S"), (12, "D"), (12, "D/3"), (12, "Dm"), (12, "T-5"), (14, "D7-5"), (16, "D64"), (16, "T/3"), (18, "D-5"), (18, "D7-1")]          
 [(2, "Ts"), (4, "T"), (6, "S65"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "T-5"), (12, "S"), (12, "S/3"), (14, "D64"), (14, "D7-1"), (14, "T/3"), (14, "Tm"), (16, "D54"), (16, "D7-5"), (18, "D"), (18, "D/3"), (20, "D-5")]                 
 [(4, "T64"), (6, "D54"), (6, "T54"), (8, "D"), (8, "D/3"), (8, "D64"), (8, "S65"), (8, "S65/6"), (8, "T/3"), (8, "Ts")  …  (12, "D7/7"), (12, "Tm"), (14, "D-5"), (14, "D7-5"), (14, "S"), (14, "S/3"), (16, "D7-1"), (16, "Dm"), (16, "T-5"), (18, "S6")]       
 [(2, "S/3"), (2, "S/5"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65")  …  (10, "D/5"), (10, "D7-1"), (12, "D7-5"), (12, "S"), (14, "T-5"), (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "S6"), (18, "Dm")]        
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S/3"), (8, "S/5"), (8, "S65"), (8, "T64"), (10, "D7-1"), (10, "S")  …  (10, "T/5"), (12, "D"), (12, "Dm"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (16, "T-5"), (16, "Tm"), (18, "D7-5"), (22, "D-5")]     
 [(4, "S"), (4, "S/3"), (4, "S/5"), (8, "S6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Dm"), (10, "S65")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "T/3"), (14, "T/5"), (14, "Ts"), (16, "D7-5"), (18, "T-5"), (18, "Tm"), (20, "D-5")]   
 [(4, "Ts"), (6, "T"), (8, "D64"), (8, "T/3"), (8, "T64"), (10, "D/3"), (10, "D54"), (12, "Dm"), (12, "S65/6"), (12, "T-5"), (14, "D7-1"), (14, "S"), (14, "S/3"), (16, "D"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D7-5"), (22, "D-5")]    
 [(6, "T"), (6, "T/3"), (6, "T54"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Tm"), (8, "Ts"), (10, "D/3"), (10, "D54"), (12, "D7-1"), (12, "S65/6"), (14, "D7-5"), (14, "S"), (14, "S/3"), (16, "D"), (16, "T-5"), (18, "D-5")]         
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S/3"), (6, "T64"), (8, "T"), (8, "T/3"), (10, "D"), (10, "D/3"), (10, "D64"), (10, "D7-1"), (10, "S65/6"), (10, "Ts"), (12, "D54"), (12, "D7-5"), (12, "S"), (16, "D-5"), (18, "T-5")]                   
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65/6"), (8, "D7-5"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (10, "T64"), (10, "Ts"), (12, "D-5"), (12, "D54"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "Tm"), (16, "T"), (22, "T-5")]  

Done. Total checked: 1162597, Pruned: 1263080, completed: 45, time: 21.118000030517578, efficiency: 2.130883603322786
Results: bestval_func: 108, bestval_voices: 86
(16, 412, 412, 412)
Total time for optimisation of piece: 26.027000188827515
["T", "T", "Ss", "D7", "Ts", "D/3", "T", "T", "S/3", "D", "T/5", "D", "D7-1", "T", "D", "D", "D/3", "D", "Ts", "T/3", "D/3", "T", "Ss", "T", "Ss", "T/3", "S", "D", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-195.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-208.csv
[0 0 1 0 0 1 0 0 0 1 0 0; 0 1 0 0 1 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 1 2 0 0 0 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 0 0 2 0 0; 0 1 0 0 0 1 0 0 0 2 0 0; 0 0 0 0 1 1 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 0 0 1 1 0; 0 0 2 0 0 0 0 1 0 1 0 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 2 0 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 1 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 0 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 0 1 0 0 0 0 1 0 0; 1 1 0 0 1 0 0 0 0 1 0 0; 1 0 0 0 1 0 0 0 0 1 0 1; 1 0 1 0 0 0 0 0 0 2 0 0; 0 0 0 0 2 0 0 0 0 0 0 2]
Key Counter is [10 7 25 0 20 14 0 14 0 31 1 4]
Key Score is [118; 32; 101; 64; 62; 115; 26; 104; 46; 87; 95; 32]
Position Counter for 1 is [10 7 25 0 20 14 0 14 0 31 1 4]
Any[[1.0, 86.5, 0.0]]
[1, 86, 0]
10 A Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

9-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(45, 1), (60, 3), (64, 5), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(57, 1), (60, 3), (64, 5), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(57, 1), (60, 3), (69, 1), (76, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(45, 1), (52, 5), (60, 3), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(45, 1), (64, 5), (69, 1), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(57, 1), (64, 5), (69, 1), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(57, 1), (57, 1), (60, 3), (64, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(45, 1), (57, 1), (64, 5), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(57, 1), (57, 1), (64, 5), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 100
child voicing cost: 165
Best yet: 265
New solution
function cost: 100
child voicing cost: 152
Best yet: 252
New solution
function cost: 100
child voicing cost: 150
Best yet: 250
New solution
function cost: 100
child voicing cost: 149
Best yet: 249
New solution
function cost: 100
child voicing cost: 145
Best yet: 245
New solution
function cost: 100
child voicing cost: 144
Best yet: 244
New solution
function cost: 100
child voicing cost: 143
Best yet: 243
New solution
function cost: 100
child voicing cost: 142
Best yet: 242
New solution
function cost: 100
child voicing cost: 141
Best yet: 241
New solution
function cost: 100
child voicing cost: 140
Best yet: 240
New solution
function cost: 100
child voicing cost: 139
Best yet: 239
New solution
function cost: 100
child voicing cost: 138
Best yet: 238
New solution
function cost: 100
child voicing cost: 136
Best yet: 236
New solution
function cost: 100
child voicing cost: 135
Best yet: 235
New solution
function cost: 100
child voicing cost: 132
Best yet: 232
New solution
function cost: 84
child voicing cost: 145
Best yet: 229
New solution
function cost: 84
child voicing cost: 142
Best yet: 226
New solution
function cost: 84
child voicing cost: 140
Best yet: 224
New solution
function cost: 84
child voicing cost: 137
Best yet: 221
New solution
function cost: 84
child voicing cost: 136
Best yet: 220
New solution
function cost: 84
child voicing cost: 134
Best yet: 218
New solution
function cost: 84
child voicing cost: 133
Best yet: 217
New solution
function cost: 84
child voicing cost: 126
Best yet: 210
New solution
function cost: 84
child voicing cost: 125
Best yet: 209
New solution
function cost: 84
child voicing cost: 123
Best yet: 207
New solution
function cost: 84
child voicing cost: 122
Best yet: 206
New solution
function cost: 84
child voicing cost: 121
Best yet: 205
New solution
function cost: 84
child voicing cost: 120
Best yet: 204
New solution
function cost: 84
child voicing cost: 119
Best yet: 203
New solution
function cost: 84
child voicing cost: 112
Best yet: 196
New solution
function cost: 86
child voicing cost: 107
Best yet: 193
New solution
function cost: 86
child voicing cost: 106
Best yet: 192
New solution
function cost: 86
child voicing cost: 104
Best yet: 190
New solution
function cost: 86
child voicing cost: 103
Best yet: 189
New solution
function cost: 86
child voicing cost: 96
Best yet: 182
New solution
function cost: 86
child voicing cost: 95
Best yet: 181
New solution
function cost: 86
child voicing cost: 93
Best yet: 179
New solution
function cost: 86
child voicing cost: 92
Best yet: 178
New solution
function cost: 86
child voicing cost: 91
Best yet: 177
New solution
function cost: 86
child voicing cost: 90
Best yet: 176
New solution
function cost: 86
child voicing cost: 89
Best yet: 175
New solution
function cost: 86
child voicing cost: 85
Best yet: 171
New solution
function cost: 86
child voicing cost: 78
Best yet: 164

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "D", [(52, 1), (56, 3), (64, 1), (71, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "S"), (0, "S/3"), (0, "S/5"), (4, "S6"), (6, "S65"), (8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (12, "D-5"), (12, "T54"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "Dm"), (14, "Tm"), (16, "T"), (22, "T-5")]     
 [(2, "D7-5"), (4, "D64"), (4, "T/3"), (6, "D-5"), (6, "D54"), (6, "S"), (6, "S/3"), (8, "D"), (8, "Ts"), (10, "S6")  …  (12, "D7/7"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "T"), (16, "D7-1"), (16, "Tm"), (18, "D/3"), (20, "Dm"), (24, "T-5")]        
 [(2, "T"), (2, "T/3"), (2, "T/5"), (4, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (10, "D/3")  …  (12, "Tm"), (12, "Ts"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D"), (18, "D-5"), (18, "S6"), (20, "Dm")]          
 [(0, "S"), (0, "S/3"), (0, "S/5"), (4, "S6"), (6, "S65"), (8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (12, "D-5"), (12, "T54"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "Dm"), (14, "Tm"), (16, "T"), (22, "T-5")]     
 [(4, "D7-5"), (6, "Tm"), (8, "D-5"), (8, "S"), (8, "S/3"), (8, "S/5"), (10, "D"), (10, "D/3"), (10, "D/5"), (10, "T/3")  …  (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (14, "T64"), (16, "T"), (18, "D7-1"), (26, "T-5")]    
 [(2, "Tm"), (6, "D"), (6, "D64"), (6, "T/3"), (6, "Ts"), (8, "D54"), (8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/7")  …  (12, "S"), (12, "S/3"), (12, "T"), (16, "D/3"), (16, "S6"), (16, "T54"), (18, "Dm"), (18, "T64"), (20, "D7-1"), (22, "T-5")]        
 [(6, "T/3"), (6, "T/5"), (6, "Tm"), (6, "Ts"), (8, "D/3"), (8, "D/5"), (8, "S6"), (10, "D"), (10, "D7"), (10, "D7/3")  …  (12, "D7-1"), (12, "D7-5"), (12, "S"), (12, "S/3"), (12, "S/5"), (12, "T"), (14, "S65"), (16, "D-5"), (18, "T64"), (22, "T-5")]        
 [(0, "Tm"), (6, "D/3"), (6, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T")  …  (12, "S65"), (12, "Ts"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "T64"), (18, "D-5"), (18, "S6"), (20, "T-5")]      
 [(4, "Ts"), (6, "T"), (8, "T/3"), (8, "T/5"), (10, "D/3"), (10, "D/5"), (10, "T54"), (12, "Dm"), (12, "S65"), (12, "T-5")  …  (14, "S/3"), (14, "S/5"), (16, "D"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D7-5"), (22, "D-5"), (22, "S6")]  
 [(4, "S"), (4, "S/3"), (8, "S6"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "Dm"), (10, "S65"), (10, "S65/6")  …  (14, "D/3"), (14, "D64"), (14, "T/3"), (14, "T64"), (14, "Ts"), (16, "D54"), (16, "D7-5"), (18, "T-5"), (18, "Tm"), (20, "D-5")]
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S/3"), (6, "S/5"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D")  …  (10, "D7-1"), (10, "S65"), (10, "Tm"), (10, "Ts"), (12, "D7-5"), (12, "S"), (14, "Dm"), (16, "D-5"), (16, "S6"), (18, "T-5")]         
 [(4, "S/5"), (6, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (8, "Ts"), (10, "S"), (10, "T"), (12, "D"), (12, "D/5"), (12, "D64"), (12, "T/5"), (14, "D54"), (14, "D7-5"), (16, "T-5"), (18, "D-5"), (18, "D7-1")]                     
 [(0, "S"), (0, "S/5"), (6, "S65"), (8, "D7-5"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "T/5"), (10, "Ts"), (12, "D54"), (14, "D"), (14, "D/5"), (14, "D7-1"), (14, "Tm"), (16, "T")]                                            
 [(4, "D64"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S65/6"), (4, "T/5"), (6, "D54"), (6, "S"), (6, "S/5"), (8, "D"), (8, "Tm"), (10, "D/3"), (10, "D7-5"), (10, "T"), (14, "D7-1"), (16, "Dm")]                                                  
 [(6, "D7"), (10, "D")]                                                                                                                                                                                                                                           
 [(4, "T")]                                                                                                                                                                                                                                                       
 [(4, "T")]                                                                                                                                                                                                                                                       

Done. Total checked: 90590, Pruned: 104696, completed: 43, time: 1.8289999961853027, efficiency: 23.510114865874232
Results: bestval_func: 86, bestval_voices: 78
(15, 399, 399, 399)
[0 0 1 0 0 1 0 0 0 1 0 0; 0 1 0 0 1 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 1 2 0 0 0 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 0 0 2 0 0; 0 1 0 0 0 1 0 0 0 2 0 0; 0 0 0 0 1 1 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 0 0 1 1 0; 0 0 2 0 0 0 0 1 0 1 0 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 2 0 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 1 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 0 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 0 1 0 0 0 0 1 0 0; 1 1 0 0 1 0 0 0 0 1 0 0; 1 0 0 0 1 0 0 0 0 1 0 1; 1 0 1 0 0 0 0 0 0 2 0 0; 0 0 0 0 2 0 0 0 0 0 0 2]
Key Counter is [10 7 25 0 20 14 0 14 0 31 1 4]
Key Score is [118; 32; 101; 64; 62; 115; 26; 104; 46; 87; 95; 32]
Position Counter for 1 is [10 7 25 0 20 14 0 14 0 31 1 4]
Any[[1.0, 86.5, 0.0]]
[1, 86, 0]
10 A Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "D", [(52, 1), (56, 3), (64, 1), (71, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 70
child voicing cost: 180
Best yet: 250
New solution
function cost: 70
child voicing cost: 176
Best yet: 246
New solution
function cost: 74
child voicing cost: 169
Best yet: 243
New solution
function cost: 74
child voicing cost: 167
Best yet: 241
New solution
function cost: 74
child voicing cost: 166
Best yet: 240
New solution
function cost: 74
child voicing cost: 165
Best yet: 239
New solution
function cost: 72
child voicing cost: 157
Best yet: 229
New solution
function cost: 72
child voicing cost: 155
Best yet: 227
New solution
function cost: 74
child voicing cost: 152
Best yet: 226
New solution
function cost: 74
child voicing cost: 151
Best yet: 225
New solution
function cost: 74
child voicing cost: 148
Best yet: 222
New solution
function cost: 74
child voicing cost: 145
Best yet: 219
New solution
function cost: 74
child voicing cost: 135
Best yet: 209
New solution
function cost: 76
child voicing cost: 132
Best yet: 208
New solution
function cost: 76
child voicing cost: 130
Best yet: 206
New solution
function cost: 74
child voicing cost: 129
Best yet: 203
New solution
function cost: 74
child voicing cost: 125
Best yet: 199
New solution
function cost: 78
child voicing cost: 119
Best yet: 197
New solution
function cost: 76
child voicing cost: 119
Best yet: 195
New solution
function cost: 76
child voicing cost: 118
Best yet: 194
New solution
function cost: 84
child voicing cost: 105
Best yet: 189
New solution
function cost: 76
child voicing cost: 110
Best yet: 186
New solution
function cost: 82
child voicing cost: 103
Best yet: 185
New solution
function cost: 84
child voicing cost: 98
Best yet: 182
New solution
function cost: 86
child voicing cost: 95
Best yet: 181

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (6, "T", [(57, 1), (57, 1), (64, 5), (72, 3)])   
 (4, "D7", [(52, 1), (59, 5), (68, 3), (74, 7)])  
 (0, "Ts", [(53, 1), (57, 3), (69, 3), (72, 5)])  
 (2, "T/3", [(48, 3), (57, 1), (69, 1), (76, 5)]) 
 (8, "S6", [(50, 1), (59, 6), (65, 3), (74, 1)])  
 (6, "D7", [(52, 1), (62, 7), (68, 3), (71, 5)])  
 (4, "Ts", [(53, 1), (60, 5), (69, 3), (69, 3)])  
 (2, "Ts", [(53, 1), (65, 1), (69, 3), (72, 5)])  
 (8, "D", [(52, 1), (59, 5), (68, 3), (76, 1)])   
 (2, "S/3", [(53, 3), (57, 5), (62, 1), (74, 1)]) 
 (10, "T/5", [(52, 5), (57, 1), (64, 5), (72, 3)])
 (4, "S/3", [(53, 3), (57, 5), (62, 1), (69, 5)]) 
 (4, "Ts", [(53, 1), (53, 1), (60, 5), (69, 3)])  
 ?                                                
 (12, "T", [(57, 1), (57, 1), (60, 3), (64, 5)])  
 (6, "Ts", [(53, 1), (57, 3), (60, 5), (65, 1)])  
 (8, "D7", [(52, 1), (59, 5), (62, 7), (68, 3)])  
 (4, "Ts", [(53, 1), (57, 3), (60, 5), (69, 3)])  
 (8, "S6", [(50, 1), (53, 3), (62, 1), (71, 6)])  
 (8, "T/3", [(48, 3), (52, 5), (64, 5), (69, 1)]) 
 (10, "S", [(50, 1), (50, 1), (57, 5), (65, 3)])  
 (0, "S", [(50, 1), (53, 3), (57, 5), (62, 1)])   
 (4, "D64", [(52, 1), (52, 1), (57, 4), (60, 6)]) 
 (10, "D", [(52, 1), (52, 1), (56, 3), (59, 5)])  
 (4, "T", [(45, 1), (52, 5), (57, 1), (60, 3)])   
 (4, "T", [(45, 1), (52, 5), (57, 1), (60, 3)])   

10-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (52, 3), (55, 5), (60, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (64, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (52, 3), (60, 1), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (64, 3), (72, 1), (79, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (55, 5), (64, 3), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (67, 5), (72, 1), (76, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (60, 1), (64, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (48, 1), (55, 5), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(10, "T")]                                                                                                                                                                                                                                                          
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D/3"), (8, "D/5"), (8, "T54")  …  (16, "D7-1"), (16, "D7-5"), (16, "S/3"), (16, "S/5"), (16, "S65"), (16, "S65/6"), (16, "Ss"), (16, "T-5"), (16, "T64"), (20, "D-5")]     
 [(0, "S"), (0, "S/3"), (0, "S/5"), (0, "S6"), (0, "Ss"), (4, "D7-1"), (6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7-5")  …  (10, "T/3"), (10, "T/5"), (10, "T64"), (10, "Ts"), (12, "D"), (12, "D-5"), (12, "D/3"), (12, "D/5"), (12, "T"), (18, "T-5")]              
 [(8, "Ts"), (10, "S/3"), (10, "S/5"), (10, "T64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S6")  …  (14, "D/5"), (14, "D7-5"), (14, "S65"), (14, "S65/6"), (14, "Ss"), (14, "T-5"), (14, "T54"), (18, "D-5"), (18, "D7-1"), (20, "D")]
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/7")  …  (12, "T54"), (14, "D"), (14, "D/3"), (14, "T"), (14, "T/3"), (16, "T-5"), (16, "Tm"), (20, "D64"), (20, "D7-5"), (24, "D-5")]       
 [(2, "D"), (2, "D/3"), (4, "D54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D64"), (8, "D7-5"), (10, "D7-1")  …  (12, "D-5"), (12, "Tm"), (14, "S"), (14, "T"), (14, "T/3"), (16, "S65"), (16, "Ts"), (20, "S/3"), (20, "T64"), (24, "T-5")]           
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "Ss"), (18, "D-5")]          
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65/6"), (10, "D64"), (10, "D7-5"), (10, "T/3"), (10, "T54"), (10, "Tm"), (10, "Ts")  …  (12, "T"), (14, "D-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D54"), (18, "T-5"), (20, "D"), (20, "D/3")]      
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65"), (6, "S65/6"), (10, "D64"), (10, "D7-5"), (10, "Ss"), (10, "T/3"), (10, "T54")  …  (12, "D7-1"), (12, "T"), (14, "D-5"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (18, "D54"), (18, "T-5"), (20, "D"), (20, "D/3")]      
 [(6, "D"), (6, "D/3"), (6, "D/5"), (8, "S65"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D7-5")  …  (14, "S"), (14, "S6"), (14, "Ss"), (16, "D-5"), (16, "T54"), (16, "Tm"), (18, "T"), (18, "T/3"), (18, "T/5"), (20, "T-5")]       
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S6"), (8, "T"), (8, "T/3"), (8, "T/5"), (8, "Tm")  …  (12, "Ts"), (14, "D-5"), (14, "S/3"), (14, "S/5"), (14, "S65"), (14, "S65/6"), (14, "Ss"), (16, "D"), (18, "D7-1"), (18, "T-5")]             
 [(8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "S65"), (10, "S65/6"), (10, "T/3")  …  (14, "T64"), (16, "S6"), (16, "Ss"), (16, "Ts"), (18, "D-5"), (18, "D7-5"), (20, "S"), (20, "S/3"), (20, "S/5"), (22, "T-5")]       
 [(8, "D7"), (8, "D7-1"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "S65/6"), (12, "D"), (12, "D/3"), (12, "S6"), (12, "T"), (14, "Tm"), (16, "S"), (16, "S/3"), (16, "Ts"), (18, "D64"), (18, "D7-5"), (18, "T/3"), (22, "D-5"), (22, "T-5")]         
 [(8, "D7"), (8, "D7-1"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "S65/6"), (12, "D"), (12, "D/3"), (12, "S6"), (12, "T"), (14, "Tm"), (16, "S"), (16, "S/3"), (16, "Ts"), (18, "D64"), (18, "D7-5"), (18, "T/3"), (22, "D-5"), (22, "T-5")]         
 [(4, "D"), (4, "D/3"), (6, "D54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ss"), (10, "D-5"), (10, "D7-5")  …  (12, "S"), (14, "D64"), (14, "S65/6"), (14, "Tm"), (16, "T"), (16, "T/3"), (18, "S/3"), (18, "T64"), (20, "Ts"), (26, "T-5")]          
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "T"), (8, "D54"), (8, "D7-5"), (10, "D"), (10, "Ss"), (12, "D-5"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/3"), (16, "T-5"), (18, "D7-1")]                        

Done. Total checked: 178109, Pruned: 199176, completed: 25, time: 3.432999849319458, efficiency: 7.282260733263907
Results: bestval_func: 86, bestval_voices: 95
(16, 399, 399, 399)
Total time for optimisation of piece: 7.009000062942505
["T", "D7", "Ts", "T/3", "S6", "D7", "Ts", "Ts", "D", "S/3", "T/5", "S/3", "Ts", "Ts", "D", "D", "D7-5", "T", "S", "D7-5", "T", "Ts", "D7", "Ts", "S6", "T/3", "S", "S", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-208.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-221.csv
[1 0 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 1 0 0 0 0 0 0 1 0 2 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 0 0 2; 1 0 0 0 2 0 0 0 0 0 0 1; 0 0 0 0 1 1 0 0 0 1 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0]
Key Counter is [20 3 21 0 16 16 5 21 0 20 4 5]
Key Score is [119; 48; 91; 82; 49; 118; 33; 108; 64; 70; 102; 33]
Position Counter for 1 is [20 3 21 0 16 16 5 21 0 20 4 5]
Any[[1.0, 73.75, 1.0]]
[1, 74, 1]
1 C Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

10-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (52, 3), (55, 5), (60, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (64, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (52, 3), (60, 1), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (64, 3), (72, 1), (79, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (55, 5), (64, 3), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (67, 5), (72, 1), (76, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (60, 1), (64, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (48, 1), (55, 5), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 102
child voicing cost: 178
Best yet: 280
New solution
function cost: 102
child voicing cost: 177
Best yet: 279
New solution
function cost: 102
child voicing cost: 175
Best yet: 277
New solution
function cost: 102
child voicing cost: 173
Best yet: 275
New solution
function cost: 102
child voicing cost: 166
Best yet: 268
New solution
function cost: 102
child voicing cost: 165
Best yet: 267
New solution
function cost: 102
child voicing cost: 162
Best yet: 264
New solution
function cost: 102
child voicing cost: 160
Best yet: 262
New solution
function cost: 102
child voicing cost: 159
Best yet: 261
New solution
function cost: 106
child voicing cost: 151
Best yet: 257
New solution
function cost: 102
child voicing cost: 154
Best yet: 256
New solution
function cost: 102
child voicing cost: 153
Best yet: 255
New solution
function cost: 102
child voicing cost: 151
Best yet: 253
New solution
function cost: 102
child voicing cost: 150
Best yet: 252
New solution
function cost: 102
child voicing cost: 149
Best yet: 251
New solution
function cost: 102
child voicing cost: 147
Best yet: 249
New solution
function cost: 102
child voicing cost: 145
Best yet: 247
New solution
function cost: 102
child voicing cost: 143
Best yet: 245
New solution
function cost: 102
child voicing cost: 141
Best yet: 243
New solution
function cost: 102
child voicing cost: 135
Best yet: 237
New solution
function cost: 102
child voicing cost: 133
Best yet: 235
New solution
function cost: 102
child voicing cost: 131
Best yet: 233
New solution
function cost: 98
child voicing cost: 131
Best yet: 229
New solution
function cost: 94
child voicing cost: 134
Best yet: 228
New solution
function cost: 94
child voicing cost: 132
Best yet: 226
New solution
function cost: 96
child voicing cost: 126
Best yet: 222
New solution
function cost: 94
child voicing cost: 127
Best yet: 221
New solution
function cost: 94
child voicing cost: 126
Best yet: 220
New solution
function cost: 94
child voicing cost: 124
Best yet: 218
New solution
function cost: 94
child voicing cost: 123
Best yet: 217
New solution
function cost: 94
child voicing cost: 122
Best yet: 216
New solution
function cost: 94
child voicing cost: 120
Best yet: 214
New solution
function cost: 94
child voicing cost: 119
Best yet: 213
New solution
function cost: 94
child voicing cost: 118
Best yet: 212
New solution
function cost: 98
child voicing cost: 113
Best yet: 211
New solution
function cost: 98
child voicing cost: 112
Best yet: 210
New solution
function cost: 98
child voicing cost: 110
Best yet: 208
New solution
function cost: 102
child voicing cost: 105
Best yet: 207
New solution
function cost: 102
child voicing cost: 103
Best yet: 205
New solution
function cost: 102
child voicing cost: 102
Best yet: 204
New solution
function cost: 102
child voicing cost: 100
Best yet: 202
New solution
function cost: 102
child voicing cost: 98
Best yet: 200
New solution
function cost: 102
child voicing cost: 97
Best yet: 199
New solution
function cost: 102
child voicing cost: 95
Best yet: 197
New solution
function cost: 102
child voicing cost: 94
Best yet: 196
New solution
function cost: 98
child voicing cost: 97
Best yet: 195
New solution
function cost: 98
child voicing cost: 96
Best yet: 194
New solution
function cost: 98
child voicing cost: 94
Best yet: 192
New solution
function cost: 106
child voicing cost: 84
Best yet: 190
New solution
function cost: 106
child voicing cost: 83
Best yet: 189
New solution
function cost: 106
child voicing cost: 82
Best yet: 188
New solution
function cost: 106
child voicing cost: 80
Best yet: 186
New solution
function cost: 98
child voicing cost: 87
Best yet: 185
New solution
function cost: 98
child voicing cost: 86
Best yet: 184
New solution
function cost: 98
child voicing cost: 85
Best yet: 183
New solution
function cost: 98
child voicing cost: 84
Best yet: 182
New solution
function cost: 98
child voicing cost: 82
Best yet: 180
New solution
function cost: 98
child voicing cost: 80
Best yet: 178
New solution
function cost: 98
child voicing cost: 79
Best yet: 177
New solution
function cost: 98
child voicing cost: 77
Best yet: 175
New solution
function cost: 98
child voicing cost: 76
Best yet: 174
New solution
function cost: 100
child voicing cost: 71
Best yet: 171
New solution
function cost: 98
child voicing cost: 70
Best yet: 168
New solution
function cost: 98
child voicing cost: 68
Best yet: 166

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "D", [(43, 1), (59, 3), (67, 1), (74, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "T"), (6, "Tm"), (8, "D7-5"), (8, "T54")  …  (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/3"), (16, "D/5"), (16, "T-5"), (18, "D7-1")]       
 [(6, "D"), (6, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "D54"), (10, "D7-1"), (10, "S")  …  (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "T"), (16, "D64"), (16, "T/3"), (16, "T64"), (18, "Ts"), (24, "T-5")]         
 [(8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "S65"), (10, "S65/6"), (10, "T/3")  …  (14, "T64"), (16, "S6"), (16, "Ss"), (16, "Ts"), (18, "D-5"), (18, "D7-5"), (20, "S"), (20, "S/3"), (20, "S/5"), (22, "T-5")]      
 [(6, "Ts"), (10, "D-5"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D64"), (14, "D7-5"), (14, "S65"), (14, "S65/6"), (14, "T/3")  …  (16, "S6"), (16, "T"), (16, "Tm"), (18, "Ss"), (18, "T-5"), (20, "D7"), (20, "D7/3"), (20, "D7/5"), (20, "D7/7"), (24, "D7-1")]
 [(0, "T54"), (2, "T"), (2, "T/3"), (2, "T/5"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "S65")  …  (12, "D/3"), (12, "D/5"), (12, "D7-5"), (12, "Ss"), (12, "T-5"), (12, "Tm"), (12, "Ts"), (14, "S6"), (16, "D-5"), (16, "D7-1")]         
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (6, "D/3"), (6, "Tm"), (8, "D"), (8, "D7-1"), (8, "S6"), (8, "Ss"), (8, "T")  …  (10, "Ts"), (12, "S"), (12, "S/3"), (14, "D64"), (14, "D7-5"), (14, "S65"), (14, "S65/6"), (18, "D-5"), (18, "T-5"), (18, "T64")]            
 [(0, "Ts"), (2, "T64"), (4, "T"), (6, "S65"), (6, "S65/6"), (6, "T-5"), (6, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (14, "D64"), (14, "T/3"), (14, "T/5"), (16, "D"), (16, "D7-1"), (16, "S6"), (16, "Ss"), (16, "Tm"), (18, "D7-5"), (22, "D-5")]       
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "S/5"), (10, "D7"), (10, "D7/3"), (10, "D7/5")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "T-5"), (16, "Tm"), (20, "D7-5"), (24, "D-5")]      
 [(4, "T"), (6, "T54"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "Ts"), (10, "T-5"), (10, "T64"), (12, "D7")  …  (14, "D/5"), (14, "D64"), (14, "S65"), (14, "S65/6"), (14, "T/3"), (14, "T/5"), (14, "Tm"), (16, "D"), (18, "D7-5"), (22, "D-5")]         
 [(4, "D64"), (4, "T/3"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S"), (6, "S/3"), (8, "D54"), (8, "D7-5")  …  (10, "D"), (10, "S6"), (10, "Ss"), (10, "T"), (12, "D-5"), (12, "D/3"), (12, "T64"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]              
 [(0, "T/3"), (0, "T/5"), (4, "T54"), (6, "D"), (6, "T"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D/3"), (16, "D/5"), (16, "Ss"), (16, "T-5"), (16, "Ts"), (18, "S6"), (20, "D7-1")]         
 [(4, "D64"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/5"), (8, "D54"), (8, "D7-5"), (8, "S65/6"), (10, "D"), (10, "Ss"), (10, "T"), (12, "D/3"), (12, "T64"), (14, "D7-1")]                                                   
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/5"), (6, "S/5"), (8, "D"), (8, "S"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "D7-5"), (10, "S65/6"), (12, "S6"), (14, "D7-1"), (14, "T-5")]                                                 
 [(10, "D/5"), (10, "S/5"), (10, "T64"), (12, "D"), (12, "T"), (12, "T/5"), (14, "D54"), (14, "D7-1"), (14, "S65/6"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D-5"), (18, "D64"), (18, "D7-5"), (18, "Tm"), (20, "S")]                           
 [(12, "D7"), (16, "D")]                                                                                                                                                                                                                                             
 [(12, "T")]                                                                                                                                                                                                                                                         
 [(12, "T")]                                                                                                                                                                                                                                                         

Done. Total checked: 150668, Pruned: 174761, completed: 64, time: 2.7809998989105225, efficiency: 23.013305403237332
Results: bestval_func: 98, bestval_voices: 68
(15, 412, 412, 412)
[1 0 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 1 0 0 0 0 0 0 1 0 2 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 0 0 2; 1 0 0 0 2 0 0 0 0 0 0 1; 0 0 0 0 1 1 0 0 0 1 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0]
Key Counter is [20 3 21 0 16 16 5 21 0 20 4 5]
Key Score is [119; 48; 91; 82; 49; 118; 33; 108; 64; 70; 102; 33]
Position Counter for 1 is [20 3 21 0 16 16 5 21 0 20 4 5]
Any[[1.0, 73.75, 1.0]]
[1, 74, 1]
1 C Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "D", [(43, 1), (59, 3), (67, 1), (74, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 104
child voicing cost: 208
Best yet: 312
New solution
function cost: 104
child voicing cost: 194
Best yet: 298
New solution
function cost: 104
child voicing cost: 191
Best yet: 295
New solution
function cost: 104
child voicing cost: 190
Best yet: 294
New solution
function cost: 104
child voicing cost: 189
Best yet: 293
New solution
function cost: 104
child voicing cost: 187
Best yet: 291
New solution
function cost: 104
child voicing cost: 173
Best yet: 277
New solution
function cost: 104
child voicing cost: 165
Best yet: 269
New solution
function cost: 104
child voicing cost: 160
Best yet: 264
New solution
function cost: 104
child voicing cost: 159
Best yet: 263
New solution
function cost: 104
child voicing cost: 158
Best yet: 262
New solution
function cost: 104
child voicing cost: 157
Best yet: 261
New solution
function cost: 106
child voicing cost: 154
Best yet: 260
New solution
function cost: 104
child voicing cost: 154
Best yet: 258
New solution
function cost: 104
child voicing cost: 152
Best yet: 256
New solution
function cost: 104
child voicing cost: 146
Best yet: 250
New solution
function cost: 104
child voicing cost: 145
Best yet: 249
New solution
function cost: 104
child voicing cost: 143
Best yet: 247
New solution
function cost: 104
child voicing cost: 141
Best yet: 245
New solution
function cost: 110
child voicing cost: 134
Best yet: 244
New solution
function cost: 110
child voicing cost: 132
Best yet: 242
New solution
function cost: 110
child voicing cost: 131
Best yet: 241
New solution
function cost: 110
child voicing cost: 129
Best yet: 239
New solution
function cost: 106
child voicing cost: 132
Best yet: 238
New solution
function cost: 108
child voicing cost: 128
Best yet: 236
New solution
function cost: 112
child voicing cost: 119
Best yet: 231
New solution
function cost: 108
child voicing cost: 121
Best yet: 229
New solution
function cost: 108
child voicing cost: 120
Best yet: 228
New solution
function cost: 108
child voicing cost: 118
Best yet: 226
New solution
function cost: 108
child voicing cost: 116
Best yet: 224
New solution
function cost: 112
child voicing cost: 107
Best yet: 219
New solution
function cost: 108
child voicing cost: 109
Best yet: 217
New solution
function cost: 108
child voicing cost: 108
Best yet: 216
New solution
function cost: 108
child voicing cost: 106
Best yet: 214
New solution
function cost: 108
child voicing cost: 105
Best yet: 213
New solution
function cost: 112
child voicing cost: 100
Best yet: 212
New solution
function cost: 108
child voicing cost: 102
Best yet: 210
New solution
function cost: 108
child voicing cost: 101
Best yet: 209
New solution
function cost: 108
child voicing cost: 99
Best yet: 207
New solution
function cost: 106
child voicing cost: 100
Best yet: 206
New solution
function cost: 108
child voicing cost: 96
Best yet: 204
New solution
function cost: 112
child voicing cost: 87
Best yet: 199
New solution
function cost: 108
child voicing cost: 89
Best yet: 197
New solution
function cost: 108
child voicing cost: 88
Best yet: 196
New solution
function cost: 108
child voicing cost: 86
Best yet: 194
Iterations done: 10000
Nodes in active set: 74
Lowest depth: 2 current depth: 6

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (10, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])  
 (6, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (0, "Ss", [(50, 1), (57, 5), (65, 3), (74, 1)])  
 (12, "D7", [(55, 1), (59, 3), (65, 7), (74, 5)]) 
 (10, "Ts", [(57, 1), (60, 3), (64, 5), (69, 1)]) 
 (2, "D/3", [(59, 3), (62, 5), (62, 5), (67, 1)]) 
 (0, "T", [(60, 1), (60, 1), (64, 3), (67, 5)])   
 (12, "T", [(60, 1), (60, 1), (64, 3), (67, 5)])  
 (0, "S/3", [(57, 3), (60, 5), (65, 1), (65, 1)]) 
 (6, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])   
 (8, "T/5", [(55, 5), (60, 1), (64, 3), (67, 5)]) 
 (8, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])   
 (8, "D7-1", [(50, 5), (62, 5), (65, 7), (71, 3)])
 ?                                                
 (6, "D/3", [(47, 3), (62, 5), (67, 1), (74, 5)]) 
 (4, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (0, "Ss", [(50, 1), (57, 5), (65, 3), (77, 3)])  
 (4, "T", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (10, "Ss", [(50, 1), (57, 5), (65, 3), (74, 1)]) 
 (0, "T/3", [(52, 3), (55, 5), (67, 5), (72, 1)]) 
 (6, "S", [(53, 1), (60, 5), (65, 1), (69, 3)])   
 (8, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])   
 (12, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])  
 (12, "D7", [(55, 1), (59, 3), (62, 5), (65, 7)]) 
 (12, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])  
 (12, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])  

Done. Total checked: 1162597, Pruned: 1263080, completed: 45, time: 20.414000034332275, efficiency: 2.204369546601302
Results: bestval_func: 108, bestval_voices: 86
(16, 412, 412, 412)
Total time for optimisation of piece: 25.131999969482422
["T", "T", "Ss", "D7", "Ts", "D/3", "T", "T", "S/3", "D", "T/5", "D", "D7-1", "T", "D", "D", "D/3", "D", "Ts", "T/3", "D/3", "T", "Ss", "T", "Ss", "T/3", "S", "D", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-221.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-234.csv
[0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 0 0 1 1; 1 0 0 0 0 1 1 0 0 0 1 0; 1 0 0 0 1 0 1 0 0 0 0 1; 1 0 1 0 1 0 0 1 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 0 0 1 1 0 0 0 1; 1 0 0 0 0 0 1 1 0 1 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 1 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 2 0 0 0 0 0 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0]
Key Counter is [24 1 21 0 6 18 8 12 2 4 2 19]
Key Score is [104; 55; 71; 79; 40; 87; 50; 94; 59; 61; 81; 38]
Position Counter for 1 is [24 1 21 0 6 18 8 12 2 4 2 19]
Any[[1.0, 71.25, 1.0]]
[1, 71, 1]
1 C Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(48, 1), (52, 3), (55, 5), (60, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(60, 1), (64, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(48, 1), (52, 3), (60, 1), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(48, 1), (60, 1), (64, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(60, 1), (60, 1), (64, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(48, 1), (48, 1), (55, 5), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "T")]                                                                                                                                                                                                                                                   
 [(0, "T"), (0, "T-5"), (0, "T/3"), (0, "T/5"), (0, "Tm"), (0, "Ts"), (2, "D7"), (2, "D7-1"), (2, "D7-5"), (2, "D7/3")  …  (2, "S6"), (2, "S65"), (2, "S65/6"), (2, "Ss"), (2, "T54"), (2, "T64"), (4, "D"), (4, "D/3"), (4, "D/5"), (6, "D-5")]              
 [(0, "D7"), (0, "D7-1"), (0, "D7-5"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (0, "S"), (0, "S/3"), (0, "S/5"), (0, "S6")  …  (2, "T"), (2, "T-5"), (2, "T/3"), (2, "T/5"), (2, "Tm"), (2, "Ts"), (4, "D"), (4, "D-5"), (4, "D/3"), (4, "D/5")]               
 [(0, "D7"), (0, "D7-1"), (0, "D7-5"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (0, "S"), (0, "S/3"), (0, "S/5"), (0, "S6")  …  (2, "T"), (2, "T-5"), (2, "T/3"), (2, "T/5"), (2, "Tm"), (2, "Ts"), (4, "D"), (4, "D-5"), (4, "D/3"), (4, "D/5")]               
 [(2, "D"), (2, "D-5"), (2, "D/3"), (2, "D54"), (2, "D64"), (2, "D7"), (2, "D7-5"), (2, "D7/3"), (2, "D7/7"), (2, "S")  …  (2, "S65/6"), (2, "Ss"), (2, "T"), (2, "T/3"), (2, "T54"), (2, "T64"), (2, "Tm"), (2, "Ts"), (6, "D7-1"), (8, "T-5")]              
 [(4, "S/3"), (4, "S65"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T"), (6, "T/3"), (6, "Ts"), (8, "D54"), (10, "D"), (10, "S"), (12, "D/3"), (12, "T-5"), (14, "S6"), (16, "D64"), (16, "D7-1"), (16, "D7-5"), (20, "D-5")]        
 [(4, "S/3"), (4, "T64"), (6, "Ts"), (8, "S65/6"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "T"), (10, "T/3"), (12, "D7-1"), (14, "D"), (14, "S"), (16, "D/3"), (16, "D54"), (16, "D64"), (16, "D7-5"), (18, "S6"), (20, "D-5")]
 [(4, "S"), (4, "S/3"), (6, "T54"), (8, "Ss"), (8, "T"), (10, "D64"), (10, "D7-5"), (10, "S65/6"), (10, "T/3"), (10, "Ts"), (12, "D7"), (12, "D7-1"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D-5"), (14, "D54"), (16, "D"), (16, "D/3"), (18, "T-5")]
 [(4, "T"), (4, "T/3"), (6, "T54"), (8, "D7"), (8, "D7-1"), (8, "D7/3"), (8, "D7/7"), (8, "S"), (8, "Ts"), (10, "D64")  …  (12, "D/3"), (12, "S6"), (12, "Ss"), (12, "Tm"), (14, "D54"), (14, "D7-5"), (14, "S65"), (14, "S65/6"), (14, "T-5"), (18, "D-5")]  
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D/3"), (6, "D/5"), (6, "S65")  …  (8, "Ts"), (10, "T64"), (12, "S6"), (12, "Ss"), (14, "D7-5"), (14, "T-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "D-5")]     
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "S65"), (4, "S65/6"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "D7-1")  …  (8, "S/3"), (8, "S/5"), (8, "Ss"), (8, "Tm"), (10, "S6"), (10, "Ts"), (12, "D7-5"), (14, "S"), (16, "D-5"), (16, "T-5")]      
 [(4, "D7-1"), (4, "S65"), (4, "S65/6"), (8, "D/3"), (8, "D/5"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5")  …  (12, "T64"), (14, "D"), (14, "S6"), (14, "T"), (14, "T/3"), (14, "T/5"), (14, "Ts"), (16, "Tm"), (20, "D7-5"), (24, "D-5")]
 [(4, "D7-1"), (4, "S65/6"), (8, "D/3"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (12, "D54"), (12, "S/3"), (12, "T54"), (14, "D"), (14, "T"), (14, "T/3"), (14, "Ts"), (20, "D64"), (20, "D7-5"), (24, "D-5")]
 [(4, "D7-1"), (4, "S65/6"), (8, "D/3"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (12, "D54"), (12, "S/3"), (12, "T54"), (14, "D"), (14, "T"), (14, "T/3"), (14, "Ts"), (20, "D64"), (20, "D7-5"), (24, "D-5")]
 [(4, "S"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (10, "D7-1"), (10, "S/3"), (10, "S65"), (10, "T64"), (12, "D"), (12, "Ts"), (14, "D/3"), (14, "D54"), (14, "D64"), (14, "D7-5"), (14, "T-5"), (18, "D-5")]                
 [(4, "D7-1"), (4, "S65/6"), (8, "D/3"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (12, "D54"), (12, "S/3"), (12, "T54"), (14, "D"), (14, "T"), (14, "T/3"), (14, "Ts"), (20, "D64"), (20, "D7-5"), (24, "D-5")]

C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(48, 1), (52, 3), (55, 5), (60, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(60, 1), (64, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(48, 1), (52, 3), (60, 1), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(48, 1), (60, 1), (64, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(60, 1), (60, 1), (64, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(48, 1), (48, 1), (55, 5), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 100
child voicing cost: 146
Best yet: 246
New solution
function cost: 100
child voicing cost: 145
Best yet: 245
New solution
function cost: 100
child voicing cost: 143
Best yet: 243
New solution
function cost: 104
child voicing cost: 138
Best yet: 242
New solution
function cost: 90
child voicing cost: 137
Best yet: 227
New solution
function cost: 90
child voicing cost: 134
Best yet: 224
New solution
function cost: 90
child voicing cost: 131
Best yet: 221
New solution
function cost: 86
child voicing cost: 134
Best yet: 220
New solution
function cost: 86
child voicing cost: 131
Best yet: 217
New solution
function cost: 86
child voicing cost: 130
Best yet: 216
New solution
function cost: 86
child voicing cost: 129
Best yet: 215
New solution
function cost: 90
child voicing cost: 121
Best yet: 211
New solution
function cost: 90
child voicing cost: 118
Best yet: 208
New solution
function cost: 86
child voicing cost: 120
Best yet: 206
New solution
function cost: 86
child voicing cost: 117
Best yet: 203
New solution
function cost: 86
child voicing cost: 115
Best yet: 201
New solution
function cost: 86
child voicing cost: 114
Best yet: 200
New solution
function cost: 86
child voicing cost: 113
Best yet: 199
New solution
function cost: 90
child voicing cost: 105
Best yet: 195
New solution
function cost: 86
child voicing cost: 106
Best yet: 192
New solution
function cost: 86
child voicing cost: 103
Best yet: 189
New solution
function cost: 90
child voicing cost: 96
Best yet: 186
New solution
function cost: 90
child voicing cost: 95
Best yet: 185
New solution
function cost: 96
child voicing cost: 86
Best yet: 182
New solution
function cost: 90
child voicing cost: 90
Best yet: 180
New solution
function cost: 90
child voicing cost: 89
Best yet: 179
New solution
function cost: 90
child voicing cost: 88
Best yet: 178
New solution
function cost: 86
child voicing cost: 91
Best yet: 177
New solution
function cost: 74
child voicing cost: 98
Best yet: 172
New solution
function cost: 74
child voicing cost: 95
Best yet: 169
New solution
function cost: 78
child voicing cost: 89
Best yet: 167
New solution
function cost: 78
child voicing cost: 87
Best yet: 165
New solution
function cost: 78
child voicing cost: 86
Best yet: 164
New solution
function cost: 78
child voicing cost: 85
Best yet: 163

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "D7-1"), (4, "S65"), (4, "S65/6"), (8, "D/3"), (8, "D/5"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5")  …  (12, "T64"), (14, "D"), (14, "S6"), (14, "T"), (14, "T/3"), (14, "T/5"), (14, "Ts"), (16, "Tm"), (20, "D7-5"), (24, "D-5")]         
 [(4, "D7-1"), (4, "S65"), (4, "S65/6"), (8, "D/3"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S")  …  (12, "T64"), (14, "D"), (14, "S6"), (14, "T"), (14, "T/3"), (14, "Ts"), (16, "Tm"), (20, "D64"), (20, "D7-5"), (24, "D-5")]          
 [(4, "S"), (6, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "T"), (8, "T/3"), (8, "T/5")  …  (12, "D"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "D64"), (14, "D7-5"), (14, "Ss"), (14, "T-5"), (14, "Tm"), (18, "D-5")]                
 [(4, "S"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D7-1")  …  (12, "D"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "D64"), (14, "D7-5"), (14, "Ss"), (14, "T-5"), (14, "Tm"), (18, "D-5")]              
 [(10, "D7-1"), (10, "S65"), (10, "S65/6"), (10, "T-5"), (14, "Ss"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S")  …  (18, "S/5"), (18, "T54"), (18, "T64"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "D/5"), (20, "S6"), (26, "D7-5"), (30, "D-5")]
 [(2, "T"), (2, "T/3"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Ts"), (8, "D/3"), (8, "D64"), (8, "S/3")  …  (10, "D7-1"), (10, "S"), (12, "D54"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (14, "S6"), (14, "Ss"), (16, "D-5")]           
 [(2, "T"), (2, "T/3"), (2, "T/5"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ts"), (8, "D/3")  …  (10, "D"), (10, "D7-1"), (10, "S"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (14, "S6"), (14, "Ss"), (16, "D-5")]            
 [(6, "D"), (6, "D/3"), (6, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T"), (6, "T/3"), (6, "T/5")  …  (10, "S"), (10, "Tm"), (10, "Ts"), (12, "D-5"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (14, "S6"), (14, "Ss"), (16, "T-5")]              
 [(6, "S"), (6, "S/3"), (6, "S/5"), (8, "D-5"), (8, "D7-5"), (8, "T54"), (8, "Ts"), (10, "S6"), (10, "Ss"), (10, "T")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Tm"), (18, "D7-1"), (20, "T-5")]            
 [(2, "S65"), (2, "S65/6"), (6, "D54"), (6, "T64"), (8, "D"), (8, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S")  …  (10, "T/3"), (10, "T54"), (12, "D7-1"), (12, "S6"), (12, "Ss"), (12, "Tm"), (14, "T-5"), (16, "T"), (18, "D-5"), (18, "D7-5")]             
 [(8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "S65"), (10, "S65/6"), (10, "T/3")  …  (14, "T64"), (16, "S6"), (16, "Ss"), (16, "Ts"), (18, "D-5"), (18, "D7-5"), (20, "S"), (20, "S/3"), (20, "S/5"), (22, "T-5")]        
 [(0, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (10, "D"), (10, "D7-1"), (10, "T"), (10, "T/5"), (12, "D54"), (14, "S6"), (14, "Ts"), (16, "D64"), (16, "D7-5"), (16, "S65/6"), (20, "D-5"), (20, "S/5"), (22, "S")]                                   
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/5"), (4, "D7-1"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "Ss"), (8, "T"), (8, "T/5"), (10, "D7-5"), (10, "S/5"), (12, "Ts"), (14, "D64"), (16, "S")]                                            
 [(2, "T"), (2, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D/3"), (8, "D64"), (8, "S/5"), (8, "Tm"), (10, "D"), (10, "D7-1"), (10, "S"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (14, "S6"), (16, "D-5")]                                        
 [(10, "D"), (10, "D7")]                                                                                                                                                                                                                                               
 [(14, "T")]                                                                                                                                                                                                                                                           
 [(16, "T")]                                                                                                                                                                                                                                                           

Done. Total checked: 216419, Pruned: 250111, completed: 34, time: 4.704999923706055, efficiency: 7.226355058730529
Results: bestval_func: 78, bestval_voices: 85
(15, 412, 412, 412)
[0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 0 0 1 1; 1 0 0 0 0 1 1 0 0 0 1 0; 1 0 0 0 1 0 1 0 0 0 0 1; 1 0 1 0 1 0 0 1 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 0 1; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 0 0 1 1 0 0 0 1; 1 0 0 0 0 0 1 1 0 1 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 1 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 2 0 0 0 0 0 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0]
Key Counter is [24 1 21 0 6 18 8 12 2 4 2 19]
Key Score is [104; 55; 71; 79; 40; 87; 50; 94; 59; 61; 81; 38]
Position Counter for 1 is [24 1 21 0 6 18 8 12 2 4 2 19]
Any[[1.0, 71.25, 1.0]]
[1, 71, 1]
1 C Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 124
child voicing cost: 184
Best yet: 308
New solution
function cost: 124
child voicing cost: 177
Best yet: 301
New solution
function cost: 124
child voicing cost: 174
Best yet: 298
New solution
function cost: 124
child voicing cost: 173
Best yet: 297
New solution
function cost: 124
child voicing cost: 172
Best yet: 296
New solution
function cost: 124
child voicing cost: 164
Best yet: 288
New solution
function cost: 124
child voicing cost: 162
Best yet: 286
New solution
function cost: 124
child voicing cost: 157
Best yet: 281
New solution
function cost: 124
child voicing cost: 156
Best yet: 280
New solution
function cost: 124
child voicing cost: 155
Best yet: 279
New solution
function cost: 124
child voicing cost: 149
Best yet: 273
New solution
function cost: 124
child voicing cost: 146
Best yet: 270
New solution
function cost: 124
child voicing cost: 140
Best yet: 264
New solution
function cost: 124
child voicing cost: 135
Best yet: 259
New solution
function cost: 120
child voicing cost: 136
Best yet: 256
New solution
function cost: 122
child voicing cost: 129
Best yet: 251
New solution
function cost: 118
child voicing cost: 132
Best yet: 250
New solution
function cost: 118
child voicing cost: 125
Best yet: 243
New solution
function cost: 116
child voicing cost: 125
Best yet: 241
New solution
function cost: 116
child voicing cost: 123
Best yet: 239
New solution
function cost: 120
child voicing cost: 116
Best yet: 236
New solution
function cost: 116
child voicing cost: 117
Best yet: 233
New solution
function cost: 116
child voicing cost: 116
Best yet: 232
New solution
function cost: 116
child voicing cost: 111
Best yet: 227
New solution
function cost: 116
child voicing cost: 109
Best yet: 225
New solution
function cost: 116
child voicing cost: 107
Best yet: 223
New solution
function cost: 116
child voicing cost: 106
Best yet: 222
New solution
function cost: 116
child voicing cost: 104
Best yet: 220
New solution
function cost: 110
child voicing cost: 108
Best yet: 218
New solution
function cost: 118
child voicing cost: 99
Best yet: 217
New solution
function cost: 118
child voicing cost: 95
Best yet: 213
New solution
function cost: 118
child voicing cost: 92
Best yet: 210
New solution
function cost: 118
child voicing cost: 90
Best yet: 208
New solution
function cost: 118
child voicing cost: 83
Best yet: 201
New solution
function cost: 118
child voicing cost: 82
Best yet: 200
New solution
function cost: 118
child voicing cost: 78
Best yet: 196
New solution
function cost: 118
child voicing cost: 75
Best yet: 193
New solution
function cost: 118
child voicing cost: 73
Best yet: 191
New solution
function cost: 118
child voicing cost: 66
Best yet: 184

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (2, "T", [(48, 1), (48, 1), (55, 5), (64, 3)])    
 (0, "T", [(48, 1), (48, 1), (55, 5), (64, 3)])    
 (0, "D7", [(43, 1), (53, 7), (62, 5), (71, 3)])   
 (2, "Ts", [(45, 1), (52, 5), (60, 3), (72, 3)])   
 (2, "D", [(43, 1), (55, 1), (62, 5), (71, 3)])    
 (6, "D7", [(43, 1), (53, 7), (62, 5), (71, 3)])   
 (6, "Ts", [(45, 1), (52, 5), (60, 3), (72, 3)])   
 (10, "Ts", [(45, 1), (57, 1), (64, 5), (72, 3)])  
 (8, "Ts", [(45, 1), (60, 3), (64, 5), (69, 1)])   
 (4, "D7/3", [(47, 3), (62, 5), (65, 7), (67, 1)]) 
 (6, "T", [(48, 1), (60, 1), (64, 3), (67, 5)])    
 (4, "S65/6", [(50, 6), (57, 3), (60, 5), (65, 1)])
 (4, "D7-1", [(50, 5), (53, 7), (59, 3), (65, 7)]) 
 ?                                                 
 (2, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])    
 (8, "D/5", [(50, 5), (55, 1), (59, 3), (62, 5)])  
 (6, "T/3", [(52, 3), (55, 5), (60, 1), (60, 1)])  
 (6, "S", [(53, 1), (53, 1), (57, 3), (60, 5)])    
 (2, "S65/6", [(50, 6), (53, 1), (57, 3), (60, 5)])
 (12, "D7-1", [(50, 5), (53, 7), (59, 3), (62, 5)])
 (10, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])   
 (0, "D7/3", [(47, 3), (53, 7), (62, 5), (67, 1)]) 
 (2, "T", [(48, 1), (52, 3), (60, 1), (67, 5)])    
 (10, "D", [(55, 1), (55, 1), (59, 3), (62, 5)])   
 (14, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])   
 (14, "T", [(48, 1), (55, 5), (60, 1), (64, 3)])   

Done. Total checked: 164906, Pruned: 182003, completed: 39, time: 3.572000026702881, efficiency: 10.918252997886672
Results: bestval_func: 118, bestval_voices: 66
(16, 412, 412, 412)
Total time for optimisation of piece: 10.391999959945679
["T", "T", "D7", "Ts", "D", "D7", "Ts", "Ts", "Ts", "D7/3", "T", "S65/6", "D7-1", "D7-1", "T", "T", "D7-1", "D7/3", "T", "D7-1", "T", "D/5", "T/3", "S", "S65/6", "D7-1", "T", "D7/3", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-234.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-247.csv
[0 0 0 1 0 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 1 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 0 0 1 0 0 2 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 0 0 0 0 1 1 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 1 1 0 0 0; 0 2 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 1 0 0 0; 0 0 0 0 0 1 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 2 0 0 1 0 0 0 0 0]
Key Counter is [16 13 0 17 0 8 4 15 31 0 17 0]
Key Score is [39; 106; 32; 104; 65; 56; 90; 35; 117; 48; 73; 82]
Position Counter for 9 is [31 0 17 0 16 13 0 17 0 8 4 15]
Any[[9.0, 78.75, 1.0]]
[9, 79, 1]
9 G# Major

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (48, 3), (56, 1), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (51, 5), (56, 1), (60, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                           
 [(0, "S"), (0, "S/3"), (0, "S/5"), (0, "S65"), (0, "S65/6"), (0, "T64"), (0, "Ts"), (4, "D64"), (4, "S6"), (4, "Ss")  …  (6, "D/3"), (6, "D/5"), (6, "D7"), (6, "D7-5"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T-5"), (6, "Tm"), (10, "D7-1")]                 
 [(2, "D"), (2, "D/3"), (2, "D/5"), (2, "D7"), (2, "D7-1"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (2, "S6"), (2, "S65")  …  (6, "S/3"), (6, "S/5"), (6, "Tm"), (6, "Ts"), (8, "D7-5"), (8, "T"), (8, "T-5"), (8, "T/3"), (8, "T/5"), (12, "D-5")]                    
 [(0, "T"), (0, "T/3"), (0, "T/5"), (0, "Tm"), (2, "D7"), (2, "D7-5"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (2, "T54")  …  (6, "D7-1"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "S6"), (6, "S65"), (6, "S65/6"), (6, "Ss"), (6, "T64"), (10, "T-5")]                  
 [(0, "D7-1"), (0, "S"), (0, "S/3"), (0, "S6"), (0, "Ss"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/7"), (4, "T54")  …  (6, "S65/6"), (6, "T"), (6, "T/3"), (8, "D"), (8, "D-5"), (8, "D/3"), (8, "D54"), (8, "T64"), (10, "Ts"), (12, "T-5")]                    
 [(6, "Ss"), (8, "D64"), (8, "T/3"), (8, "Tm"), (10, "D7"), (10, "D7-1"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S")  …  (12, "D54"), (12, "D7-5"), (12, "S65/6"), (14, "D"), (14, "T"), (16, "D-5"), (16, "D/3"), (16, "T64"), (16, "Ts"), (24, "T-5")]     
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "D/3"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "D"), (8, "D7-1"), (10, "D64"), (12, "S6"), (14, "D7-5"), (14, "T-5"), (14, "Ts"), (16, "S"), (16, "S/3"), (18, "D-5")]                
 [(0, "S65/6"), (4, "S/3"), (4, "Ss"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "Ts"), (8, "D54"), (10, "D"), (10, "D/3"), (10, "D7-1"), (10, "T"), (12, "T-5"), (16, "D64"), (16, "D7-5"), (16, "T/3"), (20, "D-5")]                          
 [(8, "S/3"), (8, "T64"), (10, "D"), (12, "D/3"), (12, "D54"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (12, "T54"), (14, "D7")  …  (14, "T/3"), (14, "Tm"), (16, "D-5"), (16, "D64"), (16, "D7-5"), (16, "Ts"), (18, "D7-1"), (18, "S"), (22, "S6"), (22, "Ss")]     
 [(2, "T"), (2, "T/3"), (2, "T/5"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ts"), (8, "D/3")  …  (10, "S/3"), (10, "S/5"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (14, "D"), (14, "S6"), (14, "Ss"), (16, "D-5")]          
 [(0, "S65"), (0, "S65/6"), (4, "S/3"), (4, "S/5"), (4, "Ss"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S")  …  (10, "D/5"), (10, "D7-1"), (10, "S6"), (10, "T"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (20, "D-5")]         
 [(0, "D7-1"), (4, "Ss"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S6"), (12, "S65"), (12, "S65/6"), (12, "T-5")  …  (16, "T54"), (16, "T64"), (16, "Tm"), (18, "S"), (18, "T"), (18, "T/3"), (18, "T/5"), (18, "Ts"), (20, "D7-5"), (24, "D-5")]  
 [(2, "T-5"), (8, "T"), (10, "S65/6"), (10, "Ts"), (16, "D7"), (16, "D7-1"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S"), (16, "S/3"), (18, "D/3"), (18, "D64"), (18, "T/3"), (18, "Tm"), (20, "Ss"), (22, "D54"), (22, "D7-5"), (24, "D"), (26, "D-5")]      
 [(10, "D7-1"), (10, "S65/6"), (10, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S"), (16, "T"), (16, "T/3")  …  (18, "D54"), (18, "S/3"), (18, "T54"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "S6"), (22, "D64"), (26, "D7-5"), (30, "D-5")]
 [(6, "D/3"), (8, "D"), (8, "T"), (8, "T/3"), (10, "D54"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Ts"), (14, "D64"), (14, "D7-5"), (16, "D7-1"), (16, "S"), (18, "D-5"), (18, "S/3"), (18, "T-5"), (20, "S6")]                    
 [(6, "D64"), (6, "T/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "T"), (10, "D/3"), (10, "D54"), (10, "D7-5"), (10, "S65/6"), (12, "D"), (12, "Ss"), (14, "D-5"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]                         

Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (48, 3), (56, 1), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (51, 5), (56, 1), (60, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 98
child voicing cost: 152
Best yet: 250
New solution
function cost: 98
child voicing cost: 140
Best yet: 238
New solution
function cost: 98
child voicing cost: 138
Best yet: 236
New solution
function cost: 98
child voicing cost: 137
Best yet: 235
New solution
function cost: 98
child voicing cost: 134
Best yet: 232
New solution
function cost: 98
child voicing cost: 129
Best yet: 227
New solution
function cost: 98
child voicing cost: 128
Best yet: 226
New solution
function cost: 98
child voicing cost: 126
Best yet: 224
New solution
function cost: 96
child voicing cost: 123
Best yet: 219
New solution
function cost: 80
child voicing cost: 119
Best yet: 199
New solution
function cost: 84
child voicing cost: 113
Best yet: 197
New solution
function cost: 80
child voicing cost: 114
Best yet: 194
New solution
function cost: 82
child voicing cost: 109
Best yet: 191
New solution
function cost: 82
child voicing cost: 108
Best yet: 190
New solution
function cost: 82
child voicing cost: 107
Best yet: 189
New solution
function cost: 84
child voicing cost: 104
Best yet: 188
New solution
function cost: 92
child voicing cost: 94
Best yet: 186
New solution
function cost: 92
child voicing cost: 93
Best yet: 185
New solution
function cost: 92
child voicing cost: 92
Best yet: 184
New solution
function cost: 92
child voicing cost: 91
Best yet: 183
New solution
function cost: 92
child voicing cost: 90
Best yet: 182
New solution
function cost: 92
child voicing cost: 89
Best yet: 181
New solution
function cost: 92
child voicing cost: 79
Best yet: 171
New solution
function cost: 92
child voicing cost: 78
Best yet: 170
New solution
function cost: 92
child voicing cost: 77
Best yet: 169
New solution
function cost: 92
child voicing cost: 76
Best yet: 168
New solution
function cost: 92
child voicing cost: 75
Best yet: 167
New solution
function cost: 92
child voicing cost: 74
Best yet: 166
New solution
function cost: 92
child voicing cost: 73
Best yet: 165

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "Tm"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "S/5")  …  (10, "S65/6"), (10, "T54"), (12, "D"), (12, "S6"), (12, "Ss"), (14, "D-5"), (14, "T64"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]        
 [(4, "D7-1"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (8, "T"), (10, "D/3"), (10, "D54"), (10, "S65")  …  (12, "S"), (12, "S/3"), (12, "Ts"), (14, "D64"), (14, "T-5"), (14, "T/3"), (14, "T64"), (14, "Tm"), (18, "D7-5"), (22, "D-5")]       
 [(6, "D/3"), (6, "D/5"), (8, "D"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "S65"), (10, "S65/6"), (10, "T54"), (12, "D7")  …  (14, "Tm"), (16, "D7-1"), (16, "S"), (18, "D-5"), (18, "S/3"), (18, "S/5"), (18, "T-5"), (18, "T64"), (20, "S6"), (20, "Ss")]        
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D/5")  …  (10, "Ts"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "D"), (16, "S6"), (16, "Ss"), (18, "D-5")]        
 [(0, "S/3"), (0, "S/5"), (0, "T64"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "T"), (8, "Ss"), (8, "T-5")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5")]         
 [(0, "T"), (0, "T/3"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D/3"), (10, "D64"), (10, "S65")  …  (10, "Ts"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D7-5"), (16, "D"), (16, "S6"), (16, "Ss"), (18, "D-5")]        
 [(0, "S/3"), (0, "S/5"), (0, "T64"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "T"), (8, "Ss"), (8, "T-5")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5")]         
 [(4, "S"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D7-1")  …  (12, "D"), (12, "D/3"), (12, "D/5"), (12, "Ts"), (14, "D64"), (14, "D7-5"), (14, "Ss"), (14, "T-5"), (14, "Tm"), (18, "D-5")]          
 [(0, "D7-1"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S6"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D/5")  …  (12, "T/3"), (12, "T/5"), (14, "D7-5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (14, "Tm"), (16, "Ts"), (18, "D-5"), (18, "T-5")]       
 [(8, "D7-1"), (8, "S"), (8, "S/3"), (8, "T"), (8, "T/3"), (10, "S65"), (10, "S65/6"), (10, "T-5"), (10, "T54"), (10, "Tm")  …  (14, "D64"), (14, "T64"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (18, "D/3"), (18, "D54"), (18, "D7-5"), (20, "D"), (22, "D-5")]  
 [(6, "S65"), (6, "S65/6"), (8, "Ts"), (10, "D7-1"), (10, "S/3"), (10, "S/5"), (10, "Ss"), (10, "T64"), (12, "D7"), (12, "D7/3")  …  (14, "T54"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "S6"), (18, "T/3"), (18, "T/5"), (22, "D7-5"), (26, "D-5")]
 [(4, "D/5"), (6, "T"), (6, "T/5"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D64"), (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/5"), (16, "T64"), (18, "Ss")]                                           
 [(2, "T64"), (4, "T"), (6, "S65/6"), (6, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/5"), (14, "D/5"), (14, "D64"), (14, "T/5"), (16, "D7-1"), (16, "Ss"), (18, "D54"), (18, "D7-5"), (20, "D")]                             
 [(2, "T64"), (4, "T"), (6, "S65/6"), (6, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/5"), (14, "D/5"), (14, "D64"), (14, "T/5"), (16, "D7-1"), (16, "Ss"), (18, "D54"), (18, "D7-5"), (20, "D")]                             
 [(16, "D7"), (24, "D")]                                                                                                                                                                                                                                           
 [(10, "T")]                                                                                                                                                                                                                                                       
 [(18, "T")]                                                                                                                                                                                                                                                       

Done. Total checked: 145987, Pruned: 166893, completed: 29, time: 2.937999963760376, efficiency: 9.87066043489075
Results: bestval_func: 92, bestval_voices: 73
(15, 360, 360, 360)
[0 0 0 1 0 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 1 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 0 0 1 0 0 2 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 0 0 0 0 1 1 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 1 1 0 0 0; 0 2 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 1 0 0 0; 0 0 0 0 0 1 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 2 0 0 1 0 0 0 0 0]
Key Counter is [16 13 0 17 0 8 4 15 31 0 17 0]
Key Score is [39; 106; 32; 104; 65; 56; 90; 35; 117; 48; 73; 82]
Position Counter for 9 is [31 0 17 0 16 13 0 17 0 8 4 15]
Any[[9.0, 78.75, 1.0]]
[9, 79, 1]
9 G# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 112
child voicing cost: 207
Best yet: 319
New solution
function cost: 112
child voicing cost: 199
Best yet: 311
New solution
function cost: 112
child voicing cost: 197
Best yet: 309
New solution
function cost: 112
child voicing cost: 193
Best yet: 305
New solution
function cost: 112
child voicing cost: 192
Best yet: 304
New solution
function cost: 112
child voicing cost: 188
Best yet: 300
New solution
function cost: 112
child voicing cost: 185
Best yet: 297
New solution
function cost: 112
child voicing cost: 183
Best yet: 295
New solution
function cost: 112
child voicing cost: 182
Best yet: 294
New solution
function cost: 112
child voicing cost: 181
Best yet: 293
New solution
function cost: 112
child voicing cost: 178
Best yet: 290
New solution
function cost: 112
child voicing cost: 176
Best yet: 288
New solution
function cost: 112
child voicing cost: 174
Best yet: 286
New solution
function cost: 112
child voicing cost: 172
Best yet: 284
New solution
function cost: 112
child voicing cost: 168
Best yet: 280
New solution
function cost: 110
child voicing cost: 163
Best yet: 273
New solution
function cost: 110
child voicing cost: 160
Best yet: 270
New solution
function cost: 112
child voicing cost: 156
Best yet: 268
New solution
function cost: 112
child voicing cost: 153
Best yet: 265
New solution
function cost: 112
child voicing cost: 152
Best yet: 264
New solution
function cost: 112
child voicing cost: 148
Best yet: 260
New solution
function cost: 110
child voicing cost: 147
Best yet: 257
New solution
function cost: 110
child voicing cost: 145
Best yet: 255
New solution
function cost: 110
child voicing cost: 142
Best yet: 252
New solution
function cost: 110
child voicing cost: 140
Best yet: 250
New solution
function cost: 114
child voicing cost: 135
Best yet: 249
New solution
function cost: 114
child voicing cost: 134
Best yet: 248
New solution
function cost: 114
child voicing cost: 129
Best yet: 243
New solution
function cost: 112
child voicing cost: 128
Best yet: 240
New solution
function cost: 112
child voicing cost: 127
Best yet: 239
New solution
function cost: 110
child voicing cost: 127
Best yet: 237
New solution
function cost: 110
child voicing cost: 122
Best yet: 232
New solution
function cost: 106
child voicing cost: 123
Best yet: 229
New solution
function cost: 106
child voicing cost: 118
Best yet: 224
New solution
function cost: 106
child voicing cost: 116
Best yet: 222
New solution
function cost: 106
child voicing cost: 115
Best yet: 221
New solution
function cost: 106
child voicing cost: 112
Best yet: 218
New solution
function cost: 106
child voicing cost: 105
Best yet: 211
New solution
function cost: 110
child voicing cost: 96
Best yet: 206
New solution
function cost: 110
child voicing cost: 94
Best yet: 204
New solution
function cost: 106
child voicing cost: 92
Best yet: 198
New solution
function cost: 106
child voicing cost: 90
Best yet: 196

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])    
 (0, "S", [(49, 1), (56, 5), (61, 1), (65, 3)])    
 (2, "D", [(51, 1), (51, 1), (58, 5), (67, 3)])    
 (0, "T", [(44, 1), (51, 5), (60, 3), (68, 1)])    
 (0, "D7-1", [(46, 5), (49, 7), (61, 7), (67, 3)]) 
 (10, "D7", [(51, 1), (55, 3), (58, 5), (61, 7)])  
 (14, "Ts", [(53, 1), (56, 3), (56, 3), (60, 5)])  
 (6, "Ts", [(53, 1), (53, 1), (56, 3), (60, 5)])   
 (8, "S/3", [(53, 3), (56, 5), (56, 5), (61, 1)])  
 (2, "T/5", [(51, 5), (56, 1), (60, 3), (63, 5)])  
 (6, "S", [(49, 1), (56, 5), (61, 1), (65, 3)])    
 (0, "D7-1", [(46, 5), (58, 5), (61, 7), (67, 3)]) 
 (8, "T", [(44, 1), (60, 3), (63, 5), (68, 1)])    
 ?                                                 
 (0, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (0, "S/3", [(53, 3), (61, 1), (68, 5), (73, 1)])  
 (4, "S", [(49, 1), (61, 1), (68, 5), (77, 3)])    
 (0, "D7-1", [(46, 5), (61, 7), (67, 3), (73, 7)]) 
 (8, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])    
 (10, "D7-1", [(46, 5), (61, 7), (67, 3), (70, 5)])
 (6, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])    
 (4, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])    
 (4, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])    
 (16, "D7", [(51, 1), (61, 7), (67, 3), (70, 5)])  
 (10, "T", [(44, 1), (60, 3), (63, 5), (68, 1)])   
 (10, "T", [(44, 1), (60, 3), (63, 5), (68, 1)])   

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (63, 3), (66, 5), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (63, 3), (71, 1), (78, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (66, 5), (71, 1), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (59, 1), (66, 5), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                          
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]          
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "Tm"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "Ts")  …  (6, "S"), (6, "S/3"), (6, "S/5"), (6, "S65"), (6, "S65/6"), (8, "D-5"), (8, "D7-1"), (10, "S6"), (10, "Ss"), (10, "T-5")]                
 [(2, "T64"), (4, "Ts"), (6, "S65"), (6, "S65/6"), (6, "T54"), (10, "T-5"), (12, "D"), (12, "D/3"), (12, "D/5"), (12, "D7")  …  (12, "S/5"), (12, "T"), (14, "T/3"), (14, "T/5"), (16, "D7-1"), (16, "S6"), (16, "Ss"), (16, "Tm"), (18, "D-5"), (18, "D7-5")]       
 [(0, "D-5"), (4, "D7-5"), (8, "D64"), (10, "D"), (12, "D54"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (14, "S"), (16, "T54")  …  (18, "T"), (18, "T/3"), (18, "Tm"), (20, "S/3"), (20, "S65"), (20, "S65/6"), (20, "T64"), (22, "Ts"), (28, "T-5"), (30, "D/3")]    
 [(14, "S"), (16, "D64"), (16, "D7-5"), (16, "T/3"), (16, "Tm"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D-5")  …  (20, "S65/6"), (22, "D"), (22, "D/3"), (22, "Ss"), (22, "T"), (24, "S/3"), (24, "T64"), (24, "Ts"), (26, "D7-1"), (32, "T-5")]
 [(6, "D64"), (6, "T/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "T"), (10, "D/3"), (10, "D54"), (10, "D7-5"), (10, "S65/6"), (12, "D"), (12, "Ss"), (14, "D-5"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]                        
 [(0, "T/3"), (4, "D54"), (6, "D"), (6, "T"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D7-5"), (12, "S65/6"), (14, "S"), (14, "S/3"), (16, "D/3"), (16, "Ss"), (16, "T-5"), (16, "Ts"), (20, "D7-1")]                    
 [(4, "T64"), (8, "D54"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D"), (10, "T"), (12, "D64"), (12, "Ss"), (12, "T-5")  …  (14, "D7/3"), (14, "D7/7"), (14, "S"), (14, "S/3"), (14, "Tm"), (16, "D-5"), (16, "D/3"), (16, "D7-5"), (18, "S6"), (20, "D7-1")]     
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "D/3"), (8, "D/5"), (8, "Tm"), (10, "D7-1")  …  (10, "T/5"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "D"), (14, "Ts"), (16, "D-5"), (16, "T64"), (20, "T-5")]      
 [(2, "S6"), (2, "Ss"), (6, "D7-1"), (6, "S"), (6, "S/3"), (6, "S/5"), (8, "S65"), (8, "S65/6"), (12, "D/3"), (12, "D/5")  …  (14, "D7/5"), (14, "D7/7"), (14, "T"), (14, "T/3"), (14, "T/5"), (14, "Ts"), (16, "D7-5"), (18, "D"), (20, "D-5"), (20, "T-5")]        
 [(6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (10, "S/3"), (10, "S/5")  …  (12, "Ts"), (14, "D64"), (14, "D7-5"), (14, "T54"), (14, "Tm"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "D-5"), (18, "T-5")]      
 [(6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ss"), (10, "S/3"), (10, "T64"), (12, "D"), (12, "D/3")  …  (12, "S"), (12, "Ts"), (14, "D54"), (14, "D64"), (14, "D7-5"), (14, "Tm"), (16, "T"), (16, "T/3"), (18, "D-5"), (18, "T-5")]       
 [(4, "D54"), (4, "S65/6"), (6, "D"), (6, "D/3"), (8, "D64"), (8, "S/3"), (8, "Ss"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "Ts"), (12, "D7-5"), (14, "D7-1"), (14, "T"), (14, "T/3"), (16, "D-5"), (16, "T-5")]                      
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ss"), (8, "D/3"), (8, "D64"), (10, "D7-1"), (10, "S"), (10, "S/3"), (10, "T"), (10, "T/3"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (14, "D"), (14, "Ts"), (16, "D-5"), (20, "T-5")]                      
 [(2, "Ss"), (6, "D7-1"), (6, "S"), (6, "S/3"), (8, "S65"), (12, "D/3"), (12, "D64"), (12, "Tm"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T"), (14, "T/3"), (14, "Ts"), (16, "D54"), (16, "D7-5"), (18, "D"), (20, "D-5"), (20, "T-5")]          

Done. Total checked: 125159, Pruned: 139146, completed: 42, time: 3.0789999961853027, efficiency: 13.640792481986194
Results: bestval_func: 106, bestval_voices: 90
(16, 360, 360, 360)
Total time for optimisation of piece: 7.496999979019165
["T", "S", "D", "T", "D7-1", "D7", "Ts", "Ts", "S/3", "T/5", "S", "D7-1", "T", "S", "D", "D", "D7-1", "T", "T/3", "D/5", "T", "S/3", "S", "D7-1", "T", "D7-1", "T", "T", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-247.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-26.csv
[0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 0 0 1 0 0 1 0 0 2; 0 0 0 0 0 0 3 0 0 0 1 0; 0 0 0 0 3 0 1 0 0 0 0 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 0 0 0 0 0 2 0 0 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 0 0 1 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 2 0 0 0 2 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1]
Key Counter is [0 12 0 10 24 1 23 0 24 0 3 34]
Key Score is [59; 73; 93; 38; 127; 28; 107; 81; 50; 117; 14; 130]
Position Counter for 12 is [34 0 12 0 10 24 1 23 0 24 0 3]
Any[[12.0, 94.0, 1.0]]
[12, 94, 1]
12 B Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (63, 3), (66, 5), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (63, 3), (71, 1), (78, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (66, 5), (71, 1), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (59, 1), (66, 5), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 122
child voicing cost: 188
Best yet: 310
New solution
function cost: 122
child voicing cost: 174
Best yet: 296
New solution
function cost: 122
child voicing cost: 169
Best yet: 291
New solution
function cost: 122
child voicing cost: 161
Best yet: 283
New solution
function cost: 122
child voicing cost: 160
Best yet: 282
New solution
function cost: 122
child voicing cost: 153
Best yet: 275
New solution
function cost: 122
child voicing cost: 152
Best yet: 274
New solution
function cost: 122
child voicing cost: 150
Best yet: 272
New solution
function cost: 122
child voicing cost: 149
Best yet: 271
New solution
function cost: 122
child voicing cost: 147
Best yet: 269
New solution
function cost: 122
child voicing cost: 146
Best yet: 268
New solution
function cost: 122
child voicing cost: 143
Best yet: 265
New solution
function cost: 122
child voicing cost: 142
Best yet: 264
New solution
function cost: 122
child voicing cost: 141
Best yet: 263
New solution
function cost: 122
child voicing cost: 140
Best yet: 262
New solution
function cost: 122
child voicing cost: 139
Best yet: 261
New solution
function cost: 122
child voicing cost: 138
Best yet: 260
New solution
function cost: 122
child voicing cost: 133
Best yet: 255
New solution
function cost: 122
child voicing cost: 132
Best yet: 254
New solution
function cost: 126
child voicing cost: 127
Best yet: 253
New solution
function cost: 114
child voicing cost: 137
Best yet: 251
New solution
function cost: 114
child voicing cost: 136
Best yet: 250
New solution
function cost: 114
child voicing cost: 134
Best yet: 248
New solution
function cost: 114
child voicing cost: 133
Best yet: 247
New solution
function cost: 114
child voicing cost: 131
Best yet: 245
New solution
function cost: 114
child voicing cost: 130
Best yet: 244
New solution
function cost: 114
child voicing cost: 129
Best yet: 243
New solution
function cost: 114
child voicing cost: 128
Best yet: 242
New solution
function cost: 114
child voicing cost: 127
Best yet: 241
New solution
function cost: 114
child voicing cost: 122
Best yet: 236
New solution
function cost: 114
child voicing cost: 121
Best yet: 235
New solution
function cost: 122
child voicing cost: 111
Best yet: 233
New solution
function cost: 122
child voicing cost: 110
Best yet: 232
New solution
function cost: 126
child voicing cost: 103
Best yet: 229
New solution
function cost: 126
child voicing cost: 102
Best yet: 228
New solution
function cost: 118
child voicing cost: 109
Best yet: 227
New solution
function cost: 118
child voicing cost: 107
Best yet: 225
New solution
function cost: 118
child voicing cost: 106
Best yet: 224
New solution
function cost: 118
child voicing cost: 105
Best yet: 223
New solution
function cost: 118
child voicing cost: 104
Best yet: 222

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(47, 1), (63, 3), (71, 1), (78, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "S6"), (2, "Ss"), (6, "D7-1"), (6, "S"), (6, "S/3"), (6, "S/5"), (8, "S65"), (8, "S65/6"), (12, "D/3"), (12, "D/5")  …  (14, "D7/7"), (14, "T"), (14, "T/3"), (14, "T/5"), (14, "Ts"), (16, "D7-5"), (16, "T54"), (18, "D"), (20, "D-5"), (20, "T-5")]       
 [(4, "D7-1"), (4, "S65"), (4, "S65/6"), (8, "D/3"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S")  …  (12, "T64"), (14, "D"), (14, "S6"), (14, "T"), (14, "T/3"), (14, "Ts"), (16, "Tm"), (20, "D64"), (20, "D7-5"), (24, "D-5")]      
 [(0, "T54"), (2, "T"), (2, "T/3"), (2, "T/5"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "S65")  …  (12, "D/3"), (12, "D/5"), (12, "D7-5"), (12, "Ss"), (12, "T-5"), (12, "Tm"), (12, "Ts"), (14, "S6"), (16, "D-5"), (16, "D7-1")]       
 [(2, "T"), (2, "T/3"), (2, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "S65"), (8, "S65/6"), (10, "D")  …  (12, "D/3"), (12, "D/5"), (12, "D7-5"), (12, "Ss"), (12, "T-5"), (12, "Tm"), (12, "Ts"), (14, "S6"), (16, "D-5"), (16, "D7-1")]      
 [(0, "S/3"), (0, "S/5"), (0, "T64"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "T"), (8, "Ss"), (8, "T-5")  …  (14, "D"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5"), (20, "D/3"), (20, "D/5")]         
 [(6, "S"), (10, "S6"), (10, "Ss"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "Tm"), (12, "Ts"), (14, "D7-1"), (16, "D-5")  …  (16, "T54"), (16, "T64"), (18, "D7"), (18, "D7/3"), (18, "D7/7"), (18, "T"), (22, "D"), (22, "D/3"), (24, "D54"), (24, "T-5")] 
 [(2, "Ts"), (6, "S/3"), (6, "S/5"), (6, "T64"), (8, "S"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "T/3"), (10, "T/5")  …  (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "D/5"), (20, "D7-1")]
 [(2, "S"), (2, "S/3"), (2, "S/5"), (4, "S65"), (4, "S65/6"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "Tm")  …  (10, "D7/5"), (10, "D7/7"), (10, "T"), (12, "D7-5"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3"), (20, "D/5")]        
 [(0, "S65"), (0, "S65/6"), (4, "S/3"), (4, "S/5"), (4, "Ss"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7")  …  (10, "D/5"), (10, "D7-1"), (10, "S6"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (20, "D-5")]    
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (4, "D54"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "D"), (6, "D/3"), (6, "D7-1")  …  (8, "Ss"), (8, "T64"), (8, "Tm"), (10, "S6"), (10, "Ts"), (12, "D64"), (12, "D7-5"), (14, "S"), (16, "D-5"), (16, "T-5")]           
 [(0, "T54"), (2, "T"), (2, "T/3"), (2, "T/5"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "S65")  …  (12, "D/3"), (12, "D/5"), (12, "D7-5"), (12, "Ss"), (12, "T-5"), (12, "Tm"), (12, "Ts"), (14, "S6"), (16, "D-5"), (16, "D7-1")]       
 [(2, "D64"), (2, "D7-5"), (2, "T/5"), (6, "D54"), (8, "D"), (8, "S"), (8, "S/5"), (10, "Tm"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "T"), (14, "S65/6"), (16, "D7-1"), (18, "D/5"), (22, "T-5")]                                             
 [(2, "T"), (2, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "S"), (10, "S/5"), (12, "D/5"), (12, "D64"), (12, "D7-5"), (12, "T-5"), (12, "Ts"), (16, "D-5"), (16, "D7-1")]                                 
 [(0, "T"), (0, "T/5"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/5"), (10, "D54"), (10, "D64"), (10, "S65/6"), (10, "Tm"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/5"), (14, "D7-5"), (16, "Ss")]                                 
 [(10, "D7"), (14, "D")]                                                                                                                                                                                                                                           
 [(12, "T")]                                                                                                                                                                                                                                                       
 [(12, "T")]                                                                                                                                                                                                                                                       

Done. Total checked: 72251, Pruned: 84369, completed: 40, time: 1.6559998989105225, efficiency: 24.15459084648247
Results: bestval_func: 118, bestval_voices: 104
(15, 383, 383, 383)
[0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 0 0 1 0 0 1 0 0 2; 0 0 0 0 0 0 3 0 0 0 1 0; 0 0 0 0 3 0 1 0 0 0 0 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 0 0 0 0 0 2 0 0 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 0 0 1 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 2 0 0 0 2 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1]
Key Counter is [0 12 0 10 24 1 23 0 24 0 3 34]
Key Score is [59; 73; 93; 38; 127; 28; 107; 81; 50; 117; 14; 130]
Position Counter for 12 is [34 0 12 0 10 24 1 23 0 24 0 3]
Any[[12.0, 94.0, 1.0]]
[12, 94, 1]
12 B Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(47, 1), (63, 3), (71, 1), (78, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 78
child voicing cost: 183
Best yet: 261
New solution
function cost: 78
child voicing cost: 175
Best yet: 253
New solution
function cost: 78
child voicing cost: 173
Best yet: 251
New solution
function cost: 78
child voicing cost: 171
Best yet: 249
New solution
function cost: 78
child voicing cost: 168
Best yet: 246
New solution
function cost: 78
child voicing cost: 164
Best yet: 242
New solution
function cost: 78
child voicing cost: 163
Best yet: 241
New solution
function cost: 70
child voicing cost: 170
Best yet: 240
New solution
function cost: 70
child voicing cost: 168
Best yet: 238
New solution
function cost: 70
child voicing cost: 165
Best yet: 235
New solution
function cost: 70
child voicing cost: 164
Best yet: 234
New solution
function cost: 76
child voicing cost: 157
Best yet: 233
New solution
function cost: 76
child voicing cost: 155
Best yet: 231
New solution
function cost: 76
child voicing cost: 152
Best yet: 228
New solution
function cost: 76
child voicing cost: 151
Best yet: 227
New solution
function cost: 76
child voicing cost: 150
Best yet: 226
New solution
function cost: 70
child voicing cost: 155
Best yet: 225
New solution
function cost: 70
child voicing cost: 153
Best yet: 223
New solution
function cost: 76
child voicing cost: 145
Best yet: 221
New solution
function cost: 76
child voicing cost: 142
Best yet: 218
New solution
function cost: 70
child voicing cost: 147
Best yet: 217
New solution
function cost: 70
child voicing cost: 146
Best yet: 216
New solution
function cost: 76
child voicing cost: 139
Best yet: 215
New solution
function cost: 76
child voicing cost: 137
Best yet: 213
New solution
function cost: 76
child voicing cost: 132
Best yet: 208
New solution
function cost: 76
child voicing cost: 130
Best yet: 206
New solution
function cost: 76
child voicing cost: 129
Best yet: 205
New solution
function cost: 76
child voicing cost: 128
Best yet: 204
New solution
function cost: 76
child voicing cost: 126
Best yet: 202
New solution
function cost: 76
child voicing cost: 123
Best yet: 199
New solution
function cost: 76
child voicing cost: 122
Best yet: 198
New solution
function cost: 80
child voicing cost: 117
Best yet: 197
New solution
function cost: 76
child voicing cost: 116
Best yet: 192
New solution
function cost: 76
child voicing cost: 113
Best yet: 189
New solution
function cost: 84
child voicing cost: 104
Best yet: 188
New solution
function cost: 84
child voicing cost: 102
Best yet: 186
New solution
function cost: 84
child voicing cost: 99
Best yet: 183
New solution
function cost: 84
child voicing cost: 98
Best yet: 182
New solution
function cost: 90
child voicing cost: 91
Best yet: 181
New solution
function cost: 90
child voicing cost: 89
Best yet: 179
New solution
function cost: 90
child voicing cost: 84
Best yet: 174
New solution
function cost: 90
child voicing cost: 82
Best yet: 172
New solution
function cost: 90
child voicing cost: 81
Best yet: 171

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(59, 1), (59, 1), (66, 5), (75, 3)])    
 (0, "D", [(54, 1), (66, 1), (70, 3), (73, 5)])    
 (0, "T", [(59, 1), (66, 5), (71, 1), (75, 3)])    
 (4, "Ts", [(56, 1), (68, 1), (71, 3), (75, 5)])   
 (10, "D", [(54, 1), (61, 5), (70, 3), (78, 1)])   
 (16, "D7-5", [(54, 1), (66, 1), (70, 3), (76, 7)])
 (8, "T", [(59, 1), (66, 5), (71, 1), (75, 3)])    
 (6, "T", [(59, 1), (66, 5), (71, 1), (75, 3)])    
 (10, "T", [(59, 1), (59, 1), (66, 5), (75, 3)])   
 (8, "D/3", [(58, 3), (61, 5), (66, 1), (73, 5)])  
 (6, "S/3", [(56, 3), (59, 5), (64, 1), (76, 1)])  
 (8, "D7/3", [(58, 3), (61, 5), (66, 1), (76, 7)]) 
 (12, "Ts", [(56, 1), (63, 5), (68, 1), (71, 3)])  
 ?                                                 
 (14, "D7-1", [(49, 5), (64, 7), (70, 3), (73, 5)])
 (10, "T/3", [(51, 3), (66, 5), (71, 1), (71, 1)]) 
 (2, "S", [(52, 1), (64, 1), (68, 3), (71, 5)])    
 (0, "S65", [(52, 1), (61, 6), (68, 3), (71, 5)])  
 (6, "D", [(54, 1), (61, 5), (66, 1), (70, 3)])    
 (2, "T/5", [(54, 5), (63, 3), (66, 5), (71, 1)])  
 (8, "D", [(54, 1), (66, 1), (70, 3), (73, 5)])    
 (2, "T", [(47, 1), (66, 5), (71, 1), (75, 3)])    
 (0, "T", [(47, 1), (66, 5), (71, 1), (75, 3)])    
 (10, "D7", [(54, 1), (64, 7), (70, 3), (73, 5)])  
 (12, "T", [(47, 1), (63, 3), (66, 5), (71, 1)])   
 (12, "T", [(47, 1), (63, 3), (66, 5), (71, 1)])   

Done. Total checked: 126330, Pruned: 139642, completed: 43, time: 2.436999797821045, efficiency: 17.644646519235206
Results: bestval_func: 90, bestval_voices: 81
(16, 383, 383, 383)
Total time for optimisation of piece: 5.840000152587891
["T", "D", "T", "Ts", "D", "D7-5", "T", "T", "T", "D/3", "S/3", "D7/3", "Ts", "D", "T", "T", "D7-1", "T", "T/3", "S65/6", "D7-1", "T/3", "S", "S65", "D", "T/5", "D", "T", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-26.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-260.csv
[0 1 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 0 1 1 0 1 0 0 1 0 0 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 0 0 0 1 1 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 0 0 1 0 1 1 0 1 0; 0 0 0 1 1 0 0 1 0 0 1 0; 0 0 0 0 1 0 0 1 1 0 1 0; 1 0 0 0 1 0 0 1 1 0 0 0; 2 0 0 0 1 0 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 1 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 0 0 0 0 1 2 0 0 0 1 0; 1 0 0 0 0 2 1 0 0 0 0 0; 1 0 1 0 0 2 0 0 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 1 0 0 0 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 0 1 0 0 1 0 1 1 0 0 0; 0 0 1 0 0 2 0 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0]
Key Counter is [10 5 11 11 4 20 10 13 16 0 18 0]
Key Score is [58; 90; 43; 99; 46; 76; 80; 48; 93; 46; 83; 64]
Position Counter for 4 is [11 4 20 10 13 16 0 18 0 10 5 11]
Any[[4.0, 61.25, 1.0]]
[4, 61, 1]
4 D# Major

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (55, 3), (58, 5), (63, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (63, 1), (67, 3), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (51, 1), (58, 5), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "T")]                                                                                                                                                                                                                                                        
 [(0, "D"), (0, "D-5"), (0, "D/3"), (0, "D/5"), (0, "D64"), (0, "D7"), (0, "D7-5"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7")  …  (4, "S"), (4, "S/3"), (4, "S/5"), (4, "S6"), (4, "S65"), (4, "S65/6"), (4, "Ss"), (4, "T64"), (4, "Ts"), (6, "T-5")]                 
 [(0, "D"), (0, "D-5"), (0, "D/3"), (0, "D/5"), (0, "D64"), (0, "D7"), (0, "D7-5"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7")  …  (4, "D7-1"), (4, "S"), (4, "S/3"), (4, "S/5"), (4, "S6"), (4, "S65"), (4, "S65/6"), (4, "Ss"), (4, "Ts"), (6, "T-5")]                
 [(0, "D"), (0, "D-5"), (0, "D/3"), (0, "D/5"), (0, "D64"), (0, "D7"), (0, "D7-5"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7")  …  (4, "S"), (4, "S/3"), (4, "S/5"), (4, "S6"), (4, "S65"), (4, "S65/6"), (4, "Ss"), (4, "T64"), (4, "Ts"), (6, "T-5")]                 
 [(2, "D54"), (2, "D64"), (2, "S65"), (2, "S65/6"), (2, "T"), (2, "T-5"), (2, "T/3"), (2, "Ts"), (4, "D"), (4, "D/3")  …  (4, "D7/7"), (4, "S"), (4, "S/3"), (4, "T54"), (4, "T64"), (4, "Tm"), (6, "D7-5"), (6, "Ss"), (8, "S6"), (10, "D-5")]                    
 [(4, "D7-1"), (8, "D/3"), (8, "Ss"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "T"), (10, "T/3"), (12, "D54"), (12, "S65/6"), (14, "D"), (14, "S"), (14, "Ts"), (16, "D64"), (16, "S/3"), (16, "T-5"), (16, "Tm"), (20, "D7-5"), (24, "D-5")]    
 [(6, "T"), (8, "D7-1"), (8, "S65/6"), (10, "S"), (10, "S/3"), (10, "Ts"), (12, "D/3"), (12, "Ss"), (12, "T-5"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D54"), (16, "D64"), (16, "T/3"), (16, "Tm"), (18, "D"), (20, "D7-5"), (24, "D-5")]    
 [(4, "D7-1"), (4, "S65/6"), (8, "D/3"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (12, "D54"), (12, "S/3"), (12, "T54"), (14, "D"), (14, "T"), (14, "T/3"), (14, "Ts"), (20, "D64"), (20, "D7-5"), (24, "D-5")]     
 [(4, "D"), (6, "D54"), (6, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "T"), (8, "T/3"), (8, "Tm"), (10, "D-5")  …  (10, "T64"), (12, "Ts"), (14, "D/3"), (14, "S65"), (14, "S65/6"), (18, "D7-1"), (18, "Ss"), (18, "T-5"), (20, "S"), (24, "S6")]          
 [(4, "D"), (6, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (8, "T/5"), (8, "Tm")  …  (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "S65"), (14, "S65/6"), (18, "D7-1"), (18, "Ss"), (18, "T-5"), (20, "S"), (24, "S6")]          
 [(6, "Ss"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (10, "D64"), (10, "D7-1"), (10, "S65"), (10, "S65/6")  …  (14, "D/5"), (14, "D7-5"), (14, "S/3"), (14, "S/5"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "D-5"), (18, "Ts"), (26, "T-5")]
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "D7-1"), (6, "S6"), (6, "Ss")  …  (10, "T/5"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "Ts"), (16, "D-5"), (16, "S/3"), (16, "S/5"), (16, "T64"), (20, "T-5")]    
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (6, "D"), (6, "D/3"), (6, "D7-1"), (6, "Ss"), (8, "D54"), (8, "Tm")  …  (10, "T"), (10, "T/3"), (12, "D7-5"), (12, "S65/6"), (12, "Ts"), (16, "D-5"), (16, "D64"), (16, "S/3"), (16, "T64"), (20, "T-5")]      
 [(6, "Ss"), (8, "D64"), (10, "D7"), (10, "D7-1"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "S/3"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (14, "D"), (14, "T"), (14, "T/3"), (16, "D-5"), (16, "D/3"), (16, "T64"), (16, "Ts"), (24, "T-5")]  
 [(2, "T"), (2, "T/3"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ts"), (8, "D/3"), (8, "D54"), (8, "S/3"), (8, "S65"), (8, "T64"), (10, "D"), (12, "D64"), (12, "T-5"), (14, "S"), (16, "D7-1"), (16, "D7-5"), (20, "D-5")]              
 [(6, "D64"), (8, "S"), (10, "D54"), (10, "D7-5"), (10, "S65/6"), (10, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "T"), (12, "T/3"), (14, "D-5"), (14, "D7-1"), (14, "S/3"), (14, "T64"), (16, "D"), (16, "Ts"), (18, "D/3"), (22, "T-5")] 

Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (55, 3), (58, 5), (63, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (63, 1), (67, 3), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "T", [(51, 1), (51, 1), (58, 5), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 96
child voicing cost: 174
Best yet: 270
New solution
function cost: 96
child voicing cost: 173
Best yet: 269
New solution
function cost: 96
child voicing cost: 171
Best yet: 267
New solution
function cost: 96
child voicing cost: 169
Best yet: 265
New solution
function cost: 96
child voicing cost: 162
Best yet: 258
New solution
function cost: 96
child voicing cost: 161
Best yet: 257
New solution
function cost: 96
child voicing cost: 158
Best yet: 254
New solution
function cost: 96
child voicing cost: 156
Best yet: 252
New solution
function cost: 96
child voicing cost: 155
Best yet: 251
New solution
function cost: 96
child voicing cost: 151
Best yet: 247
New solution
function cost: 96
child voicing cost: 150
Best yet: 246
New solution
function cost: 96
child voicing cost: 148
Best yet: 244
New solution
function cost: 96
child voicing cost: 147
Best yet: 243
New solution
function cost: 92
child voicing cost: 138
Best yet: 230
New solution
function cost: 92
child voicing cost: 135
Best yet: 227
New solution
function cost: 92
child voicing cost: 134
Best yet: 226
New solution
function cost: 92
child voicing cost: 131
Best yet: 223
New solution
function cost: 92
child voicing cost: 128
Best yet: 220
New solution
function cost: 92
child voicing cost: 125
Best yet: 217
New solution
function cost: 90
child voicing cost: 126
Best yet: 216
New solution
function cost: 92
child voicing cost: 122
Best yet: 214
New solution
function cost: 92
child voicing cost: 121
Best yet: 213
New solution
function cost: 92
child voicing cost: 118
Best yet: 210
New solution
function cost: 92
child voicing cost: 115
Best yet: 207
New solution
function cost: 92
child voicing cost: 112
Best yet: 204
New solution
function cost: 92
child voicing cost: 106
Best yet: 198
New solution
function cost: 84
child voicing cost: 107
Best yet: 191
New solution
function cost: 84
child voicing cost: 105
Best yet: 189
New solution
function cost: 84
child voicing cost: 103
Best yet: 187
New solution
function cost: 84
child voicing cost: 102
Best yet: 186
New solution
function cost: 84
child voicing cost: 95
Best yet: 179
New solution
function cost: 86
child voicing cost: 91
Best yet: 177
New solution
function cost: 86
child voicing cost: 84
Best yet: 170
New solution
function cost: 84
child voicing cost: 84
Best yet: 168
New solution
function cost: 84
child voicing cost: 77
Best yet: 161
New solution
function cost: 96
child voicing cost: 63
Best yet: 159
New solution
function cost: 88
child voicing cost: 70
Best yet: 158
New solution
function cost: 96
child voicing cost: 60
Best yet: 156
New solution
function cost: 96
child voicing cost: 55
Best yet: 151
New solution
function cost: 92
child voicing cost: 58
Best yet: 150
New solution
function cost: 92
child voicing cost: 57
Best yet: 149
New solution
function cost: 92
child voicing cost: 56
Best yet: 148
New solution
function cost: 96
child voicing cost: 48
Best yet: 144
New solution
function cost: 96
child voicing cost: 46
Best yet: 142
New solution
function cost: 96
child voicing cost: 43
Best yet: 139
New solution
function cost: 88
child voicing cost: 50
Best yet: 138
New solution
function cost: 88
child voicing cost: 48
Best yet: 136
New solution
function cost: 88
child voicing cost: 45
Best yet: 133

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "Tm"), (8, "S"), (8, "S6"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "Ss"), (10, "T54"), (12, "D7"), (12, "D7/3")  …  (14, "D-5"), (14, "D7-1"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "D"), (16, "Ts"), (18, "D/3"), (18, "D/5"), (22, "T-5")]   
 [(4, "S"), (4, "S6"), (6, "S65"), (6, "S65/6"), (6, "Ss"), (10, "D64"), (10, "D7-1"), (10, "S/3"), (10, "T64"), (10, "Tm")  …  (14, "T54"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (16, "T"), (16, "T/3"), (18, "D-5"), (18, "T-5"), (20, "D"), (22, "D/3")]      
 [(8, "S/3"), (8, "S/5"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "S6"), (10, "Ts")  …  (14, "T"), (14, "T/3"), (14, "T/5"), (16, "D-5"), (16, "D/3"), (16, "D/5"), (16, "D7-1"), (16, "T-5"), (16, "Tm"), (22, "D")]     
 [(2, "S6"), (2, "Ss"), (6, "D7-1"), (6, "S"), (6, "S/3"), (6, "S/5"), (8, "S65"), (8, "S65/6"), (12, "T/3"), (12, "T/5")  …  (14, "D7/5"), (14, "D7/7"), (14, "Ts"), (16, "D7-5"), (18, "D"), (18, "D/3"), (18, "D/5"), (18, "T"), (20, "D-5"), (20, "T-5")]       
 [(8, "D/3"), (8, "D/5"), (8, "S65"), (8, "S65/6"), (8, "Ts"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D7-1")  …  (14, "D"), (14, "S"), (14, "S6"), (14, "T"), (16, "T-5"), (16, "T54"), (20, "D7-5"), (20, "T/3"), (20, "T/5"), (24, "D-5")]   
 [(4, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (8, "D7-1"), (8, "Ss"), (8, "Tm"), (10, "D"), (10, "S6"), (10, "T")  …  (12, "Ts"), (14, "S"), (16, "D64"), (16, "D7-5"), (16, "S65"), (16, "S65/6"), (20, "D-5"), (20, "S/3"), (20, "T-5"), (20, "T64")]        
 [(10, "D/3"), (10, "D/5"), (10, "Ss"), (10, "Tm"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S6"), (12, "T")  …  (14, "T54"), (16, "D"), (16, "S"), (18, "D7-5"), (18, "S/3"), (18, "S/5"), (18, "T64"), (22, "D-5"), (22, "T-5"), (22, "Ts")]   
 [(8, "S65"), (8, "S65/6"), (10, "S6"), (10, "Ss"), (10, "Ts"), (12, "S/3"), (12, "S/5"), (14, "D7"), (14, "D7-1"), (14, "D7/3")  …  (14, "T"), (16, "T-5"), (16, "Tm"), (18, "D"), (18, "D/3"), (18, "D/5"), (20, "T/3"), (20, "T/5"), (24, "D7-5"), (28, "D-5")]  
 [(8, "D7-1"), (8, "S65"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Ts"), (12, "S/3"), (12, "S/5")  …  (14, "S"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "T54"), (18, "S6"), (18, "Tm"), (20, "D7-5"), (20, "T-5"), (24, "D-5")]
 [(4, "S65"), (4, "S65/6"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Ts"), (8, "S/3"), (8, "T64"), (10, "D"), (10, "D/3")  …  (10, "T/3"), (12, "D54"), (12, "T-5"), (12, "T54"), (14, "S6"), (14, "Ss"), (14, "Tm"), (16, "D64"), (16, "D7-5"), (20, "D-5")]      
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "D/3"), (4, "D/5"), (4, "Tm"), (6, "D"), (6, "D7-1"), (6, "T")  …  (10, "Ts"), (12, "D7-5"), (12, "S/3"), (12, "S/5"), (12, "T64"), (14, "S"), (16, "D-5"), (16, "T-5"), (18, "S6"), (18, "Ss")]            
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D64"), (6, "D7-5"), (8, "D"), (8, "S"), (10, "D/3"), (10, "D54"), (10, "S65/6"), (12, "D7-1"), (12, "Ss"), (12, "T"), (12, "T/5"), (14, "S/5"), (16, "Ts")]                                                
 [(4, "D64"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/5"), (8, "D54"), (8, "D7-5"), (8, "S65/6"), (10, "D"), (10, "Ss"), (10, "T"), (12, "D/3"), (12, "T64"), (14, "D7-1")]                                                  
 [(2, "S"), (2, "S/5"), (4, "S65/6"), (6, "Ss"), (8, "D64"), (8, "T/5"), (8, "Tm"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D54"), (12, "D7-5"), (14, "D"), (14, "D/5"), (14, "D7-1"), (14, "T"), (16, "T-5")]                                  
 [(10, "D7"), (14, "D")]                                                                                                                                                                                                                                            
 [(10, "T")]                                                                                                                                                                                                                                                        
 [(16, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 193865, Pruned: 255512, completed: 48, time: 3.934000015258789, efficiency: 12.20132176253752
Results: bestval_func: 88, bestval_voices: 45
(15, 381, 381, 381)
[0 1 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 0 1 1 0 1 0 0 1 0 0 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 0 0 0 1 1 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 0 0 1 0 1 1 0 1 0; 0 0 0 1 1 0 0 1 0 0 1 0; 0 0 0 0 1 0 0 1 1 0 1 0; 1 0 0 0 1 0 0 1 1 0 0 0; 2 0 0 0 1 0 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 1 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 0 0 0 0 1 2 0 0 0 1 0; 1 0 0 0 0 2 1 0 0 0 0 0; 1 0 1 0 0 2 0 0 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 1 0 0 0 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 0 1 0 0 1 0 1 1 0 0 0; 0 0 1 0 0 2 0 1 0 0 0 0; 0 0 2 0 0 1 1 0 0 0 0 0]
Key Counter is [10 5 11 11 4 20 10 13 16 0 18 0]
Key Score is [58; 90; 43; 99; 46; 76; 80; 48; 93; 46; 83; 64]
Position Counter for 4 is [11 4 20 10 13 16 0 18 0 10 5 11]
Any[[4.0, 61.25, 1.0]]
[4, 61, 1]
4 D# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 148
child voicing cost: 194
Best yet: 342
New solution
function cost: 148
child voicing cost: 180
Best yet: 328
New solution
function cost: 148
child voicing cost: 177
Best yet: 325
New solution
function cost: 148
child voicing cost: 174
Best yet: 322
New solution
function cost: 148
child voicing cost: 167
Best yet: 315
New solution
function cost: 148
child voicing cost: 160
Best yet: 308
New solution
function cost: 148
child voicing cost: 159
Best yet: 307
New solution
function cost: 148
child voicing cost: 155
Best yet: 303
New solution
function cost: 148
child voicing cost: 152
Best yet: 300
New solution
function cost: 148
child voicing cost: 146
Best yet: 294
New solution
function cost: 148
child voicing cost: 143
Best yet: 291
New solution
function cost: 140
child voicing cost: 139
Best yet: 279
New solution
function cost: 140
child voicing cost: 132
Best yet: 272
New solution
function cost: 142
child voicing cost: 126
Best yet: 268
New solution
function cost: 136
child voicing cost: 128
Best yet: 264
New solution
function cost: 136
child voicing cost: 124
Best yet: 260
New solution
function cost: 142
child voicing cost: 114
Best yet: 256
New solution
function cost: 140
child voicing cost: 113
Best yet: 253
New solution
function cost: 142
child voicing cost: 107
Best yet: 249
New solution
function cost: 142
child voicing cost: 104
Best yet: 246
New solution
function cost: 142
child voicing cost: 96
Best yet: 238
New solution
function cost: 142
child voicing cost: 95
Best yet: 237
New solution
function cost: 142
child voicing cost: 93
Best yet: 235
New solution
function cost: 136
child voicing cost: 95
Best yet: 231
New solution
function cost: 134
child voicing cost: 96
Best yet: 230
New solution
function cost: 136
child voicing cost: 93
Best yet: 229
New solution
function cost: 134
child voicing cost: 93
Best yet: 227
New solution
function cost: 148
child voicing cost: 75
Best yet: 223
New solution
function cost: 146
child voicing cost: 72
Best yet: 218
New solution
function cost: 140
child voicing cost: 76
Best yet: 216
New solution
function cost: 150
child voicing cost: 65
Best yet: 215
New solution
function cost: 144
child voicing cost: 67
Best yet: 211
New solution
function cost: 136
child voicing cost: 74
Best yet: 210

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (4, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])    
 (0, "D/3", [(50, 3), (53, 5), (65, 5), (70, 1)])  
 (0, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])    
 (0, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])    
 (2, "S65/6", [(53, 6), (56, 1), (60, 3), (63, 5)])
 (4, "D7-1", [(53, 5), (56, 7), (62, 3), (65, 5)]) 
 (6, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])    
 (14, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])   
 (8, "D7/3", [(50, 3), (56, 7), (65, 5), (70, 1)]) 
 (8, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])    
 (6, "Ss", [(53, 1), (56, 3), (60, 5), (68, 3)])   
 (10, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])   
 (6, "D7-1", [(53, 5), (56, 7), (62, 3), (65, 5)]) 
 ?                                                 
 (12, "Ts", [(60, 1), (63, 3), (67, 5), (75, 3)])  
 (12, "D7", [(58, 1), (62, 3), (68, 7), (77, 5)])  
 (10, "Ts", [(60, 1), (63, 3), (67, 5), (75, 3)])  
 (10, "Ts", [(60, 1), (63, 3), (67, 5), (72, 1)])  
 (4, "S65", [(56, 1), (60, 3), (65, 6), (75, 5)])  
 (6, "T/5", [(58, 5), (58, 5), (67, 3), (75, 1)])  
 (8, "S", [(56, 1), (60, 3), (68, 1), (75, 5)])    
 (6, "S", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (2, "S", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (14, "D", [(58, 1), (62, 3), (65, 5), (70, 1)])   
 (10, "T", [(51, 1), (63, 1), (67, 3), (70, 5)])   
 (10, "T", [(51, 1), (63, 1), (67, 3), (70, 5)])   

Done. Total checked: 277317, Pruned: 314798, completed: 33, time: 5.672999858856201, efficiency: 5.8170281722258865
Results: bestval_func: 136, bestval_voices: 74
(16, 381, 381, 381)
Total time for optimisation of piece: 11.398000001907349
["T", "D/3", "T", "T", "S65/6", "D7-1", "T", "T", "D7/3", "T", "Ss", "T", "D7-1", "D7-1", "T", "T", "S", "S", "S6", "D7", "Ts", "D7", "Ts", "Ts", "S65", "T/5", "S", "S", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-260.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-273.csv
[1 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 1 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 1 0 1 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 0 0 3 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 0 2 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 3 0 0 0 0 0 0 1 0; 0 1 0 0 1 1 0 0 1 0 0 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 0 0 2 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 3 0 0 0 1 0 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0]
Key Counter is [17 14 0 32 1 14 0 6 23 0 17 0]
Key Score is [38; 117; 21; 109; 70; 55; 100; 24; 123; 38; 86; 87]
Position Counter for 9 is [23 0 17 0 17 14 0 32 1 14 0 6]
Any[[9.0, 84.0, 1.0]]
[9, 84, 1]
9 G# Major

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (63, 5), (72, 3), (80, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (68, 1), (72, 3), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                           
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (2, "Tm"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7")  …  (6, "S/3"), (6, "S/5"), (6, "S65"), (6, "S65/6"), (6, "T64"), (8, "D-5"), (8, "D7-1"), (10, "S6"), (10, "Ss"), (10, "T-5")]              
 [(0, "S"), (0, "S/3"), (0, "S/5"), (0, "S65"), (0, "S65/6"), (2, "Ts"), (4, "S6"), (4, "Ss"), (6, "D64"), (6, "D7")  …  (6, "T"), (6, "T/3"), (6, "T/5"), (8, "T-5"), (8, "Tm"), (10, "D"), (10, "D-5"), (10, "D/3"), (10, "D/5"), (10, "D7-1")]                     
 [(0, "D"), (0, "D-5"), (0, "D/3"), (0, "D/5"), (0, "D64"), (0, "D7"), (0, "D7-1"), (0, "D7-5"), (0, "D7/3"), (0, "D7/5")  …  (0, "S65/6"), (0, "Ss"), (0, "T"), (0, "T-5"), (0, "T/3"), (0, "T/5"), (0, "T54"), (0, "T64"), (0, "Tm"), (0, "Ts")]                    
 [(0, "D64"), (0, "T"), (0, "T/3"), (2, "T54"), (2, "Tm"), (4, "D54"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/7")  …  (6, "S"), (6, "S/3"), (6, "S65"), (6, "S65/6"), (6, "T64"), (8, "D-5"), (8, "D7-1"), (10, "S6"), (10, "Ss"), (10, "T-5")]                 
 [(2, "Ss"), (6, "D7-1"), (6, "S"), (6, "S/3"), (8, "S65"), (12, "D/3"), (12, "D64"), (12, "T/3"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T"), (14, "Ts"), (16, "D54"), (16, "D7-5"), (18, "D"), (20, "D-5"), (20, "T-5")]          
 [(10, "Ss"), (12, "D64"), (12, "T/3"), (14, "D7"), (14, "D7-1"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S"), (14, "S/3")  …  (16, "D54"), (16, "D7-5"), (16, "S65/6"), (18, "D"), (18, "T"), (20, "D-5"), (20, "D/3"), (20, "T64"), (20, "Ts"), (28, "T-5")]
 [(4, "D7-1"), (4, "S65/6"), (8, "S/3"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "Ts"), (12, "D54"), (14, "D"), (14, "D/3"), (14, "T"), (16, "T-5"), (20, "D64"), (20, "D7-5"), (20, "T/3"), (24, "D-5")]                   
 [(4, "S"), (4, "S/3"), (6, "D64"), (6, "D7-5"), (6, "T/3"), (6, "T54"), (6, "Ts"), (8, "S6"), (8, "Ss"), (8, "T")  …  (10, "T64"), (12, "D7"), (12, "D7/3"), (12, "D7/7"), (14, "D54"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D7-1"), (18, "T-5")]               
 [(2, "Ts"), (6, "S/3"), (6, "S/5"), (6, "T64"), (8, "S"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "T/3"), (10, "T/5")  …  (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "D/5"), (20, "D7-1")]   
 [(6, "D-5"), (8, "D"), (10, "D7-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S6"), (12, "Ss"), (16, "D7-1")  …  (18, "S65"), (18, "S65/6"), (18, "Tm"), (22, "Ts"), (24, "D/3"), (24, "D/5"), (24, "T"), (24, "T/3"), (24, "T/5"), (34, "T-5")]  
 [(4, "T/3"), (4, "T/5"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/3"), (6, "S/5")  …  (10, "S6"), (10, "Ss"), (10, "T"), (12, "D-5"), (12, "D/3"), (12, "D/5"), (12, "T64"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]             
 [(6, "D7-1"), (6, "S"), (6, "S/3"), (6, "T"), (6, "T/3"), (8, "S65"), (8, "T54"), (10, "Ss"), (10, "Ts"), (12, "D/3")  …  (12, "T-5"), (12, "Tm"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D54"), (16, "D7-5"), (18, "D"), (20, "D-5")]          
 [(0, "D"), (0, "D/3"), (2, "D54"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D64"), (6, "D7-5"), (8, "D7-1")  …  (10, "S65/6"), (10, "Tm"), (12, "Ss"), (14, "S/3"), (14, "T64"), (16, "T"), (16, "T/3"), (20, "S"), (20, "Ts"), (26, "T-5")]           
 [(6, "T"), (8, "T-5"), (10, "D7-1"), (10, "S"), (10, "S/3"), (10, "Ts"), (12, "S65/6"), (12, "Tm"), (14, "Ss"), (16, "D64"), (16, "T/3"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D/3"), (20, "D54"), (20, "D7-5"), (22, "D"), (24, "D-5")]      
 [(2, "D7-1"), (10, "S65"), (10, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D54"), (14, "S/3"), (14, "T54"), (16, "D"), (16, "D/3"), (16, "S"), (16, "T"), (16, "T/3"), (16, "Ts"), (22, "D64"), (22, "D7-5"), (26, "D-5")]                  

Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (63, 5), (72, 3), (80, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (68, 1), (72, 3), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 84
child voicing cost: 134
Best yet: 218
New solution
function cost: 84
child voicing cost: 131
Best yet: 215
New solution
function cost: 84
child voicing cost: 125
Best yet: 209
New solution
function cost: 84
child voicing cost: 123
Best yet: 207
New solution
function cost: 84
child voicing cost: 115
Best yet: 199
New solution
function cost: 88
child voicing cost: 110
Best yet: 198
New solution
function cost: 88
child voicing cost: 107
Best yet: 195
New solution
function cost: 88
child voicing cost: 105
Best yet: 193
New solution
function cost: 88
child voicing cost: 102
Best yet: 190
New solution
function cost: 88
child voicing cost: 99
Best yet: 187
New solution
function cost: 88
child voicing cost: 98
Best yet: 186
New solution
function cost: 98
child voicing cost: 87
Best yet: 185
New solution
function cost: 88
child voicing cost: 96
Best yet: 184
New solution
function cost: 88
child voicing cost: 93
Best yet: 181
New solution
function cost: 98
child voicing cost: 81
Best yet: 179
New solution
function cost: 88
child voicing cost: 88
Best yet: 176
New solution
function cost: 88
child voicing cost: 86
Best yet: 174
New solution
function cost: 88
child voicing cost: 83
Best yet: 171
New solution
function cost: 88
child voicing cost: 80
Best yet: 168
New solution
function cost: 88
child voicing cost: 79
Best yet: 167
New solution
function cost: 88
child voicing cost: 78
Best yet: 166
New solution
function cost: 88
child voicing cost: 75
Best yet: 163
New solution
function cost: 92
child voicing cost: 69
Best yet: 161
New solution
function cost: 84
child voicing cost: 71
Best yet: 155
New solution
function cost: 84
child voicing cost: 68
Best yet: 152

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "D7-1"), (6, "Ss"), (10, "S65"), (10, "S65/6"), (10, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S6")  …  (16, "D/3"), (16, "D/5"), (16, "S"), (16, "T"), (16, "T/3"), (16, "T/5"), (16, "Ts"), (18, "Tm"), (22, "D7-5"), (26, "D-5")]
 [(0, "D"), (0, "D/3"), (2, "D54"), (4, "D7"), (4, "D7/3"), (4, "D7/7"), (6, "D64"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (10, "Tm"), (12, "S6"), (12, "Ss"), (14, "S/3"), (14, "T64"), (16, "T"), (16, "T/3"), (20, "S"), (20, "Ts"), (26, "T-5")]            
 [(4, "T/3"), (4, "T/5"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/3"), (6, "S/5")  …  (10, "S6"), (10, "Ss"), (10, "T"), (12, "D-5"), (12, "D/3"), (12, "D/5"), (12, "T64"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]           
 [(0, "S65"), (0, "S65/6"), (4, "S/3"), (4, "S/5"), (4, "Ss"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S")  …  (10, "D/5"), (10, "D7-1"), (10, "S6"), (10, "T"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (20, "D-5")]       
 [(6, "D-5"), (8, "D"), (10, "D7-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S6"), (12, "Ss"), (16, "D7-1")  …  (18, "T54"), (18, "Tm"), (22, "T64"), (22, "Ts"), (24, "D/3"), (24, "D/5"), (24, "T"), (24, "T/3"), (24, "T/5"), (34, "T-5")]  
 [(4, "Ts"), (6, "S"), (6, "S/3"), (8, "D64"), (8, "D7-5"), (8, "T/3"), (8, "T54"), (8, "T64"), (10, "S6"), (10, "T")  …  (14, "D7"), (14, "D7/3"), (14, "D7/7"), (16, "D54"), (16, "Ss"), (16, "T-5"), (16, "Tm"), (18, "D"), (18, "D/3"), (18, "D7-1")]           
 [(8, "D"), (8, "D/3"), (8, "D/5"), (10, "S65"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S6")  …  (14, "T64"), (14, "Ts"), (16, "D7-1"), (16, "S"), (16, "S/3"), (16, "S/5"), (16, "T"), (18, "T54"), (18, "Tm"), (26, "T-5")]   
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "S6"), (12, "Ss"), (14, "S/3"), (14, "S/5"), (16, "T"), (16, "T/3"), (16, "T/5"), (20, "S"), (20, "Ts"), (26, "T-5")]          
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "T"), (6, "Tm"), (8, "D7-5"), (8, "T54")  …  (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/3"), (16, "D/5"), (16, "T-5"), (18, "D7-1")]      
 [(0, "S/3"), (0, "T64"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "T"), (8, "Ss"), (8, "T-5"), (10, "D7")  …  (12, "D54"), (14, "D"), (14, "D/3"), (14, "S6"), (16, "D64"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "Tm"), (20, "D-5")]          
 [(0, "D/3"), (0, "D/5"), (6, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D7-5"), (12, "S65"), (12, "S65/6")  …  (16, "Ts"), (18, "S6"), (18, "Ss"), (18, "T"), (18, "T/3"), (18, "T/5"), (22, "S"), (22, "S/3"), (22, "S/5"), (28, "T-5")]   
 [(6, "D64"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/5"), (8, "T"), (10, "D/5"), (10, "D54"), (10, "D7-5"), (10, "S65/6"), (12, "D"), (12, "Ss"), (14, "T64"), (16, "D7-1")]                                                
 [(2, "D7-1"), (10, "S65"), (10, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D54"), (14, "S/5"), (14, "T64"), (16, "D"), (16, "D/5"), (16, "S"), (16, "T"), (16, "T/5"), (18, "Tm"), (22, "D64"), (22, "D7-5")]                             
 [(4, "D7-5"), (8, "D64"), (10, "D"), (12, "D54"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S"), (18, "D7-1"), (18, "Ss"), (18, "T"), (18, "T/5"), (20, "D/3"), (20, "S/3"), (20, "S65"), (20, "T64"), (28, "T-5")]                              
 [(10, "D"), (14, "D7")]                                                                                                                                                                                                                                            
 [(10, "T")]                                                                                                                                                                                                                                                        
 [(12, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 122896, Pruned: 142938, completed: 25, time: 2.6399998664855957, efficiency: 9.46969744861402
Results: bestval_func: 84, bestval_voices: 68
(15, 360, 360, 360)
[1 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 1 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 1 0 1 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 0 0 3 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 0 2 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 3 0 0 0 0 0 0 1 0; 0 1 0 0 1 1 0 0 1 0 0 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 0 0 2 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 3 0 0 0 1 0 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0]
Key Counter is [17 14 0 32 1 14 0 6 23 0 17 0]
Key Score is [38; 117; 21; 109; 70; 55; 100; 24; 123; 38; 86; 87]
Position Counter for 9 is [23 0 17 0 17 14 0 32 1 14 0 6]
Any[[9.0, 84.0, 1.0]]
[9, 84, 1]
9 G# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 102
child voicing cost: 149
Best yet: 251
New solution
function cost: 102
child voicing cost: 142
Best yet: 244
New solution
function cost: 104
child voicing cost: 139
Best yet: 243
New solution
function cost: 104
child voicing cost: 138
Best yet: 242
New solution
function cost: 98
child voicing cost: 143
Best yet: 241
New solution
function cost: 98
child voicing cost: 136
Best yet: 234
New solution
function cost: 98
child voicing cost: 135
Best yet: 233
New solution
function cost: 98
child voicing cost: 128
Best yet: 226
New solution
function cost: 98
child voicing cost: 122
Best yet: 220
New solution
function cost: 98
child voicing cost: 120
Best yet: 218
New solution
function cost: 98
child voicing cost: 113
Best yet: 211
New solution
function cost: 98
child voicing cost: 109
Best yet: 207
New solution
function cost: 98
child voicing cost: 103
Best yet: 201

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])   
 (0, "T", [(56, 1), (56, 1), (63, 5), (72, 3)])   
 (0, "S", [(49, 1), (56, 5), (65, 3), (73, 1)])   
 (0, "D7/7", [(49, 7), (58, 5), (67, 3), (75, 1)])
 (0, "T/3", [(48, 3), (63, 5), (68, 1), (75, 5)]) 
 (6, "S", [(49, 1), (61, 1), (68, 5), (77, 3)])   
 (18, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])  
 (14, "D", [(51, 1), (63, 1), (67, 3), (70, 5)])  
 (4, "S/3", [(53, 3), (61, 1), (68, 5), (73, 1)]) 
 (2, "Ts", [(53, 1), (60, 5), (68, 3), (77, 1)])  
 (8, "D", [(51, 1), (63, 1), (70, 5), (79, 3)])   
 (4, "T/3", [(48, 3), (63, 5), (68, 1), (80, 1)]) 
 (6, "S", [(49, 1), (61, 1), (68, 5), (77, 3)])   
 ?                                                
 (4, "Ts", [(53, 1), (60, 5), (68, 3), (68, 3)])  
 (8, "D", [(51, 1), (63, 1), (67, 3), (70, 5)])   
 (0, "D/3", [(55, 3), (58, 5), (63, 1), (75, 1)]) 
 (4, "Ts", [(53, 1), (60, 5), (68, 3), (77, 1)])  
 (4, "S65", [(49, 1), (58, 6), (68, 5), (77, 3)]) 
 (6, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])   
 (8, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])   
 (2, "D7-1", [(58, 5), (61, 7), (67, 3), (73, 7)])
 (18, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])  
 (10, "D", [(51, 1), (63, 1), (67, 3), (70, 5)])  
 (10, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])  
 (10, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])  

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                           
 [(0, "D64"), (0, "S"), (0, "S/3"), (0, "S/5"), (0, "S65"), (0, "S65/6"), (0, "T"), (0, "T-5"), (0, "T/3"), (0, "T/5")  …  (2, "D/5"), (2, "D7"), (2, "D7-1"), (2, "D7-5"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (2, "Tm"), (4, "S6"), (4, "Ss")]                   
 [(0, "D7"), (0, "D7-1"), (0, "D7-5"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (2, "S"), (2, "S/3"), (2, "S/5"), (2, "S65")  …  (4, "D-5"), (4, "D/3"), (4, "D/5"), (4, "S6"), (4, "Ss"), (4, "T"), (4, "T-5"), (4, "T/3"), (4, "T/5"), (4, "Ts")]                     
 [(0, "D7"), (0, "D7-1"), (0, "D7-5"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (2, "S"), (2, "S/3"), (2, "S/5"), (2, "S65")  …  (4, "D-5"), (4, "D/3"), (4, "D/5"), (4, "S6"), (4, "Ss"), (4, "T"), (4, "T-5"), (4, "T/3"), (4, "T/5"), (4, "Ts")]                     
 [(0, "D7"), (0, "D7-1"), (0, "D7-5"), (0, "D7/3"), (0, "D7/7"), (0, "S"), (0, "S/3"), (0, "S6"), (0, "S65"), (0, "S65/6")  …  (2, "D64"), (2, "T"), (2, "T-5"), (2, "T/3"), (2, "Tm"), (2, "Ts"), (4, "D"), (4, "D-5"), (4, "D/3"), (4, "D54")]                      
 [(6, "T"), (6, "T/3"), (8, "D7-1"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "Ts"), (12, "D/3"), (12, "D54"), (12, "S/3"), (12, "S65"), (12, "T-5"), (14, "D"), (16, "D64"), (16, "Tm"), (20, "D7-5"), (24, "D-5")]                     
 [(10, "S"), (16, "D64"), (16, "D7-1"), (16, "D7-5"), (16, "S65/6"), (16, "T/3"), (16, "Tm"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D-5"), (20, "D54"), (20, "S/3"), (20, "T54"), (20, "Ts"), (22, "D"), (22, "D/3"), (22, "T"), (28, "T-5")]   
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D/3"), (6, "Tm"), (8, "D"), (8, "D7-1"), (8, "Ss"), (8, "T"), (8, "T/3"), (10, "D54"), (10, "D64"), (10, "Ts"), (12, "S"), (12, "S/3"), (14, "D7-5"), (14, "S65/6"), (18, "D-5"), (18, "T-5")]               
 [(6, "D64"), (6, "T/3"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (8, "Tm"), (10, "D54"), (10, "D7-5")  …  (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "T"), (14, "D-5"), (14, "S65"), (14, "S65/6"), (14, "T54"), (18, "T64"), (22, "T-5")]        
 [(10, "T/3"), (10, "T/5"), (12, "Tm"), (14, "D7-5"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "D7"), (16, "D7/3"), (16, "D7/5")  …  (20, "D7-1"), (20, "S"), (20, "S/3"), (20, "S/5"), (20, "T"), (22, "S65"), (22, "S65/6"), (22, "T54"), (26, "T64"), (30, "T-5")]
 [(8, "S"), (8, "S/3"), (8, "S/5"), (10, "D7-5"), (12, "S6"), (12, "Ss"), (14, "D-5"), (14, "S65"), (14, "S65/6"), (14, "T/3")  …  (16, "D7-1"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "T"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "D/5"), (26, "T-5")]   
 [(6, "Tm"), (8, "D7-5"), (8, "T/3"), (8, "T/5"), (10, "D"), (10, "D/3"), (10, "D/5"), (14, "D7"), (14, "D7/3"), (14, "D7/5")  …  (14, "Ss"), (16, "D-5"), (16, "Ts"), (18, "D7-1"), (18, "T"), (20, "S65"), (20, "S65/6"), (20, "T54"), (24, "T64"), (28, "T-5")]    
 [(8, "Ss"), (10, "D64"), (10, "T/3"), (10, "Tm"), (12, "D7"), (12, "D7-1"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D7-5"), (14, "S65/6"), (16, "D"), (16, "D/3"), (16, "T"), (18, "D-5"), (20, "Ts"), (26, "T-5")]     
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D7-1"), (6, "D54"), (6, "S65/6"), (6, "Tm")  …  (8, "T"), (8, "T/3"), (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "Ts"), (14, "D-5"), (14, "D64"), (16, "S"), (18, "T-5")]            
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D7-1"), (6, "D54"), (6, "S65/6"), (6, "Tm")  …  (8, "T"), (8, "T/3"), (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "Ts"), (14, "D-5"), (14, "D64"), (16, "S"), (18, "T-5")]            
 [(2, "D7-1"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ss"), (8, "D/3"), (10, "D"), (10, "T"), (10, "T/3"), (12, "D54"), (12, "S65/6"), (12, "Tm"), (14, "S"), (14, "S/3"), (14, "Ts"), (16, "D64"), (16, "D7-5"), (16, "T-5"), (20, "D-5")]           

Done. Total checked: 84869, Pruned: 95011, completed: 13, time: 1.6559998989105225, efficiency: 7.850242025106803
Results: bestval_func: 98, bestval_voices: 103
(16, 360, 360, 360)
Total time for optimisation of piece: 5.814000129699707
["T", "T", "S", "D7/7", "T/3", "S", "D", "D", "S/3", "Ts", "D", "T/3", "S", "D", "T", "T", "D", "T/3", "S65", "D", "Ts", "D", "D/3", "Ts", "S65", "D", "T", "D7-1", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-273.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-286.csv
[0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 1 0 0 0 0 0 0 0; 1 0 0 1 1 0 0 0 0 0 0 1; 0 0 0 1 2 0 0 1 0 0 0 0; 0 1 0 1 0 0 1 0 0 1 0 0; 0 1 0 1 0 0 1 1 0 0 0 0; 0 0 0 2 0 1 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 2 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 1 0 1 1 1 0 0 0 0 0 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 0 1 1; 0 0 1 1 0 0 0 0 0 1 0 1; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 1 0 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 1 0 0 1 1 0 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 0 0 1; 1 0 0 0 0 1 1 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 1 1 0 1 1 0 0 0 0 0]
Key Counter is [4 9 3 22 24 7 11 5 11 5 8 10]
Key Score is [58; 72; 67; 60; 92; 56; 78; 62; 66; 73; 54; 95]
Position Counter for 12 is [10 4 9 3 22 24 7 11 5 11 5 8]
Any[[12.0, 59.5, 1.0]]
[12, 60, 1]
12 B Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 110
child voicing cost: 152
Best yet: 262
New solution
function cost: 110
child voicing cost: 142
Best yet: 252
New solution
function cost: 110
child voicing cost: 137
Best yet: 247
New solution
function cost: 110
child voicing cost: 135
Best yet: 245
New solution
function cost: 110
child voicing cost: 134
Best yet: 244
New solution
function cost: 110
child voicing cost: 132
Best yet: 242
New solution
function cost: 110
child voicing cost: 129
Best yet: 239
New solution
function cost: 110
child voicing cost: 127
Best yet: 237
New solution
function cost: 110
child voicing cost: 124
Best yet: 234
New solution
function cost: 110
child voicing cost: 119
Best yet: 229
New solution
function cost: 110
child voicing cost: 118
Best yet: 228
New solution
function cost: 110
child voicing cost: 113
Best yet: 223
New solution
function cost: 112
child voicing cost: 109
Best yet: 221
New solution
function cost: 110
child voicing cost: 109
Best yet: 219
New solution
function cost: 110
child voicing cost: 101
Best yet: 211
New solution
function cost: 110
child voicing cost: 97
Best yet: 207
New solution
function cost: 110
child voicing cost: 95
Best yet: 205
New solution
function cost: 112
child voicing cost: 92
Best yet: 204
New solution
function cost: 112
child voicing cost: 91
Best yet: 203
New solution
function cost: 112
child voicing cost: 88
Best yet: 200
New solution
function cost: 112
child voicing cost: 85
Best yet: 197
New solution
function cost: 114
child voicing cost: 78
Best yet: 192
New solution
function cost: 118
child voicing cost: 72
Best yet: 190
New solution
function cost: 118
child voicing cost: 70
Best yet: 188
New solution
function cost: 118
child voicing cost: 69
Best yet: 187
New solution
function cost: 118
child voicing cost: 67
Best yet: 185
New solution
function cost: 98
child voicing cost: 81
Best yet: 179
New solution
function cost: 100
child voicing cost: 76
Best yet: 176
New solution
function cost: 100
child voicing cost: 72
Best yet: 172
New solution
function cost: 100
child voicing cost: 70
Best yet: 170
New solution
function cost: 100
child voicing cost: 66
Best yet: 166

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "D7-1"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "D/3"), (8, "D/5"), (10, "D")  …  (12, "T54"), (12, "Tm"), (14, "S"), (14, "S/3"), (14, "S/5"), (14, "Ts"), (16, "D7-5"), (16, "T-5"), (16, "T64"), (20, "D-5")]           
 [(2, "D7-1"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "D/3"), (10, "D"), (10, "T"), (10, "T/3")  …  (12, "T54"), (12, "Tm"), (14, "S"), (14, "S/3"), (14, "Ts"), (16, "D64"), (16, "D7-5"), (16, "T-5"), (16, "T64"), (20, "D-5")]            
 [(2, "D7-1"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "D/3"), (8, "D/5"), (10, "D")  …  (12, "T54"), (12, "Tm"), (14, "S"), (14, "S/3"), (14, "S/5"), (14, "Ts"), (16, "D7-5"), (16, "T-5"), (16, "T64"), (20, "D-5")]           
 [(4, "D7-1"), (4, "S65"), (4, "S65/6"), (8, "D/3"), (8, "D/5"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5")  …  (12, "T64"), (14, "D"), (14, "S6"), (14, "T"), (14, "T/3"), (14, "T/5"), (14, "Ts"), (16, "Tm"), (20, "D7-5"), (24, "D-5")]        
 [(6, "S65"), (6, "S65/6"), (8, "S"), (8, "S/3"), (8, "S/5"), (10, "D7-1"), (10, "Ss"), (10, "T-5"), (10, "T64"), (12, "T")  …  (14, "Tm"), (14, "Ts"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S6"), (20, "D"), (22, "D7-5"), (26, "D-5")]       
 [(8, "D64"), (8, "T/3"), (8, "Tm"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S"), (12, "D54"), (12, "D7-1"), (12, "D7-5")  …  (14, "D"), (14, "S6"), (14, "T"), (16, "D-5"), (16, "D/3"), (16, "S/3"), (16, "Ss"), (16, "T64"), (16, "Ts"), (20, "T-5")]        
 [(8, "T/3"), (8, "T/5"), (8, "Tm"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (12, "D7-1"), (12, "D7-5")  …  (14, "T"), (16, "D-5"), (16, "D/3"), (16, "D/5"), (16, "S/3"), (16, "S/5"), (16, "Ss"), (16, "T64"), (16, "Ts"), (20, "T-5")]    
 [(6, "D7-5"), (8, "S"), (8, "S/3"), (8, "S/5"), (10, "D-5"), (10, "T/3"), (10, "T/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (12, "T"), (14, "S65"), (14, "S65/6"), (14, "Tm"), (14, "Ts"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "D7-1"), (22, "T-5")]     
 [(6, "S"), (6, "S/3"), (6, "S/5"), (8, "S65"), (8, "S65/6"), (8, "Tm"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (12, "T64"), (12, "Ts"), (14, "D"), (14, "D7-1"), (14, "T"), (16, "D-5"), (16, "T54"), (20, "D/3"), (20, "D/5"), (20, "T-5")]       
 [(6, "S"), (6, "S/3"), (8, "S65"), (8, "S65/6"), (8, "Tm"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S6"), (10, "Ss")  …  (12, "T64"), (12, "Ts"), (14, "D"), (14, "D7-1"), (14, "T"), (16, "D-5"), (16, "D54"), (16, "T54"), (20, "D/3"), (20, "T-5")]         
 [(8, "Tm"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "S/3"), (10, "S/5"), (12, "S65"), (12, "S65/6")  …  (14, "D/5"), (14, "S6"), (14, "Ss"), (16, "D7-5"), (16, "T54"), (16, "T64"), (18, "D7-1"), (18, "T"), (20, "D-5"), (24, "T-5")]
 [(12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/5"), (14, "D64"), (14, "S65/6"), (14, "T/5"), (16, "Ss"), (16, "T"), (18, "D54"), (18, "D7-5"), (18, "T64"), (20, "D"), (20, "D/5"), (20, "D7-1"), (22, "T-5")]                            
 [(10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "S/5"), (12, "D64"), (12, "S65/6"), (12, "T/5"), (14, "D"), (14, "D/5"), (14, "Ss"), (16, "D54"), (16, "D7-5"), (16, "T64"), (18, "D7-1"), (18, "T"), (24, "T-5")]                            
 [(4, "S"), (6, "S65"), (6, "Ss"), (10, "D64"), (10, "D7-1"), (10, "S/5"), (10, "Tm"), (12, "T"), (12, "T/5"), (14, "D/3"), (14, "D54"), (14, "D7-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "T-5"), (20, "D")]                                  
 [(10, "D"), (10, "D7")]                                                                                                                                                                                                                                              
 [(6, "T")]                                                                                                                                                                                                                                                           
 [(12, "T")]                                                                                                                                                                                                                                                          

Done. Total checked: 202948, Pruned: 231519, completed: 31, time: 3.6440000534057617, efficiency: 8.507134891786492
Results: bestval_func: 100, bestval_voices: 66
(15, 383, 383, 383)
[0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 1 0 0 0 0 0 0 0; 1 0 0 1 1 0 0 0 0 0 0 1; 0 0 0 1 2 0 0 1 0 0 0 0; 0 1 0 1 0 0 1 0 0 1 0 0; 0 1 0 1 0 0 1 1 0 0 0 0; 0 0 0 2 0 1 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 2 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 1 0 1 1 1 0 0 0 0 0 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 1 1 0 0 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 0 1 1; 0 0 1 1 0 0 0 0 0 1 0 1; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 0 0 0 2 0 0 0 1 1 0 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 1 0 0 1 1 0 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 0 0 1; 1 0 0 0 0 1 1 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 1 1 0 1 1 0 0 0 0 0]
Key Counter is [4 9 3 22 24 7 11 5 11 5 8 10]
Key Score is [58; 72; 67; 60; 92; 56; 78; 62; 66; 73; 54; 95]
Position Counter for 12 is [10 4 9 3 22 24 7 11 5 11 5 8]
Any[[12.0, 59.5, 1.0]]
[12, 60, 1]
12 B Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 152
child voicing cost: 266
Best yet: 418
New solution
function cost: 152
child voicing cost: 252
Best yet: 404
New solution
function cost: 152
child voicing cost: 246
Best yet: 398
New solution
function cost: 152
child voicing cost: 233
Best yet: 385
New solution
function cost: 152
child voicing cost: 226
Best yet: 378
New solution
function cost: 152
child voicing cost: 220
Best yet: 372
New solution
function cost: 152
child voicing cost: 219
Best yet: 371
New solution
function cost: 152
child voicing cost: 212
Best yet: 364
New solution
function cost: 152
child voicing cost: 210
Best yet: 362
New solution
function cost: 152
child voicing cost: 209
Best yet: 361
New solution
function cost: 152
child voicing cost: 208
Best yet: 360
New solution
function cost: 152
child voicing cost: 197
Best yet: 349
New solution
function cost: 152
child voicing cost: 194
Best yet: 346
New solution
function cost: 152
child voicing cost: 193
Best yet: 345
New solution
function cost: 144
child voicing cost: 200
Best yet: 344
New solution
function cost: 144
child voicing cost: 198
Best yet: 342
New solution
function cost: 144
child voicing cost: 192
Best yet: 336
New solution
function cost: 144
child voicing cost: 190
Best yet: 334
New solution
function cost: 144
child voicing cost: 188
Best yet: 332
New solution
function cost: 144
child voicing cost: 185
Best yet: 329
New solution
function cost: 144
child voicing cost: 184
Best yet: 328
New solution
function cost: 150
child voicing cost: 177
Best yet: 327
New solution
function cost: 144
child voicing cost: 177
Best yet: 321
New solution
function cost: 144
child voicing cost: 171
Best yet: 315
New solution
function cost: 142
child voicing cost: 170
Best yet: 312
New solution
function cost: 142
child voicing cost: 167
Best yet: 309
New solution
function cost: 142
child voicing cost: 163
Best yet: 305
New solution
function cost: 142
child voicing cost: 159
Best yet: 301
New solution
function cost: 144
child voicing cost: 154
Best yet: 298
New solution
function cost: 144
child voicing cost: 150
Best yet: 294
New solution
function cost: 156
child voicing cost: 137
Best yet: 293
New solution
function cost: 144
child voicing cost: 144
Best yet: 288
New solution
function cost: 144
child voicing cost: 142
Best yet: 286
New solution
function cost: 144
child voicing cost: 138
Best yet: 282
New solution
function cost: 146
child voicing cost: 133
Best yet: 279
New solution
function cost: 140
child voicing cost: 138
Best yet: 278
New solution
function cost: 140
child voicing cost: 137
Best yet: 277
New solution
function cost: 140
child voicing cost: 132
Best yet: 272
New solution
function cost: 136
child voicing cost: 128
Best yet: 264
New solution
function cost: 136
child voicing cost: 127
Best yet: 263
New solution
function cost: 136
child voicing cost: 125
Best yet: 261
New solution
function cost: 136
child voicing cost: 119
Best yet: 255
New solution
function cost: 140
child voicing cost: 110
Best yet: 250

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])    
 (0, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])    
 (0, "D7", [(54, 1), (58, 3), (61, 5), (64, 7)])   
 (4, "Ts", [(56, 1), (59, 3), (59, 3), (63, 5)])   
 (0, "Ss", [(49, 1), (56, 5), (61, 1), (64, 3)])   
 (6, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])    
 (10, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])   
 (12, "S", [(52, 1), (56, 3), (64, 1), (71, 5)])   
 (6, "T/3", [(51, 3), (54, 5), (66, 5), (71, 1)])  
 (12, "Tm", [(51, 1), (54, 3), (66, 3), (70, 5)])  
 (8, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])    
 (8, "T/5", [(54, 5), (59, 1), (63, 3), (66, 5)])  
 (12, "S/3", [(56, 3), (59, 5), (64, 1), (64, 1)]) 
 ?                                                 
 (8, "D64", [(54, 1), (66, 1), (71, 4), (75, 6)])  
 (12, "D7-5", [(54, 1), (66, 1), (70, 3), (76, 7)])
 (12, "T", [(59, 1), (66, 5), (71, 1), (75, 3)])   
 (6, "S", [(52, 1), (64, 1), (71, 5), (80, 3)])    
 (10, "D7/7", [(52, 7), (61, 5), (70, 3), (78, 1)])
 (12, "T/3", [(51, 3), (59, 1), (71, 1), (78, 5)]) 
 (12, "S", [(52, 1), (59, 5), (68, 3), (76, 1)])   
 (10, "S", [(52, 1), (64, 1), (68, 3), (71, 5)])   
 (4, "S", [(52, 1), (64, 1), (68, 3), (71, 5)])    
 (10, "D", [(54, 1), (61, 5), (66, 1), (70, 3)])   
 (6, "T", [(47, 1), (63, 3), (66, 5), (71, 1)])    
 (6, "T", [(47, 1), (63, 3), (66, 5), (71, 1)])    

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (48, 3), (56, 1), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (51, 5), (56, 1), (60, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                           
 [(0, "S"), (0, "S/3"), (0, "S/5"), (0, "S65"), (0, "S65/6"), (0, "T64"), (0, "Ts"), (4, "D64"), (4, "S6"), (4, "Ss")  …  (6, "D/3"), (6, "D/5"), (6, "D7"), (6, "D7-5"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T-5"), (6, "Tm"), (10, "D7-1")]                 
 [(2, "D"), (2, "D/3"), (2, "D/5"), (2, "D7"), (2, "D7-1"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (2, "S6"), (2, "S65")  …  (6, "S/3"), (6, "S/5"), (6, "Tm"), (6, "Ts"), (8, "D7-5"), (8, "T"), (8, "T-5"), (8, "T/3"), (8, "T/5"), (12, "D-5")]                    
 [(0, "T"), (0, "T/3"), (0, "T/5"), (0, "Tm"), (2, "D7"), (2, "D7-5"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (2, "T54")  …  (6, "D7-1"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "S6"), (6, "S65"), (6, "S65/6"), (6, "Ss"), (6, "T64"), (10, "T-5")]                  
 [(0, "D7-1"), (0, "S"), (0, "S/3"), (0, "S6"), (0, "Ss"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/7"), (4, "T54")  …  (6, "S65/6"), (6, "T"), (6, "T/3"), (8, "D"), (8, "D-5"), (8, "D/3"), (8, "D54"), (8, "T64"), (10, "Ts"), (12, "T-5")]                    
 [(6, "Ss"), (8, "D64"), (8, "T/3"), (8, "Tm"), (10, "D7"), (10, "D7-1"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S")  …  (12, "D54"), (12, "D7-5"), (12, "S65/6"), (14, "D"), (14, "T"), (16, "D-5"), (16, "D/3"), (16, "T64"), (16, "Ts"), (24, "T-5")]     
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "D/3"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "D"), (8, "D7-1"), (10, "D64"), (12, "S6"), (14, "D7-5"), (14, "T-5"), (14, "Ts"), (16, "S"), (16, "S/3"), (18, "D-5")]                
 [(0, "S65/6"), (4, "S/3"), (4, "Ss"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "Ts"), (8, "D54"), (10, "D"), (10, "D/3"), (10, "D7-1"), (10, "T"), (12, "T-5"), (16, "D64"), (16, "D7-5"), (16, "T/3"), (20, "D-5")]                          
 [(8, "S/3"), (8, "T64"), (10, "D"), (12, "D/3"), (12, "D54"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (12, "T54"), (14, "D7")  …  (14, "T/3"), (14, "Tm"), (16, "D-5"), (16, "D64"), (16, "D7-5"), (16, "Ts"), (18, "D7-1"), (18, "S"), (22, "S6"), (22, "Ss")]     
 [(2, "T"), (2, "T/3"), (2, "T/5"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ts"), (8, "D/3")  …  (10, "S/3"), (10, "S/5"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (14, "D"), (14, "S6"), (14, "Ss"), (16, "D-5")]          
 [(0, "S65"), (0, "S65/6"), (4, "S/3"), (4, "S/5"), (4, "Ss"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S")  …  (10, "D/5"), (10, "D7-1"), (10, "S6"), (10, "T"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (20, "D-5")]         
 [(0, "D7-1"), (4, "Ss"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S6"), (12, "S65"), (12, "S65/6"), (12, "T-5")  …  (16, "T54"), (16, "T64"), (16, "Tm"), (18, "S"), (18, "T"), (18, "T/3"), (18, "T/5"), (18, "Ts"), (20, "D7-5"), (24, "D-5")]  
 [(2, "T-5"), (8, "T"), (10, "S65/6"), (10, "Ts"), (16, "D7"), (16, "D7-1"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S"), (16, "S/3"), (18, "D/3"), (18, "D64"), (18, "T/3"), (18, "Tm"), (20, "Ss"), (22, "D54"), (22, "D7-5"), (24, "D"), (26, "D-5")]      
 [(10, "D7-1"), (10, "S65/6"), (10, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S"), (16, "T"), (16, "T/3")  …  (18, "D54"), (18, "S/3"), (18, "T54"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "S6"), (22, "D64"), (26, "D7-5"), (30, "D-5")]
 [(6, "D/3"), (8, "D"), (8, "T"), (8, "T/3"), (10, "D54"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Ts"), (14, "D64"), (14, "D7-5"), (16, "D7-1"), (16, "S"), (18, "D-5"), (18, "S/3"), (18, "T-5"), (20, "S6")]                    
 [(6, "D64"), (6, "T/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "T"), (10, "D/3"), (10, "D54"), (10, "D7-5"), (10, "S65/6"), (12, "D"), (12, "Ss"), (14, "D-5"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]                         

Done. Total checked: 483266, Pruned: 550822, completed: 43, time: 8.79200005531311, efficiency: 4.890809796346008
Results: bestval_func: 140, bestval_voices: 110
(16, 383, 383, 383)
Total time for optimisation of piece: 14.029000043869019
["T", "S", "D7", "Ts", "Ss", "T", "S", "S", "T/3", "Tm", "S", "T/5", "S/3", "D", "T", "T", "D7/3", "T", "S65", "S65", "D64", "D7-5", "T", "S", "D7/7", "T/3", "S", "S", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-286.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-299.csv
[0 0 0 1 0 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 1 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 0 0 1 0 0 2 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 0 0 0 0 1 1 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 1 1 0 0 0; 0 2 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 1 0 0 0; 0 0 0 0 0 1 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 2 0 0 1 0 0 0 0 0]
Key Counter is [16 13 0 17 0 8 4 15 31 0 17 0]
Key Score is [39; 106; 32; 104; 65; 56; 90; 35; 117; 48; 73; 82]
Position Counter for 9 is [31 0 17 0 16 13 0 17 0 8 4 15]
Any[[9.0, 78.75, 1.0]]
[9, 79, 1]
9 G# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (48, 3), (56, 1), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (51, 5), (56, 1), (60, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(44, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 98
child voicing cost: 152
Best yet: 250
New solution
function cost: 98
child voicing cost: 140
Best yet: 238
New solution
function cost: 98
child voicing cost: 138
Best yet: 236
New solution
function cost: 98
child voicing cost: 137
Best yet: 235
New solution
function cost: 98
child voicing cost: 134
Best yet: 232
New solution
function cost: 98
child voicing cost: 129
Best yet: 227
New solution
function cost: 98
child voicing cost: 128
Best yet: 226
New solution
function cost: 98
child voicing cost: 126
Best yet: 224
New solution
function cost: 96
child voicing cost: 123
Best yet: 219
New solution
function cost: 80
child voicing cost: 119
Best yet: 199
New solution
function cost: 84
child voicing cost: 113
Best yet: 197
New solution
function cost: 80
child voicing cost: 114
Best yet: 194
New solution
function cost: 82
child voicing cost: 109
Best yet: 191
New solution
function cost: 82
child voicing cost: 108
Best yet: 190
New solution
function cost: 82
child voicing cost: 107
Best yet: 189
New solution
function cost: 84
child voicing cost: 104
Best yet: 188
New solution
function cost: 92
child voicing cost: 94
Best yet: 186
New solution
function cost: 92
child voicing cost: 93
Best yet: 185
New solution
function cost: 92
child voicing cost: 92
Best yet: 184
New solution
function cost: 92
child voicing cost: 91
Best yet: 183
New solution
function cost: 92
child voicing cost: 90
Best yet: 182
New solution
function cost: 92
child voicing cost: 89
Best yet: 181
New solution
function cost: 92
child voicing cost: 79
Best yet: 171
New solution
function cost: 92
child voicing cost: 78
Best yet: 170
New solution
function cost: 92
child voicing cost: 77
Best yet: 169
New solution
function cost: 92
child voicing cost: 76
Best yet: 168
New solution
function cost: 92
child voicing cost: 75
Best yet: 167
New solution
function cost: 92
child voicing cost: 74
Best yet: 166
New solution
function cost: 92
child voicing cost: 73
Best yet: 165

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "Tm"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "S/5")  …  (10, "S65/6"), (10, "T54"), (12, "D"), (12, "S6"), (12, "Ss"), (14, "D-5"), (14, "T64"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]        
 [(4, "D7-1"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (8, "T"), (10, "D/3"), (10, "D54"), (10, "S65")  …  (12, "S"), (12, "S/3"), (12, "Ts"), (14, "D64"), (14, "T-5"), (14, "T/3"), (14, "T64"), (14, "Tm"), (18, "D7-5"), (22, "D-5")]       
 [(6, "D/3"), (6, "D/5"), (8, "D"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "S65"), (10, "S65/6"), (10, "T54"), (12, "D7")  …  (14, "Tm"), (16, "D7-1"), (16, "S"), (18, "D-5"), (18, "S/3"), (18, "S/5"), (18, "T-5"), (18, "T64"), (20, "S6"), (20, "Ss")]        
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D/5")  …  (10, "Ts"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "D"), (16, "S6"), (16, "Ss"), (18, "D-5")]        
 [(0, "S/3"), (0, "S/5"), (0, "T64"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "T"), (8, "Ss"), (8, "T-5")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5")]         
 [(0, "T"), (0, "T/3"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D/3"), (10, "D64"), (10, "S65")  …  (10, "Ts"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D7-5"), (16, "D"), (16, "S6"), (16, "Ss"), (18, "D-5")]        
 [(0, "S/3"), (0, "S/5"), (0, "T64"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "T"), (8, "Ss"), (8, "T-5")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5")]         
 [(4, "S"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D7-1")  …  (12, "D"), (12, "D/3"), (12, "D/5"), (12, "Ts"), (14, "D64"), (14, "D7-5"), (14, "Ss"), (14, "T-5"), (14, "Tm"), (18, "D-5")]          
 [(0, "D7-1"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S6"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D/5")  …  (12, "T/3"), (12, "T/5"), (14, "D7-5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (14, "Tm"), (16, "Ts"), (18, "D-5"), (18, "T-5")]       
 [(8, "D7-1"), (8, "S"), (8, "S/3"), (8, "T"), (8, "T/3"), (10, "S65"), (10, "S65/6"), (10, "T-5"), (10, "T54"), (10, "Tm")  …  (14, "D64"), (14, "T64"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (18, "D/3"), (18, "D54"), (18, "D7-5"), (20, "D"), (22, "D-5")]  
 [(6, "S65"), (6, "S65/6"), (8, "Ts"), (10, "D7-1"), (10, "S/3"), (10, "S/5"), (10, "Ss"), (10, "T64"), (12, "D7"), (12, "D7/3")  …  (14, "T54"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "S6"), (18, "T/3"), (18, "T/5"), (22, "D7-5"), (26, "D-5")]
 [(4, "D/5"), (6, "T"), (6, "T/5"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D64"), (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/5"), (16, "T64"), (18, "Ss")]                                           
 [(2, "T64"), (4, "T"), (6, "S65/6"), (6, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/5"), (14, "D/5"), (14, "D64"), (14, "T/5"), (16, "D7-1"), (16, "Ss"), (18, "D54"), (18, "D7-5"), (20, "D")]                             
 [(2, "T64"), (4, "T"), (6, "S65/6"), (6, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/5"), (14, "D/5"), (14, "D64"), (14, "T/5"), (16, "D7-1"), (16, "Ss"), (18, "D54"), (18, "D7-5"), (20, "D")]                             
 [(16, "D7"), (24, "D")]                                                                                                                                                                                                                                           
 [(10, "T")]                                                                                                                                                                                                                                                       
 [(18, "T")]                                                                                                                                                                                                                                                       

Done. Total checked: 145987, Pruned: 166893, completed: 29, time: 2.7060000896453857, efficiency: 10.71692499603737
Results: bestval_func: 92, bestval_voices: 73
(15, 360, 360, 360)
[0 0 0 1 0 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 0 0 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 1 1 1 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 0 0 1 0 0 2 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 0 0 0 0 1 1 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 1 1 0 0 0; 0 2 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 1 0 0 0; 0 0 0 0 0 1 0 0 1 0 2 0; 0 0 0 1 0 0 0 1 1 0 1 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 0 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 2 0 0 1 0 0 0 0 0]
Key Counter is [16 13 0 17 0 8 4 15 31 0 17 0]
Key Score is [39; 106; 32; 104; 65; 56; 90; 35; 117; 48; 73; 82]
Position Counter for 9 is [31 0 17 0 16 13 0 17 0 8 4 15]
Any[[9.0, 78.75, 1.0]]
[9, 79, 1]
9 G# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 112
child voicing cost: 207
Best yet: 319
New solution
function cost: 112
child voicing cost: 199
Best yet: 311
New solution
function cost: 112
child voicing cost: 197
Best yet: 309
New solution
function cost: 112
child voicing cost: 193
Best yet: 305
New solution
function cost: 112
child voicing cost: 192
Best yet: 304
New solution
function cost: 112
child voicing cost: 188
Best yet: 300
New solution
function cost: 112
child voicing cost: 185
Best yet: 297
New solution
function cost: 112
child voicing cost: 183
Best yet: 295
New solution
function cost: 112
child voicing cost: 182
Best yet: 294
New solution
function cost: 112
child voicing cost: 181
Best yet: 293
New solution
function cost: 112
child voicing cost: 178
Best yet: 290
New solution
function cost: 112
child voicing cost: 176
Best yet: 288
New solution
function cost: 112
child voicing cost: 174
Best yet: 286
New solution
function cost: 112
child voicing cost: 172
Best yet: 284
New solution
function cost: 112
child voicing cost: 168
Best yet: 280
New solution
function cost: 110
child voicing cost: 163
Best yet: 273
New solution
function cost: 110
child voicing cost: 160
Best yet: 270
New solution
function cost: 112
child voicing cost: 156
Best yet: 268
New solution
function cost: 112
child voicing cost: 153
Best yet: 265
New solution
function cost: 112
child voicing cost: 152
Best yet: 264
New solution
function cost: 112
child voicing cost: 148
Best yet: 260
New solution
function cost: 110
child voicing cost: 147
Best yet: 257
New solution
function cost: 110
child voicing cost: 145
Best yet: 255
New solution
function cost: 110
child voicing cost: 142
Best yet: 252
New solution
function cost: 110
child voicing cost: 140
Best yet: 250
New solution
function cost: 114
child voicing cost: 135
Best yet: 249
New solution
function cost: 114
child voicing cost: 134
Best yet: 248
New solution
function cost: 114
child voicing cost: 129
Best yet: 243
New solution
function cost: 112
child voicing cost: 128
Best yet: 240
New solution
function cost: 112
child voicing cost: 127
Best yet: 239
New solution
function cost: 110
child voicing cost: 127
Best yet: 237
New solution
function cost: 110
child voicing cost: 122
Best yet: 232
New solution
function cost: 106
child voicing cost: 123
Best yet: 229
New solution
function cost: 106
child voicing cost: 118
Best yet: 224
New solution
function cost: 106
child voicing cost: 116
Best yet: 222
New solution
function cost: 106
child voicing cost: 115
Best yet: 221
New solution
function cost: 106
child voicing cost: 112
Best yet: 218
New solution
function cost: 106
child voicing cost: 105
Best yet: 211
New solution
function cost: 110
child voicing cost: 96
Best yet: 206
New solution
function cost: 110
child voicing cost: 94
Best yet: 204
New solution
function cost: 106
child voicing cost: 92
Best yet: 198
New solution
function cost: 106
child voicing cost: 90
Best yet: 196

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])    
 (0, "S", [(49, 1), (56, 5), (61, 1), (65, 3)])    
 (2, "D", [(51, 1), (51, 1), (58, 5), (67, 3)])    
 (0, "T", [(44, 1), (51, 5), (60, 3), (68, 1)])    
 (0, "D7-1", [(46, 5), (49, 7), (61, 7), (67, 3)]) 
 (10, "D7", [(51, 1), (55, 3), (58, 5), (61, 7)])  
 (14, "Ts", [(53, 1), (56, 3), (56, 3), (60, 5)])  
 (6, "Ts", [(53, 1), (53, 1), (56, 3), (60, 5)])   
 (8, "S/3", [(53, 3), (56, 5), (56, 5), (61, 1)])  
 (2, "T/5", [(51, 5), (56, 1), (60, 3), (63, 5)])  
 (6, "S", [(49, 1), (56, 5), (61, 1), (65, 3)])    
 (0, "D7-1", [(46, 5), (58, 5), (61, 7), (67, 3)]) 
 (8, "T", [(44, 1), (60, 3), (63, 5), (68, 1)])    
 ?                                                 
 (0, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (0, "S/3", [(53, 3), (61, 1), (68, 5), (73, 1)])  
 (4, "S", [(49, 1), (61, 1), (68, 5), (77, 3)])    
 (0, "D7-1", [(46, 5), (61, 7), (67, 3), (73, 7)]) 
 (8, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])    
 (10, "D7-1", [(46, 5), (61, 7), (67, 3), (70, 5)])
 (6, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])    
 (4, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])    
 (4, "T", [(44, 1), (63, 5), (68, 1), (72, 3)])    
 (16, "D7", [(51, 1), (61, 7), (67, 3), (70, 5)])  
 (10, "T", [(44, 1), (60, 3), (63, 5), (68, 1)])   
 (10, "T", [(44, 1), (60, 3), (63, 5), (68, 1)])   

4-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (57, 3), (61, 5), (66, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (61, 5), (66, 1), (69, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (54, 1), (57, 3), (61, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (54, 1), (61, 5), (69, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                   
 [(0, "T/3"), (0, "T/5"), (0, "Tm"), (2, "D"), (4, "D7-5"), (4, "Ts"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7")  …  (8, "S65"), (10, "D/3"), (10, "D/5"), (10, "S"), (10, "S/3"), (10, "S/5"), (10, "T"), (12, "Dm"), (14, "D7-1"), (20, "T-5")]      
 [(0, "S/3"), (0, "S/5"), (2, "T54"), (4, "S65"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (12, "D/5"), (12, "Dm"), (12, "T-5"), (12, "T/3"), (12, "T/5"), (14, "D7-5"), (14, "S6"), (16, "Tm"), (18, "D-5"), (18, "D7-1")]  
 [(0, "D"), (0, "D-5"), (0, "D/3"), (0, "D/5"), (0, "D64"), (0, "D7"), (0, "D7-1"), (0, "D7-5"), (0, "D7/3"), (0, "D7/5")  …  (0, "S/5"), (0, "S6"), (0, "S65"), (0, "T"), (0, "T-5"), (0, "T/3"), (0, "T/5"), (0, "T64"), (0, "Tm"), (0, "Ts")]              
 [(0, "D7"), (0, "D7/3"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "D54"), (6, "T54")  …  (8, "T64"), (8, "Tm"), (10, "D7-5"), (10, "S"), (12, "Ts"), (14, "D-5"), (14, "S6"), (14, "T"), (14, "T/3"), (24, "T-5")]      
 [(0, "T"), (0, "T/3"), (4, "T54"), (8, "D/3"), (10, "D64"), (10, "T-5"), (10, "Ts"), (12, "D54"), (12, "D7-1"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (20, "D-5")]             
 [(0, "D54"), (2, "D"), (2, "D/3"), (2, "D64"), (2, "T/3"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (6, "Ts"), (8, "D7-5"), (10, "D7-1"), (12, "D-5"), (12, "S"), (12, "S/3"), (12, "T"), (14, "Tm"), (22, "T-5")]                    
 [(4, "D/3"), (4, "T"), (4, "T/3"), (8, "D54"), (10, "D"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S/3"), (10, "T64"), (10, "Ts"), (14, "D7-1"), (14, "S65/6"), (14, "T-5"), (16, "D7-5"), (20, "D-5"), (20, "S")]           
 [(0, "D64"), (0, "T/3"), (2, "D54"), (4, "D"), (4, "Tm"), (4, "Ts"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/7")  …  (10, "S"), (10, "S/3"), (10, "T"), (10, "T54"), (12, "T64"), (14, "D/3"), (18, "D7-1"), (18, "S6"), (20, "Dm"), (20, "T-5")]       
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D/3"), (8, "D/5"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]
 [(2, "D"), (2, "D/3"), (2, "D/5"), (6, "D64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-5"), (10, "D7-1")  …  (12, "D-5"), (14, "T64"), (16, "S"), (16, "S/3"), (16, "S/5"), (16, "S6"), (16, "T"), (16, "T/3"), (16, "T/5"), (26, "T-5")]  
 [(4, "S/3"), (4, "S/5"), (6, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (8, "S65"), (8, "Ts")  …  (12, "D/3"), (12, "D/5"), (12, "Tm"), (14, "D7-5"), (14, "S6"), (16, "T-5"), (16, "T/3"), (16, "T/5"), (18, "D-5"), (18, "D7-1")]
 [(6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D"), (12, "D64"), (12, "S65/6"), (12, "Ts"), (14, "D54"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "T64"), (18, "D-5"), (20, "T-5")]            
 [(4, "S65/6"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S/3"), (8, "T64"), (10, "D54")  …  (10, "S"), (12, "D"), (12, "D/3"), (12, "D64"), (12, "T-5"), (12, "T/3"), (14, "S6"), (16, "Tm"), (18, "D7-5"), (22, "D-5")]   
 [(6, "Ts"), (8, "D54"), (8, "T"), (10, "D64"), (10, "S/3"), (10, "S65"), (10, "T/3"), (10, "T64"), (12, "D7-1"), (14, "D"), (14, "D/3"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T-5"), (16, "S"), (20, "D7-5"), (24, "D-5")]            
 [(2, "D54"), (4, "D"), (4, "D/3"), (4, "D64"), (4, "S65/6"), (4, "T/3"), (4, "Ts"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Tm"), (10, "D7-5"), (10, "S"), (10, "S/3"), (10, "T"), (12, "D7-1"), (14, "D-5"), (20, "T-5")]                    

Done. Total checked: 125159, Pruned: 139146, completed: 42, time: 2.4010000228881836, efficiency: 17.492711203508378
Results: bestval_func: 106, bestval_voices: 90
(16, 360, 360, 360)
Total time for optimisation of piece: 6.463000059127808
["T", "S", "D", "T", "D7-1", "D7", "Ts", "Ts", "S/3", "T/5", "S", "D7-1", "T", "S", "D", "D", "D7-1", "T", "T/3", "D/5", "T", "S/3", "S", "D7-1", "T", "D7-1", "T", "T", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-299.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-312.csv
[0 1 0 0 0 0 1 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 2 0 0 0 0 1 0 0 1 0 0; 0 1 0 0 0 0 2 0 0 1 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 1 1 0 0; 0 0 1 0 1 0 1 0 1 0 0 0; 0 1 1 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 1 0 0; 0 1 0 0 0 0 0 0 1 2 0 0; 0 0 0 0 0 0 0 0 2 1 0 1; 0 2 0 0 0 0 1 0 1 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 1 0 0; 0 0 0 0 2 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 2 0 0 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 1 1 0 0 0 1 0 0 1 0 0; 0 1 1 0 0 0 1 0 1 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 1 0 0 0 2 0 1 0 0 0]
Key Counter is [0 28 9 1 13 2 31 0 18 14 0 9]
Key Score is [47; 80; 104; 30; 114; 38; 89; 76; 49; 122; 26; 100]
Position Counter for 10 is [14 0 9 0 28 9 1 13 2 31 0 18]
Any[[10.0, 82.0, 0.0]]
[10, 82, 0]
7 F# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

4-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (57, 3), (61, 5), (66, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (61, 5), (66, 1), (69, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (54, 1), (57, 3), (61, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(54, 1), (54, 1), (61, 5), (69, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 72
child voicing cost: 198
Best yet: 270
New solution
function cost: 72
child voicing cost: 189
Best yet: 261
New solution
function cost: 72
child voicing cost: 186
Best yet: 258
New solution
function cost: 72
child voicing cost: 184
Best yet: 256
New solution
function cost: 72
child voicing cost: 181
Best yet: 253
New solution
function cost: 72
child voicing cost: 179
Best yet: 251
New solution
function cost: 66
child voicing cost: 180
Best yet: 246
New solution
function cost: 66
child voicing cost: 177
Best yet: 243
New solution
function cost: 66
child voicing cost: 175
Best yet: 241
New solution
function cost: 66
child voicing cost: 174
Best yet: 240
New solution
function cost: 66
child voicing cost: 170
Best yet: 236
New solution
function cost: 72
child voicing cost: 162
Best yet: 234
New solution
function cost: 72
child voicing cost: 157
Best yet: 229
New solution
function cost: 72
child voicing cost: 155
Best yet: 227
New solution
function cost: 78
child voicing cost: 148
Best yet: 226
New solution
function cost: 78
child voicing cost: 146
Best yet: 224
New solution
function cost: 78
child voicing cost: 137
Best yet: 215
New solution
function cost: 78
child voicing cost: 136
Best yet: 214
New solution
function cost: 78
child voicing cost: 135
Best yet: 213
New solution
function cost: 80
child voicing cost: 132
Best yet: 212
New solution
function cost: 72
child voicing cost: 138
Best yet: 210
New solution
function cost: 76
child voicing cost: 133
Best yet: 209
New solution
function cost: 80
child voicing cost: 126
Best yet: 206
New solution
function cost: 76
child voicing cost: 129
Best yet: 205
New solution
function cost: 76
child voicing cost: 127
Best yet: 203
New solution
function cost: 80
child voicing cost: 121
Best yet: 201
New solution
function cost: 80
child voicing cost: 119
Best yet: 199
New solution
function cost: 76
child voicing cost: 120
Best yet: 196
New solution
function cost: 76
child voicing cost: 118
Best yet: 194
New solution
function cost: 80
child voicing cost: 113
Best yet: 193
New solution
function cost: 60
child voicing cost: 130
Best yet: 190
New solution
function cost: 58
child voicing cost: 127
Best yet: 185
New solution
function cost: 58
child voicing cost: 123
Best yet: 181
New solution
function cost: 62
child voicing cost: 118
Best yet: 180
New solution
function cost: 64
child voicing cost: 112
Best yet: 176
New solution
function cost: 64
child voicing cost: 111
Best yet: 175
New solution
function cost: 64
child voicing cost: 110
Best yet: 174
New solution
function cost: 62
child voicing cost: 110
Best yet: 172
New solution
function cost: 64
child voicing cost: 107
Best yet: 171
New solution
function cost: 64
child voicing cost: 102
Best yet: 166
New solution
function cost: 64
child voicing cost: 101
Best yet: 165
New solution
function cost: 64
child voicing cost: 100
Best yet: 164
New solution
function cost: 68
child voicing cost: 95
Best yet: 163
New solution
function cost: 68
child voicing cost: 93
Best yet: 161
New solution
function cost: 68
child voicing cost: 91
Best yet: 159
New solution
function cost: 68
child voicing cost: 89
Best yet: 157
New solution
function cost: 70
child voicing cost: 86
Best yet: 156

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "D", [(49, 1), (53, 3), (61, 1), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "D"), (4, "D/3"), (4, "D/5"), (4, "S65"), (4, "T/3"), (4, "T/5"), (4, "Ts"), (8, "D7"), (8, "D7/3"), (8, "D7/5")  …  (10, "D7-5"), (10, "S"), (10, "S/3"), (10, "S/5"), (10, "T"), (12, "D7-1"), (12, "Dm"), (14, "D-5"), (14, "S6"), (20, "T-5")]             
 [(4, "D/3"), (4, "T"), (4, "T/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S65"), (6, "S65/6"), (6, "Tm"), (8, "D54")  …  (10, "D64"), (10, "Dm"), (10, "S/3"), (10, "T64"), (12, "S"), (14, "T-5"), (14, "Ts"), (16, "D7-5"), (16, "S6"), (20, "D-5")]           
 [(8, "Tm"), (10, "D/3"), (10, "D/5"), (10, "S6"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (14, "D7-1"), (14, "S"), (16, "D"), (16, "Dm"), (16, "S/3"), (16, "S/5"), (16, "Ts"), (18, "D7-5"), (20, "T-5"), (22, "D-5")]     
 [(10, "D7-1"), (10, "Dm"), (12, "T"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65"), (14, "Tm"), (14, "Ts")  …  (18, "D/3"), (18, "D/5"), (18, "S/3"), (18, "S/5"), (18, "T-5"), (18, "T/3"), (18, "T/5"), (20, "S"), (24, "D7-5"), (28, "D-5")]
 [(2, "D"), (2, "D/3"), (2, "D/5"), (2, "T/3"), (2, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65")  …  (10, "D7-1"), (12, "D-5"), (12, "S"), (12, "S/3"), (12, "S/5"), (12, "T"), (14, "Dm"), (14, "Tm"), (16, "S6"), (22, "T-5")]             
 [(4, "Dm"), (4, "S65"), (4, "S65/6"), (6, "D7-1"), (8, "S/3"), (8, "T64"), (10, "D54"), (10, "S"), (10, "T"), (12, "D64")  …  (12, "T/3"), (12, "Tm"), (12, "Ts"), (14, "S6"), (14, "T54"), (16, "D"), (16, "D/3"), (16, "T-5"), (22, "D7-5"), (26, "D-5")]         
 [(4, "Dm"), (4, "S65"), (6, "D7-1"), (8, "S/3"), (8, "S/5"), (10, "D54"), (10, "S"), (10, "T"), (12, "D7"), (12, "D7/3")  …  (12, "T/5"), (12, "Tm"), (12, "Ts"), (14, "S6"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "T-5"), (22, "D7-5"), (26, "D-5")]          
 [(6, "Ts"), (8, "T"), (10, "S/3"), (10, "S/5"), (10, "T-5"), (10, "T/3"), (10, "T/5"), (12, "D/3"), (12, "D/5"), (12, "T54")  …  (16, "D7-1"), (16, "S"), (18, "D"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D7-5"), (24, "D-5"), (24, "S6")]   
 [(8, "S/3"), (8, "S/5"), (10, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Dm"), (12, "S65"), (12, "T-5")  …  (16, "D"), (16, "D/3"), (16, "D/5"), (16, "Tm"), (18, "D7-5"), (18, "S6"), (18, "T"), (20, "T/3"), (20, "T/5"), (22, "D-5")]   
 [(4, "T"), (4, "T/3"), (6, "D64"), (6, "Tm"), (6, "Ts"), (8, "D/3"), (8, "D54"), (8, "T54"), (10, "Dm"), (10, "S/3")  …  (14, "D7"), (14, "D7/3"), (14, "D7/7"), (14, "S65"), (14, "S65/6"), (14, "T-5"), (16, "D7-5"), (16, "S"), (20, "D-5"), (24, "S6")]         
 [(8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Dm"), (10, "S/3"), (10, "S/5"), (12, "D-5"), (12, "T")  …  (14, "D/5"), (14, "D7-1"), (14, "S65"), (14, "Tm"), (14, "Ts"), (16, "S"), (18, "T/3"), (18, "T/5"), (20, "S6"), (22, "T-5")]  
 [(0, "S/5"), (2, "T54"), (4, "S65/6"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "S"), (12, "D"), (12, "D/5"), (12, "D64"), (12, "T-5"), (12, "T/5"), (14, "D7-5"), (16, "Tm"), (18, "D7-1")]                                   
 [(2, "D64"), (2, "T/5"), (4, "D54"), (6, "D"), (6, "D/5"), (6, "S65/6"), (8, "D7-5"), (8, "S"), (8, "S/5"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (14, "Dm"), (18, "T-5"), (20, "D7-1")]                                     
 [(2, "D54"), (4, "D"), (4, "D/5"), (4, "D64"), (4, "S65/6"), (4, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Tm"), (10, "D7-5"), (10, "S"), (10, "S/5"), (10, "T"), (12, "D7-1"), (14, "D-5"), (20, "T-5")]                                      
 [(6, "D"), (10, "D7")]                                                                                                                                                                                                                                              
 [(8, "T")]                                                                                                                                                                                                                                                          
 [(10, "T")]                                                                                                                                                                                                                                                         

Done. Total checked: 141552, Pruned: 174734, completed: 47, time: 2.622999906539917, efficiency: 17.918414668187772
Results: bestval_func: 70, bestval_voices: 86
(15, 390, 390, 390)
[0 1 0 0 0 0 1 0 0 0 0 0; 0 2 0 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 2 0 0 0 0 1 0 0 1 0 0; 0 1 0 0 0 0 2 0 0 1 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 1 1 0 0; 0 0 1 0 1 0 1 0 1 0 0 0; 0 1 1 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 1 0 0; 0 1 0 0 0 0 0 0 1 2 0 0; 0 0 0 0 0 0 0 0 2 1 0 1; 0 2 0 0 0 0 1 0 1 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 1 0 0; 0 0 0 0 2 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 2 0 0 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 1 1 0 0 0 1 0 0 1 0 0; 0 1 1 0 0 0 1 0 1 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 1 0 0 0 2 0 1 0 0 0]
Key Counter is [0 28 9 1 13 2 31 0 18 14 0 9]
Key Score is [47; 80; 104; 30; 114; 38; 89; 76; 49; 122; 26; 100]
Position Counter for 10 is [14 0 9 0 28 9 1 13 2 31 0 18]
Any[[10.0, 82.0, 0.0]]
[10, 82, 0]
7 F# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "D", [(49, 1), (53, 3), (61, 1), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 128
child voicing cost: 166
Best yet: 294
New solution
function cost: 128
child voicing cost: 161
Best yet: 289
New solution
function cost: 128
child voicing cost: 160
Best yet: 288
New solution
function cost: 128
child voicing cost: 157
Best yet: 285
New solution
function cost: 128
child voicing cost: 156
Best yet: 284
New solution
function cost: 128
child voicing cost: 155
Best yet: 283
New solution
function cost: 128
child voicing cost: 153
Best yet: 281
New solution
function cost: 128
child voicing cost: 151
Best yet: 279
New solution
function cost: 120
child voicing cost: 155
Best yet: 275
New solution
function cost: 120
child voicing cost: 141
Best yet: 261
New solution
function cost: 120
child voicing cost: 135
Best yet: 255
New solution
function cost: 118
child voicing cost: 132
Best yet: 250
New solution
function cost: 118
child voicing cost: 129
Best yet: 247
New solution
function cost: 120
child voicing cost: 125
Best yet: 245
New solution
function cost: 120
child voicing cost: 117
Best yet: 237
New solution
function cost: 118
child voicing cost: 117
Best yet: 235
New solution
function cost: 120
child voicing cost: 114
Best yet: 234
New solution
function cost: 120
child voicing cost: 108
Best yet: 228
New solution
function cost: 114
child voicing cost: 112
Best yet: 226
New solution
function cost: 118
child voicing cost: 107
Best yet: 225
New solution
function cost: 110
child voicing cost: 111
Best yet: 221
New solution
function cost: 118
child voicing cost: 92
Best yet: 210
New solution
function cost: 108
child voicing cost: 97
Best yet: 205
New solution
function cost: 108
child voicing cost: 93
Best yet: 201
New solution
function cost: 118
child voicing cost: 82
Best yet: 200
New solution
function cost: 112
child voicing cost: 84
Best yet: 196
New solution
function cost: 120
child voicing cost: 75
Best yet: 195
New solution
function cost: 116
child voicing cost: 76
Best yet: 192
New solution
function cost: 104
child voicing cost: 87
Best yet: 191
New solution
function cost: 106
child voicing cost: 84
Best yet: 190
New solution
function cost: 106
child voicing cost: 78
Best yet: 184
New solution
function cost: 106
child voicing cost: 75
Best yet: 181
New solution
function cost: 106
child voicing cost: 74
Best yet: 180

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(54, 1), (54, 1), (61, 5), (69, 3)])    
 (0, "T/3", [(57, 3), (61, 5), (61, 5), (66, 1)])  
 (10, "S", [(59, 1), (59, 1), (62, 3), (66, 5)])   
 (0, "T", [(54, 1), (57, 3), (61, 5), (66, 1)])    
 (0, "D7/3", [(53, 3), (59, 7), (61, 1), (68, 5)]) 
 (0, "T", [(54, 1), (57, 3), (61, 5), (66, 1)])    
 (2, "D", [(49, 1), (61, 1), (65, 3), (68, 5)])    
 (10, "D", [(49, 1), (61, 1), (65, 3), (68, 5)])   
 (4, "Ts", [(50, 1), (57, 5), (66, 3), (66, 3)])   
 (0, "T/3", [(45, 3), (61, 5), (66, 1), (66, 1)])  
 (2, "D/5", [(44, 5), (61, 1), (65, 3), (68, 5)])  
 (10, "T", [(42, 1), (61, 5), (66, 1), (69, 3)])   
 (8, "D7/3", [(41, 3), (59, 7), (68, 5), (73, 1)]) 
 ?                                                 
 (4, "S65/6", [(56, 6), (59, 1), (62, 3), (66, 5)])
 (6, "D7-1", [(56, 5), (59, 7), (59, 7), (65, 3)]) 
 (8, "T", [(54, 1), (57, 3), (61, 5), (66, 1)])    
 (12, "D7/3", [(53, 3), (59, 7), (61, 1), (68, 5)])
 (4, "T", [(54, 1), (57, 3), (61, 5), (66, 1)])    
 (10, "S/5", [(54, 5), (54, 5), (59, 1), (62, 3)]) 
 (6, "T", [(54, 1), (54, 1), (57, 3), (61, 5)])    
 (2, "D64", [(49, 1), (54, 4), (57, 6), (61, 1)])  
 (4, "D", [(49, 1), (53, 3), (56, 5), (61, 1)])    
 (6, "D", [(49, 1), (49, 1), (56, 5), (65, 3)])    
 (8, "T", [(42, 1), (49, 5), (57, 3), (66, 1)])    
 (8, "T", [(42, 1), (49, 5), (57, 3), (66, 1)])    

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(44, 1), (59, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(56, 1), (59, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(44, 1), (51, 5), (59, 3), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(44, 1), (63, 5), (68, 1), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(44, 1), (56, 1), (63, 5), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(16, "T")]                                                                                                                                                                                                                                                        
 [(6, "T"), (6, "T/3"), (6, "T/5"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Tm"), (8, "Ts")  …  (12, "S65"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D"), (16, "Dm"), (16, "T-5"), (18, "D-5"), (18, "S6")]             
 [(0, "S"), (0, "S/3"), (0, "S/5"), (0, "S65"), (0, "T64"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7")  …  (6, "T/3"), (6, "T/5"), (8, "D"), (8, "D-5"), (8, "D/3"), (8, "D/5"), (8, "D7-1"), (8, "Dm"), (10, "Tm"), (12, "T-5")]                
 [(10, "D7-5"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "D"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Dm")  …  (14, "D-5"), (14, "D/3"), (14, "D/5"), (16, "D7-1"), (16, "S65"), (18, "S"), (18, "S/3"), (18, "S/5"), (20, "T-5"), (22, "S6")]
 [(0, "S/3"), (0, "T64"), (2, "T54"), (4, "S65"), (4, "S65/6"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/7")  …  (12, "D/3"), (12, "Dm"), (12, "T-5"), (14, "D7-5"), (14, "S6"), (16, "D64"), (16, "T/3"), (18, "D-5"), (18, "D7-1"), (20, "Tm")]       
 [(6, "T"), (6, "T/3"), (6, "T54"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Tm"), (8, "Ts"), (10, "D/3"), (10, "D54"), (12, "D7-1"), (12, "S65/6"), (14, "D7-5"), (14, "S"), (14, "S/3"), (16, "D"), (16, "T-5"), (18, "D-5")]           
 [(4, "S"), (4, "S/3"), (6, "D64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (6, "T/3"), (8, "D54"), (8, "D7-5"), (8, "T54"), (10, "D"), (10, "Tm"), (10, "Ts"), (12, "D-5"), (12, "D/3"), (12, "T"), (14, "D7-1"), (22, "T-5")]             
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S/3"), (6, "T64"), (8, "T"), (8, "T/3"), (10, "D"), (10, "D/3"), (10, "D64"), (10, "D7-1"), (10, "S65/6"), (10, "Ts"), (12, "D54"), (12, "D7-5"), (12, "S"), (16, "D-5"), (18, "T-5")]                     
 [(6, "S"), (6, "S/3"), (8, "D7-1"), (8, "Dm"), (8, "S65"), (8, "S65/6"), (10, "S6"), (10, "T"), (10, "T54"), (12, "D64")  …  (14, "D/3"), (14, "D54"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (16, "T-5"), (16, "Tm"), (18, "D7-5"), (20, "D"), (22, "D-5")]      
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65"), (6, "T/3"), (6, "T/5")  …  (10, "D"), (10, "Tm"), (10, "Ts"), (12, "D-5"), (12, "D/3"), (12, "D/5"), (12, "T"), (14, "D7-1"), (18, "Dm"), (22, "T-5")]            
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65"), (6, "T/3"), (6, "T/5")  …  (10, "D"), (10, "Tm"), (10, "Ts"), (12, "D-5"), (12, "D/3"), (12, "D/5"), (12, "T"), (14, "D7-1"), (18, "Dm"), (22, "T-5")]            
 [(2, "S/3"), (2, "S/5"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65"), (6, "Ts"), (8, "T")  …  (10, "Dm"), (12, "D7-5"), (12, "S"), (14, "T-5"), (14, "T/3"), (14, "T/5"), (16, "D-5"), (16, "D7-1"), (16, "S6"), (18, "Tm")]          
 [(2, "D64"), (2, "T/3"), (4, "D54"), (4, "D7-5"), (6, "D"), (6, "Ts"), (8, "D-5"), (8, "S"), (8, "S/3"), (12, "S6"), (12, "T"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65/6"), (14, "Tm"), (16, "D/3"), (18, "D7-1"), (22, "T-5")]           
 [(10, "D"), (12, "D/3"), (12, "D54"), (12, "T"), (12, "T/3"), (12, "T54"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S/3"), (14, "T-5"), (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "D7-5"), (18, "D7-1"), (18, "S65/6"), (24, "S")] 
 [(2, "Ts"), (4, "T"), (6, "S/3"), (6, "T64"), (10, "D64"), (10, "T-5"), (10, "T/3"), (12, "D54"), (12, "D7-1"), (14, "D"), (14, "D/3"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65/6"), (16, "D7-5"), (16, "S"), (20, "D-5")]                 
 [(0, "Ts"), (2, "T"), (6, "T54"), (8, "T-5"), (12, "D64"), (12, "S65/6"), (12, "T/3"), (14, "D54"), (14, "D7-1"), (14, "S"), (14, "S/3"), (16, "D"), (16, "D/3"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D7-5"), (22, "D-5")]                 

Done. Total checked: 527937, Pruned: 590486, completed: 33, time: 9.323000192642212, efficiency: 3.5396330921503005
Results: bestval_func: 106, bestval_voices: 74
(16, 390, 390, 390)
Total time for optimisation of piece: 13.583999872207642
["T", "T/3", "S", "T", "D7/3", "T", "D", "D", "Ts", "T/3", "D/5", "T", "D7/3", "T", "D", "D", "D/3", "T", "D7-1", "T/3", "S65/6", "D7-1", "T", "D7/3", "T", "S/5", "T", "D64", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-312.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-325.csv
[0 2 0 0 1 0 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 0; 1 0 0 1 0 0 2 0 0 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 1 1 0 0 0 0 1 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 1 1 0 0 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 1 1 0 0 0; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 0 1 0 0 0 0 0 2 0; 0 0 0 1 0 0 1 0 0 0 2 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 1 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 1 0 0 1 0 0 0 0; 0 0 0 2 0 0 2 0 0 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 0 0 2 0 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0]
Key Counter is [8 16 0 23 17 0 16 6 32 0 6 7]
Key Score is [38; 101; 62; 75; 111; 37; 100; 54; 91; 88; 43; 117]
Position Counter for 12 is [7 8 16 0 23 17 0 16 6 32 0 6]
Any[[12.0, 84.0, 0.0]]
[12, 84, 0]
9 G# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(44, 1), (59, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(56, 1), (59, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(44, 1), (51, 5), (59, 3), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(44, 1), (63, 5), (68, 1), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(44, 1), (56, 1), (63, 5), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 78
child voicing cost: 202
Best yet: 280
New solution
function cost: 78
child voicing cost: 192
Best yet: 270
New solution
function cost: 78
child voicing cost: 183
Best yet: 261
New solution
function cost: 82
child voicing cost: 177
Best yet: 259
New solution
function cost: 78
child voicing cost: 177
Best yet: 255
New solution
function cost: 78
child voicing cost: 171
Best yet: 249
New solution
function cost: 78
child voicing cost: 170
Best yet: 248
New solution
function cost: 78
child voicing cost: 167
Best yet: 245
New solution
function cost: 78
child voicing cost: 166
Best yet: 244
New solution
function cost: 78
child voicing cost: 164
Best yet: 242
New solution
function cost: 76
child voicing cost: 163
Best yet: 239
New solution
function cost: 76
child voicing cost: 159
Best yet: 235
New solution
function cost: 76
child voicing cost: 158
Best yet: 234
New solution
function cost: 76
child voicing cost: 154
Best yet: 230
New solution
function cost: 76
child voicing cost: 152
Best yet: 228
New solution
function cost: 82
child voicing cost: 145
Best yet: 227
New solution
function cost: 86
child voicing cost: 139
Best yet: 225
New solution
function cost: 78
child voicing cost: 146
Best yet: 224
New solution
function cost: 78
child voicing cost: 145
Best yet: 223
New solution
function cost: 78
child voicing cost: 143
Best yet: 221
New solution
function cost: 76
child voicing cost: 143
Best yet: 219
New solution
function cost: 76
child voicing cost: 141
Best yet: 217
New solution
function cost: 76
child voicing cost: 139
Best yet: 215
New solution
function cost: 78
child voicing cost: 132
Best yet: 210
New solution
function cost: 82
child voicing cost: 126
Best yet: 208
New solution
function cost: 82
child voicing cost: 124
Best yet: 206
New solution
function cost: 84
child voicing cost: 121
Best yet: 205
New solution
function cost: 84
child voicing cost: 120
Best yet: 204
New solution
function cost: 84
child voicing cost: 116
Best yet: 200
New solution
function cost: 84
child voicing cost: 114
Best yet: 198
New solution
function cost: 84
child voicing cost: 109
Best yet: 193
New solution
function cost: 84
child voicing cost: 107
Best yet: 191
New solution
function cost: 88
child voicing cost: 98
Best yet: 186
New solution
function cost: 88
child voicing cost: 94
Best yet: 182
New solution
function cost: 84
child voicing cost: 97
Best yet: 181
New solution
function cost: 84
child voicing cost: 93
Best yet: 177
New solution
function cost: 84
child voicing cost: 91
Best yet: 175
New solution
function cost: 84
child voicing cost: 88
Best yet: 172
New solution
function cost: 84
child voicing cost: 85
Best yet: 169
New solution
function cost: 90
child voicing cost: 78
Best yet: 168
New solution
function cost: 90
child voicing cost: 77
Best yet: 167
New solution
function cost: 90
child voicing cost: 75
Best yet: 165
New solution
function cost: 80
child voicing cost: 83
Best yet: 163
New solution
function cost: 86
child voicing cost: 73
Best yet: 159
New solution
function cost: 86
child voicing cost: 71
Best yet: 157
New solution
function cost: 86
child voicing cost: 69
Best yet: 155
New solution
function cost: 86
child voicing cost: 67
Best yet: 153
New solution
function cost: 86
child voicing cost: 66
Best yet: 152
New solution
function cost: 86
child voicing cost: 62
Best yet: 148

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "Ts", [(52, 1), (68, 3), (68, 3), (71, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "Ts"), (2, "T"), (6, "T54"), (8, "T-5"), (12, "S65"), (12, "T/3"), (12, "T/5"), (14, "D7-1"), (14, "S"), (14, "S/3")  …  (16, "D/5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "Tm"), (18, "D7-5"), (20, "Dm"), (22, "D-5"), (22, "S6")]   
 [(2, "Ts"), (4, "T"), (6, "S/3"), (6, "T64"), (8, "T54"), (10, "D64"), (10, "T-5"), (10, "T/3"), (12, "D54"), (12, "D7-1")  …  (14, "D7/3"), (14, "D7/7"), (14, "S65"), (14, "S65/6"), (14, "Tm"), (16, "D7-5"), (16, "S"), (18, "Dm"), (20, "D-5"), (24, "S6")]  
 [(4, "D/3"), (4, "D/5"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65")  …  (10, "D"), (10, "Dm"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "T-5"), (14, "Ts"), (16, "D7-5"), (16, "S6"), (20, "D-5")]           
 [(4, "S65"), (6, "S6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S/3"), (8, "S/5"), (10, "D54"), (10, "S")  …  (12, "D7-1"), (12, "Dm"), (12, "T/3"), (12, "T/5"), (16, "Tm"), (16, "Ts"), (18, "D7-5"), (18, "T"), (22, "D-5"), (24, "T-5")]       
 [(2, "D/3"), (2, "D/5"), (4, "Dm"), (4, "Tm"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "T"), (10, "T/3")  …  (12, "S65"), (12, "Ts"), (14, "T54"), (16, "S/3"), (16, "S/5"), (18, "D7-5"), (18, "S"), (18, "S6"), (20, "T-5"), (22, "D-5")]        
 [(0, "Tm"), (6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D")  …  (12, "Ts"), (14, "D54"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "T54"), (16, "T64"), (18, "D-5"), (18, "S6"), (20, "T-5")]        
 [(8, "D"), (8, "D/3"), (8, "D/5"), (8, "Tm"), (10, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Dm")  …  (12, "Ts"), (14, "D-5"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (14, "T"), (16, "D7-1"), (18, "S6"), (20, "T-5")]     
 [(8, "D"), (8, "D/3"), (8, "D/5"), (8, "Tm"), (10, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Dm")  …  (12, "Ts"), (14, "D-5"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (14, "T"), (16, "D7-1"), (18, "S6"), (20, "T-5")]     
 [(0, "S/3"), (0, "S/5"), (2, "T54"), (4, "S65"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (12, "D/5"), (12, "Dm"), (12, "T-5"), (14, "D7-5"), (14, "S6"), (16, "T/3"), (16, "T/5"), (18, "D-5"), (18, "D7-1"), (20, "Tm")]       
 [(2, "D7-5"), (6, "D-5"), (6, "S"), (8, "D"), (8, "D/3"), (8, "D64"), (8, "T/3"), (8, "Tm"), (8, "Ts"), (10, "D54")  …  (12, "D7/3"), (12, "D7/7"), (12, "S/3"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "T"), (16, "D7-1"), (16, "Dm"), (24, "T-5")]       
 [(8, "D-5"), (10, "D"), (10, "Tm"), (12, "D7-5"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Dm")  …  (18, "D7-1"), (18, "S65"), (18, "Ts"), (20, "D/3"), (20, "D/5"), (20, "S"), (20, "S/3"), (20, "S/5"), (24, "S6"), (26, "T-5")]
 [(6, "T"), (8, "D64"), (8, "T/5"), (10, "D54"), (12, "Dm"), (12, "S65/6"), (12, "Tm"), (14, "D7-1"), (14, "S"), (14, "S/5"), (16, "D"), (16, "D/5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D7-5"), (22, "S6")]                              
 [(6, "D54"), (8, "D"), (8, "D/5"), (8, "D64"), (8, "S65/6"), (8, "T/5"), (10, "T"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D-5"), (14, "D7-5"), (14, "S"), (14, "S/5"), (16, "D7-1"), (16, "T-5")]                                           
 [(6, "D"), (6, "D/5"), (6, "S/5"), (8, "D54"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65/6"), (10, "T/5"), (10, "Ts"), (12, "D7-5"), (12, "T"), (14, "D7-1"), (16, "S"), (20, "S6")]                                           
 [(10, "D7"), (14, "D")]                                                                                                                                                                                                                                           
 [(12, "T")]                                                                                                                                                                                                                                                       
 [(10, "T")]                                                                                                                                                                                                                                                       

Done. Total checked: 132152, Pruned: 154507, completed: 49, time: 3.0789999961853027, efficiency: 15.914257895650561
Results: bestval_func: 86, bestval_voices: 62
(15, 359, 359, 359)
[0 2 0 0 1 0 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 0; 1 0 0 1 0 0 2 0 0 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 1 0 0 1 0 0 1 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 1 1 0 0 0 0 1 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 1 1 0 1 0 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 1 1 0 0 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 1 1 0 0 0; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 0 1 0 0 0 0 0 2 0; 0 0 0 1 0 0 1 0 0 0 2 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 1 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 1 0 0 1 0 0 0 0; 0 0 0 2 0 0 2 0 0 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 1 0 0 0 2 0 0 0; 0 0 0 1 1 0 0 1 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0]
Key Counter is [8 16 0 23 17 0 16 6 32 0 6 7]
Key Score is [38; 101; 62; 75; 111; 37; 100; 54; 91; 88; 43; 117]
Position Counter for 12 is [7 8 16 0 23 17 0 16 6 32 0 6]
Any[[12.0, 84.0, 0.0]]
[12, 84, 0]
9 G# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "Ts", [(52, 1), (68, 3), (68, 3), (71, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 130
child voicing cost: 193
Best yet: 323
New solution
function cost: 130
child voicing cost: 185
Best yet: 315
New solution
function cost: 130
child voicing cost: 183
Best yet: 313
New solution
function cost: 130
child voicing cost: 180
Best yet: 310
New solution
function cost: 130
child voicing cost: 179
Best yet: 309
New solution
function cost: 130
child voicing cost: 171
Best yet: 301
New solution
function cost: 130
child voicing cost: 163
Best yet: 293
New solution
function cost: 128
child voicing cost: 162
Best yet: 290
New solution
function cost: 128
child voicing cost: 154
Best yet: 282
New solution
function cost: 128
child voicing cost: 152
Best yet: 280
New solution
function cost: 128
child voicing cost: 149
Best yet: 277
New solution
function cost: 136
child voicing cost: 140
Best yet: 276
New solution
function cost: 136
child voicing cost: 138
Best yet: 274
New solution
function cost: 136
child voicing cost: 131
Best yet: 267
New solution
function cost: 136
child voicing cost: 130
Best yet: 266
New solution
function cost: 136
child voicing cost: 127
Best yet: 263
New solution
function cost: 136
child voicing cost: 126
Best yet: 262
New solution
function cost: 136
child voicing cost: 119
Best yet: 255
New solution
function cost: 136
child voicing cost: 118
Best yet: 254
New solution
function cost: 128
child voicing cost: 125
Best yet: 253
New solution
function cost: 134
child voicing cost: 117
Best yet: 251
New solution
function cost: 128
child voicing cost: 120
Best yet: 248
New solution
function cost: 124
child voicing cost: 123
Best yet: 247
New solution
function cost: 128
child voicing cost: 118
Best yet: 246
New solution
function cost: 128
child voicing cost: 116
Best yet: 244
New solution
function cost: 128
child voicing cost: 109
Best yet: 237

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (16, "T", [(56, 1), (56, 1), (63, 5), (71, 3)]) 
 (6, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])  
 (0, "S/3", [(52, 3), (56, 5), (61, 1), (73, 1)])
 (12, "D", [(51, 1), (58, 5), (67, 3), (75, 1)]) 
 (0, "S/3", [(52, 3), (61, 1), (68, 5), (73, 1)])
 (8, "D7", [(51, 1), (58, 5), (67, 3), (73, 7)]) 
 (10, "Ts", [(52, 1), (56, 3), (68, 3), (71, 5)])
 (10, "Ts", [(52, 1), (59, 5), (64, 1), (68, 3)])
 (6, "S/3", [(52, 3), (61, 1), (68, 5), (73, 1)])
 (6, "T/5", [(51, 5), (59, 3), (68, 1), (75, 5)])
 (4, "S", [(49, 1), (61, 1), (68, 5), (76, 3)])  
 (6, "S65", [(49, 1), (64, 3), (70, 6), (80, 5)])
 (6, "D", [(51, 1), (63, 1), (70, 5), (79, 3)])  
 ?                                               
 (10, "T", [(56, 1), (63, 5), (71, 3), (80, 1)]) 
 (8, "Tm", [(59, 1), (59, 1), (66, 5), (75, 3)]) 
 (8, "D/3", [(55, 3), (58, 5), (63, 1), (75, 1)])
 (0, "S/3", [(52, 3), (61, 1), (68, 5), (73, 1)])
 (6, "S", [(49, 1), (61, 1), (68, 5), (76, 3)])  
 (10, "Tm", [(47, 1), (63, 3), (71, 1), (78, 5)])
 (14, "S", [(49, 1), (61, 1), (68, 5), (76, 3)]) 
 (6, "D54", [(51, 1), (58, 5), (68, 4), (75, 1)])
 (6, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])  
 (10, "D7", [(51, 1), (58, 5), (67, 3), (73, 7)])
 (12, "T", [(44, 1), (56, 1), (63, 5), (71, 3)]) 
 (12, "T", [(44, 1), (56, 1), (63, 5), (71, 3)]) 

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (68, 3), (72, 5), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (53, 1), (60, 5), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(10, "T")]                                                                                                                                                                                                                                                       
 [(0, "Ts"), (2, "S65"), (2, "T"), (2, "T/3"), (2, "T/5"), (4, "S"), (4, "S/3"), (4, "S/5"), (6, "D"), (6, "D/3")  …  (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Tm"), (8, "D7-5"), (8, "T-5"), (10, "D7-1"), (10, "Dm"), (12, "D-5"), (12, "S6")]                
 [(0, "S6"), (4, "S"), (6, "D7-1"), (10, "S65"), (12, "D7-5"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Dm")  …  (16, "T54"), (18, "D"), (18, "D/3"), (18, "D/5"), (18, "T/3"), (18, "T/5"), (18, "Tm"), (18, "Ts"), (24, "T"), (30, "T-5")]    
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65"), (6, "Tm"), (8, "S"), (10, "D"), (10, "D/3"), (10, "D/5")  …  (10, "T/5"), (12, "D54"), (12, "D7-5"), (12, "S6"), (14, "Dm"), (14, "Ts"), (16, "D-5"), (16, "D7-1"), (16, "T"), (22, "T-5")]        
 [(4, "Tm"), (6, "D/3"), (6, "T"), (6, "T/3"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "Dm"), (8, "Ts")  …  (12, "D"), (12, "S/3"), (12, "T64"), (16, "S65"), (16, "S65/6"), (16, "T-5"), (18, "D7-5"), (18, "S"), (18, "S6"), (22, "D-5")]           
 [(0, "Ts"), (2, "T"), (6, "T54"), (8, "T-5"), (12, "D64"), (12, "S65/6"), (12, "T/3"), (14, "D54"), (14, "D7-1"), (14, "S"), (14, "S/3"), (16, "D"), (16, "D/3"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D7-5"), (22, "D-5")]                
 [(4, "T"), (8, "D7-1"), (10, "Dm"), (10, "S65/6"), (10, "T-5"), (12, "D/3"), (12, "S"), (12, "S/3"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T/3"), (14, "Ts"), (16, "D54"), (18, "D"), (20, "D7-5"), (24, "D-5")]               
 [(14, "D"), (14, "D/3"), (14, "S/3"), (14, "T64"), (14, "Ts"), (16, "D54"), (16, "T"), (18, "D64"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (18, "S65"), (18, "T-5"), (18, "T/3"), (20, "D-5"), (20, "D7-1"), (20, "D7-5"), (20, "S")]              
 [(2, "D7-1"), (4, "S6"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Dm"), (8, "S"), (10, "D"), (10, "D/3"), (10, "Tm")  …  (14, "S65"), (14, "S65/6"), (14, "T/3"), (16, "D7-5"), (18, "S/3"), (18, "T64"), (20, "D-5"), (20, "T"), (22, "Ts"), (26, "T-5")]       
 [(0, "Tm"), (4, "D"), (6, "D54"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ts"), (10, "D-5")  …  (14, "S"), (14, "S/3"), (14, "S/5"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "Dm"), (18, "D7-1"), (18, "S6"), (24, "T-5")]          
 [(0, "Tm"), (6, "D/3"), (6, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T")  …  (12, "D"), (12, "S65"), (12, "Ts"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "S/5"), (18, "D-5"), (18, "S6"), (20, "T-5")]         
 [(0, "Tm"), (6, "D/3"), (6, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T")  …  (12, "D"), (12, "S65"), (12, "Ts"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "S/5"), (18, "D-5"), (18, "S6"), (20, "T-5")]         
 [(6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D"), (12, "D64"), (12, "S65/6"), (12, "Ts"), (14, "D54"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "T64"), (18, "D-5"), (20, "T-5")]                 
 [(4, "D"), (4, "D64"), (6, "D54"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ts"), (10, "D-5"), (12, "S65/6"), (14, "D/3"), (14, "S"), (14, "S/3"), (14, "T"), (14, "T/3"), (14, "T54"), (16, "T64"), (18, "D7-1"), (24, "T-5")]        
 [(10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65/6"), (10, "Ts"), (12, "D7-5"), (12, "S"), (12, "S/3"), (14, "D64"), (14, "T/3"), (14, "T64"), (16, "D-5"), (16, "D54"), (18, "D"), (18, "D/3"), (18, "Dm"), (20, "D7-1"), (20, "T"), (26, "T-5")]
 [(8, "S"), (10, "D7-1"), (12, "D7-5"), (12, "T54"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65"), (16, "D-5"), (16, "T"), (18, "D"), (18, "D/3"), (18, "S/3"), (18, "T64"), (20, "D54"), (22, "D64"), (22, "T-5"), (22, "T/3"), (22, "Ts")]  

Done. Total checked: 155903, Pruned: 172874, completed: 26, time: 3.307999849319458, efficiency: 7.859734336248195
Results: bestval_func: 128, bestval_voices: 109
(16, 359, 359, 359)
Total time for optimisation of piece: 7.858000040054321
["T", "T", "S/3", "D", "S/3", "D7", "Ts", "Ts", "S/3", "T/5", "S", "S65", "D", "D", "Ts", "Ts", "T/3", "D/5", "T/3", "D/5", "T", "Tm", "D/3", "S/3", "S", "Tm", "S", "D54", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-325.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-338.csv
[1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 1 0 0 2 0; 0 1 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 1 0 2 0 1 0 0 0 0 0 0; 0 0 0 1 0 0 0 1 0 0 2 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 1 0 1 0; 0 0 0 2 0 0 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 0 0 2 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 0 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 2 0 0 1 0 1 0 0 0 0 0 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 0 0 1 0; 0 0 0 0 0 0 0 1 0 0 3 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 2 0 0 0 1 0 0 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0]
Key Counter is [25 9 2 23 0 19 1 5 24 0 23 0]
Key Score is [51; 124; 17; 121; 57; 74; 99; 33; 128; 36; 97; 80]
Position Counter for 9 is [24 0 23 0 25 9 2 23 0 19 1 5]
Any[[9.0, 82.25, 0.0]]
[9, 82, 0]
6 F Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (68, 3), (72, 5), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (53, 1), (60, 5), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 128
child voicing cost: 201
Best yet: 329
New solution
function cost: 128
child voicing cost: 191
Best yet: 319
New solution
function cost: 128
child voicing cost: 182
Best yet: 310
New solution
function cost: 128
child voicing cost: 179
Best yet: 307
New solution
function cost: 128
child voicing cost: 178
Best yet: 306
New solution
function cost: 128
child voicing cost: 174
Best yet: 302
New solution
function cost: 128
child voicing cost: 171
Best yet: 299
New solution
function cost: 138
child voicing cost: 160
Best yet: 298
New solution
function cost: 130
child voicing cost: 165
Best yet: 295
New solution
function cost: 130
child voicing cost: 163
Best yet: 293
New solution
function cost: 128
child voicing cost: 162
Best yet: 290
New solution
function cost: 128
child voicing cost: 161
Best yet: 289
New solution
function cost: 138
child voicing cost: 146
Best yet: 284
New solution
function cost: 138
child voicing cost: 145
Best yet: 283
New solution
function cost: 142
child voicing cost: 140
Best yet: 282
New solution
function cost: 142
child voicing cost: 139
Best yet: 281
New solution
function cost: 124
child voicing cost: 154
Best yet: 278
New solution
function cost: 124
child voicing cost: 152
Best yet: 276
New solution
function cost: 124
child voicing cost: 150
Best yet: 274
New solution
function cost: 124
child voicing cost: 149
Best yet: 273
New solution
function cost: 124
child voicing cost: 148
Best yet: 272
New solution
function cost: 124
child voicing cost: 146
Best yet: 270
New solution
function cost: 124
child voicing cost: 143
Best yet: 267
New solution
function cost: 124
child voicing cost: 141
Best yet: 265
New solution
function cost: 124
child voicing cost: 139
Best yet: 263
New solution
function cost: 124
child voicing cost: 138
Best yet: 262
New solution
function cost: 124
child voicing cost: 137
Best yet: 261
New solution
function cost: 124
child voicing cost: 135
Best yet: 259
New solution
function cost: 124
child voicing cost: 131
Best yet: 255
New solution
function cost: 124
child voicing cost: 129
Best yet: 253
New solution
function cost: 124
child voicing cost: 128
Best yet: 252
New solution
function cost: 128
child voicing cost: 120
Best yet: 248
New solution
function cost: 128
child voicing cost: 116
Best yet: 244
New solution
function cost: 122
child voicing cost: 116
Best yet: 238
New solution
function cost: 128
child voicing cost: 108
Best yet: 236
New solution
function cost: 128
child voicing cost: 99
Best yet: 227
New solution
function cost: 128
child voicing cost: 98
Best yet: 226
New solution
function cost: 128
child voicing cost: 92
Best yet: 220
New solution
function cost: 128
child voicing cost: 91
Best yet: 219
New solution
function cost: 128
child voicing cost: 87
Best yet: 215
New solution
function cost: 128
child voicing cost: 86
Best yet: 214
New solution
function cost: 128
child voicing cost: 82
Best yet: 210
New solution
function cost: 128
child voicing cost: 80
Best yet: 208
New solution
function cost: 128
child voicing cost: 78
Best yet: 206
New solution
function cost: 128
child voicing cost: 77
Best yet: 205
New solution
function cost: 128
child voicing cost: 74
Best yet: 202
New solution
function cost: 128
child voicing cost: 73
Best yet: 201
New solution
function cost: 128
child voicing cost: 72
Best yet: 200
New solution
function cost: 128
child voicing cost: 71
Best yet: 199
New solution
function cost: 128
child voicing cost: 69
Best yet: 197
New solution
function cost: 116
child voicing cost: 79
Best yet: 195
New solution
function cost: 116
child voicing cost: 77
Best yet: 193
New solution
function cost: 116
child voicing cost: 75
Best yet: 191
New solution
function cost: 116
child voicing cost: 73
Best yet: 189
New solution
function cost: 114
child voicing cost: 72
Best yet: 186
New solution
function cost: 114
child voicing cost: 70
Best yet: 184
New solution
function cost: 116
child voicing cost: 66
Best yet: 182
New solution
function cost: 116
child voicing cost: 64
Best yet: 180

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(22, "Ts", [(49, 1), (56, 5), (65, 3), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(8, "S"), (10, "D7-1"), (12, "D7-5"), (12, "S6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65")  …  (18, "D/3"), (18, "D/5"), (18, "S/3"), (18, "S/5"), (18, "Tm"), (22, "D64"), (22, "T-5"), (22, "T/3"), (22, "T/5"), (22, "Ts")]
 [(4, "Tm"), (6, "D/3"), (6, "T"), (6, "T/3"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S65"), (8, "S65/6")  …  (10, "S/3"), (10, "T54"), (12, "D"), (12, "Dm"), (12, "T64"), (12, "Ts"), (14, "D7-5"), (16, "T-5"), (18, "D-5"), (18, "S6")]           
 [(0, "Tm"), (6, "D/3"), (6, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T")  …  (12, "D"), (12, "S65"), (12, "Ts"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "S/5"), (18, "D-5"), (18, "S6"), (20, "T-5")]           
 [(2, "S"), (2, "S/3"), (2, "S/5"), (6, "D7-5"), (6, "S6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65")  …  (10, "T54"), (12, "D"), (12, "D/3"), (12, "D/5"), (12, "D7-1"), (12, "Tm"), (12, "Ts"), (14, "T"), (16, "Dm"), (24, "T-5")]             
 [(8, "D-5"), (10, "D"), (10, "Tm"), (12, "D7-5"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Dm")  …  (18, "D7-1"), (18, "S65"), (18, "Ts"), (20, "D/3"), (20, "D/5"), (20, "S"), (20, "S/3"), (20, "S/5"), (24, "S6"), (26, "T-5")]  
 [(2, "S"), (2, "S/3"), (6, "D7-5"), (6, "S6"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S65"), (8, "S65/6")  …  (10, "T54"), (12, "D"), (12, "D/3"), (12, "D7-1"), (12, "T64"), (12, "Tm"), (12, "Ts"), (14, "T"), (16, "Dm"), (24, "T-5")]            
 [(4, "Tm"), (6, "D/3"), (6, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (10, "S"), (10, "S/3"), (10, "S/5"), (12, "D"), (12, "Dm"), (12, "Ts"), (14, "D7-5"), (16, "T-5"), (18, "D-5"), (18, "S6")]              
 [(6, "D"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D7-5"), (12, "T"), (12, "T/3")  …  (14, "Tm"), (14, "Ts"), (16, "D/3"), (16, "D/5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "Dm"), (20, "S6"), (22, "T-5")]      
 [(8, "D-5"), (10, "D"), (10, "Tm"), (12, "D7-5"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Dm")  …  (18, "D7-1"), (18, "S65"), (18, "Ts"), (20, "D/3"), (20, "D/5"), (20, "S"), (20, "S/3"), (20, "S/5"), (24, "S6"), (26, "T-5")]  
 [(6, "D7-5"), (6, "T54"), (8, "S/3"), (8, "T64"), (8, "Ts"), (10, "D-5"), (10, "S"), (10, "T"), (12, "D7"), (12, "D7/3")  …  (12, "Tm"), (14, "D54"), (14, "S6"), (16, "D"), (16, "D/3"), (16, "D64"), (16, "D7-1"), (16, "Dm"), (16, "T/3"), (20, "T-5")]          
 [(8, "S/3"), (8, "S/5"), (10, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Dm"), (12, "S65"), (12, "T-5")  …  (16, "D"), (16, "D/3"), (16, "D/5"), (16, "Tm"), (18, "D7-5"), (18, "S6"), (18, "T"), (20, "T/3"), (20, "T/5"), (22, "D-5")]   
 [(10, "S"), (14, "D7-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S65"), (18, "D-5"), (18, "D54"), (20, "D"), (20, "D/5"), (20, "D64"), (20, "S/5"), (20, "T/5"), (20, "Tm"), (24, "D7-1"), (26, "T")]                                          
 [(6, "D7-5"), (8, "S/3"), (8, "T64"), (10, "D-5"), (10, "S"), (10, "T"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S65/6"), (14, "D54"), (16, "D"), (16, "D/5"), (16, "D64"), (16, "D7-1"), (16, "T/3"), (20, "T-5")]                             
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S/5"), (8, "T"), (10, "D"), (10, "D/5"), (10, "D7-1"), (10, "S65/6"), (10, "Ts"), (12, "D54"), (12, "D7-5"), (12, "S"), (14, "D64"), (14, "T/3"), (16, "D-5"), (18, "T-5")]                                 
 [(6, "D7"), (10, "D")]                                                                                                                                                                                                                                              
 [(14, "T")]                                                                                                                                                                                                                                                         
 [(4, "T")]                                                                                                                                                                                                                                                          

Done. Total checked: 257962, Pruned: 348791, completed: 58, time: 4.538999795913696, efficiency: 12.778145540393146
Results: bestval_func: 116, bestval_voices: 64
(15, 409, 409, 409)
[1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 1 0 0 2 0; 0 1 0 1 0 0 0 0 1 0 1 0; 1 0 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 1 0 2 0 1 0 0 0 0 0 0; 0 0 0 1 0 0 0 1 0 0 2 0; 2 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 1 0 1 0; 0 0 0 2 0 0 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 0 0 1 0 0 0 0 2 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 0 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 2 0 0 0; 2 0 0 1 0 1 0 0 0 0 0 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 0 0 1 0; 0 0 0 0 0 0 0 1 0 0 3 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 2 0 0 0 1 0 0 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0]
Key Counter is [25 9 2 23 0 19 1 5 24 0 23 0]
Key Score is [51; 124; 17; 121; 57; 74; 99; 33; 128; 36; 97; 80]
Position Counter for 9 is [24 0 23 0 25 9 2 23 0 19 1 5]
Any[[9.0, 82.25, 0.0]]
[9, 82, 0]
6 F Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(22, "Ts", [(49, 1), (56, 5), (65, 3), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 116
child voicing cost: 207
Best yet: 323
New solution
function cost: 116
child voicing cost: 205
Best yet: 321
New solution
function cost: 116
child voicing cost: 200
Best yet: 316
New solution
function cost: 116
child voicing cost: 191
Best yet: 307
New solution
function cost: 118
child voicing cost: 182
Best yet: 300
New solution
function cost: 122
child voicing cost: 175
Best yet: 297
New solution
function cost: 122
child voicing cost: 173
Best yet: 295
New solution
function cost: 130
child voicing cost: 164
Best yet: 294
New solution
function cost: 130
child voicing cost: 161
Best yet: 291
New solution
function cost: 126
child voicing cost: 160
Best yet: 286
New solution
function cost: 122
child voicing cost: 163
Best yet: 285
New solution
function cost: 122
child voicing cost: 156
Best yet: 278
New solution
function cost: 122
child voicing cost: 152
Best yet: 274
New solution
function cost: 118
child voicing cost: 155
Best yet: 273
New solution
function cost: 124
child voicing cost: 148
Best yet: 272
New solution
function cost: 118
child voicing cost: 151
Best yet: 269
New solution
function cost: 108
child voicing cost: 159
Best yet: 267
New solution
function cost: 108
child voicing cost: 157
Best yet: 265
New solution
function cost: 106
child voicing cost: 158
Best yet: 264
New solution
function cost: 102
child voicing cost: 161
Best yet: 263
New solution
function cost: 102
child voicing cost: 160
Best yet: 262
New solution
function cost: 104
child voicing cost: 150
Best yet: 254
New solution
function cost: 120
child voicing cost: 127
Best yet: 247
New solution
function cost: 120
child voicing cost: 124
Best yet: 244
New solution
function cost: 114
child voicing cost: 129
Best yet: 243
New solution
function cost: 112
child voicing cost: 127
Best yet: 239
New solution
function cost: 116
child voicing cost: 122
Best yet: 238
New solution
function cost: 112
child voicing cost: 125
Best yet: 237
New solution
function cost: 116
child voicing cost: 118
Best yet: 234
New solution
function cost: 112
child voicing cost: 119
Best yet: 231
New solution
function cost: 114
child voicing cost: 116
Best yet: 230
New solution
function cost: 120
child voicing cost: 101
Best yet: 221
New solution
function cost: 120
child voicing cost: 98
Best yet: 218

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (10, "T", [(53, 1), (65, 1), (72, 5), (80, 3)]) 
 (2, "T/3", [(56, 3), (65, 1), (72, 5), (77, 1)])
 (0, "S6", [(58, 1), (67, 6), (70, 1), (73, 3)]) 
 (12, "S6", [(58, 1), (61, 3), (67, 6), (70, 1)])
 (6, "T/3", [(56, 3), (60, 5), (65, 1), (72, 5)])
 (0, "Ts", [(49, 1), (56, 5), (65, 3), (73, 1)]) 
 (18, "D", [(48, 1), (60, 1), (67, 5), (76, 3)]) 
 (14, "D", [(48, 1), (64, 3), (67, 5), (72, 1)]) 
 (6, "D7", [(48, 1), (64, 3), (67, 5), (70, 7)]) 
 (8, "Ts", [(49, 1), (65, 3), (65, 3), (68, 5)]) 
 (0, "Tm", [(44, 1), (63, 5), (68, 1), (72, 3)]) 
 (0, "Tm", [(44, 1), (60, 3), (68, 1), (75, 5)]) 
 (14, "S", [(46, 1), (58, 1), (65, 5), (73, 3)]) 
 ?                                               
 (2, "S", [(58, 1), (58, 1), (61, 3), (65, 5)])  
 (6, "T/3", [(56, 3), (60, 5), (60, 5), (65, 1)])
 (12, "T", [(53, 1), (56, 3), (60, 5), (65, 1)]) 
 (14, "Dm", [(51, 1), (58, 5), (67, 3), (67, 3)])
 (8, "Ts", [(49, 1), (61, 1), (65, 3), (68, 5)]) 
 (8, "S/3", [(49, 3), (65, 5), (70, 1), (70, 1)])
 (10, "S", [(46, 1), (65, 5), (70, 1), (73, 3)]) 
 (10, "S", [(46, 1), (65, 5), (70, 1), (73, 3)]) 
 (10, "D", [(48, 1), (64, 3), (67, 5), (72, 1)]) 
 (6, "D7", [(48, 1), (64, 3), (67, 5), (70, 7)]) 
 (14, "T", [(41, 1), (60, 5), (65, 1), (68, 3)]) 
 (14, "T", [(41, 1), (60, 5), (65, 1), (68, 3)]) 

8-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (56, 3), (60, 5), (65, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (68, 3), (72, 5), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (53, 1), (60, 5), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                         
 [(0, "D7"), (0, "D7-1"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (2, "Dm"), (2, "S65"), (4, "D"), (4, "D/3"), (4, "D/5")  …  (6, "T64"), (8, "S"), (8, "T"), (8, "T/3"), (8, "T/5"), (8, "Tm"), (10, "D7-5"), (10, "Ts"), (14, "D-5"), (14, "T-5")]                 
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D/3"), (8, "D/5"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]      
 [(0, "D7-1"), (0, "S6"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S"), (6, "Dm"), (6, "S65"), (8, "D")  …  (10, "D7-5"), (10, "S/3"), (10, "S/5"), (10, "T/3"), (10, "T/5"), (10, "Tm"), (14, "D-5"), (14, "Ts"), (16, "T"), (22, "T-5")]            
 [(0, "Tm"), (4, "D"), (4, "D/3"), (4, "D64"), (4, "D7"), (4, "D7/3"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "D54")  …  (8, "D7-1"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D-5"), (10, "S"), (10, "S/3"), (10, "T64"), (14, "S6"), (14, "T-5")]              
 [(2, "S/3"), (2, "T64"), (4, "T"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (8, "D54"), (10, "D"), (10, "D/3"), (10, "D64"), (10, "D7-1"), (10, "T/3"), (12, "D7-5"), (12, "S"), (14, "T-5"), (14, "Ts"), (16, "D-5"), (18, "Dm")]          
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65/6"), (8, "D7-5"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (10, "T64"), (10, "Ts"), (12, "D-5"), (12, "D54"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "Tm"), (16, "T"), (22, "T-5")]    
 [(0, "S/3"), (4, "T54"), (8, "S"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65/6"), (12, "D54"), (12, "D7-1"), (14, "D"), (14, "D/3"), (14, "D64"), (14, "T-5"), (14, "T/3"), (16, "D7-5"), (18, "Ts"), (20, "D-5")]                 
 [(4, "T64"), (6, "D54"), (6, "T54"), (8, "D"), (8, "D/3"), (8, "D64"), (8, "S65"), (8, "S65/6"), (8, "T/3"), (8, "Ts")  …  (12, "D7/7"), (12, "Tm"), (14, "D-5"), (14, "D7-5"), (14, "S"), (14, "S/3"), (16, "D7-1"), (16, "Dm"), (16, "T-5"), (18, "S6")]         
 [(10, "D"), (10, "Dm"), (12, "D/3"), (12, "D/5"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "D64"), (14, "D7"), (14, "D7/3")  …  (14, "S/5"), (14, "T-5"), (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "D7-5"), (18, "D7-1"), (18, "S65"), (24, "S"), (28, "S6")]    
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D/3"), (8, "D/5"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]      
 [(0, "D/3"), (0, "D/5"), (6, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65"), (10, "Tm"), (10, "Ts")  …  (14, "D7-1"), (16, "D-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "Dm"), (26, "T-5")]     
 [(4, "D"), (6, "D54"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S/3"), (8, "T64"), (10, "D-5"), (10, "D7-5"), (10, "T"), (10, "T/3"), (12, "D7-1"), (12, "S65/6"), (12, "Ts"), (14, "D/3"), (16, "Tm"), (18, "S"), (20, "T-5")]          
 [(6, "D"), (6, "D/3"), (8, "D-5"), (8, "D54"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D7-5"), (12, "S"), (12, "S/3"), (14, "D7-1"), (14, "S65"), (14, "Tm"), (14, "Ts"), (18, "T64"), (20, "T"), (20, "T/3"), (30, "T-5")]       
 [(10, "D7-5"), (10, "T"), (10, "T/3"), (10, "T54"), (12, "D"), (12, "D64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "T64"), (12, "Ts"), (14, "D-5"), (14, "D/3"), (14, "D54"), (16, "D7-1"), (16, "S65/6"), (18, "S"), (18, "S/3"), (20, "T-5")]
 [(0, "T"), (0, "T/3"), (4, "T54"), (8, "D/3"), (10, "D64"), (10, "T-5"), (10, "Ts"), (12, "D54"), (12, "D7-1"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (20, "D-5")]                   

Done. Total checked: 299826, Pruned: 331807, completed: 33, time: 5.245000123977661, efficiency: 6.291706238316297
Results: bestval_func: 120, bestval_voices: 98
(16, 409, 409, 409)
Total time for optimisation of piece: 11.629999876022339
["T", "T/3", "S6", "S6", "T/3", "Ts", "D", "D", "D7", "Ts", "Tm", "Tm", "S", "D", "Ts", "Ts", "Tm", "Tm", "S", "Tm", "S", "T/3", "T", "Dm", "Ts", "S/3", "S", "S", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-338.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-351.csv
[1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 2 0 0 0 0 2 0; 1 1 0 0 0 2 0 0 0 0 0 0; 1 0 0 1 1 1 0 0 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 2 1 0 0 0 0 0 1 0 0 0 0; 1 0 0 2 0 0 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 2 0 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 0 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 1 1 0 0 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 1 0 0 0 1 0 0 0 1 1 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 0 1 0 0 0 0 2 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0]
Key Counter is [26 6 3 5 3 35 0 16 16 4 15 0]
Key Score is [87; 103; 32; 116; 34; 102; 77; 52; 119; 32; 104; 45]
Position Counter for 9 is [16 4 15 0 26 6 3 5 3 35 0 16]
Any[[9.0, 87.5, 0.0]]
[9, 88, 0]
6 F Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

8-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (56, 3), (60, 5), (65, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (68, 3), (72, 5), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (53, 1), (60, 5), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 118
child voicing cost: 146
Best yet: 264
New solution
function cost: 118
child voicing cost: 139
Best yet: 257
New solution
function cost: 122
child voicing cost: 131
Best yet: 253
New solution
function cost: 98
child voicing cost: 143
Best yet: 241
New solution
function cost: 98
child voicing cost: 142
Best yet: 240
New solution
function cost: 98
child voicing cost: 135
Best yet: 233
New solution
function cost: 122
child voicing cost: 110
Best yet: 232
New solution
function cost: 100
child voicing cost: 127
Best yet: 227
New solution
function cost: 100
child voicing cost: 124
Best yet: 224
New solution
function cost: 100
child voicing cost: 123
Best yet: 223
New solution
function cost: 100
child voicing cost: 116
Best yet: 216
New solution
function cost: 100
child voicing cost: 115
Best yet: 215
New solution
function cost: 100
child voicing cost: 111
Best yet: 211
New solution
function cost: 74
child voicing cost: 136
Best yet: 210
New solution
function cost: 74
child voicing cost: 134
Best yet: 208
New solution
function cost: 74
child voicing cost: 133
Best yet: 207
New solution
function cost: 74
child voicing cost: 131
Best yet: 205
New solution
function cost: 72
child voicing cost: 128
Best yet: 200
New solution
function cost: 72
child voicing cost: 127
Best yet: 199
New solution
function cost: 72
child voicing cost: 126
Best yet: 198
New solution
function cost: 72
child voicing cost: 124
Best yet: 196
New solution
function cost: 72
child voicing cost: 119
Best yet: 191
New solution
function cost: 72
child voicing cost: 112
Best yet: 184
New solution
function cost: 72
child voicing cost: 111
Best yet: 183
New solution
function cost: 68
child voicing cost: 113
Best yet: 181
New solution
function cost: 68
child voicing cost: 112
Best yet: 180
New solution
function cost: 68
child voicing cost: 105
Best yet: 173
New solution
function cost: 62
child voicing cost: 110
Best yet: 172
New solution
function cost: 62
child voicing cost: 108
Best yet: 170
New solution
function cost: 62
child voicing cost: 103
Best yet: 165
New solution
function cost: 62
child voicing cost: 96
Best yet: 158
New solution
function cost: 62
child voicing cost: 95
Best yet: 157
New solution
function cost: 58
child voicing cost: 97
Best yet: 155
New solution
function cost: 58
child voicing cost: 96
Best yet: 154
New solution
function cost: 58
child voicing cost: 89
Best yet: 147

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D/3"), (8, "D/5"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]  
 [(0, "T"), (0, "T/3"), (4, "T54"), (6, "T64"), (8, "D/3"), (10, "D64"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D54")  …  (14, "D7/3"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (14, "S65/6"), (16, "D7-5"), (16, "S"), (16, "S/3"), (20, "D-5"), (24, "S6")]
 [(4, "Ts"), (8, "T/3"), (8, "T/5"), (10, "T"), (12, "D"), (12, "S65"), (12, "T-5"), (14, "D7-5"), (14, "S"), (14, "S/3")  …  (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "Dm"), (16, "Tm"), (18, "D-5"), (18, "D/3"), (18, "D/5"), (22, "D7-1"), (22, "S6")]
 [(2, "D/3"), (2, "D/5"), (4, "Dm"), (4, "Tm"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "T"), (10, "T/3")  …  (12, "S65"), (12, "Ts"), (14, "T54"), (16, "S/3"), (16, "S/5"), (18, "D7-5"), (18, "S"), (18, "S6"), (20, "T-5"), (22, "D-5")]     
 [(6, "S6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (8, "S65"), (8, "T/3"), (8, "T/5"), (10, "D7-1")  …  (12, "S/3"), (12, "S/5"), (12, "Tm"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "D7-5"), (14, "T"), (18, "D-5"), (24, "T-5")]   
 [(0, "T"), (0, "T/3"), (4, "T54"), (6, "T64"), (8, "D/3"), (10, "D64"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D54")  …  (14, "D7/3"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (14, "S65/6"), (16, "D7-5"), (16, "S"), (16, "S/3"), (20, "D-5"), (24, "S6")]
 [(2, "S65"), (4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T/3"), (6, "T/5")  …  (10, "D/3"), (10, "D/5"), (10, "Dm"), (10, "Tm"), (12, "D7-5"), (12, "S6"), (12, "T"), (16, "D-5"), (16, "D7-1"), (18, "T-5")]     
 [(4, "S65"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S/3"), (8, "S/5"), (10, "D54")  …  (12, "D/3"), (12, "D/5"), (12, "T-5"), (12, "T/3"), (12, "T/5"), (14, "S6"), (16, "Dm"), (16, "Tm"), (18, "D7-5"), (22, "D-5")]    
 [(4, "D7-1"), (6, "Dm"), (8, "D/3"), (8, "D/5"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65")  …  (12, "S6"), (14, "D"), (14, "S/3"), (14, "S/5"), (14, "T-5"), (14, "T/3"), (14, "T/5"), (16, "S"), (20, "D7-5"), (24, "D-5")] 
 [(4, "D/3"), (4, "T"), (4, "T/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S65"), (6, "S65/6"), (6, "Tm"), (8, "D54")  …  (10, "D64"), (10, "Dm"), (10, "S/3"), (10, "T64"), (12, "S"), (14, "T-5"), (14, "Ts"), (16, "D7-5"), (16, "S6"), (20, "D-5")]      
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (2, "S65"), (4, "D54"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "D7-1")  …  (6, "T/5"), (8, "S"), (10, "Dm"), (10, "Tm"), (10, "Ts"), (12, "D7-5"), (12, "S6"), (12, "T"), (16, "D-5"), (22, "T-5")]          
 [(2, "S/3"), (2, "T64"), (4, "T"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (8, "D54"), (10, "D"), (10, "D/5"), (10, "D64"), (10, "D7-1"), (10, "T/5"), (12, "D7-5"), (12, "S"), (14, "Tm"), (16, "D-5"), (18, "Dm")]                   
 [(6, "T"), (8, "D7-1"), (10, "S"), (10, "S/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S65"), (12, "T-5"), (14, "D54"), (16, "D"), (16, "D/5"), (16, "D64"), (16, "T/5"), (16, "Ts"), (18, "D7-5")]                                       
 [(2, "S"), (2, "S/5"), (4, "S65/6"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T/5"), (8, "Ts"), (10, "D54"), (10, "D7-5"), (12, "D"), (12, "D/5"), (12, "Tm"), (14, "T"), (16, "D7-1")]                                              
 [(4, "D7"), (8, "D")]                                                                                                                                                                                                                                          
 [(12, "T")]                                                                                                                                                                                                                                                    
 [(10, "T")]                                                                                                                                                                                                                                                    

Done. Total checked: 109210, Pruned: 130049, completed: 35, time: 2.184000015258789, efficiency: 16.025640913675883
Results: bestval_func: 58, bestval_voices: 89
(15, 409, 409, 409)
[1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 2 0 0 0 0 2 0; 1 1 0 0 0 2 0 0 0 0 0 0; 1 0 0 1 1 1 0 0 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 0 0 0 0 2 0 0 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 2 1 0 0 0 0 0 1 0 0 0 0; 1 0 0 2 0 0 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 2 0 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 0 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 0 1 1 0 0 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 1 0 0 0 1 0 0 0 1 1 0; 1 0 0 0 0 1 0 1 0 1 0 0; 0 0 1 0 0 0 0 2 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 1 0 0 0]
Key Counter is [26 6 3 5 3 35 0 16 16 4 15 0]
Key Score is [87; 103; 32; 116; 34; 102; 77; 52; 119; 32; 104; 45]
Position Counter for 9 is [16 4 15 0 26 6 3 5 3 35 0 16]
Any[[9.0, 87.5, 0.0]]
[9, 88, 0]
6 F Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 90
child voicing cost: 195
Best yet: 285
New solution
function cost: 90
child voicing cost: 187
Best yet: 277
New solution
function cost: 90
child voicing cost: 185
Best yet: 275
New solution
function cost: 90
child voicing cost: 182
Best yet: 272
New solution
function cost: 94
child voicing cost: 176
Best yet: 270
New solution
function cost: 94
child voicing cost: 174
Best yet: 268
New solution
function cost: 98
child voicing cost: 168
Best yet: 266
New solution
function cost: 98
child voicing cost: 167
Best yet: 265
New solution
function cost: 88
child voicing cost: 176
Best yet: 264
New solution
function cost: 84
child voicing cost: 178
Best yet: 262
New solution
function cost: 84
child voicing cost: 175
Best yet: 259
New solution
function cost: 88
child voicing cost: 169
Best yet: 257
New solution
function cost: 82
child voicing cost: 168
Best yet: 250
New solution
function cost: 82
child voicing cost: 167
Best yet: 249
New solution
function cost: 82
child voicing cost: 166
Best yet: 248
New solution
function cost: 78
child voicing cost: 169
Best yet: 247
New solution
function cost: 78
child voicing cost: 166
Best yet: 244
New solution
function cost: 82
child voicing cost: 160
Best yet: 242
New solution
function cost: 82
child voicing cost: 158
Best yet: 240
New solution
function cost: 86
child voicing cost: 151
Best yet: 237
New solution
function cost: 86
child voicing cost: 150
Best yet: 236
New solution
function cost: 78
child voicing cost: 155
Best yet: 233
New solution
function cost: 78
child voicing cost: 153
Best yet: 231
New solution
function cost: 78
child voicing cost: 150
Best yet: 228
New solution
function cost: 82
child voicing cost: 144
Best yet: 226
New solution
function cost: 82
child voicing cost: 142
Best yet: 224
New solution
function cost: 78
child voicing cost: 143
Best yet: 221
New solution
function cost: 82
child voicing cost: 136
Best yet: 218
New solution
function cost: 78
child voicing cost: 131
Best yet: 209
New solution
function cost: 72
child voicing cost: 136
Best yet: 208
New solution
function cost: 76
child voicing cost: 129
Best yet: 205
New solution
function cost: 76
child voicing cost: 128
Best yet: 204
New solution
function cost: 76
child voicing cost: 125
Best yet: 201
New solution
function cost: 80
child voicing cost: 118
Best yet: 198
New solution
function cost: 84
child voicing cost: 112
Best yet: 196
New solution
function cost: 78
child voicing cost: 115
Best yet: 193
New solution
function cost: 82
child voicing cost: 108
Best yet: 190
New solution
function cost: 78
child voicing cost: 103
Best yet: 181

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])   
 (0, "D7-1", [(55, 5), (58, 7), (70, 7), (76, 3)])
 (0, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])   
 (0, "D7-1", [(55, 5), (58, 7), (70, 7), (76, 3)])
 (4, "D7/3", [(52, 3), (60, 1), (67, 5), (70, 7)])
 (4, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (0, "S", [(58, 1), (58, 1), (65, 5), (73, 3)])   
 (8, "S", [(58, 1), (58, 1), (65, 5), (73, 3)])   
 (8, "S65", [(58, 1), (65, 5), (67, 6), (73, 3)]) 
 (10, "D", [(60, 1), (64, 3), (67, 5), (72, 1)])  
 (0, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])   
 (0, "D/3", [(52, 3), (67, 5), (67, 5), (72, 1)]) 
 (8, "S/3", [(49, 3), (65, 5), (70, 1), (70, 1)]) 
 ?                                                
 (0, "T/3", [(56, 3), (60, 5), (65, 1), (72, 5)]) 
 (6, "D7/5", [(55, 5), (58, 7), (64, 3), (72, 1)])
 (6, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])   
 (4, "D7-1", [(55, 5), (58, 7), (64, 3), (70, 7)])
 (4, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (2, "D7/3", [(52, 3), (58, 7), (67, 5), (72, 1)])
 (4, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])   
 (6, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])   
 (2, "S", [(46, 1), (58, 1), (65, 5), (73, 3)])   
 (4, "D7", [(48, 1), (55, 5), (64, 3), (70, 7)])  
 (12, "T", [(41, 1), (53, 1), (60, 5), (68, 3)])  
 (12, "T", [(41, 1), (53, 1), (60, 5), (68, 3)])  

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (59, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (59, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (59, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (68, 1), (71, 3), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                     
 [(2, "Tm"), (4, "D/3"), (4, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Dm"), (8, "D7-1"), (8, "T")  …  (10, "Ts"), (12, "T54"), (14, "T64"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (16, "S6"), (18, "T-5"), (20, "D-5")]      
 [(2, "D7-5"), (4, "S"), (4, "S/3"), (4, "S/5"), (4, "S6"), (6, "D-5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7")  …  (8, "D"), (8, "D/3"), (8, "D/5"), (8, "T54"), (10, "D7-1"), (10, "Dm"), (10, "S65"), (10, "T64"), (12, "T"), (22, "T-5")]          
 [(2, "S65"), (4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T/3"), (6, "T/5")  …  (10, "D/3"), (10, "D/5"), (10, "Dm"), (10, "Tm"), (12, "D7-5"), (12, "S6"), (12, "T"), (16, "D-5"), (16, "D7-1"), (18, "T-5")]     
 [(0, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Tm"), (8, "T"), (8, "T/3"), (10, "D"), (10, "D7-1"), (10, "S65")  …  (14, "D64"), (14, "Dm"), (14, "S/3"), (14, "T64"), (16, "D7-5"), (16, "S"), (18, "T-5"), (18, "Ts"), (20, "D-5"), (20, "S6")]      
 [(0, "D64"), (0, "T/3"), (2, "D54"), (4, "D"), (4, "Ts"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "D-5"), (10, "S"), (10, "S/3"), (10, "T"), (14, "D/3"), (14, "T54"), (18, "D7-1"), (20, "Dm"), (20, "T-5")]        
 [(0, "Ts"), (2, "T"), (6, "T54"), (8, "T-5"), (12, "D64"), (12, "S65/6"), (12, "T/3"), (14, "D54"), (14, "D7-1"), (14, "S"), (14, "S/3"), (16, "D"), (16, "D/3"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D7-5"), (22, "D-5")]             
 [(0, "S65/6"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S/3"), (4, "T64"), (6, "D54"), (6, "S"), (8, "D"), (8, "D/3"), (8, "D64"), (8, "D7-1"), (8, "T/3"), (8, "Ts"), (12, "Tm"), (14, "D7-5"), (14, "T"), (18, "D-5"), (20, "T-5")]            
 [(0, "Tm"), (6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D")  …  (12, "Ts"), (14, "D54"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "T54"), (16, "T64"), (18, "D-5"), (18, "S6"), (20, "T-5")]     
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "Dm"), (4, "S65"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7-1")  …  (10, "S"), (10, "S6"), (12, "D64"), (12, "T/3"), (12, "T/5"), (14, "D7-5"), (16, "Ts"), (18, "D-5"), (18, "T"), (24, "T-5")]       
 [(0, "Tm"), (6, "D/3"), (6, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T")  …  (12, "S65"), (12, "Ts"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "T64"), (18, "D-5"), (18, "S6"), (20, "T-5")]    
 [(6, "D54"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "S65"), (8, "T/3"), (8, "T/5"), (8, "Ts"), (10, "T"), (12, "D7")  …  (12, "Tm"), (14, "D-5"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D7-1"), (16, "Dm"), (16, "T-5"), (18, "S6")]         
 [(4, "D7-5"), (4, "S"), (4, "S/3"), (6, "D64"), (6, "T/3"), (6, "Ts"), (8, "D-5"), (8, "D54"), (8, "T54"), (10, "D"), (10, "D/3"), (10, "S65"), (10, "T64"), (12, "T"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (18, "D7-1"), (22, "T-5")]       
 [(2, "S/3"), (2, "T64"), (4, "T"), (4, "T/3"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (8, "D54"), (10, "D"), (10, "D/3"), (10, "D7-1"), (12, "D7-5"), (12, "S"), (14, "D64"), (14, "T-5"), (14, "Ts"), (16, "D-5"), (18, "Dm")]       
 [(6, "T"), (8, "D7-1"), (10, "S"), (10, "S/3"), (12, "Dm"), (12, "S65/6"), (12, "T-5"), (14, "D/3"), (14, "S6"), (16, "D64"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "T/3"), (16, "Ts"), (18, "D54"), (18, "D7-5"), (20, "D"), (22, "D-5")]
 [(2, "T"), (2, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "D/3"), (12, "D64"), (12, "D7-1"), (12, "T-5"), (12, "Ts"), (14, "D54"), (14, "D7-5"), (14, "S"), (14, "S/3"), (16, "D"), (18, "D-5"), (20, "Dm")]     

Done. Total checked: 94846, Pruned: 103800, completed: 38, time: 1.933000087738037, efficiency: 19.65856092871001
Results: bestval_func: 78, bestval_voices: 103
(16, 409, 409, 409)
Total time for optimisation of piece: 5.982000112533569
["T", "D7-1", "T", "D7-1", "D7/3", "T", "S", "S", "S65", "D", "T", "D/3", "S/3", "D", "T", "T", "T/3", "Ts", "Tm", "S", "T/3", "D7/5", "T", "D7-1", "T", "D7/3", "T", "T", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-351.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-364.csv
[0 0 0 0 0 0 0 0 2 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 1 1 0 0 0 0 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 1 1 0 0 0 2 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 2 0 1 0 0 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 1 0 0 2 0 0 0 0 0; 0 1 0 1 0 0 2 0 0 0 0 0; 0 0 0 2 0 0 2 0 0 0 0 0; 0 0 0 1 0 0 2 0 1 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 1 0 0 0 0 2 0 1 0]
Key Counter is [2 18 0 23 7 4 23 1 31 0 10 11]
Key Score is [25; 111; 60; 71; 113; 24; 120; 44; 89; 90; 40; 123]
Position Counter for 12 is [11 2 18 0 23 7 4 23 1 31 0 10]
Any[[12.0, 85.0, 0.0]]
[12, 85, 0]
9 G# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (59, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (59, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (59, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (68, 1), (71, 3), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 98
child voicing cost: 178
Best yet: 276
New solution
function cost: 98
child voicing cost: 174
Best yet: 272
New solution
function cost: 98
child voicing cost: 165
Best yet: 263
New solution
function cost: 98
child voicing cost: 162
Best yet: 260
New solution
function cost: 98
child voicing cost: 160
Best yet: 258
New solution
function cost: 98
child voicing cost: 157
Best yet: 255
New solution
function cost: 98
child voicing cost: 156
Best yet: 254
New solution
function cost: 98
child voicing cost: 155
Best yet: 253
New solution
function cost: 98
child voicing cost: 153
Best yet: 251
New solution
function cost: 98
child voicing cost: 151
Best yet: 249
New solution
function cost: 98
child voicing cost: 150
Best yet: 248
New solution
function cost: 76
child voicing cost: 136
Best yet: 212
New solution
function cost: 76
child voicing cost: 134
Best yet: 210
New solution
function cost: 76
child voicing cost: 132
Best yet: 208
New solution
function cost: 78
child voicing cost: 126
Best yet: 204
New solution
function cost: 72
child voicing cost: 130
Best yet: 202
New solution
function cost: 76
child voicing cost: 125
Best yet: 201
New solution
function cost: 76
child voicing cost: 123
Best yet: 199
New solution
function cost: 76
child voicing cost: 115
Best yet: 191
New solution
function cost: 76
child voicing cost: 113
Best yet: 189
New solution
function cost: 82
child voicing cost: 103
Best yet: 185
New solution
function cost: 82
child voicing cost: 97
Best yet: 179
New solution
function cost: 74
child voicing cost: 100
Best yet: 174
New solution
function cost: 80
child voicing cost: 87
Best yet: 167
New solution
function cost: 80
child voicing cost: 85
Best yet: 165
New solution
function cost: 88
child voicing cost: 76
Best yet: 164
New solution
function cost: 88
child voicing cost: 75
Best yet: 163
New solution
function cost: 88
child voicing cost: 73
Best yet: 161
New solution
function cost: 88
child voicing cost: 71
Best yet: 159
New solution
function cost: 80
child voicing cost: 74
Best yet: 154
New solution
function cost: 90
child voicing cost: 62
Best yet: 152
New solution
function cost: 82
child voicing cost: 63
Best yet: 145

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(56, 1), (56, 1), (59, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "T"), (2, "T/3"), (2, "T/5"), (4, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (10, "D/3")  …  (12, "Tm"), (12, "Ts"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D"), (18, "D-5"), (18, "S6"), (20, "Dm")]            
 [(2, "S/3"), (2, "T64"), (4, "T54"), (6, "S65"), (6, "S65/6"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "Dm")  …  (14, "D"), (14, "D/3"), (14, "Ts"), (16, "D7-1"), (16, "D7-5"), (16, "S6"), (18, "D64"), (18, "T/3"), (20, "D-5"), (22, "Tm")]     
 [(8, "S/3"), (8, "S/5"), (10, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Dm"), (12, "S65"), (12, "T-5")  …  (14, "T"), (14, "T/3"), (14, "T/5"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "Tm"), (18, "D7-5"), (18, "S6"), (22, "D-5")]  
 [(4, "Dm"), (8, "D"), (8, "D/3"), (8, "D/5"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (14, "D7-5"), (16, "D7-1"), (16, "S/3"), (16, "S/5"), (16, "S65"), (16, "T64"), (18, "D-5"), (20, "T-5"), (22, "S"), (22, "S6")]     
 [(4, "T"), (4, "T/3"), (4, "T/5"), (6, "Tm"), (6, "Ts"), (8, "D/3"), (8, "D/5"), (8, "T54"), (10, "Dm"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "S65"), (14, "T-5"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]        
 [(6, "D7-5"), (6, "S"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "Tm"), (10, "D-5"), (10, "S6"), (12, "D"), (12, "D/3")  …  (12, "S65/6"), (12, "T/3"), (14, "D54"), (14, "T54"), (16, "Dm"), (16, "S/3"), (16, "T64"), (18, "T"), (20, "Ts"), (28, "T-5")]        
 [(6, "Dm"), (6, "S/3"), (6, "S/5"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65"), (10, "Ts")  …  (14, "D/3"), (14, "D/5"), (14, "T-5"), (14, "T/3"), (14, "T/5"), (14, "Tm"), (16, "D7-1"), (16, "D7-5"), (16, "S6"), (20, "D-5")]
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S/3"), (6, "S/5"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D")  …  (10, "D7-1"), (10, "S65"), (10, "Tm"), (10, "Ts"), (12, "D7-5"), (12, "S"), (14, "Dm"), (16, "D-5"), (16, "S6"), (18, "T-5")]           
 [(4, "Dm"), (4, "S65"), (6, "D7-1"), (8, "S/3"), (8, "S/5"), (10, "D54"), (10, "S"), (10, "T"), (12, "D7"), (12, "D7/3")  …  (12, "T/5"), (12, "Ts"), (14, "S6"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "T-5"), (16, "Tm"), (22, "D7-5"), (26, "D-5")]         
 [(6, "Dm"), (6, "S65"), (6, "S65/6"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "T"), (10, "D64"), (10, "T/3"), (10, "T64")  …  (12, "T54"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (14, "T-5"), (14, "Tm"), (16, "S6"), (18, "D"), (20, "D7-5"), (24, "D-5")]       
 [(8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Dm"), (10, "S/3"), (10, "S/5"), (12, "D-5"), (12, "T")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "S65"), (14, "Tm"), (14, "Ts"), (16, "S"), (20, "S6"), (22, "T-5")]   
 [(8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S/3"), (10, "T64"), (12, "T"), (12, "T/5"), (14, "D"), (14, "D/5"), (14, "D64"), (14, "D7-1"), (14, "S65/6"), (14, "Ts"), (16, "D54"), (16, "S"), (22, "T-5")]                           
 [(10, "D"), (12, "D54"), (12, "D7-5"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T64"), (16, "T"), (16, "T/5"), (18, "D7-1"), (18, "S65/6"), (20, "D/3"), (20, "S"), (20, "S/5"), (26, "T-5")]                                      
 [(12, "D"), (14, "D/3"), (14, "D54"), (14, "T"), (14, "T/5"), (16, "D64"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S/3"), (16, "T-5"), (16, "Ts"), (18, "D7-5"), (20, "D7-1"), (20, "S65/6"), (22, "S")]                                       
 [(10, "D"), (14, "D7")]                                                                                                                                                                                                                                            
 [(12, "T")]                                                                                                                                                                                                                                                        
 [(10, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 87452, Pruned: 106498, completed: 32, time: 1.7739999294281006, efficiency: 18.03833217192749
Results: bestval_func: 82, bestval_voices: 63
(15, 359, 359, 359)
[0 0 0 0 0 0 0 0 2 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 1 1 0 0 0 0 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 1 1 0 0 0 2 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 2 0 1 0 0 0; 0 0 0 1 0 0 2 0 0 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 2 0 1 0 0 1 0 0 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 1 0 0 2 0 0 0 0 0; 0 1 0 1 0 0 2 0 0 0 0 0; 0 0 0 2 0 0 2 0 0 0 0 0; 0 0 0 1 0 0 2 0 1 0 0 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 0 0 1 0 1 0 0 2 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 0 0 1 0 0 0 0 2 0 1 0]
Key Counter is [2 18 0 23 7 4 23 1 31 0 10 11]
Key Score is [25; 111; 60; 71; 113; 24; 120; 44; 89; 90; 40; 123]
Position Counter for 12 is [11 2 18 0 23 7 4 23 1 31 0 10]
Any[[12.0, 85.0, 0.0]]
[12, 85, 0]
9 G# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(56, 1), (56, 1), (59, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 152
child voicing cost: 174
Best yet: 326
New solution
function cost: 152
child voicing cost: 173
Best yet: 325
New solution
function cost: 156
child voicing cost: 168
Best yet: 324
New solution
function cost: 152
child voicing cost: 167
Best yet: 319
New solution
function cost: 152
child voicing cost: 160
Best yet: 312
New solution
function cost: 152
child voicing cost: 159
Best yet: 311
New solution
function cost: 152
child voicing cost: 156
Best yet: 308
New solution
function cost: 154
child voicing cost: 153
Best yet: 307
New solution
function cost: 154
child voicing cost: 150
Best yet: 304
New solution
function cost: 152
child voicing cost: 151
Best yet: 303
New solution
function cost: 148
child voicing cost: 151
Best yet: 299
New solution
function cost: 148
child voicing cost: 149
Best yet: 297
New solution
function cost: 148
child voicing cost: 148
Best yet: 296
New solution
function cost: 148
child voicing cost: 145
Best yet: 293
New solution
function cost: 148
child voicing cost: 141
Best yet: 289
New solution
function cost: 154
child voicing cost: 133
Best yet: 287
New solution
function cost: 154
child voicing cost: 130
Best yet: 284
New solution
function cost: 154
child voicing cost: 129
Best yet: 283
New solution
function cost: 154
child voicing cost: 123
Best yet: 277
New solution
function cost: 154
child voicing cost: 122
Best yet: 276
New solution
function cost: 154
child voicing cost: 114
Best yet: 268
New solution
function cost: 156
child voicing cost: 109
Best yet: 265
New solution
function cost: 150
child voicing cost: 113
Best yet: 263
New solution
function cost: 150
child voicing cost: 106
Best yet: 256
New solution
function cost: 154
child voicing cost: 97
Best yet: 251
New solution
function cost: 152
child voicing cost: 95
Best yet: 247
New solution
function cost: 158
child voicing cost: 87
Best yet: 245
New solution
function cost: 156
child voicing cost: 86
Best yet: 242
New solution
function cost: 156
child voicing cost: 85
Best yet: 241
New solution
function cost: 156
child voicing cost: 82
Best yet: 238

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])   
 (6, "Dm", [(54, 1), (58, 3), (66, 1), (73, 5)])  
 (4, "S/3", [(52, 3), (61, 1), (68, 5), (73, 1)]) 
 (6, "T/5", [(51, 5), (59, 3), (68, 1), (75, 5)]) 
 (10, "S65", [(49, 1), (58, 6), (68, 5), (76, 3)])
 (4, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])   
 (0, "Ts", [(52, 1), (64, 1), (68, 3), (71, 5)])  
 (8, "Ts", [(52, 1), (64, 1), (68, 3), (71, 5)])  
 (0, "Tm", [(47, 1), (63, 3), (66, 5), (71, 1)])  
 (4, "D7/3", [(43, 3), (58, 5), (63, 1), (73, 7)])
 (10, "T", [(44, 1), (56, 1), (63, 5), (71, 3)])  
 (8, "T/3", [(47, 3), (56, 1), (63, 5), (68, 1)]) 
 (4, "S", [(49, 1), (56, 5), (61, 1), (64, 3)])   
 ?                                                
 (6, "S", [(49, 1), (52, 3), (61, 1), (68, 5)])   
 (6, "Dm", [(54, 1), (54, 1), (61, 5), (70, 3)])  
 (6, "S/3", [(52, 3), (56, 5), (68, 5), (73, 1)]) 
 (12, "T/5", [(51, 5), (59, 3), (68, 1), (75, 5)])
 (8, "S", [(49, 1), (61, 1), (68, 5), (76, 3)])   
 (14, "Tm", [(47, 1), (63, 3), (71, 1), (78, 5)]) 
 (16, "S", [(49, 1), (61, 1), (68, 5), (76, 3)])  
 (14, "D64", [(51, 1), (59, 6), (68, 4), (75, 1)])
 (12, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])  
 (10, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])  
 (12, "T", [(44, 1), (63, 5), (68, 1), (71, 3)])  
 (12, "T", [(44, 1), (63, 5), (68, 1), (71, 3)])  

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (59, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (59, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (56, 1), (59, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (68, 1), (71, 3), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "T")]                                                                                                                                                                                                                                                          
 [(4, "D/3"), (4, "D/5"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65")  …  (10, "D"), (10, "Dm"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "T-5"), (14, "Ts"), (16, "D7-5"), (16, "S6"), (20, "D-5")]             
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "Ts"), (4, "D"), (4, "D/3"), (4, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5")  …  (4, "Tm"), (6, "D7-5"), (6, "S"), (6, "S/3"), (6, "S/5"), (8, "D7-1"), (10, "D-5"), (10, "Dm"), (10, "T-5"), (14, "S6")]                    
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D64"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1")  …  (12, "Dm"), (12, "S/3"), (12, "S/5"), (12, "Tm"), (14, "S"), (14, "T"), (14, "T/3"), (14, "T/5"), (18, "S6"), (24, "T-5")]            
 [(0, "D"), (0, "D/3"), (2, "D54"), (4, "D64"), (4, "D7"), (4, "D7/3"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (8, "S65")  …  (10, "T54"), (12, "Dm"), (12, "S/3"), (12, "T64"), (12, "Tm"), (14, "S"), (14, "T"), (14, "T/3"), (18, "S6"), (24, "T-5")]             
 [(2, "T"), (2, "T/3"), (6, "D/3"), (6, "T54"), (10, "D54"), (12, "D"), (12, "D64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S65"), (12, "T-5"), (12, "Ts"), (16, "D7-1"), (18, "D7-5"), (18, "S"), (18, "S/3"), (22, "D-5")]                    
 [(0, "S65/6"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S/3"), (4, "T64"), (6, "D54"), (6, "S"), (8, "D"), (8, "D/3"), (8, "D64"), (8, "D7-1"), (8, "T/3"), (8, "Ts"), (12, "Tm"), (14, "D7-5"), (14, "T"), (18, "D-5"), (20, "T-5")]                 
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (8, "Ts"), (10, "T"), (12, "D"), (12, "D/3"), (12, "D7-1"), (12, "S/3"), (12, "T64"), (14, "D54"), (14, "S"), (16, "D64"), (16, "T-5"), (16, "T/3"), (16, "Tm"), (18, "D7-5"), (22, "D-5")]        
 [(0, "T-5"), (10, "T"), (12, "T64"), (14, "T54"), (18, "D/3"), (18, "D7-1"), (20, "D64"), (20, "Dm"), (20, "S65"), (20, "S65/6")  …  (22, "S/3"), (24, "D"), (24, "D7"), (24, "D7/3"), (24, "D7/7"), (24, "Ts"), (26, "D7-5"), (30, "D-5"), (30, "S6"), (30, "T/3")]
 [(2, "T/3"), (2, "T/5"), (4, "D7-5"), (6, "D"), (6, "Ts"), (8, "D-5"), (8, "S"), (8, "S/3"), (8, "S/5"), (12, "S6")  …  (14, "D7/5"), (14, "D7/7"), (14, "S65"), (14, "T64"), (14, "Tm"), (16, "D/3"), (16, "D/5"), (18, "D7-1"), (22, "Dm"), (22, "T-5")]          
 [(4, "D"), (6, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S/3"), (8, "S/5"), (10, "D-5"), (10, "D7-5")  …  (12, "D7-1"), (12, "S65"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (16, "Tm"), (18, "S"), (20, "Dm"), (20, "T-5"), (22, "S6")]         
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D/3"), (8, "D/5"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]       
 [(0, "S/3"), (0, "T64"), (4, "S65"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "S"), (12, "D"), (12, "D/3"), (12, "Dm"), (12, "T-5"), (14, "D7-5"), (16, "D64"), (16, "T/3"), (18, "D-5"), (18, "D7-1")]             
 [(10, "D7-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Tm"), (14, "D-5"), (14, "D7-1"), (14, "S"), (16, "D"), (16, "D/3"), (16, "D64"), (16, "T/3"), (18, "D54"), (20, "S65"), (22, "T"), (24, "S/3"), (24, "T64"), (24, "Ts"), (28, "T-5")]    
 [(10, "D/3"), (10, "S6"), (10, "T"), (10, "T/3"), (12, "D64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S65"), (14, "D54"), (14, "D7-1"), (14, "S"), (14, "S/3"), (14, "T54"), (16, "D"), (16, "Ts"), (18, "D7-5"), (20, "T-5"), (22, "D-5")]    
 [(8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (8, "T/3"), (10, "D54"), (10, "D7-1"), (10, "S"), (10, "S/3"), (10, "T54"), (12, "D"), (12, "Tm"), (12, "Ts"), (14, "D/3"), (14, "D7-5"), (14, "T"), (18, "D-5"), (24, "T-5")]           

Done. Total checked: 270243, Pruned: 305097, completed: 30, time: 4.895999908447266, efficiency: 6.127451094972407
Results: bestval_func: 156, bestval_voices: 82
(16, 359, 359, 359)
Total time for optimisation of piece: 8.016999959945679
["T", "Dm", "S/3", "T/5", "S65", "D", "Ts", "Ts", "Tm", "D7/3", "T", "T/3", "S", "D", "T", "T", "S/3", "D7", "Ts", "T/3", "S", "Dm", "S/3", "T/5", "S", "Tm", "S", "D64", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-364.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-377.csv
[0 1 0 0 0 0 0 0 2 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 0 0 0 1 0 0 1; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 0 2 0 1 0; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 0 1 0 0 1 0 0 2 0; 0 0 0 0 0 0 0 0 3 0 0 1; 1 0 0 2 0 0 0 0 1 0 0 0; 0 0 0 2 0 0 0 1 1 0 0 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 2 0 0 0; 0 3 0 0 0 0 1 0 0 0 0 0; 0 0 0 1 0 0 0 0 0 0 1 2; 0 1 0 1 0 0 0 0 0 0 1 1; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 1 0; 0 0 0 0 1 0 0 0 2 0 1 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 1 1 0 0 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 0 0 1 0 0 2 0 0 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 0 0 0 0 0 2 0 1 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0]
Key Counter is [1 14 0 23 10 0 10 6 35 0 17 15]
Key Score is [32; 100; 55; 82; 107; 34; 114; 42; 96; 84; 47; 124]
Position Counter for 12 is [15 1 14 0 23 10 0 10 6 35 0 17]
Any[[12.0, 86.5, 0.0]]
[12, 86, 0]
9 G# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (59, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (59, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (63, 5), (68, 1), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (56, 1), (59, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (68, 1), (71, 3), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 76
child voicing cost: 194
Best yet: 270
New solution
function cost: 76
child voicing cost: 181
Best yet: 257
New solution
function cost: 76
child voicing cost: 179
Best yet: 255
New solution
function cost: 76
child voicing cost: 178
Best yet: 254
New solution
function cost: 76
child voicing cost: 174
Best yet: 250
New solution
function cost: 76
child voicing cost: 169
Best yet: 245
New solution
function cost: 76
child voicing cost: 168
Best yet: 244
New solution
function cost: 80
child voicing cost: 161
Best yet: 241
New solution
function cost: 80
child voicing cost: 159
Best yet: 239
New solution
function cost: 86
child voicing cost: 150
Best yet: 236
New solution
function cost: 86
child voicing cost: 145
Best yet: 231
New solution
function cost: 86
child voicing cost: 144
Best yet: 230
New solution
function cost: 90
child voicing cost: 135
Best yet: 225
New solution
function cost: 72
child voicing cost: 149
Best yet: 221
New solution
function cost: 76
child voicing cost: 141
Best yet: 217
New solution
function cost: 80
child voicing cost: 136
Best yet: 216
New solution
function cost: 80
child voicing cost: 134
Best yet: 214
New solution
function cost: 80
child voicing cost: 130
Best yet: 210
New solution
function cost: 80
child voicing cost: 127
Best yet: 207
New solution
function cost: 80
child voicing cost: 125
Best yet: 205
New solution
function cost: 80
child voicing cost: 121
Best yet: 201
New solution
function cost: 80
child voicing cost: 119
Best yet: 199
New solution
function cost: 80
child voicing cost: 117
Best yet: 197
New solution
function cost: 80
child voicing cost: 113
Best yet: 193
New solution
function cost: 96
child voicing cost: 87
Best yet: 183

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(56, 1), (59, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "S6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (8, "S65"), (8, "T/3"), (8, "T/5"), (10, "D7-1")  …  (10, "S/5"), (12, "D"), (12, "Tm"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "D7-5"), (14, "T"), (18, "D-5"), (24, "T-5")]      
 [(4, "T"), (4, "T/3"), (6, "D64"), (6, "Tm"), (6, "Ts"), (8, "D/3"), (8, "D54"), (8, "T54"), (10, "Dm"), (10, "T64")  …  (14, "D7/3"), (14, "D7/7"), (14, "S65"), (14, "S65/6"), (14, "T-5"), (16, "D7-5"), (16, "S"), (16, "S/3"), (20, "D-5"), (24, "S6")]    
 [(4, "T-5"), (6, "T"), (10, "T54"), (12, "Ts"), (16, "Dm"), (16, "S65"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (18, "D/3")  …  (18, "S/3"), (18, "S/5"), (24, "D"), (24, "D7"), (24, "D7/3"), (24, "D7/5"), (24, "D7/7"), (26, "D7-5"), (26, "S6"), (30, "D-5")]
 [(2, "Ts"), (4, "T"), (8, "T54"), (10, "S65"), (10, "T-5"), (12, "D7-1"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7")  …  (14, "T/3"), (14, "T/5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "Dm"), (18, "Tm"), (20, "D7-5"), (20, "S6"), (24, "D-5")]     
 [(2, "Ts"), (4, "T"), (8, "T54"), (10, "S65"), (10, "T-5"), (12, "D7-1"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7")  …  (14, "T/3"), (14, "T/5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "Dm"), (18, "Tm"), (20, "D7-5"), (20, "S6"), (24, "D-5")]     
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (2, "S65"), (2, "S65/6"), (6, "D"), (6, "D/3"), (6, "D7-1"), (6, "Dm"), (6, "S/3")  …  (8, "T54"), (10, "D64"), (10, "T/3"), (10, "Tm"), (12, "D7-5"), (12, "S6"), (14, "Ts"), (16, "D-5"), (16, "T"), (22, "T-5")]       
 [(4, "D/3"), (4, "D/5"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65")  …  (10, "D"), (10, "Dm"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "T-5"), (14, "Ts"), (16, "D7-5"), (16, "S6"), (20, "D-5")]         
 [(6, "S6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-5"), (12, "S65"), (12, "T/3"), (12, "T/5"), (12, "Tm")  …  (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "Dm"), (18, "D7-1"), (18, "T"), (28, "T-5")]   
 [(2, "Tm"), (4, "D/3"), (4, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Dm"), (8, "D7-1"), (8, "T")  …  (10, "Ts"), (12, "T54"), (14, "T64"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (16, "S6"), (18, "T-5"), (20, "D-5")]       
 [(6, "Tm"), (8, "T"), (8, "T/3"), (10, "D"), (10, "D64"), (10, "Ts"), (12, "D/3"), (12, "D54"), (12, "D7-5"), (12, "T54")  …  (14, "Dm"), (14, "T64"), (16, "D-5"), (16, "D7-1"), (18, "S65"), (18, "S65/6"), (18, "T-5"), (20, "S"), (20, "S/3"), (24, "S6")]  
 [(8, "S/3"), (8, "S/5"), (10, "D7-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Dm"), (12, "S65"), (12, "Tm")  …  (14, "S"), (14, "T"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "D7-1"), (16, "T/3"), (16, "T/5"), (18, "S6"), (20, "T-5")]
 [(2, "T"), (6, "T54"), (12, "D64"), (12, "S65/6"), (12, "T/5"), (14, "D54"), (14, "D7-1"), (14, "S"), (14, "S/5"), (16, "D"), (16, "D/5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D7-5"), (22, "D-5")]                                     
 [(4, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-1"), (8, "T"), (8, "T/5"), (10, "D"), (10, "S65/6"), (12, "D54"), (14, "D64"), (16, "D7-5"), (16, "S"), (16, "S/5"), (18, "T-5")]                                                        
 [(6, "D7-1"), (6, "T"), (8, "S65"), (10, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "T64"), (14, "D54"), (14, "S"), (14, "S/5"), (16, "D"), (16, "D/5"), (16, "D64"), (16, "T/5"), (18, "S6"), (22, "D7-5")]                            
 [(16, "D"), (16, "D7")]                                                                                                                                                                                                                                         
 [(6, "T")]                                                                                                                                                                                                                                                      
 [(6, "T")]                                                                                                                                                                                                                                                      

Done. Total checked: 163779, Pruned: 185420, completed: 25, time: 2.994000196456909, efficiency: 8.35003285223058
Results: bestval_func: 96, bestval_voices: 87
(15, 359, 359, 359)
[0 1 0 0 0 0 0 0 2 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 0 0 0 1 0 0 1; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 0 2 0 1 0; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 0 1 0 0 1 0 0 2 0; 0 0 0 0 0 0 0 0 3 0 0 1; 1 0 0 2 0 0 0 0 1 0 0 0; 0 0 0 2 0 0 0 1 1 0 0 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 1 0 0 1 0 0 0 2 0 0 0; 0 3 0 0 0 0 1 0 0 0 0 0; 0 0 0 1 0 0 0 0 0 0 1 2; 0 1 0 1 0 0 0 0 0 0 1 1; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 1 0; 0 0 0 0 1 0 0 0 2 0 1 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 1 1 0 0 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 0 0 1 0 0 2 0 0 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 0 0 1 0 0 0 1 1; 0 1 0 0 0 0 0 0 2 0 1 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0]
Key Counter is [1 14 0 23 10 0 10 6 35 0 17 15]
Key Score is [32; 100; 55; 82; 107; 34; 114; 42; 96; 84; 47; 124]
Position Counter for 12 is [15 1 14 0 23 10 0 10 6 35 0 17]
Any[[12.0, 86.5, 0.0]]
[12, 86, 0]
9 G# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(56, 1), (59, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 90
child voicing cost: 188
Best yet: 278
New solution
function cost: 90
child voicing cost: 183
Best yet: 273
New solution
function cost: 90
child voicing cost: 182
Best yet: 272
New solution
function cost: 90
child voicing cost: 179
Best yet: 269
New solution
function cost: 90
child voicing cost: 176
Best yet: 266
New solution
function cost: 90
child voicing cost: 174
Best yet: 264
New solution
function cost: 92
child voicing cost: 170
Best yet: 262
New solution
function cost: 90
child voicing cost: 166
Best yet: 256
New solution
function cost: 90
child voicing cost: 164
Best yet: 254
New solution
function cost: 90
child voicing cost: 161
Best yet: 251
New solution
function cost: 90
child voicing cost: 160
Best yet: 250
New solution
function cost: 90
child voicing cost: 155
Best yet: 245
New solution
function cost: 90
child voicing cost: 154
Best yet: 244
New solution
function cost: 90
child voicing cost: 146
Best yet: 236
New solution
function cost: 94
child voicing cost: 140
Best yet: 234
New solution
function cost: 96
child voicing cost: 136
Best yet: 232
New solution
function cost: 94
child voicing cost: 135
Best yet: 229
New solution
function cost: 98
child voicing cost: 130
Best yet: 228
New solution
function cost: 100
child voicing cost: 126
Best yet: 226
New solution
function cost: 98
child voicing cost: 125
Best yet: 223
New solution
function cost: 96
child voicing cost: 125
Best yet: 221
New solution
function cost: 98
child voicing cost: 121
Best yet: 219
New solution
function cost: 98
child voicing cost: 119
Best yet: 217
New solution
function cost: 98
child voicing cost: 118
Best yet: 216
New solution
function cost: 98
child voicing cost: 116
Best yet: 214
New solution
function cost: 98
child voicing cost: 114
Best yet: 212
New solution
function cost: 98
child voicing cost: 112
Best yet: 210
New solution
function cost: 90
child voicing cost: 117
Best yet: 207
New solution
function cost: 90
child voicing cost: 106
Best yet: 196

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (6, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])   
 (4, "D/3", [(55, 3), (58, 5), (63, 1), (75, 1)]) 
 (0, "T", [(56, 1), (56, 1), (63, 5), (71, 3)])   
 (0, "D/3", [(55, 3), (58, 5), (70, 5), (75, 1)]) 
 (0, "D", [(51, 1), (58, 5), (67, 3), (75, 1)])   
 (2, "T", [(56, 1), (59, 3), (68, 1), (75, 5)])   
 (6, "S", [(49, 1), (61, 1), (68, 5), (76, 3)])   
 (14, "S", [(49, 1), (56, 5), (64, 3), (73, 1)])  
 (20, "S65", [(49, 1), (58, 6), (64, 3), (68, 5)])
 (2, "T/5", [(51, 5), (59, 3), (63, 5), (68, 1)]) 
 (8, "S/3", [(52, 3), (61, 1), (68, 5), (68, 5)]) 
 (0, "T/5", [(51, 5), (63, 5), (68, 1), (71, 3)]) 
 (0, "S/3", [(52, 3), (61, 1), (68, 5), (73, 1)]) 
 ?                                                
 (2, "D7", [(51, 1), (61, 7), (67, 3), (70, 5)])  
 (4, "T", [(44, 1), (59, 3), (68, 1), (75, 5)])   
 (8, "D7/3", [(43, 3), (61, 7), (70, 5), (75, 1)])
 (8, "T", [(44, 1), (59, 3), (68, 1), (75, 5)])   
 (6, "Tm", [(47, 1), (63, 3), (66, 5), (71, 1)])  
 (14, "S", [(49, 1), (61, 1), (64, 3), (68, 5)])  
 (2, "T", [(44, 1), (63, 5), (68, 1), (71, 3)])   
 (6, "D7/3", [(43, 3), (63, 1), (70, 5), (73, 7)])
 (6, "T", [(44, 1), (63, 5), (68, 1), (71, 3)])   
 (16, "D7", [(51, 1), (61, 7), (67, 3), (70, 5)]) 
 (6, "T", [(44, 1), (59, 3), (63, 5), (68, 1)])   
 (6, "T", [(44, 1), (59, 3), (63, 5), (68, 1)])   

New solution
function cost: 102
child voicing cost: 93
Best yet: 195
New solution
function cost: 102
child voicing cost: 91
Best yet: 193
Done. Total checked: 79945, Pruned: 89449, completed: 31, time: 1.508000135421753, efficiency: 20.557027331652073
Results: bestval_func: 102, bestval_voices: 91
(16, 359, 359, 359)
Total time for optimisation of piece: 5.8429999351501465
["T", "D/3", "T", "D/3", "D", "T", "S", "S", "S65", "T/5", "S/3", "T/5", "S/3", "D", "T", "T", "D/3", "T", "Ts", "Ts", "D7", "T", "D7/3", "T", "Tm", "S", "T", "D7/3", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-377.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-39.csv
[0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (66, 3), (69, 5), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                       
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]       
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D/3"), (6, "D/5"), (6, "S65")  …  (8, "Ts"), (10, "T64"), (12, "S6"), (12, "Ss"), (14, "D7-5"), (14, "T-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "D-5")]         
 [(0, "D"), (0, "D/3"), (0, "D/5"), (0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D7-1"), (4, "Tm"), (6, "D7-5")  …  (6, "T54"), (8, "S6"), (8, "Ss"), (10, "D-5"), (10, "S/3"), (10, "S/5"), (10, "T64"), (10, "Ts"), (12, "S"), (12, "T-5")]           
 [(6, "S65"), (6, "S65/6"), (8, "S6"), (8, "Ss"), (10, "D54"), (10, "T64"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "Ts")  …  (16, "D"), (16, "D/3"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (18, "T-5"), (20, "T"), (20, "Tm"), (26, "D-5"), (26, "D7-5")]   
 [(8, "D-5"), (8, "D64"), (8, "D7-5"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Ss"), (12, "D54")  …  (14, "S"), (14, "S/3"), (16, "D/3"), (16, "S65"), (16, "T54"), (18, "T"), (18, "T/3"), (20, "T64"), (22, "Ts"), (28, "T-5")]  
 [(6, "D-5"), (8, "D"), (10, "D54"), (10, "D64"), (10, "D7-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Ss")  …  (16, "S"), (18, "S65/6"), (18, "Tm"), (20, "T"), (20, "T/3"), (22, "S/3"), (22, "T64"), (24, "D/3"), (24, "Ts"), (30, "T-5")]
 [(0, "D"), (0, "D/3"), (2, "D54"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D64"), (6, "D7-5"), (8, "D7-1")  …  (10, "S65/6"), (10, "Tm"), (12, "Ss"), (12, "T"), (12, "T/3"), (14, "S/3"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]       
 [(0, "T"), (0, "T/3"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64")  …  (10, "Tm"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]        
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "D/3"), (8, "D/5"), (8, "Tm"), (10, "D")  …  (10, "T/3"), (10, "T/5"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "Ts"), (16, "D7-5"), (16, "T64"), (20, "D-5"), (20, "T-5")]    
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "S65"), (6, "S65/6"), (8, "S6"), (8, "Ss"), (8, "Ts"), (10, "T/3"), (10, "T/5")  …  (12, "D7/7"), (12, "T"), (12, "Tm"), (14, "D/3"), (14, "D/5"), (14, "D7-5"), (14, "T-5"), (16, "D"), (16, "D7-1"), (18, "D-5")]       
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "S/5"), (8, "T64"), (10, "S"), (10, "Ts")  …  (14, "T"), (14, "T/3"), (14, "T/5"), (16, "T-5"), (18, "D"), (18, "D/3"), (18, "D/5"), (20, "Tm"), (24, "D7-5"), (28, "D-5")]        
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "Ss"), (18, "D-5")]      
 [(6, "Ts"), (8, "D/3"), (8, "S/3"), (8, "T64"), (10, "T"), (10, "T/3"), (12, "D54"), (12, "D7-1"), (12, "S65/6"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D64"), (16, "T-5"), (18, "S"), (20, "D7-5"), (24, "D-5")]               
 [(6, "D"), (8, "D-5"), (8, "D54"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "T"), (10, "T/3"), (10, "Tm")  …  (12, "D7-5"), (12, "S/3"), (12, "T64"), (14, "D7-1"), (14, "S"), (14, "Ts"), (16, "D/3"), (18, "S6"), (20, "S65"), (20, "T-5")]  
 [(0, "T-5"), (10, "T"), (12, "S65/6"), (12, "Ts"), (16, "D/3"), (18, "D7"), (18, "D7-1"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (18, "S"), (18, "S/3"), (20, "D54"), (20, "D64"), (20, "T/3"), (20, "Tm"), (22, "D"), (22, "Ss"), (24, "D7-5"), (28, "D-5")] 

1 2 0 0; 0 0 0 0 1 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 0 0 2 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 2 0 0 0 0 0 0 0 2 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 2 0 1 0 0 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 3 0 0 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 2 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 0 0 1 0 0 1 1 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0]
Key Counter is [0 11 38 0 20 0 14 8 3 27 0 10]
Key Score is [103; 28; 128; 49; 85; 93; 38; 117; 22; 123; 73; 58]
Position Counter for 3 is [38 0 20 0 14 8 3 27 0 10 0 11]
Any[[3.0, 89.5, 1.0]]
[3, 90, 1]
3 D Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (66, 3), (69, 5), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 118
child voicing cost: 159
Best yet: 277
New solution
function cost: 118
child voicing cost: 152
Best yet: 270
New solution
function cost: 118
child voicing cost: 150
Best yet: 268
New solution
function cost: 114
child voicing cost: 153
Best yet: 267
New solution
function cost: 114
child voicing cost: 152
Best yet: 266
New solution
function cost: 114
child voicing cost: 150
Best yet: 264
New solution
function cost: 114
child voicing cost: 146
Best yet: 260
New solution
function cost: 114
child voicing cost: 145
Best yet: 259
New solution
function cost: 114
child voicing cost: 144
Best yet: 258
New solution
function cost: 114
child voicing cost: 141
Best yet: 255
New solution
function cost: 114
child voicing cost: 139
Best yet: 253
New solution
function cost: 114
child voicing cost: 136
Best yet: 250
New solution
function cost: 114
child voicing cost: 135
Best yet: 249
New solution
function cost: 114
child voicing cost: 130
Best yet: 244
New solution
function cost: 114
child voicing cost: 127
Best yet: 241
New solution
function cost: 114
child voicing cost: 126
Best yet: 240
New solution
function cost: 114
child voicing cost: 125
Best yet: 239
New solution
function cost: 114
child voicing cost: 122
Best yet: 236
New solution
function cost: 118
child voicing cost: 117
Best yet: 235
New solution
function cost: 118
child voicing cost: 116
Best yet: 234
New solution
function cost: 118
child voicing cost: 113
Best yet: 231
New solution
function cost: 118
child voicing cost: 110
Best yet: 228
New solution
function cost: 116
child voicing cost: 110
Best yet: 226
New solution
function cost: 118
child voicing cost: 104
Best yet: 222
New solution
function cost: 118
child voicing cost: 103
Best yet: 221
New solution
function cost: 118
child voicing cost: 101
Best yet: 219
New solution
function cost: 118
child voicing cost: 99
Best yet: 217
New solution
function cost: 114
child voicing cost: 101
Best yet: 215
New solution
function cost: 116
child voicing cost: 97
Best yet: 213
New solution
function cost: 114
child voicing cost: 93
Best yet: 207
New solution
function cost: 114
child voicing cost: 91
Best yet: 205
New solution
function cost: 114
child voicing cost: 89
Best yet: 203
New solution
function cost: 112
child voicing cost: 90
Best yet: 202
New solution
function cost: 112
child voicing cost: 88
Best yet: 200
New solution
function cost: 114
child voicing cost: 82
Best yet: 196

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(22, "D", [(57, 1), (61, 3), (64, 5), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T-5"), (8, "T64"), (10, "T"), (12, "S65"), (12, "S65/6"), (12, "T54"), (12, "Ts"), (16, "D/3"), (16, "D/5"), (18, "D7")  …  (18, "S/5"), (20, "D64"), (20, "T/3"), (20, "T/5"), (20, "Tm"), (22, "D"), (22, "S6"), (22, "Ss"), (24, "D7-5"), (28, "D-5")]  
 [(0, "T"), (0, "T/3"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64")  …  (10, "Tm"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]        
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3")  …  (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]        
 [(6, "Ts"), (8, "D/3"), (8, "D/5"), (8, "S/3"), (8, "S/5"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "D7-1"), (12, "S65")  …  (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "Ss"), (16, "T-5"), (16, "Tm"), (18, "S"), (20, "D7-5"), (22, "S6"), (24, "D-5")]  
 [(4, "Ts"), (6, "T64"), (8, "T"), (10, "D/3"), (10, "D/5"), (10, "S65"), (10, "S65/6"), (10, "T54"), (14, "D7-1"), (14, "Ss")  …  (16, "D7/7"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "T/3"), (18, "T/5"), (18, "Tm"), (20, "S6"), (22, "D7-5"), (26, "D-5")]
 [(4, "D"), (4, "D/3"), (6, "D54"), (6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D64"), (10, "D7-5")  …  (12, "S"), (12, "Ts"), (14, "D-5"), (14, "T54"), (14, "Tm"), (16, "S6"), (16, "Ss"), (16, "T"), (16, "T/3"), (18, "T-5")]        
 [(0, "S65"), (0, "S65/6"), (4, "S/3"), (4, "S/5"), (4, "Ss"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7")  …  (10, "D/5"), (10, "D7-1"), (10, "S6"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (20, "D-5")]   
 [(2, "S"), (2, "S/3"), (2, "S/5"), (4, "S65"), (4, "S65/6"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "Tm")  …  (10, "D7/5"), (10, "D7/7"), (10, "T"), (12, "D7-5"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3"), (20, "D/5")]       
 [(2, "D7-1"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D")  …  (10, "T/5"), (12, "S/3"), (12, "S/5"), (12, "Ss"), (12, "T64"), (14, "Ts"), (16, "D7-5"), (16, "T-5"), (16, "Tm"), (20, "D-5")]   
 [(6, "T-5"), (8, "T"), (10, "D/3"), (10, "T54"), (10, "T64"), (14, "D54"), (14, "D7-1"), (14, "S65"), (14, "S65/6"), (16, "D")  …  (18, "D64"), (18, "Ss"), (18, "Tm"), (18, "Ts"), (20, "S"), (20, "S/3"), (22, "D-5"), (22, "D7-5"), (24, "S6"), (24, "T/3")]  
 [(4, "T"), (4, "T/3"), (4, "T/5"), (6, "D/3"), (6, "D/5"), (6, "T54"), (10, "D7-1"), (10, "S65"), (10, "S65/6"), (10, "T-5")  …  (14, "Ss"), (14, "T64"), (14, "Tm"), (14, "Ts"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "D7-5"), (20, "S6"), (22, "D-5")]    
 [(4, "D/5"), (6, "T"), (6, "T/5"), (8, "D54"), (8, "D7-1"), (8, "S65/6"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D64"), (12, "T-5"), (14, "S"), (16, "D7-5"), (16, "S/5"), (18, "S6")]                                           
 [(6, "T64"), (8, "T"), (10, "S65/6"), (10, "Ts"), (14, "D/5"), (16, "D7"), (16, "D7-1"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S"), (16, "S/5"), (18, "D54"), (18, "D64"), (18, "T/5"), (20, "D"), (20, "Ss"), (22, "D7-5")]                           
 [(2, "T"), (2, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "S"), (10, "S/5"), (12, "D/5"), (12, "D64"), (12, "D7-5"), (12, "T-5"), (12, "Ts"), (16, "D-5"), (16, "D7-1")]                                
 [(10, "D7"), (14, "D")]                                                                                                                                                                                                                                          
 [(4, "T")]                                                                                                                                                                                                                                                       
 [(10, "T")]                                                                                                                                                                                                                                                      

Done. Total checked: 120611, Pruned: 147835, completed: 35, time: 2.245000123977661, efficiency: 15.590199584482637
Results: bestval_func: 114, bestval_voices: 82
(15, 381, 381, 381)
[0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 2 0 0; 0 0 0 0 1 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 0 0 2 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 2 0 0 0 0 0 0 0 2 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 2 0 1 0 0 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 3 0 0 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 2 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 0 0 1 0 0 1 1 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0]
Key Counter is [0 11 38 0 20 0 14 8 3 27 0 10]
Key Score is [103; 28; 128; 49; 85; 93; 38; 117; 22; 123; 73; 58]
Position Counter for 3 is [38 0 20 0 14 8 3 27 0 10 0 11]
Any[[3.0, 89.5, 1.0]]
[3, 90, 1]
3 D Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(22, "D", [(57, 1), (61, 3), (64, 5), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 82
child voicing cost: 198
Best yet: 280
New solution
function cost: 82
child voicing cost: 197
Best yet: 279
New solution
function cost: 82
child voicing cost: 195
Best yet: 277
New solution
function cost: 86
child voicing cost: 188
Best yet: 274
New solution
function cost: 82
child voicing cost: 185
Best yet: 267
New solution
function cost: 82
child voicing cost: 184
Best yet: 266
New solution
function cost: 82
child voicing cost: 182
Best yet: 264
New solution
function cost: 86
child voicing cost: 175
Best yet: 261
New solution
function cost: 86
child voicing cost: 172
Best yet: 258
New solution
function cost: 82
child voicing cost: 175
Best yet: 257
New solution
function cost: 82
child voicing cost: 172
Best yet: 254
New solution
function cost: 82
child voicing cost: 171
Best yet: 253
New solution
function cost: 82
child voicing cost: 170
Best yet: 252
New solution
function cost: 82
child voicing cost: 168
Best yet: 250
New solution
function cost: 82
child voicing cost: 167
Best yet: 249
New solution
function cost: 88
child voicing cost: 158
Best yet: 246
New solution
function cost: 88
child voicing cost: 155
Best yet: 243
New solution
function cost: 80
child voicing cost: 160
Best yet: 240
New solution
function cost: 80
child voicing cost: 156
Best yet: 236
New solution
function cost: 80
child voicing cost: 153
Best yet: 233
New solution
function cost: 76
child voicing cost: 154
Best yet: 230
New solution
function cost: 76
child voicing cost: 151
Best yet: 227
New solution
function cost: 76
child voicing cost: 150
Best yet: 226
New solution
function cost: 76
child voicing cost: 148
Best yet: 224
New solution
function cost: 76
child voicing cost: 146
Best yet: 222
New solution
function cost: 86
child voicing cost: 135
Best yet: 221
New solution
function cost: 78
child voicing cost: 142
Best yet: 220
New solution
function cost: 78
child voicing cost: 140
Best yet: 218
New solution
function cost: 78
child voicing cost: 138
Best yet: 216
New solution
function cost: 84
child voicing cost: 127
Best yet: 211
New solution
function cost: 82
child voicing cost: 127
Best yet: 209
New solution
function cost: 78
child voicing cost: 127
Best yet: 205
New solution
function cost: 84
child voicing cost: 116
Best yet: 200
New solution
function cost: 88
child voicing cost: 107
Best yet: 195
New solution
function cost: 88
child voicing cost: 104
Best yet: 192
New solution
function cost: 84
child voicing cost: 102
Best yet: 186
New solution
function cost: 84
child voicing cost: 101
Best yet: 185
New solution
function cost: 84
child voicing cost: 99
Best yet: 183

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])   
 (0, "D", [(45, 1), (57, 1), (61, 3), (64, 5)])   
 (4, "D7/7", [(43, 7), (57, 1), (61, 3), (64, 5)])
 (6, "T/3", [(42, 3), (57, 5), (62, 1), (62, 1)]) 
 (6, "S65", [(43, 1), (59, 3), (62, 5), (64, 6)]) 
 (10, "D", [(45, 1), (57, 1), (61, 3), (64, 5)])  
 (20, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])  
 (12, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])  
 (0, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (6, "D7/3", [(49, 3), (57, 1), (67, 7), (76, 5)])
 (12, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])  
 (0, "Ss", [(52, 1), (55, 3), (67, 3), (71, 5)])  
 (0, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 ?                                                
 (4, "D", [(57, 1), (61, 3), (69, 1), (76, 5)])   
 (6, "Ts", [(59, 1), (62, 3), (66, 5), (74, 3)])  
 (2, "S", [(55, 1), (59, 3), (67, 1), (74, 5)])   
 (2, "D7-1", [(52, 5), (55, 7), (67, 7), (73, 3)])
 (8, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (6, "D/3", [(49, 3), (57, 1), (69, 1), (76, 5)]) 
 (6, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (8, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])   
 (2, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])   
 (10, "D7", [(57, 1), (61, 3), (64, 5), (67, 7)]) 
 (4, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])   
 (4, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])   

New solution
function cost: 86
child voicing cost: 92
Best yet: 178
New solution
function cost: 86
child voicing cost: 91
Best yet: 177
New solution
function cost: 86
child voicing cost: 89
Best yet: 175
Done. Total checked: 200950, Pruned: 221482, completed: 41, time: 3.430999994277954, efficiency: 11.949868862832322
Results: bestval_func: 86, bestval_voices: 89
(16, 381, 381, 381)
Total time for optimisation of piece: 7.230999946594238
["T", "D", "D7/7", "T/3", "S65", "D", "T", "T", "T", "D7/3", "T", "Ss", "T", "T", "D", "D", "D7/7", "T/3", "Ts", "Ts", "D", "Ts", "S", "D7-1", "T", "D/3", "T", "T", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-39.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-390.csv

4-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(60, 1), (63, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (51, 3), (60, 1), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (60, 1), (63, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(10, "T")]                                                                                                                                                                                                                                                      
 [(0, "Tm"), (4, "D"), (4, "D/3"), (4, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3")  …  (6, "Ts"), (8, "D7-1"), (8, "S65"), (8, "T54"), (10, "D-5"), (10, "S"), (10, "S/3"), (10, "S/5"), (14, "S6"), (14, "T-5")]              
 [(0, "S/3"), (0, "S/5"), (0, "Ts"), (2, "T"), (4, "S65"), (6, "D54"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7")  …  (8, "T-5"), (8, "T/3"), (8, "T/5"), (10, "S"), (12, "D7-1"), (12, "Tm"), (14, "D-5"), (14, "D7-5"), (14, "Dm"), (14, "S6")]                
 [(2, "D"), (2, "D/3"), (2, "D/5"), (2, "D64"), (2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (2, "T"), (2, "T/3")  …  (4, "S/3"), (4, "S/5"), (4, "S6"), (4, "S65"), (4, "T64"), (4, "Tm"), (4, "Ts"), (6, "D7-1"), (6, "Dm"), (10, "T-5")]                  
 [(8, "S/3"), (8, "T-5"), (8, "T64"), (8, "Ts"), (10, "T"), (10, "T/3"), (10, "T54"), (12, "D54"), (12, "D64"), (12, "Dm")  …  (14, "D"), (14, "D-5"), (14, "D/3"), (14, "D7-5"), (14, "S"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (18, "D7-1"), (18, "S6")]    
 [(2, "S"), (2, "S/3"), (6, "S6"), (8, "S65/6"), (10, "D7-5"), (12, "D64"), (12, "D7-1"), (12, "T/3"), (12, "T64"), (12, "Ts"), (14, "D-5"), (14, "T"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D54"), (20, "D"), (20, "D/3"), (20, "T-5")]   
 [(4, "S"), (8, "T54"), (10, "D7-1"), (10, "S/3"), (10, "S65"), (10, "T64"), (12, "D7-5"), (12, "T"), (12, "T/3"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Ts"), (16, "D-5"), (16, "D54"), (18, "D"), (18, "D/3"), (18, "T-5")]  
 [(8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S/3"), (10, "T64"), (12, "D-5"), (12, "T"), (12, "T/3"), (14, "D"), (14, "D/3"), (14, "D64"), (14, "D7-1"), (14, "S65/6"), (14, "Ts"), (16, "D54"), (16, "S"), (22, "T-5")]            
 [(0, "S65"), (0, "S65/6"), (4, "D7"), (4, "D7/3"), (4, "D7/7"), (4, "S/3"), (4, "T64"), (6, "D54"), (6, "S"), (6, "T54")  …  (8, "D7-1"), (8, "Dm"), (8, "T/3"), (8, "Ts"), (10, "S6"), (12, "Tm"), (14, "D7-5"), (14, "T"), (18, "D-5"), (20, "T-5")]           
 [(6, "Dm"), (8, "D7-1"), (10, "Tm"), (12, "D/3"), (12, "D/5"), (12, "S6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7")  …  (16, "T/5"), (18, "D"), (18, "S65"), (18, "Ts"), (20, "T54"), (22, "S/3"), (22, "S/5"), (24, "D7-5"), (24, "S"), (28, "D-5")]
 [(2, "Tm"), (6, "D"), (6, "T/3"), (6, "T/5"), (6, "Ts"), (8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (12, "S"), (12, "T"), (16, "D/3"), (16, "D/5"), (16, "S6"), (18, "Dm"), (18, "S/3"), (18, "S/5"), (20, "D7-1"), (22, "T-5")]      
 [(8, "S/3"), (8, "S/5"), (10, "D7-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Dm"), (12, "S65"), (12, "Tm")  …  (14, "S"), (14, "T"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "D7-1"), (16, "T/3"), (16, "T/5"), (18, "S6"), (20, "T-5")] 
 [(4, "T"), (4, "T/3"), (6, "D64"), (6, "Ts"), (8, "D54"), (10, "D"), (10, "S/3"), (10, "T64"), (12, "D/3"), (12, "D7-5"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65/6"), (14, "T-5"), (16, "D-5"), (16, "D7-1"), (16, "S")]                
 [(6, "D/3"), (6, "T"), (6, "T/3"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "D54"), (10, "D7-1"), (10, "S"), (10, "S/3"), (10, "T54"), (12, "D"), (12, "T64"), (12, "Ts"), (14, "D7-5"), (16, "T-5"), (18, "D-5")]       
 [(8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S/3"), (10, "T64"), (12, "D-5"), (12, "T"), (12, "T/3"), (14, "D"), (14, "D/3"), (14, "D64"), (14, "D7-1"), (14, "S65/6"), (14, "Ts"), (16, "D54"), (16, "S"), (22, "T-5")]            
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (6, "D"), (6, "D/3"), (6, "D7-1"), (6, "S65"), (6, "Tm"), (8, "D54"), (10, "D64"), (10, "S/3"), (10, "T64"), (12, "D7-5"), (12, "S"), (14, "Ts"), (16, "D-5"), (16, "T"), (16, "T/3"), (26, "T-5")]           

[0 0 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 0 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 1 0 1 0 0 1 0 0 1 0 0 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 0 0 1 0 0 1 0 2 0; 1 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 0 0 0 2 0 0 2 0 0 0; 1 0 0 0 1 1 0 0 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 0 0 0 3 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 0 0 0 0 1 2 0 1 0; 1 0 0 0 0 0 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 1 0 0 1 0]
Key Counter is [22 1 4 8 1 31 0 18 15 1 24 1]
Key Score is [78; 101; 26; 122; 27; 101; 80; 47; 119; 23; 108; 50]
Position Counter for 4 is [8 1 31 0 18 15 1 24 1 22 1 4]
Any[[4.0, 84.0, 0.0]]
[4, 84, 0]
1 C Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

4-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(60, 1), (63, 3), (67, 5), (72, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (51, 3), (60, 1), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(48, 1), (60, 1), (63, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 114
child voicing cost: 201
Best yet: 315
New solution
function cost: 114
child voicing cost: 194
Best yet: 308
New solution
function cost: 114
child voicing cost: 192
Best yet: 306
New solution
function cost: 114
child voicing cost: 189
Best yet: 303
New solution
function cost: 114
child voicing cost: 187
Best yet: 301
New solution
function cost: 114
child voicing cost: 184
Best yet: 298
New solution
function cost: 114
child voicing cost: 183
Best yet: 297
New solution
function cost: 114
child voicing cost: 182
Best yet: 296
New solution
function cost: 114
child voicing cost: 179
Best yet: 293
New solution
function cost: 114
child voicing cost: 178
Best yet: 292
New solution
function cost: 114
child voicing cost: 171
Best yet: 285
New solution
function cost: 114
child voicing cost: 170
Best yet: 284
New solution
function cost: 114
child voicing cost: 169
Best yet: 283
New solution
function cost: 114
child voicing cost: 166
Best yet: 280
New solution
function cost: 114
child voicing cost: 165
Best yet: 279
New solution
function cost: 114
child voicing cost: 163
Best yet: 277
New solution
function cost: 114
child voicing cost: 162
Best yet: 276
New solution
function cost: 114
child voicing cost: 160
Best yet: 274
New solution
function cost: 114
child voicing cost: 153
Best yet: 267
New solution
function cost: 116
child voicing cost: 149
Best yet: 265
New solution
function cost: 116
child voicing cost: 147
Best yet: 263
New solution
function cost: 132
child voicing cost: 129
Best yet: 261
New solution
function cost: 126
child voicing cost: 133
Best yet: 259
New solution
function cost: 110
child voicing cost: 147
Best yet: 257
New solution
function cost: 110
child voicing cost: 145
Best yet: 255
New solution
function cost: 118
child voicing cost: 130
Best yet: 248
New solution
function cost: 126
child voicing cost: 121
Best yet: 247
New solution
function cost: 126
child voicing cost: 120
Best yet: 246
New solution
function cost: 126
child voicing cost: 118
Best yet: 244
New solution
function cost: 122
child voicing cost: 120
Best yet: 242
New solution
function cost: 128
child voicing cost: 113
Best yet: 241
New solution
function cost: 116
child voicing cost: 124
Best yet: 240
New solution
function cost: 116
child voicing cost: 123
Best yet: 239
New solution
function cost: 130
child voicing cost: 107
Best yet: 237
New solution
function cost: 112
child voicing cost: 123
Best yet: 235
New solution
function cost: 112
child voicing cost: 122
Best yet: 234
New solution
function cost: 116
child voicing cost: 116
Best yet: 232
New solution
function cost: 116
child voicing cost: 114
Best yet: 230
New solution
function cost: 132
child voicing cost: 97
Best yet: 229
New solution
function cost: 118
child voicing cost: 110
Best yet: 228
New solution
function cost: 116
child voicing cost: 111
Best yet: 227
New solution
function cost: 116
child voicing cost: 109
Best yet: 225
New solution
function cost: 132
child voicing cost: 91
Best yet: 223
New solution
function cost: 130
child voicing cost: 92
Best yet: 222
New solution
function cost: 130
child voicing cost: 90
Best yet: 220
New solution
function cost: 128
child voicing cost: 90
Best yet: 218
New solution
function cost: 116
child voicing cost: 101
Best yet: 217
New solution
function cost: 116
child voicing cost: 100
Best yet: 216
New solution
function cost: 130
child voicing cost: 84
Best yet: 214

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "Ts", [(56, 1), (60, 3), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "D7-1"), (6, "Dm"), (6, "S65")  …  (10, "S/5"), (12, "D7-5"), (12, "S"), (12, "S6"), (14, "Ts"), (16, "D-5"), (16, "T"), (16, "T/3"), (16, "T/5"), (26, "T-5")]           
 [(6, "T/3"), (10, "D54"), (10, "T"), (10, "T54"), (12, "D"), (12, "D64"), (12, "Dm"), (12, "T-5"), (12, "T64"), (12, "Tm")  …  (16, "D7/3"), (16, "D7/7"), (16, "S65"), (16, "S65/6"), (18, "D-5"), (18, "D7-1"), (18, "D7-5"), (22, "S"), (22, "S/3"), (26, "S6")]
 [(0, "S/3"), (0, "S/5"), (6, "T64"), (8, "S"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65")  …  (14, "Dm"), (14, "T-5"), (16, "D/3"), (16, "D/5"), (16, "D7-5"), (18, "T/3"), (18, "T/5"), (18, "Ts"), (20, "D-5"), (22, "Tm")]     
 [(8, "S"), (12, "S6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (14, "Ts"), (16, "D7-5")  …  (18, "T/3"), (18, "T/5"), (18, "Tm"), (20, "D-5"), (20, "T54"), (22, "D"), (22, "D/3"), (22, "D/5"), (24, "T"), (30, "T-5")]    
 [(2, "S"), (2, "S/3"), (2, "S/5"), (4, "S65"), (6, "S6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T/3")  …  (10, "D7-5"), (12, "D"), (12, "D/3"), (12, "D/5"), (12, "Dm"), (12, "Tm"), (14, "D-5"), (14, "T"), (16, "D7-1"), (20, "T-5")]           
 [(0, "T54"), (2, "S/3"), (2, "T64"), (4, "T"), (4, "T/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S65"), (6, "S65/6")  …  (12, "D7-5"), (12, "S"), (14, "D64"), (14, "T-5"), (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "D7-1"), (16, "S6"), (18, "Dm")]         
 [(0, "S/3"), (0, "S/5"), (6, "T64"), (8, "S"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65")  …  (14, "Dm"), (14, "T-5"), (16, "D/3"), (16, "D/5"), (16, "D7-5"), (18, "T/3"), (18, "T/5"), (18, "Ts"), (20, "D-5"), (22, "Tm")]     
 [(8, "D7-5"), (8, "S"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "S6"), (14, "D"), (14, "D/3")  …  (16, "T54"), (18, "D7-1"), (18, "Dm"), (18, "S/3"), (18, "S/5"), (20, "T"), (20, "T/3"), (20, "T/5"), (22, "Ts"), (26, "T-5")]   
 [(4, "S"), (8, "S6"), (10, "D7-1"), (10, "Dm"), (10, "S/3"), (10, "S/5"), (10, "S65"), (10, "T64"), (12, "D7-5"), (12, "T")  …  (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Ts"), (16, "D-5"), (18, "D"), (18, "D/3"), (18, "D/5"), (18, "T-5"), (18, "Tm")]   
 [(4, "T54"), (6, "S/3"), (6, "T64"), (8, "D7-5"), (8, "T"), (8, "T/3"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/7")  …  (10, "Ts"), (12, "D-5"), (12, "D54"), (12, "S"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "Dm"), (16, "S6"), (18, "T-5")]        
 [(8, "S"), (12, "S6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (14, "Ts"), (16, "D7-5")  …  (18, "T/3"), (18, "T/5"), (18, "Tm"), (20, "D-5"), (20, "T54"), (22, "D"), (22, "D/3"), (22, "D/5"), (24, "T"), (30, "T-5")]    
 [(4, "D"), (4, "D64"), (6, "D54"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D-5"), (12, "S65/6"), (14, "D/5"), (14, "S"), (14, "T"), (14, "T/5"), (18, "D7-1"), (18, "T54"), (20, "S/5"), (24, "T-5")]                                 
 [(6, "S/3"), (6, "T64"), (8, "D7-5"), (8, "T"), (8, "T/5"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65/6"), (10, "Ts"), (12, "D54"), (12, "S"), (14, "D"), (14, "D/5"), (14, "D7-1"), (16, "S6")]                                
 [(4, "D"), (4, "D/5"), (6, "D54"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (8, "T/3"), (8, "Ts"), (10, "D7-5"), (12, "D7-1"), (12, "S/5"), (12, "Tm"), (14, "S"), (14, "T"), (24, "T-5")]                                        
 [(16, "D"), (20, "D7")]                                                                                                                                                                                                                                            
 [(14, "T")]                                                                                                                                                                                                                                                        
 [(16, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 106357, Pruned: 131184, completed: 49, time: 2.0830001831054688, efficiency: 23.523761734359375
Results: bestval_func: 130, bestval_voices: 84
(15, 407, 407, 407)
[0 0 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 0 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 1 0 1 0 0 1 0 0 1 0 0 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 0 0 1 0 0 1 0 2 0; 1 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 0 0 0 2 0 0 2 0 0 0; 1 0 0 0 1 1 0 0 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 0 0 0 3 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 0 0 1 1 0 1 0; 0 0 0 0 0 0 0 1 2 0 1 0; 1 0 0 0 0 0 0 1 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 1 0 0 1 0]
Key Counter is [22 1 4 8 1 31 0 18 15 1 24 1]
Key Score is [78; 101; 26; 122; 27; 101; 80; 47; 119; 23; 108; 50]
Position Counter for 4 is [8 1 31 0 18 15 1 24 1 22 1 4]
Any[[4.0, 84.0, 0.0]]
[4, 84, 0]
1 C Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "Ts", [(56, 1), (60, 3), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 140
child voicing cost: 253
Best yet: 393
New solution
function cost: 140
child voicing cost: 251
Best yet: 391
New solution
function cost: 140
child voicing cost: 246
Best yet: 386
New solution
function cost: 140
child voicing cost: 245
Best yet: 385
New solution
function cost: 140
child voicing cost: 237
Best yet: 377
New solution
function cost: 140
child voicing cost: 232
Best yet: 372
New solution
function cost: 140
child voicing cost: 231
Best yet: 371
New solution
function cost: 140
child voicing cost: 223
Best yet: 363
New solution
function cost: 130
child voicing cost: 224
Best yet: 354
New solution
function cost: 130
child voicing cost: 223
Best yet: 353
New solution
function cost: 130
child voicing cost: 221
Best yet: 351
New solution
function cost: 130
child voicing cost: 216
Best yet: 346
New solution
function cost: 130
child voicing cost: 215
Best yet: 345
New solution
function cost: 130
child voicing cost: 212
Best yet: 342
New solution
function cost: 130
child voicing cost: 206
Best yet: 336
New solution
function cost: 130
child voicing cost: 205
Best yet: 335
New solution
function cost: 130
child voicing cost: 203
Best yet: 333
New solution
function cost: 130
child voicing cost: 198
Best yet: 328
New solution
function cost: 132
child voicing cost: 195
Best yet: 327
New solution
function cost: 132
child voicing cost: 194
Best yet: 326
New solution
function cost: 136
child voicing cost: 183
Best yet: 319
New solution
function cost: 138
child voicing cost: 178
Best yet: 316
New solution
function cost: 134
child voicing cost: 178
Best yet: 312
New solution
function cost: 136
child voicing cost: 172
Best yet: 308
New solution
function cost: 134
child voicing cost: 170
Best yet: 304
New solution
function cost: 134
child voicing cost: 169
Best yet: 303
New solution
function cost: 134
child voicing cost: 163
Best yet: 297
New solution
function cost: 134
child voicing cost: 157
Best yet: 291
New solution
function cost: 134
child voicing cost: 153
Best yet: 287
New solution
function cost: 136
child voicing cost: 145
Best yet: 281

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (10, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])  
 (4, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])   
 (0, "S/3", [(56, 3), (60, 5), (65, 1), (77, 1)]) 
 (2, "D", [(55, 1), (62, 5), (67, 1), (71, 3)])   
 (8, "S/3", [(56, 3), (60, 5), (65, 1), (65, 1)]) 
 (2, "S", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (18, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])  
 (14, "D", [(55, 1), (55, 1), (62, 5), (71, 3)])  
 (4, "D7/7", [(53, 7), (55, 1), (62, 5), (71, 3)])
 (16, "T/3", [(51, 3), (55, 5), (67, 5), (72, 1)])
 (2, "Tm", [(51, 1), (58, 5), (67, 3), (75, 1)])  
 (14, "S", [(53, 1), (56, 3), (65, 1), (72, 5)])  
 (10, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])  
 ?                                                
 (4, "T/3", [(51, 3), (67, 5), (67, 5), (72, 1)]) 
 (0, "S/3", [(56, 3), (60, 5), (65, 1), (65, 1)]) 
 (20, "T/5", [(55, 5), (60, 1), (63, 3), (67, 5)])
 (4, "S", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (10, "Tm", [(51, 1), (63, 1), (67, 3), (70, 5)]) 
 (8, "S", [(53, 1), (60, 5), (65, 1), (68, 3)])   
 (4, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])   
 (8, "T", [(60, 1), (60, 1), (63, 3), (67, 5)])   
 (4, "D", [(55, 1), (59, 3), (62, 5), (67, 1)])   
 (16, "D", [(55, 1), (55, 1), (62, 5), (71, 3)])  
 (14, "T", [(48, 1), (55, 5), (63, 3), (72, 1)])  
 (14, "T", [(48, 1), (55, 5), (63, 3), (72, 1)])  

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                           
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (2, "Tm"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7")  …  (6, "S/3"), (6, "S/5"), (6, "S65"), (6, "S65/6"), (6, "T64"), (8, "D-5"), (8, "D7-1"), (10, "S6"), (10, "Ss"), (10, "T-5")]              
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "Tm"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "Ts")  …  (6, "S"), (6, "S/3"), (6, "S/5"), (6, "S65"), (6, "S65/6"), (8, "D-5"), (8, "D7-1"), (10, "S6"), (10, "Ss"), (10, "T-5")]                 
 [(0, "S"), (0, "S/3"), (0, "S/5"), (4, "S6"), (6, "S65"), (6, "S65/6"), (10, "D7-5"), (10, "Ss"), (10, "T/3"), (10, "T/5")  …  (12, "T"), (14, "D-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "T-5"), (20, "D"), (20, "D/3"), (20, "D/5")]       
 [(6, "S/3"), (6, "T"), (6, "T/3"), (6, "T54"), (6, "T64"), (6, "Ts"), (8, "D"), (8, "D/3"), (8, "D7"), (8, "D7/3")  …  (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "Tm"), (12, "D64"), (12, "D7-1"), (12, "T-5"), (14, "Ss"), (16, "S"), (20, "S6")]              
 [(0, "Ts"), (8, "D64"), (8, "T/3"), (8, "T64"), (10, "S"), (10, "S/3"), (10, "T"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (12, "T-5"), (14, "D"), (14, "Ss"), (16, "D-5"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D/3"), (22, "D7-1")]       
 [(2, "Ts"), (6, "S/3"), (6, "T64"), (8, "S"), (10, "D64"), (10, "D7-5"), (10, "S65/6"), (10, "T/3"), (10, "T54"), (12, "T"), (14, "D-5"), (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D54"), (20, "D"), (20, "D/3"), (20, "D7-1")]      
 [(0, "S/3"), (0, "T64"), (2, "Ts"), (4, "S65/6"), (6, "T"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (12, "D54"), (14, "D"), (16, "D64"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "Tm"), (20, "D-5"), (20, "D/3")]         
 [(2, "D64"), (2, "D7-5"), (2, "T/3"), (6, "D-5"), (6, "D54"), (8, "D"), (8, "S"), (8, "S/3"), (10, "T54"), (10, "Tm")  …  (12, "D7/7"), (12, "S6"), (12, "T"), (14, "S65"), (14, "S65/6"), (14, "T64"), (16, "D7-1"), (18, "D/3"), (18, "Ss"), (22, "T-5")]          
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]           
 [(0, "T/3"), (0, "T/5"), (2, "Tm"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3"), (10, "S/5")  …  (14, "D7/5"), (14, "D7/7"), (14, "S6"), (14, "Ss"), (16, "D/3"), (16, "D/5"), (16, "S65"), (16, "S65/6"), (18, "D7-1"), (20, "T-5")]       
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D/3"), (6, "D/5"), (6, "S65")  …  (8, "Ts"), (10, "T64"), (12, "S6"), (12, "Ss"), (14, "D7-5"), (14, "T-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "D-5")]             
 [(6, "Ss"), (8, "D64"), (10, "D7"), (10, "D7-1"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "S/3"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (14, "D"), (14, "T"), (14, "T/3"), (16, "D-5"), (16, "D/3"), (16, "T64"), (18, "Ts"), (24, "T-5")]     
 [(6, "S"), (10, "Ss"), (12, "D7-5"), (12, "S65/6"), (12, "Ts"), (14, "D7-1"), (16, "D-5"), (16, "D64"), (16, "S/3"), (16, "T/3"), (16, "T54"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (18, "T"), (22, "D"), (22, "D/3"), (24, "D54"), (24, "T-5")]    
 [(2, "S"), (2, "S/3"), (4, "S65"), (6, "S6"), (8, "D64"), (8, "T/3"), (8, "T64"), (8, "Ts"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "T"), (12, "D54"), (12, "D7-5"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3")]             
 [(10, "Ss"), (12, "D64"), (12, "T/3"), (14, "D7"), (14, "D7-1"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S"), (14, "S/3")  …  (16, "D54"), (16, "D7-5"), (16, "S65/6"), (18, "D"), (18, "T"), (20, "D-5"), (20, "D/3"), (20, "T64"), (20, "Ts"), (28, "T-5")]

Done. Total checked: 132023, Pruned: 147040, completed: 30, time: 2.5810000896453857, efficiency: 11.623401378541534
Results: bestval_func: 136, bestval_voices: 145
(16, 407, 407, 407)
Total time for optimisation of piece: 6.492000102996826
["T", "D", "S/3", "D", "S/3", "S", "D", "D", "D7/7", "T/3", "Tm", "S", "D", "D7", "Ts", "Ts", "T/3", "S/3", "D7", "Ts", "T/3", "S/3", "T/5", "S", "Tm", "S", "D", "T", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-390.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-403.csv
[0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 0 2 0 0 0 0 0 0 0 0 1 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 0 0 1 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 0 0 0 0 0 2 0 0 0 2; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 0 0 0 0 2 1 0 1 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 1 0 0 0 0 0 2 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 1 0 1 0 1; 0 1 1 0 0 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 0 0 2; 0 2 0 0 1 0 0 0 0 0 0 1]
Key Counter is [0 14 26 0 12 0 16 17 0 26 1 17]
Key Score is [98; 31; 128; 44; 85; 82; 48; 114; 32; 111; 70; 60]
Position Counter for 3 is [26 0 12 0 16 17 0 26 1 17 0 14]
Any[[3.0, 87.25, 1.0]]
[3, 87, 1]
3 D Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 110
child voicing cost: 148
Best yet: 258
New solution
function cost: 110
child voicing cost: 146
Best yet: 256
New solution
function cost: 110
child voicing cost: 144
Best yet: 254
New solution
function cost: 110
child voicing cost: 140
Best yet: 250
New solution
function cost: 110
child voicing cost: 139
Best yet: 249
New solution
function cost: 110
child voicing cost: 138
Best yet: 248
New solution
function cost: 110
child voicing cost: 137
Best yet: 247
New solution
function cost: 110
child voicing cost: 135
Best yet: 245
New solution
function cost: 110
child voicing cost: 133
Best yet: 243
New solution
function cost: 114
child voicing cost: 128
Best yet: 242
New solution
function cost: 112
child voicing cost: 129
Best yet: 241
New solution
function cost: 112
child voicing cost: 127
Best yet: 239
New solution
function cost: 120
child voicing cost: 113
Best yet: 233
New solution
function cost: 96
child voicing cost: 136
Best yet: 232
New solution
function cost: 96
child voicing cost: 134
Best yet: 230
New solution
function cost: 96
child voicing cost: 131
Best yet: 227
New solution
function cost: 96
child voicing cost: 128
Best yet: 224
New solution
function cost: 96
child voicing cost: 123
Best yet: 219
New solution
function cost: 96
child voicing cost: 120
Best yet: 216
New solution
function cost: 80
child voicing cost: 134
Best yet: 214
New solution
function cost: 80
child voicing cost: 131
Best yet: 211
New solution
function cost: 82
child voicing cost: 127
Best yet: 209
New solution
function cost: 82
child voicing cost: 125
Best yet: 207
New solution
function cost: 80
child voicing cost: 126
Best yet: 206
New solution
function cost: 80
child voicing cost: 121
Best yet: 201
New solution
function cost: 80
child voicing cost: 118
Best yet: 198
New solution
function cost: 88
child voicing cost: 109
Best yet: 197
New solution
function cost: 88
child voicing cost: 102
Best yet: 190
New solution
function cost: 84
child voicing cost: 105
Best yet: 189
New solution
function cost: 84
child voicing cost: 104
Best yet: 188
New solution
function cost: 84
child voicing cost: 102
Best yet: 186
New solution
function cost: 84
child voicing cost: 99
Best yet: 183
New solution
function cost: 84
child voicing cost: 98
Best yet: 182
New solution
function cost: 84
child voicing cost: 95
Best yet: 179
New solution
function cost: 86
child voicing cost: 88
Best yet: 174
New solution
function cost: 84
child voicing cost: 89
Best yet: 173
New solution
function cost: 84
child voicing cost: 88
Best yet: 172
New solution
function cost: 84
child voicing cost: 87
Best yet: 171
New solution
function cost: 90
child voicing cost: 79
Best yet: 169
New solution
function cost: 90
child voicing cost: 77
Best yet: 167
New solution
function cost: 90
child voicing cost: 73
Best yet: 163
New solution
function cost: 92
child voicing cost: 69
Best yet: 161
New solution
function cost: 88
child voicing cost: 71
Best yet: 159
New solution
function cost: 88
child voicing cost: 70
Best yet: 158
New solution
function cost: 94
child voicing cost: 63
Best yet: 157
New solution
function cost: 94
child voicing cost: 62
Best yet: 156

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(18, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(10, "S6"), (10, "Ss"), (12, "T/3"), (12, "T/5"), (14, "D7"), (14, "D7-1"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S")  …  (16, "S65/6"), (16, "T54"), (18, "D"), (18, "T"), (20, "D-5"), (20, "D/3"), (20, "D/5"), (20, "T64"), (20, "Ts"), (28, "T-5")]
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (4, "D/3"), (4, "Tm"), (6, "D"), (6, "D7-1"), (6, "T"), (6, "T/3"), (8, "D54")  …  (10, "S6"), (10, "Ss"), (10, "Ts"), (12, "D64"), (12, "D7-5"), (12, "S/3"), (12, "T64"), (16, "D-5"), (16, "T-5"), (18, "S")]             
 [(4, "T64"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D"), (10, "T"), (12, "Ss"), (12, "T-5"), (12, "T/3"), (12, "T/5")  …  (14, "S"), (14, "S/3"), (14, "S/5"), (14, "Tm"), (16, "D-5"), (16, "D/3"), (16, "D/5"), (16, "D7-5"), (18, "S6"), (20, "D7-1")]     
 [(0, "T/3"), (0, "T/5"), (2, "Tm"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3"), (10, "S/5")  …  (14, "D7/5"), (14, "D7/7"), (14, "S6"), (14, "Ss"), (16, "D/3"), (16, "D/5"), (16, "S65"), (16, "S65/6"), (18, "D7-1"), (20, "T-5")]     
 [(4, "D7-5"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (8, "D-5"), (10, "D"), (10, "D/3")  …  (14, "S6"), (14, "Ss"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "S/3"), (16, "S/5"), (16, "T64"), (18, "Ts"), (24, "T-5")]           
 [(0, "T"), (0, "T/3"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64")  …  (10, "Tm"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]          
 [(2, "D7-1"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D")  …  (10, "T/5"), (12, "S/3"), (12, "S/5"), (12, "Ss"), (12, "T64"), (14, "Ts"), (16, "D7-5"), (16, "T-5"), (16, "Tm"), (20, "D-5")]     
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7-5"), (6, "T/3"), (6, "T/5"), (6, "Ts"), (8, "S6"), (8, "T"), (10, "D-5")  …  (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "Ss"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "D7-1"), (18, "T-5")]          
 [(4, "D"), (4, "D/3"), (4, "D/5"), (6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-5")  …  (12, "Ts"), (14, "D-5"), (14, "T54"), (14, "Tm"), (16, "S6"), (16, "Ss"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "T-5")]        
 [(4, "D/3"), (6, "T"), (6, "T/3"), (8, "D54"), (8, "D7-1"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D"), (10, "D7")  …  (12, "D64"), (12, "Ss"), (12, "T-5"), (12, "Tm"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "T64"), (18, "S6"), (20, "D-5")]          
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "D/3"), (4, "D/5"), (4, "Tm"), (6, "D"), (6, "D7-1"), (6, "T")  …  (10, "S6"), (10, "Ss"), (10, "Ts"), (12, "D7-5"), (12, "S/3"), (12, "S/5"), (12, "T64"), (16, "D-5"), (16, "T-5"), (18, "S")]            
 [(2, "T"), (2, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D/3"), (8, "D64"), (8, "S/5"), (8, "Tm"), (10, "D"), (10, "D7-1"), (10, "S"), (12, "D54"), (12, "D7-5"), (14, "S6"), (16, "D-5"), (16, "S65/6")]                                     
 [(4, "D7-1"), (4, "S65/6"), (8, "D/5"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (12, "D54"), (12, "S/5"), (12, "T64"), (14, "D"), (14, "T"), (14, "T/5"), (16, "Tm"), (20, "D64"), (20, "D7-5")]                              
 [(0, "T/5"), (4, "D54"), (6, "D"), (6, "T"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D7-5"), (12, "S65/6"), (14, "S"), (14, "S/5"), (16, "D/5"), (16, "T-5"), (18, "S6"), (20, "D7-1")]                               
 [(4, "D7"), (8, "D")]                                                                                                                                                                                                                                              
 [(6, "T")]                                                                                                                                                                                                                                                         
 [(20, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 210472, Pruned: 268934, completed: 46, time: 3.765000104904175, efficiency: 12.217795144303395
Results: bestval_func: 94, bestval_voices: 62
(15, 381, 381, 381)
[0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 0 2 0 0 0 0 0 0 0 0 1 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 0 0 1 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 0 0 0 0 0 2 0 0 0 2; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 0 0 0 0 2 1 0 1 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 1 0 0 0 0 0 2 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 1 0 1 0 1; 0 1 1 0 0 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 0 0 2; 0 2 0 0 1 0 0 0 0 0 0 1]
Key Counter is [0 14 26 0 12 0 16 17 0 26 1 17]
Key Score is [98; 31; 128; 44; 85; 82; 48; 114; 32; 111; 70; 60]
Position Counter for 3 is [26 0 12 0 16 17 0 26 1 17 0 14]
Any[[3.0, 87.25, 1.0]]
[3, 87, 1]
3 D Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(18, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 78
child voicing cost: 187
Best yet: 265
New solution
function cost: 78
child voicing cost: 186
Best yet: 264
New solution
function cost: 78
child voicing cost: 184
Best yet: 262
New solution
function cost: 82
child voicing cost: 177
Best yet: 259
New solution
function cost: 78
child voicing cost: 179
Best yet: 257
New solution
function cost: 78
child voicing cost: 178
Best yet: 256
New solution
function cost: 78
child voicing cost: 176
Best yet: 254
New solution
function cost: 82
child voicing cost: 169
Best yet: 251
New solution
function cost: 78
child voicing cost: 169
Best yet: 247
New solution
function cost: 78
child voicing cost: 168
Best yet: 246
New solution
function cost: 78
child voicing cost: 166
Best yet: 244
New solution
function cost: 82
child voicing cost: 159
Best yet: 241
New solution
function cost: 80
child voicing cost: 160
Best yet: 240
New solution
function cost: 80
child voicing cost: 159
Best yet: 239
New solution
function cost: 80
child voicing cost: 157
Best yet: 237
New solution
function cost: 84
child voicing cost: 150
Best yet: 234
New solution
function cost: 80
child voicing cost: 148
Best yet: 228
New solution
function cost: 80
child voicing cost: 147
Best yet: 227
New solution
function cost: 80
child voicing cost: 145
Best yet: 225
New solution
function cost: 84
child voicing cost: 138
Best yet: 222
New solution
function cost: 84
child voicing cost: 135
Best yet: 219
New solution
function cost: 94
child voicing cost: 123
Best yet: 217
New solution
function cost: 94
child voicing cost: 120
Best yet: 214
New solution
function cost: 94
child voicing cost: 118
Best yet: 212
New solution
function cost: 96
child voicing cost: 115
Best yet: 211
New solution
function cost: 96
child voicing cost: 113
Best yet: 209
New solution
function cost: 98
child voicing cost: 109
Best yet: 207
New solution
function cost: 100
child voicing cost: 105
Best yet: 205
New solution
function cost: 100
child voicing cost: 103
Best yet: 203
New solution
function cost: 100
child voicing cost: 101
Best yet: 201
New solution
function cost: 100
child voicing cost: 100
Best yet: 200
New solution
function cost: 100
child voicing cost: 98
Best yet: 198
New solution
function cost: 88
child voicing cost: 109
Best yet: 197
New solution
function cost: 88
child voicing cost: 108
Best yet: 196
New solution
function cost: 88
child voicing cost: 102
Best yet: 190
New solution
function cost: 88
child voicing cost: 95
Best yet: 183
New solution
function cost: 88
child voicing cost: 92
Best yet: 180
New solution
function cost: 88
child voicing cost: 86
Best yet: 174
New solution
function cost: 88
child voicing cost: 79
Best yet: 167

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])    
 (0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])    
 (4, "Ts", [(47, 1), (50, 3), (59, 1), (66, 5)])   
 (0, "S/3", [(47, 3), (55, 1), (62, 5), (67, 1)])  
 (12, "D64", [(45, 1), (57, 1), (62, 4), (66, 6)]) 
 (14, "D", [(45, 1), (57, 1), (61, 3), (64, 5)])   
 (2, "Ts", [(47, 1), (54, 5), (62, 3), (62, 3)])   
 (2, "Ts", [(47, 1), (54, 5), (59, 1), (62, 3)])   
 (2, "T/3", [(54, 3), (57, 5), (62, 1), (62, 1)])  
 (0, "D/5", [(52, 5), (57, 1), (61, 3), (64, 5)])  
 (0, "T/3", [(54, 3), (57, 5), (62, 1), (69, 5)])  
 (6, "S65/6", [(52, 6), (55, 1), (62, 5), (71, 3)])
 (10, "D7-1", [(52, 5), (55, 7), (64, 5), (73, 3)])
 ?                                                 
 (0, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])    
 (2, "D7-1", [(52, 5), (55, 7), (61, 3), (67, 7)]) 
 (8, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (4, "D/5", [(52, 5), (57, 1), (61, 3), (64, 5)])  
 (6, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (2, "D7/3", [(49, 3), (55, 7), (64, 5), (69, 1)]) 
 (2, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])    
 (4, "D7-1", [(52, 5), (55, 7), (61, 3), (67, 7)]) 
 (6, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (8, "D", [(57, 1), (57, 1), (61, 3), (64, 5)])    
 (6, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    
 (6, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])    

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (68, 3), (72, 5), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (53, 1), (60, 5), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "T")]                                                                                                                                                                                                                                                        
 [(0, "Dm"), (2, "D7"), (2, "D7-1"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "S6"), (4, "S65"), (6, "D"), (6, "D/3")  …  (8, "S/3"), (8, "S/5"), (8, "T64"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "D7-5"), (12, "Ts"), (16, "D-5"), (16, "T-5")]           
 [(0, "T"), (0, "T/3"), (0, "T/5"), (0, "Tm"), (2, "D"), (2, "D/3"), (2, "D/5"), (2, "D7"), (2, "D7/3"), (2, "D7/5")  …  (4, "S6"), (4, "S65"), (4, "T54"), (6, "D7-1"), (6, "Dm"), (6, "S"), (6, "S/3"), (6, "S/5"), (8, "D-5"), (10, "T-5")]                     
 [(0, "Dm"), (2, "D7"), (2, "D7-1"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "S6"), (4, "S65"), (6, "D"), (6, "D/3")  …  (8, "S/3"), (8, "S/5"), (8, "T64"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "D7-5"), (12, "Ts"), (16, "D-5"), (16, "T-5")]           
 [(2, "Tm"), (4, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Dm"), (8, "D7-1"), (8, "T"), (8, "T/3"), (10, "D")  …  (12, "D54"), (12, "T54"), (14, "D64"), (14, "S/3"), (14, "T64"), (16, "D7-5"), (16, "S"), (16, "S6"), (18, "T-5"), (20, "D-5")]          
 [(0, "T"), (0, "T/3"), (4, "T54"), (8, "D/3"), (10, "D64"), (10, "T-5"), (10, "Ts"), (12, "D54"), (12, "D7-1"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (20, "D-5")]                  
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65/6"), (8, "D7-5"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (10, "T64"), (10, "Ts"), (12, "D-5"), (12, "D54"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "Tm"), (16, "T"), (22, "T-5")]   
 [(8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S/3"), (10, "T64"), (12, "D-5"), (12, "T"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "S65/6"), (14, "Ts"), (16, "D54"), (16, "S"), (18, "D64"), (18, "T/3"), (20, "S6"), (22, "T-5")] 
 [(4, "Dm"), (8, "D"), (8, "D/3"), (10, "D54"), (10, "T"), (10, "T/3"), (12, "D64"), (12, "D7"), (12, "D7/3"), (12, "D7/7")  …  (14, "T54"), (16, "D7-1"), (16, "S/3"), (16, "S65"), (16, "S65/6"), (16, "T64"), (18, "D-5"), (20, "T-5"), (22, "S"), (22, "S6")]  
 [(2, "T/3"), (2, "T/5"), (2, "Ts"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "S65"), (6, "Tm"), (8, "D7-5"), (8, "S")  …  (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (14, "Dm"), (16, "S6"), (18, "T-5"), (20, "D7-1")]            
 [(2, "S65"), (4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T/3"), (6, "T/5")  …  (10, "D/3"), (10, "D/5"), (10, "Dm"), (10, "Tm"), (12, "D7-5"), (12, "S6"), (12, "T"), (16, "D-5"), (16, "D7-1"), (18, "T-5")]        
 [(8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Dm"), (10, "S/3"), (10, "S/5"), (12, "D-5"), (12, "T")  …  (14, "D/5"), (14, "D7-1"), (14, "S65"), (14, "Tm"), (14, "Ts"), (16, "S"), (18, "T/3"), (18, "T/5"), (20, "S6"), (22, "T-5")]
 [(4, "D7-5"), (8, "D-5"), (8, "S"), (8, "S/3"), (10, "D"), (10, "D/3"), (10, "D64"), (10, "T/3"), (10, "Ts"), (12, "D54"), (12, "T54"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65"), (14, "T64"), (16, "T"), (18, "D7-1"), (26, "T-5")]     
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "D54"), (6, "D7-5"), (6, "S"), (6, "S/3"), (8, "D"), (8, "D/3"), (8, "Tm"), (10, "D-5"), (10, "T"), (12, "S65"), (12, "T64"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (20, "D7-1"), (20, "T-5")]            
 [(6, "D54"), (8, "D"), (8, "D/3"), (8, "D64"), (8, "S65/6"), (8, "T/3"), (8, "Ts"), (10, "T"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D-5"), (14, "D7-5"), (14, "S"), (14, "S/3"), (16, "D7-1"), (16, "T-5")]                                
 [(0, "S/3"), (0, "T64"), (4, "S65"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "S"), (12, "D"), (12, "D/3"), (12, "D64"), (12, "T-5"), (12, "T/3"), (14, "D7-5"), (16, "Tm"), (18, "D-5"), (18, "D7-1")]           

Done. Total checked: 145418, Pruned: 160505, completed: 39, time: 3.140000104904175, efficiency: 12.420381750652899
Results: bestval_func: 88, bestval_voices: 79
(16, 381, 381, 381)
Total time for optimisation of piece: 8.440999984741211
["T", "T", "Ts", "S/3", "D64", "D", "Ts", "Ts", "T/3", "D/5", "T/3", "S65/6", "D7-1", "D7-1", "T", "T", "D7", "Ts", "T/3", "D7/5", "T", "D7-1", "T", "D/5", "T", "D7/3", "T", "D7-1", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-403.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-416.csv
[1 0 0 0 0 0 0 0 2 0 0 0; 0 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 1 0 0 0 2 0 0 0 0 0 0; 0 1 0 0 0 2 0 0 0 0 1 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 2 1 0 0 0 0 0 1 0 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 2 0 0 1 0 0 0 0 0 0 1 0; 1 1 0 0 0 0 0 1 0 0 1 0; 1 1 0 0 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 2 0 1 1 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 1 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0]
Key Counter is [33 12 0 16 0 21 0 9 16 1 19 0]
Key Score is [64; 117; 22; 114; 45; 83; 84; 43; 126; 29; 99; 63]
Position Counter for 9 is [16 1 19 0 33 12 0 16 0 21 0 9]
Any[[9.0, 86.25, 0.0]]
[9, 86, 0]
6 F Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (68, 3), (72, 5), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (53, 1), (60, 5), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 120
child voicing cost: 152
Best yet: 272
New solution
function cost: 120
child voicing cost: 151
Best yet: 271
New solution
function cost: 120
child voicing cost: 150
Best yet: 270
New solution
function cost: 120
child voicing cost: 149
Best yet: 269
New solution
function cost: 120
child voicing cost: 142
Best yet: 262
New solution
function cost: 120
child voicing cost: 136
Best yet: 256
New solution
function cost: 120
child voicing cost: 133
Best yet: 253
New solution
function cost: 120
child voicing cost: 131
Best yet: 251
New solution
function cost: 120
child voicing cost: 127
Best yet: 247
New solution
function cost: 120
child voicing cost: 125
Best yet: 245
New solution
function cost: 120
child voicing cost: 122
Best yet: 242
New solution
function cost: 120
child voicing cost: 121
Best yet: 241
New solution
function cost: 120
child voicing cost: 120
Best yet: 240
New solution
function cost: 120
child voicing cost: 118
Best yet: 238
New solution
function cost: 120
child voicing cost: 116
Best yet: 236
New solution
function cost: 120
child voicing cost: 113
Best yet: 233
New solution
function cost: 114
child voicing cost: 114
Best yet: 228
New solution
function cost: 114
child voicing cost: 110
Best yet: 224
New solution
function cost: 114
child voicing cost: 109
Best yet: 223
New solution
function cost: 114
child voicing cost: 105
Best yet: 219
New solution
function cost: 114
child voicing cost: 103
Best yet: 217
New solution
function cost: 114
child voicing cost: 101
Best yet: 215
New solution
function cost: 114
child voicing cost: 97
Best yet: 211
New solution
function cost: 114
child voicing cost: 95
Best yet: 209
New solution
function cost: 114
child voicing cost: 93
Best yet: 207
New solution
function cost: 114
child voicing cost: 90
Best yet: 204
New solution
function cost: 114
child voicing cost: 89
Best yet: 203
New solution
function cost: 114
child voicing cost: 81
Best yet: 195
New solution
function cost: 108
child voicing cost: 83
Best yet: 191
New solution
function cost: 108
child voicing cost: 81
Best yet: 189
New solution
function cost: 108
child voicing cost: 79
Best yet: 187
New solution
function cost: 82
child voicing cost: 98
Best yet: 180
New solution
function cost: 82
child voicing cost: 94
Best yet: 176
New solution
function cost: 92
child voicing cost: 83
Best yet: 175
New solution
function cost: 94
child voicing cost: 76
Best yet: 170
New solution
function cost: 90
child voicing cost: 77
Best yet: 167
New solution
function cost: 90
child voicing cost: 75
Best yet: 165
New solution
function cost: 94
child voicing cost: 66
Best yet: 160
New solution
function cost: 86
child voicing cost: 73
Best yet: 159
New solution
function cost: 86
child voicing cost: 71
Best yet: 157
New solution
function cost: 90
child voicing cost: 62
Best yet: 152

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "Ts", [(49, 1), (56, 5), (65, 3), (77, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "S/3"), (0, "S/5"), (2, "T54"), (4, "S65"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (12, "D/5"), (12, "Dm"), (12, "T-5"), (12, "T/3"), (12, "T/5"), (14, "D7-5"), (14, "S6"), (16, "Tm"), (18, "D-5"), (18, "D7-1")]         
 [(4, "D7-5"), (4, "S"), (4, "S/3"), (6, "D64"), (6, "T/3"), (6, "Ts"), (8, "D-5"), (8, "D54"), (8, "S6"), (8, "T54")  …  (10, "S65/6"), (10, "T64"), (10, "Tm"), (12, "T"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (18, "D7-1"), (18, "Dm"), (22, "T-5")]          
 [(2, "D7-5"), (4, "T/3"), (4, "T/5"), (6, "D-5"), (6, "S"), (6, "S/3"), (6, "S/5"), (8, "D"), (8, "Ts"), (10, "S6")  …  (12, "D7/7"), (12, "S65"), (12, "T64"), (14, "T"), (16, "D7-1"), (16, "Tm"), (18, "D/3"), (18, "D/5"), (20, "Dm"), (24, "T-5")]             
 [(6, "D"), (6, "D/3"), (6, "D/5"), (8, "D-5"), (8, "S6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D7-5")  …  (14, "D7-1"), (14, "Dm"), (14, "S65"), (14, "Tm"), (14, "Ts"), (18, "T64"), (20, "T"), (20, "T/3"), (20, "T/5"), (30, "T-5")]      
 [(0, "Tm"), (4, "D"), (6, "D54"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ts"), (10, "D-5")  …  (14, "S"), (14, "S/3"), (14, "S/5"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "Dm"), (18, "D7-1"), (18, "S6"), (24, "T-5")]            
 [(6, "Dm"), (8, "D7-1"), (10, "Tm"), (12, "D/3"), (12, "S6"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (14, "S65"), (14, "S65/6")  …  (16, "T/3"), (18, "D"), (18, "S/3"), (18, "T64"), (18, "Ts"), (20, "D54"), (20, "T54"), (22, "D64"), (24, "D7-5"), (28, "D-5")]
 [(2, "D7-5"), (6, "D-5"), (8, "D"), (10, "D54"), (10, "S"), (10, "S/3"), (10, "S/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (16, "D7-1"), (16, "Dm"), (16, "S65"), (16, "T64"), (18, "D/3"), (18, "D/5"), (18, "T"), (18, "T/3"), (18, "T/5"), (28, "T-5")]    
 [(4, "S6"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-5"), (8, "S"), (8, "S/3"), (8, "S/5"), (10, "D7-1")  …  (12, "T54"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "T/3"), (14, "T/5"), (14, "Tm"), (14, "Ts"), (20, "T"), (30, "T-5")]           
 [(6, "D54"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "S65"), (8, "T/3"), (8, "T/5"), (8, "Ts"), (10, "T"), (12, "D7")  …  (12, "Tm"), (14, "D-5"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D7-1"), (16, "Dm"), (16, "T-5"), (18, "S6")]              
 [(2, "D7-5"), (4, "D64"), (4, "T/3"), (6, "D-5"), (6, "D54"), (6, "S"), (6, "S/3"), (8, "D"), (8, "Ts"), (10, "S6")  …  (12, "D7/7"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "T"), (16, "D7-1"), (16, "Tm"), (18, "D/3"), (20, "Dm"), (24, "T-5")]           
 [(2, "D7-5"), (4, "T/3"), (4, "T/5"), (6, "D-5"), (6, "S"), (6, "S/3"), (6, "S/5"), (8, "D"), (8, "Ts"), (10, "S6")  …  (12, "D7/7"), (12, "S65"), (12, "T64"), (14, "T"), (16, "D7-1"), (16, "Tm"), (18, "D/3"), (18, "D/5"), (20, "Dm"), (24, "T-5")]             
 [(2, "S/3"), (2, "T64"), (4, "T"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (8, "D54"), (10, "D"), (10, "D/5"), (10, "D64"), (10, "D7-1"), (10, "T/5"), (12, "D7-5"), (12, "S"), (14, "Tm"), (16, "D-5"), (18, "Dm")]                        
 [(10, "T"), (12, "S65/6"), (14, "D/3"), (14, "D7-1"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "T64"), (18, "D54"), (18, "S"), (18, "S/5"), (20, "D"), (20, "D64"), (20, "T/5"), (26, "D7-5")]                                                    
 [(4, "D"), (4, "D64"), (6, "D54"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D-5"), (12, "S65/6"), (14, "D/5"), (14, "S"), (14, "S/5"), (14, "T"), (14, "T/5"), (16, "Dm"), (18, "D7-1"), (24, "T-5")]                                   
 [(10, "D7"), (14, "D")]                                                                                                                                                                                                                                             
 [(14, "T")]                                                                                                                                                                                                                                                         
 [(10, "T")]                                                                                                                                                                                                                                                         

Done. Total checked: 167246, Pruned: 206046, completed: 41, time: 3.943000078201294, efficiency: 10.398173772977264
Results: bestval_func: 90, bestval_voices: 62
(15, 409, 409, 409)
[1 0 0 0 0 0 0 0 2 0 0 0; 0 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 0 0 1 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 1 0 0 0 1 0 0 0 1 0 0; 1 1 0 0 0 2 0 0 0 0 0 0; 0 1 0 0 0 2 0 0 0 0 1 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 2 1 0 0 0 0 0 1 0 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 2 0 0 1 0 0 0 0 0 0 1 0; 1 1 0 0 0 0 0 1 0 0 1 0; 1 1 0 0 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 2 0 1 1 0 0 0; 2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 1 1 0 1 0; 2 0 0 1 0 0 0 0 1 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0]
Key Counter is [33 12 0 16 0 21 0 9 16 1 19 0]
Key Score is [64; 117; 22; 114; 45; 83; 84; 43; 126; 29; 99; 63]
Position Counter for 9 is [16 1 19 0 33 12 0 16 0 21 0 9]
Any[[9.0, 86.25, 0.0]]
[9, 86, 0]
6 F Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "Ts", [(49, 1), (56, 5), (65, 3), (77, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 136
child voicing cost: 195
Best yet: 331
New solution
function cost: 136
child voicing cost: 187
Best yet: 323
New solution
function cost: 136
child voicing cost: 185
Best yet: 321
New solution
function cost: 136
child voicing cost: 179
Best yet: 315
New solution
function cost: 136
child voicing cost: 176
Best yet: 312
New solution
function cost: 136
child voicing cost: 168
Best yet: 304
New solution
function cost: 136
child voicing cost: 165
Best yet: 301
New solution
function cost: 130
child voicing cost: 153
Best yet: 283
New solution
function cost: 130
child voicing cost: 145
Best yet: 275
New solution
function cost: 142
child voicing cost: 130
Best yet: 272
New solution
function cost: 142
child voicing cost: 129
Best yet: 271
New solution
function cost: 142
child voicing cost: 119
Best yet: 261
New solution
function cost: 134
child voicing cost: 125
Best yet: 259
New solution
function cost: 122
child voicing cost: 133
Best yet: 255
New solution
function cost: 122
child voicing cost: 125
Best yet: 247
New solution
function cost: 136
child voicing cost: 106
Best yet: 242
New solution
function cost: 136
child voicing cost: 100
Best yet: 236
New solution
function cost: 136
child voicing cost: 92
Best yet: 228

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (6, "T", [(53, 1), (65, 1), (72, 5), (80, 3)])   
 (2, "D7-1", [(55, 5), (58, 7), (70, 7), (76, 3)])
 (0, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])   
 (2, "D7-1", [(55, 5), (58, 7), (70, 7), (76, 3)])
 (8, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])   
 (0, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])   
 (0, "S", [(46, 1), (61, 3), (70, 1), (77, 5)])   
 (16, "S", [(46, 1), (65, 5), (70, 1), (73, 3)])  
 (8, "D", [(48, 1), (64, 3), (67, 5), (72, 1)])   
 (8, "S/3", [(49, 3), (65, 5), (65, 5), (70, 1)]) 
 (6, "Ts", [(49, 1), (65, 3), (65, 3), (68, 5)])  
 (10, "S/3", [(49, 3), (65, 5), (65, 5), (70, 1)])
 (10, "D", [(48, 1), (64, 3), (67, 5), (72, 1)])  
 ?                                                
 (14, "D7", [(48, 1), (55, 5), (64, 3), (70, 7)]) 
 (12, "Ts", [(49, 1), (53, 3), (65, 3), (68, 5)]) 
 (4, "S6", [(46, 1), (58, 1), (67, 6), (73, 3)])  
 (8, "D", [(48, 1), (55, 5), (64, 3), (72, 1)])   
 (2, "D7-5", [(48, 1), (60, 1), (64, 3), (70, 7)])
 (14, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])  
 (4, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])   
 (10, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])  
 (4, "D", [(48, 1), (55, 5), (64, 3), (72, 1)])   
 (10, "D7", [(48, 1), (55, 5), (64, 3), (70, 7)]) 
 (14, "T", [(41, 1), (53, 1), (60, 5), (68, 3)])  
 (14, "T", [(41, 1), (53, 1), (60, 5), (68, 3)])  

Done. Total checked: 100438, Pruned: 110106, completed: 18, time: 2.178999900817871, efficiency: 8.260670408127984
Results: bestval_func: 136, bestval_voices: 92
(16, 409, 409, 409)
Total time for optimisation of piece: 8.242000102996826
["T", "D7-1", "T", "D7-1", "T", "T", "S", "S", "D", "S/3", "Ts", "S/3", "D", "D", "Ts", "Ts", "S", "D7-5", "T", "D", "D7", "Ts", "S6", "D", "D7-5", "T", "T", "T", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-416.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-429.csv
[1 0 0 0 0 0 0 0 0 2 0 0; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 1 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 1 0 0 0 1 0 0 0 1 1 0 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 1 0 1 0 0 0 0 2 0 0 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 1 0 1 0 0 0 0 0 0 1; 3 0 0 0 1 0 0 0 0 0 0 0; 2 0 1 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 3 0 0 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 2 0 1; 1 0 1 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 2 0 0 0 0; 1

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (60, 3), (64, 5), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (60, 3), (69, 1), (76, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (64, 5), (69, 1), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (57, 1), (60, 3), (64, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (57, 1), (64, 5), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                            
 [(2, "Tm"), (4, "D/3"), (4, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Dm"), (8, "D7-1"), (8, "T")  …  (10, "Ts"), (12, "T54"), (14, "T64"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (16, "S6"), (18, "T-5"), (20, "D-5")]             
 [(2, "D7-5"), (4, "S"), (4, "S/3"), (4, "S/5"), (4, "S6"), (6, "D-5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7")  …  (8, "D"), (8, "D/3"), (8, "D/5"), (8, "T54"), (10, "D7-1"), (10, "Dm"), (10, "S65"), (10, "T64"), (12, "T"), (22, "T-5")]                 
 [(2, "S65"), (4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T/3"), (6, "T/5")  …  (10, "Dm"), (10, "Tm"), (12, "D/3"), (12, "D/5"), (12, "D7-5"), (12, "S6"), (12, "T"), (16, "D-5"), (16, "D7-1"), (18, "T-5")]            
 [(0, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Tm"), (8, "T"), (8, "T/3"), (10, "D"), (10, "D7-1"), (10, "S65")  …  (14, "D64"), (14, "Dm"), (14, "S/3"), (14, "T64"), (16, "D7-5"), (16, "S"), (18, "T-5"), (18, "Ts"), (20, "D-5"), (20, "S6")]             
 [(2, "T"), (2, "T/3"), (6, "D/3"), (6, "T54"), (8, "D64"), (8, "S/3"), (8, "T64"), (8, "Ts"), (10, "D54"), (10, "D7-1"), (12, "D"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "T-5"), (14, "D7-5"), (16, "S65/6"), (18, "D-5"), (18, "S")]           
 [(0, "Ts"), (2, "T"), (6, "T54"), (8, "T-5"), (10, "D/3"), (12, "D64"), (12, "S65/6"), (12, "T/3"), (14, "D54"), (14, "D7-1"), (14, "S"), (14, "S/3"), (16, "D"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D7-5"), (22, "D-5")]                    
 [(4, "D7-1"), (6, "S65/6"), (8, "D/3"), (10, "S/3"), (10, "T64"), (12, "D54"), (12, "S"), (12, "T"), (12, "T/3"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (18, "D"), (18, "T-5"), (18, "Ts"), (24, "D7-5"), (28, "D-5")]                   
 [(10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "Dm"), (10, "S65"), (10, "S65/6"), (10, "Tm"), (12, "D7-1"), (12, "S"), (12, "S/3")  …  (14, "T/3"), (14, "T64"), (16, "D/3"), (16, "D54"), (16, "D7-5"), (16, "S6"), (16, "T54"), (18, "T-5"), (18, "Ts"), (20, "D-5")]
 [(10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Dm"), (10, "S65"), (10, "Tm"), (12, "D7-1"), (12, "S"), (12, "S/3")  …  (14, "D"), (14, "T/3"), (14, "T/5"), (16, "D/3"), (16, "D/5"), (16, "D7-5"), (16, "S6"), (18, "T-5"), (18, "Ts"), (20, "D-5")]   
 [(8, "D-5"), (10, "D"), (10, "Tm"), (12, "D7-5"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Dm")  …  (18, "D7-1"), (18, "S65"), (18, "Ts"), (20, "D/3"), (20, "D/5"), (20, "S"), (20, "S/3"), (20, "S/5"), (24, "S6"), (26, "T-5")]    
 [(0, "S"), (0, "S/3"), (0, "S/5"), (4, "S6"), (6, "S65"), (8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (12, "D-5"), (12, "T54"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "Dm"), (14, "Tm"), (16, "T"), (22, "T-5")]          
 [(12, "D64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S65"), (12, "T/3"), (14, "D54"), (14, "D7-1"), (14, "S"), (16, "D"), (16, "S/3"), (16, "T64"), (18, "D/3"), (18, "D7-5"), (18, "T"), (20, "Ts"), (22, "D-5"), (24, "T-5")]                  
 [(8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (8, "T/3"), (10, "D54"), (10, "D7-1"), (10, "S"), (10, "S/3"), (10, "T54"), (12, "D"), (12, "Tm"), (12, "Ts"), (14, "D/3"), (14, "D7-5"), (14, "T"), (18, "D-5"), (24, "T-5")]             
 [(12, "D/3"), (12, "S6"), (12, "T"), (12, "T/3"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65")  …  (16, "D7-1"), (16, "S"), (16, "S/3"), (16, "T54"), (18, "D"), (18, "Tm"), (18, "Ts"), (20, "D7-5"), (22, "T-5"), (24, "D-5")]    
 [(10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65"), (10, "T/3"), (12, "D54"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "T54"), (14, "D"), (14, "Tm"), (14, "Ts"), (16, "D/3"), (16, "D7-5"), (16, "T"), (20, "D-5"), (26, "T-5")]      

 0 0 0 0 0 1 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 1 1 0 0 0 0 0 0 1; 1 0 0 1 0 0 0 1 0 0 0 1]
Key Counter is [28 0 23 2 19 4 3 18 2 14 1 16]
Key Score is [122; 40; 93; 78; 56; 107; 28; 121; 55; 77; 90; 43]
Position Counter for 1 is [28 0 23 2 19 4 3 18 2 14 1 16]
Any[[1.0, 73.0, 0.0]]
[1, 73, 0]
10 A Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

5-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (60, 3), (64, 5), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (60, 3), (69, 1), (76, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (64, 5), (69, 1), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (57, 1), (60, 3), (64, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (57, 1), (64, 5), (72, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 134
child voicing cost: 177
Best yet: 311
New solution
function cost: 134
child voicing cost: 176
Best yet: 310
New solution
function cost: 134
child voicing cost: 175
Best yet: 309
New solution
function cost: 134
child voicing cost: 174
Best yet: 308
New solution
function cost: 134
child voicing cost: 167
Best yet: 301
New solution
function cost: 134
child voicing cost: 162
Best yet: 296
New solution
function cost: 134
child voicing cost: 161
Best yet: 295
New solution
function cost: 134
child voicing cost: 159
Best yet: 293
New solution
function cost: 134
child voicing cost: 158
Best yet: 292
New solution
function cost: 132
child voicing cost: 159
Best yet: 291
New solution
function cost: 136
child voicing cost: 154
Best yet: 290
New solution
function cost: 130
child voicing cost: 156
Best yet: 286
New solution
function cost: 134
child voicing cost: 151
Best yet: 285
New solution
function cost: 134
child voicing cost: 149
Best yet: 283
New solution
function cost: 136
child voicing cost: 146
Best yet: 282
New solution
function cost: 136
child voicing cost: 144
Best yet: 280
New solution
function cost: 136
child voicing cost: 142
Best yet: 278
New solution
function cost: 136
child voicing cost: 141
Best yet: 277
New solution
function cost: 136
child voicing cost: 140
Best yet: 276
New solution
function cost: 136
child voicing cost: 139
Best yet: 275
New solution
function cost: 140
child voicing cost: 132
Best yet: 272
New solution
function cost: 140
child voicing cost: 128
Best yet: 268
New solution
function cost: 144
child voicing cost: 123
Best yet: 267
New solution
function cost: 138
child voicing cost: 125
Best yet: 263
New solution
function cost: 142
child voicing cost: 120
Best yet: 262
New solution
function cost: 142
child voicing cost: 118
Best yet: 260
New solution
function cost: 134
child voicing cost: 122
Best yet: 256
New solution
function cost: 138
child voicing cost: 117
Best yet: 255
New solution
function cost: 132
child voicing cost: 119
Best yet: 251
New solution
function cost: 136
child voicing cost: 114
Best yet: 250
New solution
function cost: 136
child voicing cost: 112
Best yet: 248
New solution
function cost: 128
child voicing cost: 118
Best yet: 246
New solution
function cost: 128
child voicing cost: 116
Best yet: 244
New solution
function cost: 126
child voicing cost: 116
Best yet: 242
New solution
function cost: 130
child voicing cost: 111
Best yet: 241
New solution
function cost: 124
child voicing cost: 113
Best yet: 237
New solution
function cost: 128
child voicing cost: 108
Best yet: 236
New solution
function cost: 128
child voicing cost: 106
Best yet: 234
New solution
function cost: 130
child voicing cost: 98
Best yet: 228
New solution
function cost: 130
child voicing cost: 97
Best yet: 227
New solution
function cost: 130
child voicing cost: 96
Best yet: 226
New solution
function cost: 134
child voicing cost: 89
Best yet: 223
New solution
function cost: 134
child voicing cost: 85
Best yet: 219
New solution
function cost: 138
child voicing cost: 80
Best yet: 218
New solution
function cost: 132
child voicing cost: 82
Best yet: 214
New solution
function cost: 136
child voicing cost: 77
Best yet: 213
New solution
function cost: 136
child voicing cost: 75
Best yet: 211

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "Ts", [(53, 1), (60, 5), (69, 3), (69, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(8, "S6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Dm"), (10, "S65"), (10, "T/3"), (10, "T/5"), (12, "D7-1")  …  (12, "S/5"), (14, "D"), (14, "Tm"), (14, "Ts"), (16, "D/3"), (16, "D/5"), (16, "D7-5"), (16, "T"), (20, "D-5"), (26, "T-5")]
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (4, "Tm"), (8, "D"), (8, "D64"), (8, "S65"), (8, "S65/6"), (8, "T/3"), (10, "D/3")  …  (10, "S/3"), (10, "T54"), (12, "Dm"), (12, "T64"), (14, "D-5"), (14, "D7-1"), (14, "S6"), (14, "T"), (16, "Ts"), (24, "T-5")]        
 [(4, "Tm"), (6, "D/3"), (6, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (10, "S"), (10, "S/3"), (10, "S/5"), (12, "D"), (12, "Dm"), (12, "Ts"), (14, "D7-5"), (16, "T-5"), (18, "D-5"), (18, "S6")]            
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (8, "T/3"), (8, "T/5"), (10, "D7-1"), (10, "S"), (10, "S6")  …  (12, "S/3"), (12, "S/5"), (12, "Tm"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "D7-5"), (14, "T"), (18, "D-5"), (20, "T-5")]     
 [(0, "Dm"), (2, "D7-1"), (8, "S65"), (8, "Tm"), (10, "S6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S/3")  …  (16, "D"), (16, "D/3"), (16, "D/5"), (16, "Ts"), (18, "T54"), (20, "T-5"), (20, "T/3"), (20, "T/5"), (22, "D7-5"), (26, "D-5")] 
 [(12, "D/3"), (12, "S6"), (12, "T"), (12, "T/3"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (14, "Dm"), (14, "S65")  …  (16, "S"), (16, "S/3"), (16, "T54"), (18, "D"), (18, "T64"), (18, "Tm"), (18, "Ts"), (20, "D7-5"), (22, "T-5"), (24, "D-5")]   
 [(6, "S6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (8, "S65"), (8, "T/3"), (8, "T/5"), (10, "D7-1")  …  (10, "S/5"), (12, "D"), (12, "Tm"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "D7-5"), (14, "T"), (18, "D-5"), (24, "T-5")]        
 [(2, "T"), (2, "T/3"), (2, "T/5"), (6, "D/3"), (6, "D/5"), (8, "T64"), (12, "D"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (12, "T-5"), (12, "Tm"), (12, "Ts"), (16, "D7-1"), (18, "D7-5"), (18, "S"), (18, "S/3"), (18, "S/5"), (22, "D-5"), (22, "S6")]       
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S65"), (4, "T/3"), (4, "T/5"), (6, "S"), (6, "S/3"), (6, "S/5")  …  (8, "Ts"), (10, "D/3"), (10, "D/5"), (10, "D7-5"), (10, "T"), (14, "D-5"), (14, "D7-1"), (14, "S6"), (16, "Dm"), (20, "T-5")]         
 [(2, "D7-1"), (4, "S6"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Dm"), (8, "S"), (10, "D"), (10, "D/3"), (10, "Tm")  …  (14, "S65"), (14, "S65/6"), (14, "T/3"), (16, "D7-5"), (18, "S/3"), (18, "T64"), (20, "D-5"), (20, "T"), (22, "Ts"), (26, "T-5")]       
 [(6, "Tm"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D"), (10, "Ts"), (12, "D/3"), (12, "D/5"), (12, "D7-5"), (14, "D7")  …  (14, "D7/7"), (14, "Dm"), (16, "D-5"), (16, "D7-1"), (18, "S65"), (18, "T-5"), (20, "S"), (20, "S/3"), (20, "S/5"), (24, "S6")]       
 [(8, "T"), (10, "D64"), (10, "T/3"), (10, "T64"), (12, "D/5"), (12, "D54"), (14, "Dm"), (14, "S65/6"), (16, "D7-1"), (16, "S"), (16, "S/5"), (18, "D"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D7-5"), (24, "S6")]                           
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65/6"), (10, "D"), (10, "D/5"), (10, "D7-1"), (10, "S/5"), (10, "Tm"), (12, "D54"), (12, "S"), (12, "T54"), (14, "D64"), (14, "T/5"), (16, "D7-5"), (16, "T"), (20, "D-5")]                              
 [(4, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-1"), (8, "T"), (8, "T/5"), (10, "D"), (10, "S65/6"), (12, "D54"), (14, "D64"), (16, "D7-5"), (16, "S"), (16, "S/5"), (18, "T-5")]                                                          
 [(14, "D"), (14, "D7")]                                                                                                                                                                                                                                           
 [(22, "T")]                                                                                                                                                                                                                                                       
 [(24, "T")]                                                                                                                                                                                                                                                       

Done. Total checked: 104053, Pruned: 123253, completed: 47, time: 2.9030001163482666, efficiency: 16.19014747375281
Results: bestval_func: 136, bestval_voices: 75
(15, 399, 399, 399)
[1 0 0 0 0 0 0 0 0 2 0 0; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 1 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 1 0 0 0 1 0 0 0 1 1 0 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 1 0 1 0 0 0 0 2 0 0 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 1 0 1 0 0 0 0 0 0 1; 3 0 0 0 1 0 0 0 0 0 0 0; 2 0 1 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 3 0 0 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 2 0 1; 1 0 1 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 2 0 0 0 0; 1 0 0 0 0 0 1 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 1 1 0 0 0 0 0 0 1; 1 0 0 1 0 0 0 1 0 0 0 1]
Key Counter is [28 0 23 2 19 4 3 18 2 14 1 16]
Key Score is [122; 40; 93; 78; 56; 107; 28; 121; 55; 77; 90; 43]
Position Counter for 1 is [28 0 23 2 19 4 3 18 2 14 1 16]
Any[[1.0, 73.0, 0.0]]
[1, 73, 0]
10 A Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "Ts", [(53, 1), (60, 5), (69, 3), (69, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 176
Best yet: 350
New solution
function cost: 174
child voicing cost: 175
Best yet: 349
New solution
function cost: 178
child voicing cost: 163
Best yet: 341
New solution
function cost: 182
child voicing cost: 155
Best yet: 337
New solution
function cost: 180
child voicing cost: 155
Best yet: 335
New solution
function cost: 180
child voicing cost: 153
Best yet: 333
New solution
function cost: 180
child voicing cost: 152
Best yet: 332
New solution
function cost: 182
child voicing cost: 149
Best yet: 331
New solution
function cost: 168
child voicing cost: 162
Best yet: 330
New solution
function cost: 172
child voicing cost: 155
Best yet: 327
New solution
function cost: 172
child voicing cost: 150
Best yet: 322
New solution
function cost: 172
child voicing cost: 148
Best yet: 320
New solution
function cost: 172
child voicing cost: 144
Best yet: 316
New solution
function cost: 172
child voicing cost: 143
Best yet: 315
New solution
function cost: 172
child voicing cost: 142
Best yet: 314
New solution
function cost: 168
child voicing cost: 143
Best yet: 311
New solution
function cost: 168
child voicing cost: 139
Best yet: 307
New solution
function cost: 152
child voicing cost: 154
Best yet: 306
New solution
function cost: 152
child voicing cost: 152
Best yet: 304
New solution
function cost: 152
child voicing cost: 147
Best yet: 299
New solution
function cost: 156
child voicing cost: 142
Best yet: 298
New solution
function cost: 156
child voicing cost: 141
Best yet: 297
New solution
function cost: 156
child voicing cost: 138
Best yet: 294
New solution
function cost: 162
child voicing cost: 131
Best yet: 293
New solution
function cost: 162
child voicing cost: 126
Best yet: 288
New solution
function cost: 162
child voicing cost: 124
Best yet: 286
New solution
function cost: 180
child voicing cost: 104
Best yet: 284
New solution
function cost: 180
child voicing cost: 102
Best yet: 282
New solution
function cost: 154
child voicing cost: 126
Best yet: 280
New solution
function cost: 162
child voicing cost: 116
Best yet: 278
New solution
function cost: 162
child voicing cost: 112
Best yet: 274
New solution
function cost: 162
child voicing cost: 111
Best yet: 273
New solution
function cost: 152
child voicing cost: 119
Best yet: 271
New solution
function cost: 152
child voicing cost: 114
Best yet: 266
New solution
function cost: 152
child voicing cost: 105
Best yet: 257
New solution
function cost: 152
child voicing cost: 100
Best yet: 252
New solution
function cost: 140
child voicing cost: 95
Best yet: 235
New solution
function cost: 140
child voicing cost: 90
Best yet: 230

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(57, 1), (57, 1), (64, 5), (72, 3)])   
 (6, "Dm", [(55, 1), (59, 3), (67, 1), (74, 5)])  
 (4, "S/3", [(53, 3), (62, 1), (69, 5), (74, 1)]) 
 (4, "S", [(50, 1), (65, 3), (69, 5), (74, 1)])   
 (0, "D/3", [(56, 3), (64, 1), (71, 5), (76, 1)]) 
 (2, "T", [(57, 1), (64, 5), (69, 1), (72, 3)])   
 (14, "S", [(50, 1), (62, 1), (69, 5), (77, 3)])  
 (12, "S", [(50, 1), (62, 1), (69, 5), (77, 3)])  
 (10, "D7", [(52, 1), (62, 7), (68, 3), (71, 5)]) 
 (18, "Ts", [(53, 1), (60, 5), (69, 3), (69, 3)]) 
 (10, "D", [(52, 1), (64, 1), (68, 3), (71, 5)])  
 (0, "S/3", [(53, 3), (62, 1), (69, 5), (74, 1)]) 
 (16, "D", [(52, 1), (59, 5), (68, 3), (76, 1)])  
 ?                                                
 (12, "T", [(45, 1), (64, 5), (69, 1), (72, 3)])  
 (6, "S6", [(50, 1), (62, 1), (65, 3), (71, 6)])  
 (2, "T/3", [(48, 3), (64, 5), (64, 5), (69, 1)]) 
 (6, "S", [(50, 1), (62, 1), (65, 3), (69, 5)])   
 (2, "D7-1", [(47, 5), (62, 7), (62, 7), (68, 3)])
 (8, "T", [(45, 1), (60, 3), (64, 5), (69, 1)])   
 (8, "T", [(45, 1), (57, 1), (64, 5), (72, 3)])   
 (6, "D7/3", [(44, 3), (59, 5), (64, 1), (74, 7)])
 (8, "T", [(45, 1), (64, 5), (69, 1), (72, 3)])   
 (14, "D", [(52, 1), (64, 1), (68, 3), (71, 5)])  
 (22, "T", [(45, 1), (64, 5), (69, 1), (72, 3)])  
 (22, "T", [(45, 1), (64, 5), (69, 1), (72, 3)])  

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (66, 3), (69, 5), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (62, 1), (69, 5), (78, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                        
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]        
 [(0, "Ts"), (8, "T/3"), (8, "T/5"), (10, "S"), (10, "S/3"), (10, "S/5"), (10, "T"), (10, "Tm"), (12, "D7-5"), (12, "S65")  …  (14, "S6"), (14, "Ss"), (16, "D-5"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D/3"), (20, "D/5"), (22, "D7-1")]  
 [(0, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D/3"), (8, "D/5"), (8, "D7-5"), (10, "D"), (10, "S")  …  (12, "S65/6"), (12, "T54"), (14, "D7-1"), (14, "Ts"), (16, "S/3"), (16, "S/5"), (16, "T64"), (18, "S6"), (18, "Ss"), (20, "T-5")]     
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (6, "D"), (6, "D/3"), (6, "D7-1"), (6, "S6"), (6, "Ss"), (8, "D54"), (8, "T54")  …  (10, "T/3"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "Ts"), (16, "D-5"), (16, "D64"), (16, "S/3"), (16, "T64"), (20, "T-5")]     
 [(4, "Ss"), (8, "D7-1"), (8, "S"), (10, "D64"), (10, "D7-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D-5"), (14, "D54"), (14, "S65/6"), (16, "D"), (16, "D/3"), (16, "T"), (16, "T/3"), (18, "S/3"), (18, "T64"), (20, "Ts"), (26, "T-5")]   
 [(2, "S"), (2, "S/3"), (4, "S65"), (6, "S6"), (8, "D64"), (8, "T/3"), (8, "T64"), (8, "Ts"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "T"), (12, "D54"), (12, "D7-5"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3")]          
 [(2, "Ts"), (4, "S/3"), (4, "T64"), (6, "T"), (6, "T/3"), (8, "S65"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D/3"), (12, "D64"), (14, "D"), (14, "D7-1"), (14, "S"), (16, "D54"), (16, "D7-5"), (18, "Ss"), (20, "D-5")]         
 [(8, "D7-1"), (8, "S"), (8, "T"), (8, "T/3"), (10, "S65"), (10, "S65/6"), (10, "T-5"), (10, "T54"), (10, "Tm"), (12, "D7")  …  (12, "Ss"), (12, "Ts"), (14, "D/3"), (14, "D64"), (14, "S/3"), (14, "T64"), (16, "D"), (18, "D54"), (18, "D7-5"), (22, "D-5")]     
 [(2, "Ts"), (6, "S/3"), (6, "S/5"), (6, "T64"), (8, "S"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "T/3"), (10, "T/5")  …  (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "D/5"), (20, "D7-1")]
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S6"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7-1")  …  (10, "Tm"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "D7-5"), (14, "S/3"), (14, "S/5"), (16, "Ts"), (18, "D-5"), (22, "T-5")]         
 [(6, "S6"), (6, "Ss"), (8, "Tm"), (10, "D7"), (10, "D7-1"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "S/3")  …  (14, "D"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "D-5"), (16, "D/3"), (16, "D/5"), (16, "T64"), (18, "Ts"), (24, "T-5")]     
 [(0, "T-5"), (10, "T"), (12, "S65/6"), (12, "Ts"), (16, "D/3"), (18, "D7"), (18, "D7-1"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (18, "S"), (18, "S/3"), (20, "D54"), (20, "D64"), (20, "T/3"), (20, "Tm"), (22, "D"), (22, "Ss"), (24, "D7-5"), (28, "D-5")]  
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "D/3"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "D"), (8, "D7-1"), (8, "Ts"), (10, "D64"), (12, "S6"), (14, "D7-5"), (14, "T-5"), (16, "S"), (16, "S/3"), (18, "D-5")]              
 [(4, "D"), (6, "D54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (8, "Tm"), (10, "D-5")  …  (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "S"), (12, "Ts"), (14, "D/3"), (16, "S6"), (18, "D7-1"), (18, "S65/6"), (18, "T-5")]       
 [(6, "D-5"), (8, "S"), (8, "S/3"), (10, "D54"), (10, "D64"), (10, "D7-5"), (10, "Ts"), (12, "D"), (12, "T"), (12, "T/3"), (12, "Tm"), (14, "S65/6"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (20, "D7-1"), (22, "D/3"), (22, "T-5")]                

Done. Total checked: 190932, Pruned: 210931, completed: 38, time: 3.9830000400543213, efficiency: 9.540547230193285
Results: bestval_func: 140, bestval_voices: 90
(16, 399, 399, 399)
Total time for optimisation of piece: 9.115000009536743
["T", "Dm", "S/3", "S", "D/3", "T", "S", "S", "D7", "Ts", "D", "S/3", "D", "D7", "Ts", "Ts", "D7", "T", "D7-1", "D7-1", "T", "S6", "T/3", "S", "D7-1", "T", "T", "D7/3", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-429.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-442.csv
[0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 0 0 1 0 0 2 0 1 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 0 1 1 0 0 0 1 0 0 0 0 1; 0 1 1 0 0 0 2 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 0 0 1 0 0 1 0 1 0 1; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 1 1 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 0 0 0 2 0 1; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 0 0 0 0 0 2 0 1 0 1; 1 0 0 0 0 0 0 2 0 0 0 1; 0 0 0 0 1 0 0 2 0 0 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 0 0 0 0 1 0 1 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 1 0 0 0 2]
Key Counter is [3 9 26 0 14 0 15 18 0 27 0 20]
Key Score is [108; 27; 129; 47; 85; 88; 44; 123; 30; 111; 74; 58]
Position Counter for 3 is [26 0 14 0 15 18 0 27 0 20 3 9]
Any[[3.0, 87.75, 1.0]]
[3, 88, 1]
3 D Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (66, 3), (69, 5), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(50, 1), (62, 1), (69, 5), (78, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 106
child voicing cost: 170
Best yet: 276
New solution
function cost: 106
child voicing cost: 139
Best yet: 245
New solution
function cost: 106
child voicing cost: 134
Best yet: 240
New solution
function cost: 106
child voicing cost: 131
Best yet: 237
New solution
function cost: 106
child voicing cost: 128
Best yet: 234
New solution
function cost: 106
child voicing cost: 122
Best yet: 228
New solution
function cost: 106
child voicing cost: 119
Best yet: 225
New solution
function cost: 106
child voicing cost: 118
Best yet: 224
New solution
function cost: 106
child voicing cost: 115
Best yet: 221
New solution
function cost: 96
child voicing cost: 123
Best yet: 219
New solution
function cost: 96
child voicing cost: 116
Best yet: 212
New solution
function cost: 96
child voicing cost: 115
Best yet: 211
New solution
function cost: 96
child voicing cost: 114
Best yet: 210
New solution
function cost: 94
child voicing cost: 113
Best yet: 207
New solution
function cost: 94
child voicing cost: 111
Best yet: 205
New solution
function cost: 94
child voicing cost: 108
Best yet: 202
New solution
function cost: 96
child voicing cost: 105
Best yet: 201
New solution
function cost: 102
child voicing cost: 98
Best yet: 200
New solution
function cost: 102
child voicing cost: 97
Best yet: 199
New solution
function cost: 100
child voicing cost: 97
Best yet: 197
New solution
function cost: 94
child voicing cost: 101
Best yet: 195
New solution
function cost: 94
child voicing cost: 98
Best yet: 192
New solution
function cost: 96
child voicing cost: 95
Best yet: 191
New solution
function cost: 94
child voicing cost: 96
Best yet: 190
New solution
function cost: 94
child voicing cost: 94
Best yet: 188
New solution
function cost: 94
child voicing cost: 91
Best yet: 185
New solution
function cost: 96
child voicing cost: 88
Best yet: 184
New solution
function cost: 102
child voicing cost: 81
Best yet: 183
New solution
function cost: 102
child voicing cost: 80
Best yet: 182
New solution
function cost: 100
child voicing cost: 80
Best yet: 180
New solution
function cost: 98
child voicing cost: 80
Best yet: 178
New solution
function cost: 98
child voicing cost: 79
Best yet: 177
New solution
function cost: 108
child voicing cost: 67
Best yet: 175
New solution
function cost: 106
child voicing cost: 67
Best yet: 173
New solution
function cost: 106
child voicing cost: 66
Best yet: 172
New solution
function cost: 98
child voicing cost: 71
Best yet: 169
New solution
function cost: 98
child voicing cost: 69
Best yet: 167
New solution
function cost: 108
child voicing cost: 57
Best yet: 165
New solution
function cost: 98
child voicing cost: 66
Best yet: 164
New solution
function cost: 98
child voicing cost: 65
Best yet: 163
New solution
function cost: 98
child voicing cost: 62
Best yet: 160
New solution
function cost: 94
child voicing cost: 63
Best yet: 157

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "D", [(57, 1), (61, 3), (69, 1), (76, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "D-5"), (8, "S"), (8, "S/3"), (8, "S/5"), (10, "D64"), (10, "D7-5"), (10, "T54"), (10, "Ts"), (12, "D"), (12, "S6")  …  (14, "T64"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "Ss"), (20, "D7-1"), (22, "D/3"), (22, "D/5"), (22, "T-5")]   
 [(0, "T/3"), (4, "D54"), (4, "T54"), (6, "D"), (6, "T"), (8, "D64"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/7")  …  (12, "S65"), (12, "S65/6"), (14, "S"), (14, "S/3"), (16, "D/3"), (16, "Ss"), (16, "T-5"), (16, "Ts"), (18, "S6"), (20, "D7-1")]        
 [(0, "S/3"), (0, "S/5"), (0, "T64"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "T"), (8, "Ss"), (8, "T-5")  …  (14, "D"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5"), (20, "D/3"), (20, "D/5")]          
 [(8, "D7-5"), (8, "Tm"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "S6"), (10, "Ss"), (12, "D-5")  …  (14, "D/3"), (14, "D/5"), (14, "D7-1"), (16, "S65"), (16, "S65/6"), (16, "Ts"), (18, "T"), (20, "S/3"), (20, "S/5"), (28, "T-5")]
 [(4, "S"), (8, "S6"), (8, "Ss"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "Tm"), (12, "D7-1"), (14, "D-5"), (14, "S/3")  …  (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "T"), (16, "T/3"), (16, "T/5"), (20, "D"), (20, "D/3"), (20, "D/5"), (22, "T-5")] 
 [(0, "S6"), (0, "Ss"), (4, "D7-1"), (4, "S"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "S65"), (10, "S65/6"), (12, "D")  …  (14, "S/3"), (14, "T54"), (14, "T64"), (16, "T"), (16, "T/3"), (16, "Ts"), (18, "D7-5"), (18, "Tm"), (22, "D-5"), (22, "T-5")]        
 [(2, "S"), (2, "S/3"), (2, "S/5"), (4, "S65"), (4, "S65/6"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "T64")  …  (10, "D7/7"), (10, "T"), (12, "D7-5"), (12, "T54"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3"), (20, "D/5")]         
 [(4, "D"), (4, "D/3"), (4, "D/5"), (6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-5")  …  (12, "S"), (12, "Ts"), (14, "D-5"), (14, "Tm"), (16, "S6"), (16, "Ss"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "T-5")]          
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]         
 [(4, "D/3"), (6, "T"), (6, "T/3"), (8, "D54"), (8, "D7-1"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D"), (10, "D7")  …  (12, "D64"), (12, "Ss"), (12, "T-5"), (12, "Tm"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "T64"), (18, "S6"), (20, "D-5")]          
 [(4, "D/3"), (4, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D7-1"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D")  …  (12, "Ss"), (12, "T-5"), (12, "Tm"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "S/5"), (16, "T64"), (18, "S6"), (20, "D-5")]          
 [(0, "T/5"), (4, "D54"), (6, "D"), (6, "T"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D7-5"), (12, "S65/6"), (14, "S"), (14, "S/5"), (16, "D/5"), (16, "T-5"), (18, "S6"), (20, "D7-1")]                               
 [(0, "D64"), (0, "T/5"), (4, "D54"), (4, "D7-5"), (6, "D"), (8, "Ts"), (10, "S"), (10, "S/5"), (10, "T"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Ss"), (16, "D/5"), (16, "S65/6"), (18, "D7-1")]                                              
 [(2, "T64"), (4, "T"), (6, "S65/6"), (6, "T54"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/5"), (14, "D/5"), (14, "D54"), (14, "D64"), (14, "T/5"), (16, "D"), (16, "D7-1"), (16, "Ss"), (18, "D7-5")]                              
 [(12, "D7"), (16, "D")]                                                                                                                                                                                                                                            
 [(14, "T")]                                                                                                                                                                                                                                                        
 [(10, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 157525, Pruned: 189450, completed: 42, time: 3.258999824523926, efficiency: 12.887389463463796
Results: bestval_func: 94, bestval_voices: 63
(15, 381, 381, 381)
[0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 0 0 1 0 0 2 0 1 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 0 1 1 0 0 0 1 0 0 0 0 1; 0 1 1 0 0 0 2 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 0 0 1 0 0 1 0 1 0 1; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 1 1 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 0 0 0 2 0 1; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 0 0 0 0 0 2 0 1 0 1; 1 0 0 0 0 0 0 2 0 0 0 1; 0 0 0 0 1 0 0 2 0 0 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 0 0 0 0 1 0 1 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 1 0 0 0 2]
Key Counter is [3 9 26 0 14 0 15 18 0 27 0 20]
Key Score is [108; 27; 129; 47; 85; 88; 44; 123; 30; 111; 74; 58]
Position Counter for 3 is [26 0 14 0 15 18 0 27 0 20 3 9]
Any[[3.0, 87.75, 1.0]]
[3, 88, 1]
3 D Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "D", [(57, 1), (61, 3), (69, 1), (76, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 94
child voicing cost: 196
Best yet: 290
New solution
function cost: 94
child voicing cost: 195
Best yet: 289
New solution
function cost: 94
child voicing cost: 193
Best yet: 287
New solution
function cost: 94
child voicing cost: 181
Best yet: 275
New solution
function cost: 94
child voicing cost: 180
Best yet: 274
New solution
function cost: 94
child voicing cost: 178
Best yet: 272
New solution
function cost: 94
child voicing cost: 177
Best yet: 271
New solution
function cost: 94
child voicing cost: 176
Best yet: 270
New solution
function cost: 94
child voicing cost: 174
Best yet: 268
New solution
function cost: 94
child voicing cost: 166
Best yet: 260
New solution
function cost: 94
child voicing cost: 165
Best yet: 259
New solution
function cost: 94
child voicing cost: 163
Best yet: 257
New solution
function cost: 100
child voicing cost: 154
Best yet: 254
New solution
function cost: 104
child voicing cost: 145
Best yet: 249
New solution
function cost: 94
child voicing cost: 154
Best yet: 248
New solution
function cost: 94
child voicing cost: 153
Best yet: 247
New solution
function cost: 94
child voicing cost: 151
Best yet: 245
New solution
function cost: 94
child voicing cost: 150
Best yet: 244
New solution
function cost: 96
child voicing cost: 147
Best yet: 243
New solution
function cost: 96
child voicing cost: 145
Best yet: 241
New solution
function cost: 100
child voicing cost: 139
Best yet: 239
New solution
function cost: 100
child voicing cost: 136
Best yet: 236
New solution
function cost: 96
child voicing cost: 138
Best yet: 234
New solution
function cost: 100
child voicing cost: 130
Best yet: 230
New solution
function cost: 100
child voicing cost: 129
Best yet: 229
New solution
function cost: 100
child voicing cost: 127
Best yet: 227
New solution
function cost: 98
child voicing cost: 123
Best yet: 221
New solution
function cost: 98
child voicing cost: 122
Best yet: 220
New solution
function cost: 98
child voicing cost: 120
Best yet: 218

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(50, 1), (62, 1), (69, 5), (78, 3)])   
 (0, "D/3", [(49, 3), (64, 5), (69, 1), (76, 5)]) 
 (0, "Ts", [(47, 1), (66, 5), (71, 1), (74, 3)])  
 (0, "Tm", [(54, 1), (66, 1), (69, 3), (73, 5)])  
 (10, "S", [(55, 1), (62, 5), (67, 1), (71, 3)])  
 (8, "D7-1", [(52, 5), (64, 5), (67, 7), (73, 3)])
 (10, "T", [(50, 1), (66, 3), (69, 5), (74, 1)])  
 (6, "T", [(50, 1), (62, 1), (69, 5), (78, 3)])   
 (8, "D7-1", [(52, 5), (61, 3), (67, 7), (76, 5)])
 (2, "Ts", [(59, 1), (62, 3), (66, 5), (74, 3)])  
 (4, "S6", [(55, 1), (59, 3), (67, 1), (76, 6)])  
 (10, "D7", [(57, 1), (61, 3), (67, 7), (76, 5)]) 
 (12, "Ts", [(59, 1), (62, 3), (66, 5), (74, 3)]) 
 ?                                                
 (0, "S6", [(55, 1), (59, 3), (67, 1), (76, 6)])  
 (6, "S6", [(55, 1), (64, 6), (71, 3), (79, 1)])  
 (4, "D", [(57, 1), (64, 5), (69, 1), (73, 3)])   
 (0, "D", [(57, 1), (64, 5), (69, 1), (73, 3)])   
 (6, "T/3", [(54, 3), (62, 1), (69, 5), (74, 1)]) 
 (8, "S65", [(55, 1), (62, 5), (64, 6), (71, 3)]) 
 (6, "D", [(57, 1), (61, 3), (64, 5), (69, 1)])   
 (4, "D7-5", [(57, 1), (61, 3), (67, 7), (69, 1)])
 (4, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])   
 (12, "D7", [(57, 1), (61, 3), (64, 5), (67, 7)]) 
 (14, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])  
 (14, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])  

Done. Total checked: 58885, Pruned: 66197, completed: 29, time: 1.8519999980926514, efficiency: 15.658747316342705
Results: bestval_func: 98, bestval_voices: 120
(16, 381, 381, 381)
Total time for optimisation of piece: 6.812999963760376
["T", "D/3", "Ts", "Tm", "S", "D7-1", "T", "T", "D7-1", "Ts", "S6", "D7", "Ts", "Ts", "D", "D", "T/3", "S/3", "D7", "Ts", "S6", "S6", "D", "D", "T/3", "S65", "D", "D7-5", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-442.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-455.csv
[1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 0 0 0 0 0 1 0 1 1 0; 1 0 0 0 0 1 0 1 0 1 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 0 1; 1 0 1 0 0 0 0 0 0 1 1 0; 0 0 2 0 0 2 0 0 0 0 0 0; 0 0 1 0 0 2 0 0 0 1 0 0; 1 0 0 1 0 1 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 2 0 1 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 1 1 1 0 0 0 0; 1 0 0 0 0 1 0 0 0 1 0 1; 1 0 0 0 1 0 0 1 0 0 1 0; 0 0 1 0 0 2 0 0 0 0 1 0; 0 0 2 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 0 1 0 0 0 2 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 1 0 0 1 0 1 0 0; 1 0 2 0 0 0 0 1 0 0 0 0]
Key Counter is [32 2 16 1 3 28 2 16 0 15 14 3]
Key Score is [113; 79; 57; 107; 26; 124; 50; 87; 93; 41; 122; 25]
Position Counter for 6 is [28 2 16 0 15 14 3 32 2 16 1 3]
Any[[6.0, 87.25, 1.0]]
[6, 87, 1]
6 F Major

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (57, 3), (60, 5), (65, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (57, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (60, 5), (69, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (60, 5), (65, 1), (69, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (53, 1), (57, 3), (60, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (65, 1), (69, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (53, 1), (60, 5), (69, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                       
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3")  …  (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]        
 [(2, "S"), (2, "S/3"), (2, "S/5"), (6, "S6"), (8, "D7-5"), (8, "S65"), (8, "S65/6"), (8, "T/3"), (8, "T/5"), (10, "D7")  …  (12, "D-5"), (12, "Ss"), (12, "T64"), (12, "Ts"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "T"), (20, "T-5")]         
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3")  …  (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]        
 [(4, "D64"), (4, "D7-5"), (4, "T/3"), (6, "S"), (6, "S/3"), (6, "Tm"), (8, "D-5"), (8, "D54"), (8, "T54"), (8, "Ts")  …  (10, "Ss"), (10, "T"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (18, "D7-1"), (20, "T-5")]      
 [(6, "D64"), (6, "D7-5"), (8, "D"), (10, "D54"), (14, "D-5"), (14, "Ts"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S"), (16, "S/3"), (16, "S6"), (16, "T"), (16, "T/3"), (18, "D/3"), (18, "T54"), (20, "D7-1"), (22, "S65/6"), (26, "T-5")]  
 [(6, "Ss"), (8, "D64"), (8, "T/3"), (8, "Tm"), (10, "D7"), (10, "D7-1"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "S/3"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (14, "D"), (14, "D/3"), (14, "T"), (16, "D-5"), (16, "Ts"), (24, "T-5")]    
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "D/3"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "D"), (8, "D7-1"), (10, "D64"), (12, "S6"), (14, "D7-5"), (14, "T-5"), (14, "Ts"), (16, "S"), (16, "S/3"), (18, "D-5")]            
 [(0, "D54"), (2, "D"), (2, "D/3"), (4, "D64"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (8, "D7-5"), (8, "S65"), (8, "S65/6")  …  (10, "T/3"), (12, "D-5"), (12, "T64"), (12, "Tm"), (12, "Ts"), (14, "S6"), (14, "Ss"), (18, "S"), (18, "S/3"), (20, "T-5")]        
 [(2, "S65"), (2, "S65/6"), (6, "T64"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "Ts")  …  (12, "D7/5"), (12, "D7/7"), (12, "S6"), (12, "Ss"), (12, "Tm"), (14, "D7-5"), (14, "T-5"), (14, "T54"), (16, "T"), (18, "D-5")]         
 [(6, "Tm"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "T/3"), (10, "T/5"), (12, "D"), (12, "D/3"), (12, "D/5")  …  (12, "S6"), (12, "Ss"), (14, "D7-5"), (14, "S65"), (14, "S65/6"), (14, "Ts"), (16, "D7-1"), (16, "T"), (18, "D-5"), (26, "T-5")] 
 [(0, "Ts"), (8, "T64"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "T"), (16, "Ss")  …  (18, "D7/5"), (18, "D7/7"), (18, "S"), (18, "S/3"), (18, "S/5"), (18, "Tm"), (20, "D-5"), (20, "D7-5"), (22, "S6"), (24, "D7-1")]
 [(0, "Ts"), (4, "T"), (6, "S65/6"), (6, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D64"), (14, "T/3"), (16, "D"), (16, "D/3"), (16, "D7-1"), (16, "Ss"), (18, "D7-5"), (22, "D-5")]                
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/3"), (6, "T"), (6, "T/3"), (8, "D64"), (8, "Ts"), (10, "D"), (10, "D/3"), (10, "D7-1"), (10, "Ss"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (12, "Tm"), (16, "D-5"), (16, "T-5")]          
 [(4, "S"), (4, "S/3"), (6, "D64"), (6, "D7-5"), (6, "T/3"), (6, "T54"), (6, "Ts"), (8, "Ss"), (8, "T"), (10, "D-5"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D54"), (16, "D"), (16, "D/3"), (16, "D7-1"), (18, "T-5")]        
 [(2, "D64"), (2, "D7-5"), (2, "T/3"), (6, "D-5"), (6, "D54"), (8, "D"), (8, "S"), (8, "S/3"), (10, "T54"), (10, "Ts"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Ss"), (12, "T"), (14, "S65/6"), (16, "D7-1"), (18, "D/3"), (22, "T-5")]       

Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (57, 3), (60, 5), (65, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (57, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (60, 5), (69, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (60, 5), (65, 1), (69, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (53, 1), (57, 3), (60, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (65, 1), (69, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(53, 1), (53, 1), (60, 5), (69, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 78
child voicing cost: 216
Best yet: 294
New solution
function cost: 78
child voicing cost: 202
Best yet: 280
New solution
function cost: 78
child voicing cost: 197
Best yet: 275
New solution
function cost: 78
child voicing cost: 195
Best yet: 273
New solution
function cost: 78
child voicing cost: 192
Best yet: 270
New solution
function cost: 78
child voicing cost: 190
Best yet: 268
New solution
function cost: 78
child voicing cost: 189
Best yet: 267
New solution
function cost: 78
child voicing cost: 187
Best yet: 265
New solution
function cost: 78
child voicing cost: 184
Best yet: 262
New solution
function cost: 78
child voicing cost: 179
Best yet: 257
New solution
function cost: 78
child voicing cost: 178
Best yet: 256
New solution
function cost: 80
child voicing cost: 174
Best yet: 254
New solution
function cost: 80
child voicing cost: 172
Best yet: 252
New solution
function cost: 80
child voicing cost: 171
Best yet: 251
New solution
function cost: 78
child voicing cost: 171
Best yet: 249
New solution
function cost: 78
child voicing cost: 166
Best yet: 244
New solution
function cost: 78
child voicing cost: 164
Best yet: 242
New solution
function cost: 78
child voicing cost: 161
Best yet: 239
New solution
function cost: 78
child voicing cost: 159
Best yet: 237
New solution
function cost: 78
child voicing cost: 158
Best yet: 236
New solution
function cost: 78
child voicing cost: 156
Best yet: 234
New solution
function cost: 78
child voicing cost: 153
Best yet: 231
New solution
function cost: 78
child voicing cost: 148
Best yet: 226
New solution
function cost: 78
child voicing cost: 147
Best yet: 225
New solution
function cost: 78
child voicing cost: 146
Best yet: 224
New solution
function cost: 78
child voicing cost: 144
Best yet: 222
New solution
function cost: 78
child voicing cost: 143
Best yet: 221
New solution
function cost: 78
child voicing cost: 140
Best yet: 218
New solution
function cost: 78
child voicing cost: 135
Best yet: 213
New solution
function cost: 78
child voicing cost: 132
Best yet: 210
New solution
function cost: 78
child voicing cost: 131
Best yet: 209
New solution
function cost: 78
child voicing cost: 129
Best yet: 207
New solution
function cost: 78
child voicing cost: 128
Best yet: 206
New solution
function cost: 78
child voicing cost: 126
Best yet: 204
New solution
function cost: 78
child voicing cost: 125
Best yet: 203
New solution
function cost: 78
child voicing cost: 124
Best yet: 202
New solution
function cost: 78
child voicing cost: 123
Best yet: 201
New solution
function cost: 78
child voicing cost: 118
Best yet: 196
New solution
function cost: 78
child voicing cost: 117
Best yet: 195
New solution
function cost: 80
child voicing cost: 113
Best yet: 193
New solution
function cost: 80
child voicing cost: 112
Best yet: 192
New solution
function cost: 78
child voicing cost: 113
Best yet: 191
New solution
function cost: 78
child voicing cost: 112
Best yet: 190
New solution
function cost: 80
child voicing cost: 109
Best yet: 189
New solution
function cost: 80
child voicing cost: 108
Best yet: 188
New solution
function cost: 80
child voicing cost: 107
Best yet: 187
New solution
function cost: 80
child voicing cost: 103
Best yet: 183
New solution
function cost: 80
child voicing cost: 102
Best yet: 182
New solution
function cost: 80
child voicing cost: 101
Best yet: 181
New solution
function cost: 80
child voicing cost: 99
Best yet: 179
New solution
function cost: 80
child voicing cost: 94
Best yet: 174
New solution
function cost: 80
child voicing cost: 93
Best yet: 173
New solution
function cost: 80
child voicing cost: 90
Best yet: 170
New solution
function cost: 80
child voicing cost: 85
Best yet: 165
New solution
function cost: 80
child voicing cost: 82
Best yet: 162
New solution
function cost: 80
child voicing cost: 81
Best yet: 161
New solution
function cost: 80
child voicing cost: 79
Best yet: 159
New solution
function cost: 80
child voicing cost: 78
Best yet: 158
New solution
function cost: 80
child voicing cost: 75
Best yet: 155
New solution
function cost: 80
child voicing cost: 74
Best yet: 154
New solution
function cost: 80
child voicing cost: 69
Best yet: 149
New solution
function cost: 80
child voicing cost: 68
Best yet: 148
New solution
function cost: 80
child voicing cost: 63
Best yet: 143
New solution
function cost: 80
child voicing cost: 62
Best yet: 142

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(41, 1), (60, 5), (69, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "D7-5"), (2, "T/3"), (2, "T/5"), (6, "D-5"), (8, "D"), (8, "S"), (8, "S/3"), (8, "S/5"), (10, "T54"), (10, "Tm")  …  (12, "S6"), (12, "Ss"), (12, "T"), (14, "S65"), (14, "S65/6"), (14, "T64"), (16, "D7-1"), (18, "D/3"), (18, "D/5"), (22, "T-5")]  
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (4, "D54"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "D"), (6, "D/3"), (6, "D7-1")  …  (8, "Tm"), (10, "S6"), (10, "Ss"), (12, "D64"), (12, "D7-5"), (14, "S"), (14, "S/3"), (16, "D-5"), (16, "T-5"), (16, "Ts")]   
 [(4, "D"), (4, "D/3"), (4, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (10, "D-5")  …  (14, "S65"), (14, "S65/6"), (14, "T54"), (14, "Tm"), (14, "Ts"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "T64"), (26, "T-5")]  
 [(4, "D/3"), (4, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D7-1"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (12, "Ss"), (12, "T-5"), (12, "Tm"), (14, "D"), (16, "S/3"), (16, "S/5"), (18, "S"), (18, "S6"), (20, "D7-5"), (24, "D-5")]
 [(2, "T/3"), (2, "T/5"), (4, "Tm"), (6, "D7-5"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "S"), (8, "S/3"), (8, "S/5")  …  (12, "D7/7"), (12, "S6"), (12, "Ss"), (12, "T"), (14, "S65"), (14, "S65/6"), (14, "T54"), (16, "D7-1"), (18, "T64"), (22, "T-5")]   
 [(0, "D7"), (0, "D7/3"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D7-1"), (6, "D54"), (6, "S65"), (6, "S65/6"), (6, "T54")  …  (8, "T"), (8, "T/3"), (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "Ts"), (14, "D-5"), (14, "D64"), (16, "S"), (18, "T-5")]   
 [(0, "S/3"), (0, "S/5"), (0, "T64"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "T"), (8, "Ss"), (8, "T-5")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5")]   
 [(6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (10, "S/3"), (10, "S/5")  …  (12, "S"), (12, "Ts"), (14, "D64"), (14, "D7-5"), (14, "T/3"), (14, "T/5"), (14, "Tm"), (16, "T"), (18, "D-5"), (18, "T-5")]
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3")  …  (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]   
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "T"), (6, "Tm"), (8, "D54"), (8, "D7-5"), (8, "T54")  …  (10, "Ss"), (12, "D-5"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (16, "T-5"), (18, "D7-1")] 
 [(2, "D"), (2, "D/3"), (2, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-5"), (8, "S65"), (8, "S65/6")  …  (12, "D-5"), (12, "T64"), (12, "Tm"), (12, "Ts"), (14, "S6"), (14, "Ss"), (18, "S"), (18, "S/3"), (18, "S/5"), (20, "T-5")]  
 [(2, "D"), (2, "D/5"), (2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "D54"), (6, "D7-1"), (8, "D64"), (8, "D7-5"), (8, "S65/6"), (8, "T/5"), (10, "S6"), (10, "T"), (12, "S/3"), (12, "T64"), (18, "S")]                                            
 [(6, "D64"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/5"), (8, "T"), (10, "D/5"), (10, "D54"), (10, "D7-5"), (10, "S65/6"), (12, "D"), (12, "Ss"), (14, "T64"), (16, "D7-1")]                                         
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "Ss"), (8, "D"), (8, "D/5"), (8, "D7-1"), (8, "S"), (8, "S/5"), (10, "D54"), (10, "D64"), (10, "D7-5"), (10, "S65/6"), (10, "T/5"), (10, "Tm"), (12, "T"), (14, "T64")]                              
 [(12, "D"), (12, "D7")]                                                                                                                                                                                                                                     
 [(14, "T")]                                                                                                                                                                                                                                                 
 [(6, "T")]                                                                                                                                                                                                                                                  

Done. Total checked: 124925, Pruned: 142842, completed: 64, time: 2.4809999465942383, efficiency: 25.796050535130078
Results: bestval_func: 80, bestval_voices: 62
(15, 404, 404, 404)
[1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 0 0 0 0 0 1 0 1 1 0; 1 0 0 0 0 1 0 1 0 1 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 0 1; 1 0 1 0 0 0 0 0 0 1 1 0; 0 0 2 0 0 2 0 0 0 0 0 0; 0 0 1 0 0 2 0 0 0 1 0 0; 1 0 0 1 0 1 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 2 0 1 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 1 1 1 0 0 0 0; 1 0 0 0 0 1 0 0 0 1 0 1; 1 0 0 0 1 0 0 1 0 0 1 0; 0 0 1 0 0 2 0 0 0 0 1 0; 0 0 2 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 0 1 0 0 0 2 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 2 0 0 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 1 0 0 1 0 1 0 0; 1 0 2 0 0 0 0 1 0 0 0 0]
Key Counter is [32 2 16 1 3 28 2 16 0 15 14 3]
Key Score is [113; 79; 57; 107; 26; 124; 50; 87; 93; 41; 122; 25]
Position Counter for 6 is [28 2 16 0 15 14 3 32 2 16 1 3]
Any[[6.0, 87.25, 1.0]]
[6, 87, 1]
6 F Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(41, 1), (60, 5), (69, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 112
child voicing cost: 190
Best yet: 302
New solution
function cost: 112
child voicing cost: 176
Best yet: 288
New solution
function cost: 112
child voicing cost: 173
Best yet: 285
New solution
function cost: 112
child voicing cost: 159
Best yet: 271
New solution
function cost: 112
child voicing cost: 156
Best yet: 268
New solution
function cost: 112
child voicing cost: 155
Best yet: 267
New solution
function cost: 112
child voicing cost: 153
Best yet: 265
New solution
function cost: 112
child voicing cost: 148
Best yet: 260
New solution
function cost: 112
child voicing cost: 141
Best yet: 253
New solution
function cost: 112
child voicing cost: 140
Best yet: 252
New solution
function cost: 112
child voicing cost: 136
Best yet: 248
New solution
function cost: 112
child voicing cost: 133
Best yet: 245
New solution
function cost: 112
child voicing cost: 132
Best yet: 244
New solution
function cost: 112
child voicing cost: 128
Best yet: 240
New solution
function cost: 102
child voicing cost: 131
Best yet: 233
New solution
function cost: 108
child voicing cost: 124
Best yet: 232
New solution
function cost: 108
child voicing cost: 116
Best yet: 224
New solution
function cost: 108
child voicing cost: 114
Best yet: 222
New solution
function cost: 108
child voicing cost: 111
Best yet: 219
New solution
function cost: 98
child voicing cost: 118
Best yet: 216
New solution
function cost: 98
child voicing cost: 116
Best yet: 214
New solution
function cost: 98
child voicing cost: 115
Best yet: 213
New solution
function cost: 108
child voicing cost: 102
Best yet: 210
New solution
function cost: 108
child voicing cost: 99
Best yet: 207
New solution
function cost: 98
child voicing cost: 106
Best yet: 204
New solution
function cost: 98
child voicing cost: 104
Best yet: 202
New solution
function cost: 98
child voicing cost: 102
Best yet: 200
New solution
function cost: 98
child voicing cost: 101
Best yet: 199
New solution
function cost: 100
child voicing cost: 96
Best yet: 196
New solution
function cost: 100
child voicing cost: 95
Best yet: 195
New solution
function cost: 94
child voicing cost: 96
Best yet: 190
New solution
function cost: 94
child voicing cost: 94
Best yet: 188
New solution
function cost: 96
child voicing cost: 91
Best yet: 187
New solution
function cost: 96
child voicing cost: 89
Best yet: 185
New solution
function cost: 96
child voicing cost: 87
Best yet: 183
New solution
function cost: 98
child voicing cost: 84
Best yet: 182
New solution
function cost: 98
child voicing cost: 82
Best yet: 180
New solution
function cost: 98
child voicing cost: 80
Best yet: 178

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(53, 1), (53, 1), (60, 5), (69, 3)])   
 (0, "T", [(53, 1), (53, 1), (60, 5), (69, 3)])   
 (2, "S/3", [(50, 3), (53, 5), (65, 5), (70, 1)]) 
 (0, "T/5", [(48, 5), (57, 3), (65, 1), (72, 5)]) 
 (6, "S", [(46, 1), (58, 1), (65, 5), (74, 3)])   
 (6, "D7-5", [(48, 1), (58, 7), (64, 3), (72, 1)])
 (14, "T", [(53, 1), (57, 3), (65, 1), (72, 5)])  
 (4, "T", [(53, 1), (60, 5), (65, 1), (69, 3)])   
 (2, "D/3", [(52, 3), (60, 1), (67, 5), (72, 1)]) 
 (8, "Ts", [(50, 1), (57, 5), (65, 3), (74, 1)])  
 (8, "D7", [(48, 1), (58, 7), (67, 5), (76, 3)])  
 (0, "Ts", [(50, 1), (57, 5), (65, 3), (77, 3)])  
 (0, "Ts", [(50, 1), (57, 5), (65, 3), (74, 1)])  
 ?                                                
 (0, "D7", [(48, 1), (67, 5), (70, 7), (76, 3)])  
 (2, "Ts", [(50, 1), (65, 3), (69, 5), (77, 3)])  
 (8, "S6", [(46, 1), (62, 3), (70, 1), (79, 6)])  
 (0, "T/3", [(45, 3), (65, 1), (72, 5), (77, 1)]) 
 (6, "S", [(46, 1), (65, 5), (70, 1), (74, 3)])   
 (2, "D", [(48, 1), (64, 3), (67, 5), (72, 1)])   
 (2, "D7/3", [(52, 3), (60, 1), (67, 5), (70, 7)])
 (8, "T", [(53, 1), (60, 5), (65, 1), (69, 3)])   
 (8, "D", [(48, 1), (60, 1), (64, 3), (67, 5)])   
 (12, "D7", [(48, 1), (58, 7), (64, 3), (67, 5)]) 
 (14, "T", [(41, 1), (57, 3), (65, 1), (72, 5)])  
 (14, "T", [(41, 1), (57, 3), (65, 1), (72, 5)])  

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (59, 3), (62, 5), (67, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (59, 3), (67, 1), (74, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (62, 5), (71, 3), (79, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (62, 5), (67, 1), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (67, 1), (71, 3), (74, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (55, 1), (62, 5), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(10, "T")]                                                                                                                                                                                                                                                     
 [(0, "D"), (0, "D/3"), (0, "D/5"), (0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D7-1"), (4, "Tm"), (6, "D7-5")  …  (6, "T54"), (8, "S6"), (8, "Ss"), (10, "D-5"), (10, "S/3"), (10, "S/5"), (10, "T64"), (10, "Ts"), (12, "S"), (12, "T-5")]          
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D/5"), (4, "D7-1"), (6, "S65"), (6, "S65/6")  …  (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D7-5"), (10, "S/3"), (10, "S/5"), (12, "Ts"), (14, "D-5"), (16, "S"), (18, "T-5")]       
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3")  …  (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]       
 [(2, "Ts"), (6, "S"), (6, "S/3"), (6, "S65"), (6, "S65/6"), (6, "T64"), (8, "D7"), (8, "D7-5"), (8, "D7/3"), (8, "D7/7")  …  (10, "T/3"), (10, "T54"), (10, "Tm"), (12, "D"), (12, "D-5"), (12, "D/3"), (12, "D7-1"), (12, "T"), (14, "D54"), (14, "T-5")]      
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D7-1"), (6, "D54"), (6, "S65/6"), (6, "Tm")  …  (8, "T"), (8, "T/3"), (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "Ts"), (14, "D-5"), (14, "D64"), (16, "S"), (18, "T-5")]       
 [(2, "T"), (2, "T/3"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "D/3"), (10, "D7-1"), (10, "S"), (10, "S/3"), (12, "D64"), (12, "D7-5"), (12, "T-5"), (12, "Ts"), (14, "Ss"), (16, "D-5")]       
 [(0, "T/3"), (4, "D54"), (6, "D"), (6, "T"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D7-5"), (12, "S65/6"), (14, "D7-1"), (14, "S"), (14, "S/3"), (16, "D/3"), (16, "T-5"), (16, "Ts"), (18, "Ss")]                
 [(2, "T"), (2, "T/3"), (4, "T54"), (8, "D/3"), (8, "T64"), (12, "D54"), (12, "D64"), (12, "D7-1"), (12, "S65"), (12, "S65/6")  …  (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (14, "S"), (14, "S/3"), (16, "D7-5"), (16, "Ss"), (20, "D-5"), (22, "S6")] 
 [(2, "S"), (2, "S/3"), (2, "S/5"), (4, "S65"), (4, "S65/6"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "T64")  …  (10, "D7/7"), (10, "T"), (12, "D7-5"), (12, "T54"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (16, "D-5"), (16, "T-5")]      
 [(0, "S"), (0, "S/3"), (0, "S/5"), (4, "S6"), (6, "S65"), (6, "S65/6"), (10, "D7-5"), (10, "Ss"), (10, "T/3"), (10, "T/5")  …  (12, "T"), (14, "D-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "T-5"), (20, "D"), (20, "D/3"), (20, "D/5")]  
 [(4, "S6"), (4, "Ss"), (8, "D7-1"), (8, "S"), (10, "D7-5"), (10, "T/3"), (10, "T/5"), (10, "Tm"), (12, "D7"), (12, "D7/3")  …  (14, "T54"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "T"), (18, "S/3"), (18, "S/5"), (18, "T64"), (18, "Ts"), (26, "T-5")]     
 [(4, "D64"), (4, "T/3"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/3"), (8, "D54"), (8, "D7-5"), (8, "S65/6"), (10, "D"), (10, "D/3"), (10, "S6"), (10, "T"), (12, "D-5"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]           
 [(0, "D/3"), (4, "D54"), (6, "D"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D7-5"), (12, "S65/6"), (14, "D7-1"), (14, "T"), (14, "T/3"), (16, "D-5"), (16, "Tm"), (16, "Ts"), (18, "Ss"), (22, "S"), (22, "S/3"), (24, "T-5")]   
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "D/3"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "D"), (8, "D7-1"), (10, "D64"), (12, "S6"), (14, "D7-5"), (14, "T-5"), (14, "Ts"), (16, "S"), (16, "S/3"), (18, "D-5")]           
 [(4, "Ss"), (8, "D7-1"), (8, "S"), (10, "D64"), (10, "D7-5"), (10, "T/3"), (10, "Tm"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (14, "D-5"), (14, "D54"), (14, "S65/6"), (16, "D"), (16, "D/3"), (16, "T"), (18, "S/3"), (18, "T64"), (18, "Ts"), (26, "T-5")]

Done. Total checked: 258968, Pruned: 283699, completed: 38, time: 5.269999980926514, efficiency: 7.210626212055367
Results: bestval_func: 98, bestval_voices: 80
(16, 404, 404, 404)
Total time for optimisation of piece: 9.736000061035156
["T", "T", "S/3", "T/5", "S", "D7-5", "T", "T", "D/3", "Ts", "D7", "Ts", "Ts", "D", "T", "T", "D7", "Ts", "D/3", "Ts", "D7", "Ts", "S6", "T/3", "S", "D", "D7/3", "T", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-455.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-468.csv
[2 0 0 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 0 0 2 0 0 0 0 0 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 1 0 0 1 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 0 0 2 0 0 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 1 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 2 0 1 0 0 0 0 0 0 0 0 1; 2 0 0 0 0 0 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 1 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 3 0 0 0 0 0 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1]
Key Counter is [27 0 32 0 8 2 4 26 0 15 2 14]
Key Score is [124; 35; 99; 89; 41; 112; 22; 126; 57; 73; 104; 28]
Position Counter for 8 is [26 0 15 2 14 27 0 32 0 8 2 4]
Any[[8.0, 96.25, 1.0]]
[8, 96, 1]
8 G Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (59, 3), (62, 5), (67, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (59, 3), (67, 1), (74, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (62, 5), (71, 3), (79, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (62, 5), (67, 1), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (67, 1), (71, 3), (74, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(10, "T", [(55, 1), (55, 1), (62, 5), (71, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 78
child voicing cost: 167
Best yet: 245
New solution
function cost: 76
child voicing cost: 167
Best yet: 243
New solution
function cost: 76
child voicing cost: 166
Best yet: 242
New solution
function cost: 76
child voicing cost: 165
Best yet: 241
New solution
function cost: 78
child voicing cost: 157
Best yet: 235
New solution
function cost: 78
child voicing cost: 155
Best yet: 233
New solution
function cost: 62
child voicing cost: 166
Best yet: 228
New solution
function cost: 62
child voicing cost: 158
Best yet: 220
New solution
function cost: 66
child voicing cost: 153
Best yet: 219
New solution
function cost: 66
child voicing cost: 149
Best yet: 215
New solution
function cost: 66
child voicing cost: 146
Best yet: 212
New solution
function cost: 66
child voicing cost: 142
Best yet: 208
New solution
function cost: 66
child voicing cost: 140
Best yet: 206
New solution
function cost: 66
child voicing cost: 132
Best yet: 198
New solution
function cost: 66
child voicing cost: 125
Best yet: 191
New solution
function cost: 66
child voicing cost: 121
Best yet: 187
New solution
function cost: 76
child voicing cost: 109
Best yet: 185
New solution
function cost: 76
child voicing cost: 105
Best yet: 181
New solution
function cost: 66
child voicing cost: 113
Best yet: 179

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(55, 1), (59, 3), (62, 5), (67, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "S6"), (4, "Ss"), (8, "D7-1"), (8, "S"), (10, "D7-5"), (10, "T/3"), (10, "T/5"), (10, "Tm"), (12, "D7"), (12, "D7/3")  …  (14, "T54"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "T"), (18, "S/3"), (18, "S/5"), (18, "T64"), (18, "Ts"), (26, "T-5")]     
 [(4, "D64"), (4, "T/3"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S"), (6, "S/3"), (8, "D54"), (8, "D7-5")  …  (10, "D"), (10, "D/3"), (10, "S6"), (10, "Ss"), (10, "T"), (12, "D-5"), (12, "T64"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]          
 [(4, "T/3"), (4, "T/5"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/3"), (6, "S/5")  …  (10, "D/3"), (10, "D/5"), (10, "S6"), (10, "Ss"), (10, "T"), (12, "D-5"), (12, "T64"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]        
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "S65"), (4, "S65/6"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "D7-1")  …  (8, "Tm"), (10, "S6"), (10, "Ss"), (12, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D-5"), (16, "T-5"), (16, "Ts")]      
 [(0, "T/3"), (0, "T/5"), (2, "Tm"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3"), (10, "S/5")  …  (14, "D7/7"), (14, "S6"), (14, "Ss"), (16, "D/3"), (16, "D/5"), (16, "S65"), (16, "S65/6"), (16, "T64"), (18, "D7-1"), (20, "T-5")]   
 [(0, "T"), (0, "T/3"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64")  …  (10, "Tm"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]       
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "T"), (6, "Tm"), (8, "D7-5"), (8, "T54")  …  (12, "D-5"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "T-5"), (18, "D7-1")]   
 [(8, "D54"), (8, "S65"), (8, "S65/6"), (10, "D"), (10, "D/3"), (10, "D/5"), (10, "T"), (12, "T-5"), (12, "T/3"), (12, "T/5")  …  (14, "D7/7"), (14, "S"), (14, "S/3"), (14, "S/5"), (14, "Tm"), (16, "D-5"), (16, "D7-5"), (18, "D7-1"), (18, "S6"), (18, "Ss")]
 [(2, "D"), (2, "D/3"), (2, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-5"), (10, "D7-1"), (10, "S6")  …  (14, "S/3"), (14, "S/5"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "S65"), (16, "S65/6"), (16, "Ts"), (20, "T64"), (24, "T-5")] 
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (6, "Tm"), (8, "D"), (8, "S6"), (10, "D/3"), (10, "D54"), (10, "D7-5"), (10, "T54")  …  (14, "D64"), (14, "D7-1"), (14, "S65"), (14, "S65/6"), (14, "Ss"), (14, "Ts"), (16, "S"), (16, "S/3"), (18, "T64"), (22, "T-5")]  
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7-5"), (6, "T/3"), (6, "T/5"), (6, "T54"), (6, "Ts"), (8, "S6"), (8, "Ss")  …  (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "D7-1"), (18, "T-5")]       
 [(0, "Ss"), (4, "D7-1"), (4, "S"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "S65/6"), (12, "D"), (12, "D/5"), (14, "D54"), (14, "D64"), (14, "D7-5"), (14, "S/5"), (14, "T/5"), (14, "T64"), (16, "T"), (18, "D-5")]                              
 [(12, "S"), (14, "D64"), (14, "D7-5"), (14, "T/3"), (14, "Tm"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D54"), (18, "D7-1"), (18, "S65/6"), (20, "D"), (20, "D/5"), (20, "T"), (22, "S/5"), (22, "Ts")]                                     
 [(8, "D64"), (8, "S/5"), (8, "T/5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (12, "D54"), (12, "D7-1"), (12, "D7-5"), (12, "S65/6"), (14, "D"), (14, "D/5"), (14, "T"), (16, "Ss"), (16, "Ts")]                                        
 [(8, "D7"), (12, "D")]                                                                                                                                                                                                                                          
 [(10, "T")]                                                                                                                                                                                                                                                     
 [(20, "T")]                                                                                                                                                                                                                                                     

Done. Total checked: 96822, Pruned: 110681, completed: 19, time: 1.9940001964569092, efficiency: 9.52858481847727
Results: bestval_func: 66, bestval_voices: 113
(15, 405, 405, 405)
[2 0 0 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 0 0 2 0 0 0 0 0 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 1 0 0 1 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 0 0 2 0 0 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 1 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 2 0 1 0 0 0 0 0 0 0 0 1; 2 0 0 0 0 0 0 1 0 0 0 1; 1 0 0 0 0 0 0 1 0 1 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 3 0 0 0 0 0 0 0 0 1; 1 0 1 0 0 0 0 1 0 0 0 1]
Key Counter is [27 0 32 0 8 2 4 26 0 15 2 14]
Key Score is [124; 35; 99; 89; 41; 112; 22; 126; 57; 73; 104; 28]
Position Counter for 8 is [26 0 15 2 14 27 0 32 0 8 2 4]
Any[[8.0, 96.25, 1.0]]
[8, 96, 1]
8 G Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(55, 1), (59, 3), (62, 5), (67, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 118
child voicing cost: 206
Best yet: 324
New solution
function cost: 118
child voicing cost: 203
Best yet: 321
New solution
function cost: 114
child voicing cost: 186
Best yet: 300
New solution
function cost: 114
child voicing cost: 184
Best yet: 298
New solution
function cost: 114
child voicing cost: 181
Best yet: 295
New solution
function cost: 114
child voicing cost: 179
Best yet: 293
New solution
function cost: 114
child voicing cost: 177
Best yet: 291
New solution
function cost: 114
child voicing cost: 175
Best yet: 289
New solution
function cost: 114
child voicing cost: 173
Best yet: 287
New solution
function cost: 108
child voicing cost: 178
Best yet: 286
New solution
function cost: 108
child voicing cost: 175
Best yet: 283
New solution
function cost: 108
child voicing cost: 166
Best yet: 274
New solution
function cost: 108
child voicing cost: 163
Best yet: 271
New solution
function cost: 108
child voicing cost: 161
Best yet: 269
New solution
function cost: 108
child voicing cost: 159
Best yet: 267
New solution
function cost: 108
child voicing cost: 155
Best yet: 263
New solution
function cost: 116
child voicing cost: 141
Best yet: 257
New solution
function cost: 116
child voicing cost: 140
Best yet: 256
New solution
function cost: 116
child voicing cost: 136
Best yet: 252
New solution
function cost: 108
child voicing cost: 142
Best yet: 250
New solution
function cost: 108
child voicing cost: 136
Best yet: 244
New solution
function cost: 112
child voicing cost: 125
Best yet: 237
New solution
function cost: 118
child voicing cost: 117
Best yet: 235
New solution
function cost: 118
child voicing cost: 115
Best yet: 233
New solution
function cost: 118
child voicing cost: 111
Best yet: 229
New solution
function cost: 118
child voicing cost: 108
Best yet: 226
New solution
function cost: 118
child voicing cost: 102
Best yet: 220

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (10, "T", [(55, 1), (55, 1), (62, 5), (71, 3)])  
 (0, "D", [(50, 1), (62, 1), (66, 3), (69, 5)])   
 (0, "D7", [(50, 1), (60, 7), (69, 5), (78, 3)])  
 (10, "Ts", [(52, 1), (59, 5), (67, 3), (79, 3)]) 
 (6, "S", [(48, 1), (60, 1), (67, 5), (76, 3)])   
 (0, "D7", [(50, 1), (60, 7), (66, 3), (69, 5)])  
 (2, "T", [(43, 1), (59, 3), (67, 1), (74, 5)])   
 (6, "T", [(43, 1), (55, 1), (62, 5), (71, 3)])   
 (2, "T/3", [(47, 3), (55, 1), (62, 5), (67, 1)]) 
 (2, "S", [(48, 1), (55, 5), (60, 1), (64, 3)])   
 (4, "S6", [(48, 1), (57, 6), (60, 1), (64, 3)])  
 (4, "S6", [(48, 1), (57, 6), (60, 1), (64, 3)])  
 (10, "D", [(50, 1), (54, 3), (57, 5), (62, 1)])  
 ?                                                
 (0, "T", [(43, 1), (55, 1), (62, 5), (71, 3)])   
 (6, "S/5", [(43, 5), (52, 3), (60, 1), (72, 1)]) 
 (10, "T", [(43, 1), (55, 1), (62, 5), (71, 3)])  
 (2, "D/5", [(45, 5), (54, 3), (62, 1), (69, 5)]) 
 (12, "T/3", [(47, 3), (55, 1), (62, 5), (67, 1)])
 (4, "S", [(48, 1), (52, 3), (60, 1), (67, 5)])   
 (4, "S", [(48, 1), (52, 3), (60, 1), (67, 5)])   
 (12, "S", [(48, 1), (55, 5), (60, 1), (64, 3)])  
 (8, "D64", [(50, 1), (55, 4), (59, 6), (62, 1)]) 
 (12, "D", [(50, 1), (54, 3), (57, 5), (62, 1)])  
 (10, "T", [(43, 1), (55, 1), (59, 3), (62, 5)])  
 (10, "T", [(43, 1), (55, 1), (59, 3), (62, 5)])  

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (55, 3), (58, 5), (63, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (67, 3), (70, 5), (75, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (58, 5), (67, 3), (75, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (63, 1), (67, 3), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (51, 1), (58, 5), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(12, "T")]                                                                                                                                                                                                                                                          
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D/3"), (6, "D/5"), (6, "S65")  …  (10, "T64"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (14, "T-5"), (14, "Ts"), (16, "S6"), (16, "Ss"), (18, "D-5")]            
 [(0, "S65"), (0, "S65/6"), (4, "S/3"), (4, "S/5"), (4, "Ss"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S")  …  (10, "D/5"), (10, "D7-1"), (10, "S6"), (10, "T"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (20, "D-5")]         
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "S"), (16, "Ts"), (20, "S6"), (20, "Ss"), (22, "T-5")]          
 [(0, "T"), (0, "T/3"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64")  …  (10, "Tm"), (10, "Ts"), (12, "D"), (12, "D7-1"), (14, "D7-5"), (16, "S"), (16, "S/3"), (18, "D-5"), (20, "S6"), (20, "Ss")]            
 [(2, "T"), (4, "T64"), (8, "S65/6"), (8, "T-5"), (8, "Ts"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D54")  …  (12, "T/3"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "S"), (14, "S/3"), (14, "Tm"), (16, "D7-5"), (18, "Ss"), (20, "D-5")]      
 [(8, "D7-5"), (10, "S"), (10, "S/3"), (12, "D64"), (12, "T/3"), (12, "T54"), (12, "Ts"), (14, "D"), (14, "D/3"), (14, "D7")  …  (14, "D7/5"), (14, "D7/7"), (14, "Ss"), (14, "T"), (16, "D54"), (16, "S65/6"), (16, "Tm"), (18, "D7-1"), (20, "D-5"), (24, "T-5")]   
 [(4, "D7-1"), (4, "S65/6"), (8, "S/3"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "Ts"), (12, "D54"), (14, "D"), (14, "D/3"), (14, "T"), (16, "T-5"), (20, "D64"), (20, "D7-5"), (20, "T/3"), (24, "D-5")]                   
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (4, "S6"), (4, "Ss"), (8, "D7-1"), (8, "S"), (10, "D64"), (10, "D7-5"), (10, "S65")  …  (10, "Tm"), (10, "Ts"), (12, "T"), (14, "D-5"), (14, "D54"), (14, "S/3"), (14, "T64"), (16, "D"), (16, "D/3"), (22, "T-5")]            
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "S/5"), (8, "T64"), (10, "D7"), (10, "D7/3")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "T"), (16, "T-5"), (16, "Tm"), (20, "D7-5"), (20, "T/3"), (20, "T/5"), (24, "D-5")]         
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "Ts"), (10, "D7-1")  …  (10, "T"), (10, "Tm"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (14, "D"), (14, "D/3"), (14, "D/5"), (16, "D-5"), (20, "T-5")]         
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "T"), (6, "Tm"), (8, "D7-5"), (8, "T54")  …  (12, "D-5"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "T-5"), (18, "D7-1")]        
 [(6, "Ts"), (10, "D-5"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D64"), (14, "D7-5"), (14, "S65/6"), (14, "T/3"), (14, "T54")  …  (16, "D/3"), (16, "S6"), (16, "T"), (18, "Ss"), (18, "T-5"), (20, "D7"), (20, "D7/3"), (20, "D7/5"), (20, "D7/7"), (24, "D7-1")]
 [(4, "D"), (4, "D/3"), (6, "D54"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D64"), (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "D7-1"), (12, "S"), (12, "Ts"), (14, "D-5"), (16, "S6"), (16, "T"), (16, "T/3"), (18, "T-5")]           
 [(10, "D/3"), (10, "T-5"), (12, "D"), (12, "T"), (12, "T/3"), (14, "D54"), (14, "D7-1"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "Ts"), (18, "D-5"), (18, "D64"), (18, "D7-5"), (18, "S/3"), (18, "T64"), (22, "S65/6"), (28, "S")]               
 [(4, "D/3"), (6, "T"), (6, "T/3"), (8, "D54"), (8, "D7-1"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Ts"), (12, "D64"), (12, "S/3"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (16, "S65/6"), (20, "D-5"), (22, "S")]                     

Done. Total checked: 95211, Pruned: 103694, completed: 27, time: 1.9229998588562012, efficiency: 14.040562653010063
Results: bestval_func: 118, bestval_voices: 102
(16, 405, 405, 405)
Total time for optimisation of piece: 5.988999843597412
["T", "D", "D7", "Ts", "S", "D7", "T", "T", "T/3", "S", "S6", "S6", "D", "D/3", "T", "T", "D64", "D7-5", "T", "T/3", "T", "S/5", "T", "D/5", "T/3", "S", "S", "S", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-468.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-481.csv
[2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 0 1; 2 0 0 0 0 0 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 0 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 2 1 0 0 0 0 0 0 1 0; 0 0 1 1 0 1 0 0 0 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 0 0 2 0 0 1 0; 0 0 0 0 0 3 0 0 1 0 0 0; 1 0 0 0 2 0 0 0 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 1 0 1 0 0 0 0 1 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 0 1 1 0]
Key Counter is [23 0 11 19 2 22 0 14 13 1 26 1]
Key Score is [74; 103; 29; 128; 36; 99; 81; 52; 117; 28; 116; 61]
Position Counter for 4 is [19 2 22 0 14 13 1 26 1 23 0 11]
Any[[4.0, 78.25, 1.0]]
[4, 78, 1]
4 D# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (55, 3), (58, 5), (63, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (67, 3), (70, 5), (75, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (55, 3), (63, 1), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (58, 5), (67, 3), (75, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (58, 5), (63, 1), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (63, 1), (67, 3), (70, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(51, 1), (51, 1), (58, 5), (67, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 84
child voicing cost: 184
Best yet: 268
New solution
function cost: 84
child voicing cost: 153
Best yet: 237
New solution
function cost: 84
child voicing cost: 148
Best yet: 232
New solution
function cost: 84
child voicing cost: 145
Best yet: 229
New solution
function cost: 84
child voicing cost: 142
Best yet: 226
New solution
function cost: 84
child voicing cost: 137
Best yet: 221
New solution
function cost: 84
child voicing cost: 134
Best yet: 218
New solution
function cost: 84
child voicing cost: 131
Best yet: 215
New solution
function cost: 84
child voicing cost: 125
Best yet: 209
New solution
function cost: 84
child voicing cost: 122
Best yet: 206
New solution
function cost: 84
child voicing cost: 121
Best yet: 205
New solution
function cost: 84
child voicing cost: 118
Best yet: 202
New solution
function cost: 86
child voicing cost: 109
Best yet: 195
New solution
function cost: 82
child voicing cost: 112
Best yet: 194
New solution
function cost: 78
child voicing cost: 115
Best yet: 193
New solution
function cost: 78
child voicing cost: 112
Best yet: 190
New solution
function cost: 78
child voicing cost: 111
Best yet: 189
New solution
function cost: 86
child voicing cost: 100
Best yet: 186
New solution
function cost: 86
child voicing cost: 95
Best yet: 181
New solution
function cost: 86
child voicing cost: 92
Best yet: 178
New solution
function cost: 86
child voicing cost: 89
Best yet: 175
New solution
function cost: 86
child voicing cost: 88
Best yet: 174
New solution
function cost: 84
child voicing cost: 87
Best yet: 171
New solution
function cost: 86
child voicing cost: 82
Best yet: 168
New solution
function cost: 94
child voicing cost: 73
Best yet: 167
New solution
function cost: 94
child voicing cost: 69
Best yet: 163
New solution
function cost: 94
child voicing cost: 68
Best yet: 162
New solution
function cost: 94
child voicing cost: 67
Best yet: 161
New solution
function cost: 86
child voicing cost: 70
Best yet: 156
New solution
function cost: 86
child voicing cost: 67
Best yet: 153
New solution
function cost: 86
child voicing cost: 64
Best yet: 150

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(51, 1), (63, 1), (70, 5), (79, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "D/3"), (4, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D7-1"), (8, "T54"), (10, "D"), (10, "D7"), (10, "D7/3")  …  (12, "T-5"), (12, "T64"), (12, "Tm"), (16, "D7-5"), (16, "S65"), (16, "S65/6"), (20, "D-5"), (20, "Ss"), (22, "S"), (26, "S6")]            
 [(2, "T"), (2, "T/3"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Ts"), (8, "D/3"), (8, "D64"), (8, "S/3")  …  (10, "D7-1"), (12, "D54"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (16, "D-5"), (18, "S"), (22, "S6"), (22, "Ss")]            
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D/5"), (4, "D7-1"), (6, "S65"), (6, "S65/6")  …  (10, "D7-5"), (10, "S/3"), (10, "S/5"), (10, "Ss"), (10, "T64"), (12, "S"), (12, "Ts"), (14, "D-5"), (16, "S6"), (18, "T-5")]           
 [(2, "T"), (2, "T/3"), (2, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ts"), (8, "D/3"), (8, "D/5")  …  (10, "D"), (10, "D7-1"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (16, "D-5"), (18, "S"), (22, "S6"), (22, "Ss")]             
 [(10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "T/3"), (12, "T/5"), (12, "Ts"), (14, "S"), (14, "S/3"), (14, "S/5")  …  (16, "S65"), (16, "S65/6"), (16, "T54"), (18, "D"), (18, "D/3"), (18, "D/5"), (18, "D7-1"), (20, "D-5"), (20, "T64"), (24, "T-5")]
 [(14, "S65"), (14, "S65/6"), (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (16, "S6"), (16, "Ss"), (18, "D54"), (18, "D7-1")  …  (20, "D"), (20, "D/3"), (20, "S"), (20, "T"), (20, "T/3"), (20, "Ts"), (22, "Tm"), (26, "D64"), (26, "D7-5"), (30, "D-5")]     
 [(4, "S/3"), (4, "S/5"), (4, "S65"), (4, "S65/6"), (4, "Ss"), (4, "T64"), (6, "Ts"), (8, "D7-1"), (8, "T54"), (10, "D7")  …  (10, "T"), (10, "T/3"), (10, "T/5"), (12, "T-5"), (14, "D"), (16, "Tm"), (20, "D/3"), (20, "D/5"), (20, "D7-5"), (24, "D-5")]             
 [(8, "S65"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S6"), (10, "Ss"), (10, "Ts"), (12, "T/3")  …  (14, "S/3"), (14, "S/5"), (14, "T"), (14, "Tm"), (16, "D7-5"), (16, "T-5"), (18, "D"), (18, "D/3"), (18, "D/5"), (20, "D-5")]     
 [(6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (10, "S/3"), (10, "S/5")  …  (14, "T/3"), (14, "T/5"), (14, "T54"), (14, "Tm"), (16, "T"), (18, "D-5"), (18, "T-5"), (20, "D"), (20, "D/3"), (20, "D/5")]           
 [(0, "S6"), (0, "Ss"), (4, "D7-1"), (4, "S"), (10, "S65"), (10, "S65/6"), (14, "D64"), (14, "D7-5"), (14, "S/3"), (14, "T/3")  …  (16, "D7/3"), (16, "D7/7"), (16, "Ts"), (18, "D-5"), (18, "D54"), (18, "T54"), (20, "D"), (20, "D/3"), (20, "T"), (22, "T-5")]       
 [(0, "S65"), (0, "S65/6"), (4, "S/3"), (4, "S/5"), (4, "Ss"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7")  …  (10, "D/5"), (10, "D7-1"), (10, "S6"), (10, "T"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (20, "D-5")]         
 [(4, "D/5"), (6, "T"), (6, "T/5"), (8, "D54"), (8, "D7-1"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D64"), (12, "S/5"), (12, "T64"), (16, "D7-5"), (16, "S65/6"), (20, "Ss"), (22, "S")]                                                
 [(6, "S/5"), (8, "D"), (8, "D/5"), (10, "D54"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "T"), (12, "T/5"), (14, "D-5"), (14, "D64"), (14, "D7-5"), (14, "T-5"), (16, "S"), (18, "D7-1")]                                             
 [(0, "D64"), (0, "T/5"), (4, "D54"), (4, "D7-5"), (6, "D"), (8, "Ts"), (10, "S"), (10, "S/5"), (10, "T"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Ss"), (16, "D/5"), (16, "S65/6"), (18, "D7-1")]                                                  
 [(0, "D"), (4, "D7")]                                                                                                                                                                                                                                                  
 [(8, "T")]                                                                                                                                                                                                                                                             
 [(10, "T")]                                                                                                                                                                                                                                                            

Done. Total checked: 147484, Pruned: 169492, completed: 31, time: 2.940999984741211, efficiency: 10.540632492634236
Results: bestval_func: 86, bestval_voices: 64
(15, 381, 381, 381)
[2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 0 1; 2 0 0 0 0 0 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 0 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 2 1 0 0 0 0 0 0 1 0; 0 0 1 1 0 1 0 0 0 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 0 0 2 0 0 1 0; 0 0 0 0 0 3 0 0 1 0 0 0; 1 0 0 0 2 0 0 0 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 1 0 1 0 0 0 0 1 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 0 1 1 0]
Key Counter is [23 0 11 19 2 22 0 14 13 1 26 1]
Key Score is [74; 103; 29; 128; 36; 99; 81; 52; 117; 28; 116; 61]
Position Counter for 4 is [19 2 22 0 14 13 1 26 1 23 0 11]
Any[[4.0, 78.25, 1.0]]
[4, 78, 1]
4 D# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(51, 1), (63, 1), (70, 5), (79, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 98
child voicing cost: 182
Best yet: 280
New solution
function cost: 98
child voicing cost: 174
Best yet: 272
New solution
function cost: 98
child voicing cost: 172
Best yet: 270
New solution
function cost: 98
child voicing cost: 166
Best yet: 264
New solution
function cost: 98
child voicing cost: 164
Best yet: 262
New solution
function cost: 98
child voicing cost: 160
Best yet: 258
New solution
function cost: 98
child voicing cost: 152
Best yet: 250
New solution
function cost: 96
child voicing cost: 148
Best yet: 244
New solution
function cost: 96
child voicing cost: 146
Best yet: 242
New solution
function cost: 98
child voicing cost: 135
Best yet: 233
New solution
function cost: 98
child voicing cost: 134
Best yet: 232
New solution
function cost: 100
child voicing cost: 131
Best yet: 231
New solution
function cost: 100
child voicing cost: 128
Best yet: 228
New solution
function cost: 98
child voicing cost: 124
Best yet: 222
New solution
function cost: 100
child voicing cost: 120
Best yet: 220
New solution
function cost: 100
child voicing cost: 118
Best yet: 218
New solution
function cost: 100
child voicing cost: 110
Best yet: 210
New solution
function cost: 100
child voicing cost: 104
Best yet: 204

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (12, "T", [(51, 1), (51, 1), (58, 5), (67, 3)])   
 (4, "D7/3", [(50, 3), (53, 5), (58, 1), (68, 7)]) 
 (6, "Ts", [(48, 1), (55, 5), (63, 3), (72, 1)])   
 (0, "D", [(46, 1), (58, 1), (65, 5), (74, 3)])    
 (0, "T", [(51, 1), (58, 5), (67, 3), (75, 1)])    
 (2, "T", [(51, 1), (63, 1), (70, 5), (79, 3)])    
 (10, "S", [(56, 1), (63, 5), (72, 3), (80, 1)])   
 (10, "S", [(56, 1), (63, 5), (72, 3), (80, 1)])   
 (4, "S6", [(56, 1), (65, 6), (72, 3), (80, 1)])   
 (10, "D7", [(58, 1), (62, 3), (68, 7), (77, 5)])  
 (8, "Ts", [(60, 1), (63, 3), (67, 5), (75, 3)])   
 (4, "Ts", [(60, 1), (63, 3), (67, 5), (72, 1)])   
 (6, "Ts", [(60, 1), (63, 3), (67, 5), (75, 3)])   
 ?                                                 
 (14, "T-5", [(51, 1), (63, 1), (67, 3), (75, 1)]) 
 (4, "S/3", [(48, 3), (63, 5), (68, 1), (80, 1)])  
 (10, "D7/3", [(50, 3), (68, 7), (70, 1), (77, 5)])
 (16, "T", [(51, 1), (67, 3), (70, 5), (75, 1)])   
 (0, "Ss", [(53, 1), (68, 3), (68, 3), (72, 5)])   
 (4, "Ss", [(53, 1), (60, 5), (68, 3), (68, 3)])   
 (6, "T", [(51, 1), (63, 1), (67, 3), (70, 5)])    
 (8, "D", [(58, 1), (62, 3), (65, 5), (70, 1)])    
 (6, "D", [(58, 1), (62, 3), (65, 5), (70, 1)])    
 (0, "D", [(58, 1), (58, 1), (65, 5), (74, 3)])    
 (8, "T", [(51, 1), (58, 5), (67, 3), (75, 1)])    
 (8, "T", [(51, 1), (58, 5), (67, 3), (75, 1)])    

Done. Total checked: 91780, Pruned: 100378, completed: 18, time: 2.4620001316070557, efficiency: 7.311128772462985
Results: bestval_func: 100, bestval_voices: 104
(16, 381, 381, 381)
Total time for optimisation of piece: 7.003000020980835
["T", "D7/3", "Ts", "D", "T", "T", "S", "S", "S6", "D7", "Ts", "Ts", "Ts", "D", "T", "T", "T/3", "D7/5", "T", "D7", "T-5", "S/3", "D7/3", "T", "Ss", "Ss", "T", "D", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-481.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-494.csv
[0 0 1 0 0 0 0 1 0 0 0 2; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 0 0 0 0 1 0 0 2 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 0 1 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 1 0 0 1 0 1 1 0 0 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 2 0 0 1 0 1 0 0 0 0 0; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 1 0 1 0 0 0 0 0 0 2; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 1 0 0 0 0]
Key Counter is [0 8 38 0 14 0 20 19 1 21 1 10]
Key Score is [102; 30; 130; 59; 74; 93; 40; 122; 29; 112; 79; 54]
Position Counter for 3 is [38 0 14 0 20 19 1 21 1 10 0 8]
Any[[3.0, 93.0, 1.0]]
[3, 93, 1]
3 D Major

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (66, 3), (69, 5), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(12, "T")]                                                                                                                                                                                                                                                         
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D/3"), (6, "D/5"), (6, "S65")  …  (8, "Ts"), (10, "T64"), (12, "S6"), (12, "Ss"), (14, "D7-5"), (14, "T-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "D-5")]            
 [(0, "S65"), (0, "S65/6"), (4, "S/3"), (4, "S/5"), (4, "Ss"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S")  …  (10, "D/5"), (10, "D7-1"), (10, "S6"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (20, "D-5")]        
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]          
 [(0, "T"), (0, "T/3"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64")  …  (10, "Tm"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]           
 [(4, "Ts"), (6, "S"), (6, "S/3"), (8, "D64"), (8, "D7-5"), (8, "T/3"), (8, "T54"), (10, "S6"), (10, "T"), (12, "D-5"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D54"), (16, "T-5"), (18, "D"), (18, "D/3"), (18, "D7-1")]         
 [(4, "D64"), (4, "T/3"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/3"), (8, "D54")  …  (8, "S65/6"), (10, "D"), (10, "Ss"), (10, "T"), (12, "D-5"), (12, "D/3"), (12, "T64"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]            
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "D54"), (4, "S65/6"), (6, "D"), (6, "D/3"), (6, "D7-1"), (6, "T"), (6, "T/3"), (8, "S/3"), (8, "Ss"), (8, "Tm"), (10, "Ts"), (12, "D64"), (12, "D7-5"), (14, "S"), (16, "D-5"), (16, "T-5")]                 
 [(0, "D64"), (0, "T/3"), (2, "Tm"), (4, "D54"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3")  …  (14, "D7/3"), (14, "D7/7"), (14, "S6"), (14, "Ss"), (16, "D/3"), (16, "S65"), (16, "S65/6"), (16, "T64"), (18, "D7-1"), (20, "T-5")]       
 [(4, "Tm"), (6, "D7-5"), (8, "D"), (10, "D-5"), (14, "Ts"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S")  …  (16, "T/3"), (16, "T/5"), (18, "D/3"), (18, "D/5"), (18, "T54"), (20, "D7-1"), (22, "S65"), (22, "S65/6"), (22, "T64"), (26, "T-5")]
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "S6"), (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (16, "Ts"), (20, "S"), (22, "T-5")]           
 [(0, "T-5"), (8, "T64"), (10, "T"), (12, "S65"), (12, "S65/6"), (12, "T54"), (12, "Ts"), (16, "D/3"), (16, "D/5"), (18, "D7")  …  (18, "S/5"), (20, "D64"), (20, "T/3"), (20, "T/5"), (20, "Tm"), (22, "D"), (22, "S6"), (22, "Ss"), (24, "D7-5"), (28, "D-5")]     
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "Ss"), (18, "D-5")]         
 [(4, "S"), (4, "S/3"), (6, "D64"), (6, "D7-5"), (6, "T/3"), (6, "Tm"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D-5"), (10, "D54"), (10, "S65/6"), (12, "D"), (12, "D/3"), (12, "D7-1"), (12, "T"), (14, "T64"), (14, "Ts"), (22, "T-5")]            
 [(2, "T"), (2, "T/3"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "S"), (10, "S/3"), (12, "D/3"), (12, "D64"), (12, "D7-5"), (12, "T-5"), (12, "Ts"), (16, "D-5"), (16, "D7-1")]                       
 [(4, "Ts"), (6, "S65/6"), (10, "D54"), (10, "T-5"), (12, "D"), (12, "D/3"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/3"), (12, "T"), (14, "D64"), (14, "T/3"), (16, "D7-1"), (16, "Ss"), (18, "D-5"), (18, "D7-5")]                 

Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (54, 3), (57, 5), (62, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (66, 3), (69, 5), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (54, 3), (62, 1), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 60
child voicing cost: 183
Best yet: 243
New solution
function cost: 60
child voicing cost: 180
Best yet: 240
New solution
function cost: 60
child voicing cost: 178
Best yet: 238
New solution
function cost: 60
child voicing cost: 173
Best yet: 233
New solution
function cost: 60
child voicing cost: 171
Best yet: 231
New solution
function cost: 70
child voicing cost: 160
Best yet: 230
New solution
function cost: 70
child voicing cost: 158
Best yet: 228
New solution
function cost: 70
child voicing cost: 150
Best yet: 220
New solution
function cost: 70
child voicing cost: 147
Best yet: 217
New solution
function cost: 70
child voicing cost: 145
Best yet: 215
New solution
function cost: 70
child voicing cost: 144
Best yet: 214
New solution
function cost: 60
child voicing cost: 153
Best yet: 213
New solution
function cost: 60
child voicing cost: 145
Best yet: 205
New solution
function cost: 60
child voicing cost: 142
Best yet: 202
New solution
function cost: 60
child voicing cost: 140
Best yet: 200
New solution
function cost: 60
child voicing cost: 137
Best yet: 197
New solution
function cost: 60
child voicing cost: 136
Best yet: 196
New solution
function cost: 60
child voicing cost: 135
Best yet: 195
New solution
function cost: 60
child voicing cost: 127
Best yet: 187
New solution
function cost: 60
child voicing cost: 122
Best yet: 182
New solution
function cost: 70
child voicing cost: 109
Best yet: 179
New solution
function cost: 70
child voicing cost: 107
Best yet: 177
New solution
function cost: 70
child voicing cost: 106
Best yet: 176
New solution
function cost: 60
child voicing cost: 111
Best yet: 171
New solution
function cost: 60
child voicing cost: 110
Best yet: 170
New solution
function cost: 60
child voicing cost: 102
Best yet: 162
New solution
function cost: 60
child voicing cost: 97
Best yet: 157

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "D", [(57, 1), (57, 1), (61, 3), (64, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "T64"), (4, "Ts"), (6, "S65"), (6, "S65/6"), (6, "T54"), (10, "T-5"), (12, "D"), (12, "D/3"), (12, "D/5"), (12, "D7")  …  (12, "S/5"), (12, "T"), (14, "T/3"), (14, "T/5"), (16, "D7-1"), (16, "S6"), (16, "Ss"), (16, "Tm"), (18, "D-5"), (18, "D7-5")]  
 [(4, "D/3"), (6, "T"), (6, "T/3"), (8, "D54"), (8, "D7-1"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D"), (10, "D7")  …  (12, "D64"), (12, "Ss"), (12, "T-5"), (12, "Tm"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "T64"), (18, "S6"), (20, "D-5")]      
 [(4, "D7-1"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (8, "T"), (8, "T/3"), (8, "T/5")  …  (12, "D"), (12, "S"), (12, "S/3"), (12, "S/5"), (12, "Ts"), (14, "T-5"), (14, "T64"), (14, "Tm"), (18, "D7-5"), (22, "D-5")]        
 [(2, "D7-1"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "D/3"), (8, "D/5"), (10, "D")  …  (12, "S65"), (12, "S65/6"), (12, "Tm"), (14, "S"), (14, "Ts"), (16, "D7-5"), (16, "S/3"), (16, "S/5"), (16, "T-5"), (20, "D-5")]   
 [(2, "T"), (2, "T/3"), (2, "T/5"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ts"), (8, "D/3")  …  (10, "D"), (10, "D7-1"), (10, "S"), (12, "D7-5"), (12, "T-5"), (14, "S6"), (14, "Ss"), (16, "D-5"), (16, "S65"), (16, "S65/6")]     
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (4, "D54"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "D"), (6, "D/3"), (6, "D7-1")  …  (8, "Ss"), (8, "T64"), (8, "Tm"), (10, "S6"), (10, "Ts"), (12, "D64"), (12, "D7-5"), (14, "S"), (16, "D-5"), (16, "T-5")]        
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3")  …  (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]      
 [(6, "S6"), (6, "Ss"), (8, "Tm"), (10, "D7"), (10, "D7-1"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "S/3")  …  (12, "S65/6"), (14, "D"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "D-5"), (16, "D/3"), (16, "D/5"), (18, "Ts"), (24, "T-5")]
 [(4, "T"), (6, "T54"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "Ts"), (10, "T-5"), (10, "T64"), (12, "D7")  …  (14, "D/5"), (14, "D64"), (14, "S65"), (14, "S65/6"), (14, "T/3"), (14, "T/5"), (14, "Tm"), (16, "D"), (18, "D7-5"), (22, "D-5")]    
 [(4, "T"), (6, "T54"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "Ts"), (10, "T-5"), (10, "T64"), (12, "D7"), (12, "D7/3")  …  (14, "D/3"), (14, "D54"), (14, "D64"), (14, "S65"), (14, "S65/6"), (14, "T/3"), (14, "Tm"), (16, "D"), (18, "D7-5"), (22, "D-5")]  
 [(4, "T"), (6, "T54"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "Ts"), (10, "T-5"), (10, "T64"), (12, "D7")  …  (14, "D/5"), (14, "D64"), (14, "S65"), (14, "S65/6"), (14, "T/3"), (14, "T/5"), (14, "Tm"), (16, "D"), (18, "D7-5"), (22, "D-5")]    
 [(4, "T"), (8, "D7-1"), (8, "S"), (8, "S/5"), (10, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Ss"), (14, "D/5"), (14, "D54"), (14, "D64"), (14, "S65/6"), (14, "T/5"), (16, "D"), (18, "D7-5")]                                       
 [(4, "D7-1"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ss"), (8, "T"), (8, "T/5"), (10, "D/5"), (10, "D54"), (10, "S65/6"), (12, "D"), (12, "S"), (12, "S/5"), (14, "D64"), (14, "T64"), (18, "D7-5")]                                           
 [(8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D/5"), (14, "D"), (14, "D7-1"), (14, "S"), (14, "T"), (14, "T/5"), (16, "D54"), (16, "S/5"), (16, "T64"), (18, "Ss"), (20, "D64"), (20, "D7-5")]                                    
 [(8, "D"), (12, "D7")]                                                                                                                                                                                                                                         
 [(18, "T")]                                                                                                                                                                                                                                                    
 [(10, "T")]                                                                                                                                                                                                                                                    

Done. Total checked: 84503, Pruned: 99760, completed: 27, time: 1.9159998893737793, efficiency: 14.0918588512156
Results: bestval_func: 60, bestval_voices: 97
(15, 381, 381, 381)
[0 0 1 0 0 0 0 1 0 0 0 2; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 0 0 0 0 1 0 0 2 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 0 1 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 1 0 0 1 0 1 1 0 0 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 2 0 0 1 0 1 0 0 0 0 0; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 1 0 1 0 0 0 0 0 0 2; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 1 0 0 0 0]
Key Counter is [0 8 38 0 14 0 20 19 1 21 1 10]
Key Score is [102; 30; 130; 59; 74; 93; 40; 122; 29; 112; 79; 54]
Position Counter for 3 is [38 0 14 0 20 19 1 21 1 10 0 8]
Any[[3.0, 93.0, 1.0]]
[3, 93, 1]
3 D Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "D", [(57, 1), (57, 1), (61, 3), (64, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 130
child voicing cost: 131
Best yet: 261
New solution
function cost: 130
child voicing cost: 130
Best yet: 260
New solution
function cost: 130
child voicing cost: 128
Best yet: 258
New solution
function cost: 130
child voicing cost: 127
Best yet: 257
New solution
function cost: 126
child voicing cost: 124
Best yet: 250
New solution
function cost: 126
child voicing cost: 121
Best yet: 247
New solution
function cost: 126
child voicing cost: 118
Best yet: 244
New solution
function cost: 126
child voicing cost: 116
Best yet: 242
New solution
function cost: 126
child voicing cost: 115
Best yet: 241
New solution
function cost: 118
child voicing cost: 120
Best yet: 238
New solution
function cost: 118
child voicing cost: 117
Best yet: 235
New solution
function cost: 114
child voicing cost: 119
Best yet: 233
New solution
function cost: 114
child voicing cost: 116
Best yet: 230
New solution
function cost: 104
child voicing cost: 125
Best yet: 229
New solution
function cost: 104
child voicing cost: 124
Best yet: 228
New solution
function cost: 108
child voicing cost: 117
Best yet: 225
New solution
function cost: 108
child voicing cost: 114
Best yet: 222
New solution
function cost: 104
child voicing cost: 116
Best yet: 220
New solution
function cost: 104
child voicing cost: 113
Best yet: 217
New solution
function cost: 104
child voicing cost: 110
Best yet: 214
New solution
function cost: 104
child voicing cost: 107
Best yet: 211
New solution
function cost: 104
child voicing cost: 105
Best yet: 209
New solution
function cost: 104
child voicing cost: 98
Best yet: 202
New solution
function cost: 104
child voicing cost: 97
Best yet: 201
New solution
function cost: 104
child voicing cost: 92
Best yet: 196
New solution
function cost: 100
child voicing cost: 95
Best yet: 195
New solution
function cost: 100
child voicing cost: 94
Best yet: 194
New solution
function cost: 100
child voicing cost: 89
Best yet: 189
New solution
function cost: 100
child voicing cost: 83
Best yet: 183
New solution
function cost: 104
child voicing cost: 77
Best yet: 181
New solution
function cost: 104
child voicing cost: 74
Best yet: 178

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (12, "T", [(50, 1), (50, 1), (57, 5), (66, 3)])  
 (4, "D7/3", [(49, 3), (52, 5), (57, 1), (67, 7)])
 (6, "Ts", [(47, 1), (54, 5), (59, 1), (62, 3)])  
 (0, "D", [(45, 1), (57, 1), (61, 3), (64, 5)])   
 (0, "T", [(50, 1), (57, 5), (62, 1), (66, 3)])   
 (4, "Ts", [(47, 1), (59, 1), (62, 3), (66, 5)])  
 (10, "D", [(45, 1), (52, 5), (61, 3), (69, 1)])  
 (6, "D", [(45, 1), (57, 1), (64, 5), (73, 3)])   
 (0, "T/3", [(42, 3), (57, 5), (69, 5), (74, 1)]) 
 (4, "Tm", [(42, 1), (61, 5), (69, 3), (78, 1)])  
 (0, "D/3", [(49, 3), (57, 1), (69, 1), (76, 5)]) 
 (0, "T-5", [(50, 1), (62, 1), (66, 3), (74, 1)]) 
 (0, "T", [(50, 1), (62, 1), (66, 3), (69, 5)])   
 ?                                                
 (2, "D7/3", [(49, 3), (57, 1), (67, 7), (76, 5)])
 (0, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (6, "Ss", [(52, 1), (55, 3), (67, 3), (71, 5)])  
 (8, "D7-1", [(52, 5), (55, 7), (67, 7), (73, 3)])
 (4, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (4, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (4, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])   
 (4, "D7-1", [(52, 5), (55, 7), (67, 7), (73, 3)])
 (14, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])  
 (8, "D", [(57, 1), (57, 1), (64, 5), (73, 3)])   
 (18, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])  
 (18, "T", [(50, 1), (57, 5), (66, 3), (74, 1)])  

Done. Total checked: 103834, Pruned: 114040, completed: 31, time: 2.5940001010894775, efficiency: 11.950654892796662
Results: bestval_func: 104, bestval_voices: 74
(16, 381, 381, 381)
Total time for optimisation of piece: 6.3420000076293945
["T", "D7/3", "Ts", "D", "T", "Ts", "D", "D", "T/3", "Tm", "D/3", "T-5", "T", "S", "D", "D", "T", "D7-1", "D7/3", "Ts", "D7/3", "T", "Ss", "D7-1", "T", "T", "T", "D7-1", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-494.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-507.csv
[0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 0 1 0 0 0 0; 0 1 1 0 0 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 1 0 0 0 2 0 0 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 0 0 2 

4-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(57, 1), (61, 3), (64, 5), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(57, 1), (61, 3), (69, 1), (76, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(57, 1), (64, 5), (69, 1), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(57, 1), (57, 1), (64, 5), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(16, "T")]                                                                                                                                                                                                                                                      
 [(2, "T"), (2, "T/3"), (2, "T/5"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ts"), (8, "D/3")  …  (10, "S/3"), (10, "S/5"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (14, "D"), (14, "S6"), (14, "Ss"), (16, "D-5")]      
 [(2, "Tm"), (4, "D7"), (4, "D7-5"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D")  …  (8, "D-5"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "S6"), (8, "Ss"), (14, "S65"), (14, "S65/6"), (14, "T-5")]              
 [(4, "T"), (6, "T54"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "Ts"), (10, "S65"), (10, "S65/6"), (10, "T-5")  …  (14, "T/3"), (14, "T/5"), (14, "Tm"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D7-5"), (20, "D"), (22, "D-5")]   
 [(0, "D7"), (0, "D7/3"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D7-1"), (6, "D54"), (6, "S65"), (6, "S65/6"), (6, "T54")  …  (8, "T"), (8, "T/3"), (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "Ts"), (14, "D-5"), (14, "D64"), (16, "S"), (18, "T-5")]        
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D7-5"), (16, "D"), (16, "Ss"), (18, "D-5")]      
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D7-5"), (16, "D"), (16, "Ss"), (18, "D-5")]      
 [(2, "T"), (2, "T/3"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Ts"), (8, "D/3"), (8, "D64")  …  (10, "D7-1"), (10, "S"), (10, "S/3"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (12, "T-5"), (14, "D"), (14, "Ss"), (16, "D-5")]      
 [(2, "T"), (2, "T/3"), (4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "Ts"), (8, "D/3"), (8, "D64"), (8, "T64")  …  (10, "S/3"), (12, "D54"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (14, "D"), (14, "S6"), (14, "Ss"), (16, "D-5")]       
 [(6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (10, "S/3"), (10, "S/5")  …  (12, "Ts"), (14, "D64"), (14, "D7-5"), (14, "T/3"), (14, "T/5"), (14, "T54"), (14, "Tm"), (16, "T"), (18, "D-5"), (18, "T-5")]   
 [(8, "Tm"), (10, "D7-5"), (10, "T/3"), (10, "T/5"), (10, "Ts"), (12, "D"), (12, "S"), (12, "S/3"), (12, "S/5"), (12, "T")  …  (16, "D7/7"), (16, "S6"), (16, "Ss"), (18, "D-5"), (18, "D/3"), (18, "D/5"), (18, "S65"), (18, "S65/6"), (20, "D7-1"), (22, "T-5")]
 [(4, "S65"), (4, "S65/6"), (6, "D"), (6, "D/3"), (6, "D/5"), (8, "T/3"), (8, "T/5"), (8, "T64"), (8, "Ts"), (10, "D7")  …  (10, "S/5"), (10, "T"), (12, "D7-5"), (12, "T54"), (14, "D7-1"), (14, "S6"), (14, "Ss"), (16, "D-5"), (16, "Tm"), (20, "T-5")]        
 [(4, "S65/6"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "S/3"), (8, "Ss"), (8, "Ts"), (10, "D"), (10, "D/3"), (10, "D7-1"), (10, "S"), (12, "D54"), (12, "Tm"), (14, "T"), (16, "D7-5"), (16, "T-5"), (20, "D-5"), (20, "D64"), (20, "T/3")]        
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D7-1"), (8, "S"), (8, "S/3"), (10, "D54"), (10, "D64"), (10, "D7-5"), (10, "S65/6"), (10, "T/3"), (10, "T54"), (10, "Ts"), (12, "T"), (14, "D-5"), (22, "T-5")]         
 [(4, "D7-1"), (4, "S65/6"), (8, "S/3"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (10, "Ts"), (12, "D54"), (14, "D"), (14, "D/3"), (14, "T"), (16, "T-5"), (20, "D64"), (20, "D7-5"), (20, "T/3"), (24, "D-5")]               
 [(0, "T/3"), (4, "D54"), (6, "D"), (6, "T"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D7-5"), (12, "S65/6"), (14, "D7-1"), (14, "S"), (14, "S/3"), (16, "D/3"), (16, "T-5"), (16, "Ts"), (18, "Ss")]                 

0 0 0 0 2 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 1 0 2; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 2 0 0 0 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 1 0 2 0 0 0 0 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 0 0 2 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 1 0 1 0 0 0 0 0 0 2]
Key Counter is [0 16 14 0 30 0 12 2 7 26 0 24]
Key Score is [96; 35; 124; 23; 115; 72; 59; 108; 25; 129; 42; 89]
Position Counter for 10 is [26 0 24 0 16 14 0 30 0 12 2 7]
Any[[10.0, 86.5, 1.0]]
[10, 86, 1]
10 A Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

4-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(57, 1), (61, 3), (64, 5), (69, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(57, 1), (61, 3), (69, 1), (76, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(57, 1), (64, 5), (69, 1), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "T", [(57, 1), (57, 1), (64, 5), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 94
child voicing cost: 193
Best yet: 287
New solution
function cost: 94
child voicing cost: 179
Best yet: 273
New solution
function cost: 94
child voicing cost: 175
Best yet: 269
New solution
function cost: 94
child voicing cost: 172
Best yet: 266
New solution
function cost: 94
child voicing cost: 169
Best yet: 263
New solution
function cost: 94
child voicing cost: 165
Best yet: 259
New solution
function cost: 94
child voicing cost: 162
Best yet: 256
New solution
function cost: 94
child voicing cost: 158
Best yet: 252
New solution
function cost: 94
child voicing cost: 157
Best yet: 251
New solution
function cost: 94
child voicing cost: 154
Best yet: 248
New solution
function cost: 94
child voicing cost: 153
Best yet: 247
New solution
function cost: 94
child voicing cost: 150
Best yet: 244
New solution
function cost: 94
child voicing cost: 146
Best yet: 240
New solution
function cost: 94
child voicing cost: 144
Best yet: 238
New solution
function cost: 94
child voicing cost: 141
Best yet: 235
New solution
function cost: 94
child voicing cost: 140
Best yet: 234
New solution
function cost: 96
child voicing cost: 134
Best yet: 230
New solution
function cost: 102
child voicing cost: 126
Best yet: 228
New solution
function cost: 96
child voicing cost: 130
Best yet: 226
New solution
function cost: 98
child voicing cost: 124
Best yet: 222
New solution
function cost: 112
child voicing cost: 109
Best yet: 221
New solution
function cost: 110
child voicing cost: 109
Best yet: 219
New solution
function cost: 96
child voicing cost: 119
Best yet: 215
New solution
function cost: 96
child voicing cost: 110
Best yet: 206
New solution
function cost: 96
child voicing cost: 108
Best yet: 204
New solution
function cost: 98
child voicing cost: 105
Best yet: 203
New solution
function cost: 98
child voicing cost: 96
Best yet: 194
New solution
function cost: 110
child voicing cost: 83
Best yet: 193
New solution
function cost: 110
child voicing cost: 81
Best yet: 191
New solution
function cost: 96
child voicing cost: 91
Best yet: 187
New solution
function cost: 96
child voicing cost: 82
Best yet: 178
New solution
function cost: 96
child voicing cost: 80
Best yet: 176

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "Ts", [(54, 1), (57, 3), (57, 3), (61, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T/3"), (0, "T/5"), (4, "T54"), (6, "D"), (6, "T"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (14, "D7-1"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D/3"), (16, "D/5"), (16, "T-5"), (16, "Ts"), (18, "S6"), (18, "Ss")]        
 [(6, "S6"), (6, "Ss"), (8, "D64"), (8, "T/3"), (8, "Tm"), (10, "D7"), (10, "D7-1"), (10, "D7/3"), (10, "D7/7"), (10, "S")  …  (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "D"), (14, "T"), (16, "D-5"), (16, "D/3"), (16, "T64"), (16, "Ts"), (24, "T-5")]       
 [(2, "D/3"), (2, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "T54")  …  (16, "S6"), (16, "Ss"), (18, "D7-5"), (18, "T-5"), (18, "T64"), (18, "Ts"), (20, "S"), (20, "S/3"), (20, "S/5"), (22, "D-5")]         
 [(0, "T/3"), (0, "T/5"), (2, "Tm"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3"), (10, "S/5")  …  (14, "D7/5"), (14, "D7/7"), (14, "S6"), (14, "Ss"), (16, "D/3"), (16, "D/5"), (16, "S65"), (16, "S65/6"), (18, "D7-1"), (20, "T-5")]     
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "S/5"), (8, "T64"), (10, "D7"), (10, "D7/3")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "T"), (16, "T-5"), (16, "Tm"), (20, "D7-5"), (20, "T/3"), (20, "T/5"), (24, "D-5")]       
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "D/3"), (6, "D54"), (6, "S65"), (6, "S65/6"), (6, "T54")  …  (10, "D64"), (10, "T64"), (12, "S6"), (12, "Ss"), (14, "D7-5"), (14, "T-5"), (14, "Ts"), (16, "S"), (16, "S/3"), (18, "D-5")]         
 [(4, "D/3"), (4, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D"), (10, "D7")  …  (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "S/5"), (16, "T-5"), (16, "T64"), (18, "S6"), (18, "Ss"), (20, "D-5")]         
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D/5")  …  (10, "Ts"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "D"), (16, "S6"), (16, "Ss"), (18, "D-5")]         
 [(6, "T"), (8, "T-5"), (8, "T54"), (10, "D7-1"), (10, "S"), (10, "S/3"), (10, "S/5"), (10, "Ts"), (12, "S65"), (12, "S65/6")  …  (16, "T/5"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D/3"), (20, "D/5"), (20, "D7-5"), (22, "D"), (24, "D-5")]
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "D/3"), (6, "D54"), (6, "S65"), (6, "S65/6"), (6, "T54")  …  (10, "D64"), (10, "T64"), (12, "S6"), (12, "Ss"), (14, "D7-5"), (14, "T-5"), (14, "Ts"), (16, "S"), (16, "S/3"), (18, "D-5")]         
 [(0, "D/3"), (0, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "Tm"), (10, "D"), (10, "D7-1"), (10, "T")  …  (14, "Ts"), (16, "D7-5"), (16, "S65"), (16, "S65/6"), (20, "D-5"), (20, "S/3"), (20, "S/5"), (20, "T-5"), (20, "T64"), (22, "S")]     
 [(6, "D64"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ss"), (10, "D54"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/5"), (14, "D/5"), (14, "S65/6"), (14, "Tm"), (16, "T"), (16, "T/5"), (26, "T-5")]                                  
 [(4, "D64"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/5"), (8, "D54"), (8, "D7-5"), (8, "S65/6"), (10, "D"), (10, "Ss"), (10, "T"), (12, "D/3"), (12, "T64"), (14, "D7-1")]                                                  
 [(4, "S"), (4, "S/5"), (6, "D64"), (6, "D7-5"), (6, "T/5"), (6, "Ts"), (8, "Ss"), (8, "T"), (10, "S65"), (10, "T64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D54"), (16, "D"), (16, "D/5"), (16, "D7-1")]                                     
 [(6, "D"), (10, "D7")]                                                                                                                                                                                                                                             
 [(10, "T")]                                                                                                                                                                                                                                                        
 [(14, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 195680, Pruned: 235967, completed: 32, time: 4.13100004196167, efficiency: 7.746308321218099
Results: bestval_func: 96, bestval_voices: 80
(15, 379, 379, 379)
[0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 0 1 0 0 0 0; 0 1 1 0 0 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 1 0 0 0 2 0 0 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 0 2 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 1 0 2; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 2 0 0 0 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 1 0 2 0 0 0 0 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 0 0 2 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 1 0 1 0 0 0 0 0 0 2]
Key Counter is [0 16 14 0 30 0 12 2 7 26 0 24]
Key Score is [96; 35; 124; 23; 115; 72; 59; 108; 25; 129; 42; 89]
Position Counter for 10 is [26 0 24 0 16 14 0 30 0 12 2 7]
Any[[10.0, 86.5, 1.0]]
[10, 86, 1]
10 A Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(16, "Ts", [(54, 1), (57, 3), (57, 3), (61, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 108
child voicing cost: 189
Best yet: 297
New solution
function cost: 108
child voicing cost: 182
Best yet: 290
New solution
function cost: 108
child voicing cost: 179
Best yet: 287
New solution
function cost: 108
child voicing cost: 178
Best yet: 286
New solution
function cost: 112
child voicing cost: 172
Best yet: 284
New solution
function cost: 112
child voicing cost: 170
Best yet: 282
New solution
function cost: 110
child voicing cost: 166
Best yet: 276
New solution
function cost: 108
child voicing cost: 156
Best yet: 264
New solution
function cost: 108
child voicing cost: 155
Best yet: 263
New solution
function cost: 108
child voicing cost: 153
Best yet: 261
New solution
function cost: 108
child voicing cost: 147
Best yet: 255
New solution
function cost: 112
child voicing cost: 142
Best yet: 254
New solution
function cost: 112
child voicing cost: 136
Best yet: 248
New solution
function cost: 108
child voicing cost: 139
Best yet: 247
New solution
function cost: 108
child voicing cost: 138
Best yet: 246
New solution
function cost: 108
child voicing cost: 136
Best yet: 244
New solution
function cost: 108
child voicing cost: 130
Best yet: 238
New solution
function cost: 108
child voicing cost: 129
Best yet: 237
New solution
function cost: 108
child voicing cost: 123
Best yet: 231
New solution
function cost: 112
child voicing cost: 117
Best yet: 229
New solution
function cost: 112
child voicing cost: 109
Best yet: 221
New solution
function cost: 102
child voicing cost: 116
Best yet: 218
New solution
function cost: 106
child voicing cost: 107
Best yet: 213
New solution
function cost: 102
child voicing cost: 107
Best yet: 209
New solution
function cost: 102
child voicing cost: 106
Best yet: 208
New solution
function cost: 102
child voicing cost: 100
Best yet: 202
New solution
function cost: 106
child voicing cost: 94
Best yet: 200
New solution
function cost: 106
child voicing cost: 91
Best yet: 197
New solution
function cost: 100
child voicing cost: 95
Best yet: 195
New solution
function cost: 100
child voicing cost: 89
Best yet: 189

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (16, "T", [(57, 1), (57, 1), (64, 5), (73, 3)])  
 (2, "T", [(57, 1), (57, 1), (64, 5), (73, 3)])   
 (4, "D7", [(52, 1), (62, 7), (68, 3), (71, 5)])  
 (4, "T", [(45, 1), (61, 3), (69, 1), (76, 5)])   
 (0, "D7/3", [(44, 3), (62, 7), (71, 5), (76, 1)])
 (0, "T", [(45, 1), (61, 3), (69, 1), (76, 5)])   
 (12, "S", [(50, 1), (62, 1), (69, 5), (78, 3)])  
 (10, "S", [(50, 1), (57, 5), (66, 3), (74, 1)])  
 (2, "T", [(45, 1), (57, 1), (64, 5), (73, 3)])   
 (8, "Ss", [(47, 1), (54, 5), (62, 3), (71, 1)])  
 (10, "T/3", [(49, 3), (57, 1), (64, 5), (69, 1)])
 (4, "S65", [(50, 1), (57, 5), (59, 6), (66, 3)]) 
 (10, "D", [(52, 1), (56, 3), (59, 5), (64, 1)])  
 ?                                                
 (4, "T", [(45, 1), (57, 1), (61, 3), (64, 5)])   
 (4, "D/3", [(44, 3), (59, 5), (64, 1), (64, 1)]) 
 (0, "T", [(45, 1), (57, 1), (61, 3), (64, 5)])   
 (10, "S/5", [(45, 5), (57, 5), (62, 1), (66, 3)])
 (4, "T", [(45, 1), (57, 1), (61, 3), (64, 5)])   
 (0, "D/3", [(44, 3), (59, 5), (64, 1), (64, 1)]) 
 (16, "T", [(45, 1), (57, 1), (61, 3), (64, 5)])  
 (6, "S", [(50, 1), (57, 5), (62, 1), (66, 3)])   
 (4, "S", [(50, 1), (57, 5), (62, 1), (66, 3)])   
 (6, "D", [(52, 1), (56, 3), (59, 5), (64, 1)])   
 (10, "T", [(45, 1), (57, 1), (61, 3), (64, 5)])  
 (10, "T", [(45, 1), (57, 1), (61, 3), (64, 5)])  

4-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(44, 1), (48, 3), (56, 1), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(44, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(14, "T")]                                                                                                                                                                                                                                                       
 [(2, "S/3"), (2, "S/5"), (2, "T"), (2, "T54"), (2, "T64"), (6, "S65"), (6, "S65/6"), (8, "D"), (8, "D/3"), (8, "D/5")  …  (8, "Ts"), (10, "Ss"), (10, "T/3"), (10, "T/5"), (12, "D7-1"), (12, "S"), (12, "Tm"), (14, "D-5"), (14, "D7-5"), (16, "S6")]            
 [(6, "S65"), (6, "S65/6"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ts")  …  (10, "Ss"), (12, "S"), (12, "S6"), (12, "T"), (12, "T-5"), (12, "T/3"), (12, "T/5"), (12, "Tm"), (14, "D7-5"), (18, "D-5")]          
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (2, "S6"), (2, "S65"), (2, "S65/6"), (2, "Ss"), (6, "D"), (6, "D/3")  …  (6, "T54"), (6, "T64"), (8, "D7-5"), (8, "T"), (8, "T/3"), (8, "T/5"), (8, "Tm"), (8, "Ts"), (12, "D-5"), (14, "T-5")]                
 [(4, "D"), (4, "D/3"), (4, "D7"), (4, "D7/3"), (4, "D7/7"), (4, "Tm"), (6, "D54"), (6, "D64"), (6, "D7-5"), (6, "T")  …  (8, "S65"), (8, "S65/6"), (8, "Ss"), (8, "T54"), (8, "Ts"), (10, "D-5"), (10, "S"), (10, "S/3"), (16, "T-5"), (16, "T64")]               
 [(6, "T"), (8, "S/3"), (8, "T54"), (8, "Ts"), (12, "D54"), (12, "D64"), (12, "D7-1"), (12, "T-5"), (12, "T/3"), (12, "Tm")  …  (14, "D/3"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D7-5"), (16, "S65/6"), (18, "S"), (20, "D-5"), (26, "S6")]
 [(6, "T"), (8, "S/3"), (8, "T54"), (8, "Ts"), (12, "D54"), (12, "D64"), (12, "D7-1"), (12, "T-5"), (12, "T/3"), (12, "Tm")  …  (14, "D/3"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D7-5"), (16, "S65/6"), (18, "S"), (20, "D-5"), (26, "S6")]
 [(4, "D/3"), (6, "T"), (6, "T/3"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Ts"), (12, "D64"), (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "T-5"), (18, "S6"), (20, "D-5")]                  
 [(0, "D-5"), (4, "D7-5"), (8, "D64"), (10, "D"), (12, "D54"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (14, "S"), (16, "T54")  …  (18, "T"), (18, "T/3"), (18, "Tm"), (20, "D/3"), (20, "S/3"), (20, "S65"), (20, "S65/6"), (20, "T64"), (22, "Ts"), (28, "T-5")]  
 [(8, "D/3"), (8, "D/5"), (8, "T-5"), (8, "T64"), (10, "T"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "D"), (14, "D7")  …  (16, "Tm"), (16, "Ts"), (18, "D7-1"), (18, "S"), (18, "S/3"), (18, "S/5"), (20, "D-5"), (20, "D7-5"), (22, "S6"), (22, "Ss")]      
 [(0, "T/3"), (0, "T/5"), (4, "T54"), (6, "D"), (6, "T"), (8, "T64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (14, "D7-1"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "D/3"), (16, "D/5"), (16, "T-5"), (16, "Ts"), (18, "S6"), (18, "Ss")]       
 [(0, "T54"), (2, "T"), (2, "T/3"), (2, "T/5"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "S65")  …  (10, "S"), (10, "S/3"), (10, "S/5"), (12, "D7-5"), (12, "T-5"), (12, "Tm"), (12, "Ts"), (14, "S6"), (14, "Ss"), (16, "D-5")]          
 [(2, "S/3"), (2, "T54"), (4, "T"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "T-5"), (10, "Ts"), (12, "D"), (12, "D/3"), (12, "S"), (14, "D64"), (14, "D7-5"), (14, "T/3"), (14, "Tm"), (18, "D-5"), (18, "D7-1")]        
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "D54"), (4, "S65/6"), (6, "D"), (6, "D/3"), (6, "D7-1"), (6, "T"), (6, "T/3"), (8, "T64"), (10, "S6"), (12, "D64"), (12, "D7-5"), (14, "S"), (14, "S/3"), (16, "D-5"), (16, "T-5"), (16, "Ts")]            
 [(6, "T"), (8, "D7-1"), (8, "S65/6"), (10, "S"), (10, "S/3"), (10, "Ts"), (12, "D/3"), (12, "Ss"), (12, "T-5"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D54"), (16, "D64"), (16, "T/3"), (16, "Tm"), (18, "D"), (20, "D7-5"), (24, "D-5")]    
 [(8, "S65/6"), (8, "T-5"), (12, "D/3"), (12, "D7-1"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S"), (14, "T"), (14, "T/3"), (14, "Ts"), (16, "D54"), (16, "S/3"), (16, "Ss"), (16, "T64"), (18, "D"), (20, "D64"), (24, "D7-5"), (28, "D-5")]  

Done. Total checked: 98910, Pruned: 108987, completed: 30, time: 2.504000186920166, efficiency: 11.980829776574005
Results: bestval_func: 100, bestval_voices: 89
(16, 379, 379, 379)
Total time for optimisation of piece: 8.470999956130981
["T", "T", "D7", "T", "D7/3", "T", "S", "S", "T", "Ss", "T/3", "S65", "D", "D7", "Ts", "Ts", "S6", "D7", "Ts", "Ss", "T", "D/3", "T", "S/5", "T", "D/3", "T", "S", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-507.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-52.csv
[0 1 0 2 0 0 0 1 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 0; 0 0 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 3 0 0 0 1 0 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 0 0 0 2 0 0 1; 0 0 0 0 0 0 0 1 1 0 1 1; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 0 0 0 0 1 2 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0]
Key Counter is [0 11 0 29 7 0 3 22 32 0 19 5]
Key Score is [34; 94; 48; 102; 87; 48; 99; 37; 113; 58; 70; 106]
Position Counter for 9 is [32 0 19 5 0 11 0 29 7 0 3 22]
Any[[9.0, 87.75, 1.0]]
[9, 88, 1]
9 G# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

4-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(44, 1), (48, 3), (56, 1), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(44, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 98
child voicing cost: 205
Best yet: 303
New solution
function cost: 98
child voicing cost: 204
Best yet: 302
New solution
function cost: 98
child voicing cost: 202
Best yet: 300
New solution
function cost: 98
child voicing cost: 200
Best yet: 298
New solution
function cost: 98
child voicing cost: 193
Best yet: 291
New solution
function cost: 102
child voicing cost: 186
Best yet: 288
New solution
function cost: 98
child voicing cost: 186
Best yet: 284
New solution
function cost: 98
child voicing cost: 183
Best yet: 281
New solution
function cost: 102
child voicing cost: 175
Best yet: 277
New solution
function cost: 102
child voicing cost: 173
Best yet: 275
New solution
function cost: 102
child voicing cost: 170
Best yet: 272
New solution
function cost: 110
child voicing cost: 161
Best yet: 271
New solution
function cost: 110
child voicing cost: 158
Best yet: 268
New solution
function cost: 112
child voicing cost: 155
Best yet: 267
New solution
function cost: 112
child voicing cost: 153
Best yet: 265
New solution
function cost: 112
child voicing cost: 151
Best yet: 263
New solution
function cost: 112
child voicing cost: 148
Best yet: 260
New solution
function cost: 108
child voicing cost: 147
Best yet: 255
New solution
function cost: 112
child voicing cost: 142
Best yet: 254
New solution
function cost: 96
child voicing cost: 155
Best yet: 251
New solution
function cost: 96
child voicing cost: 149
Best yet: 245
New solution
function cost: 96
child voicing cost: 143
Best yet: 239
New solution
function cost: 108
child voicing cost: 123
Best yet: 231
New solution
function cost: 108
child voicing cost: 122
Best yet: 230
New solution
function cost: 108
child voicing cost: 121
Best yet: 229
New solution
function cost: 110
child voicing cost: 115
Best yet: 225
New solution
function cost: 110
child voicing cost: 109
Best yet: 219
New solution
function cost: 108
child voicing cost: 105
Best yet: 213
New solution
function cost: 108
child voicing cost: 104
Best yet: 212
New solution
function cost: 108
child voicing cost: 103
Best yet: 211
New solution
function cost: 110
child voicing cost: 97
Best yet: 207
New solution
function cost: 110
child voicing cost: 91
Best yet: 201

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(8, "S65"), (8, "S65/6"), (8, "T-5"), (12, "D/3"), (12, "D/5"), (12, "D7-1"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7")  …  (16, "S/3"), (16, "S/5"), (16, "Ss"), (16, "T54"), (16, "T64"), (16, "Tm"), (18, "D"), (18, "S6"), (24, "D7-5"), (28, "D-5")]
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (4, "D54"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "D"), (6, "D/3"), (6, "D7-1")  …  (8, "Tm"), (10, "S6"), (10, "Ss"), (12, "D64"), (12, "D7-5"), (14, "S"), (14, "S/3"), (16, "D-5"), (16, "T-5"), (16, "Ts")]            
 [(4, "D/3"), (4, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D"), (10, "D7")  …  (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "S/5"), (16, "T-5"), (16, "T64"), (18, "S6"), (18, "Ss"), (20, "D-5")]           
 [(4, "D/3"), (4, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "S65"), (8, "S65/6"), (10, "D"), (10, "D7"), (10, "D7/3")  …  (12, "Tm"), (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "S/5"), (16, "T-5"), (18, "S6"), (18, "Ss"), (20, "D-5")]          
 [(4, "D/3"), (4, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "S65"), (8, "S65/6"), (8, "T54"), (10, "D"), (10, "D7")  …  (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "S/5"), (16, "T-5"), (16, "T64"), (18, "S6"), (18, "Ss"), (20, "D-5")]           
 [(0, "D"), (0, "D/3"), (2, "D54"), (4, "D7"), (4, "D7/3"), (4, "D7/7"), (6, "D64"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (10, "Tm"), (12, "S6"), (12, "Ss"), (14, "S/3"), (14, "T64"), (16, "T"), (16, "T/3"), (20, "S"), (20, "Ts"), (26, "T-5")]              
 [(8, "D/3"), (8, "D/5"), (8, "T-5"), (8, "T64"), (10, "T"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "D"), (14, "D7")  …  (16, "Tm"), (16, "Ts"), (18, "D7-1"), (18, "S"), (18, "S/3"), (18, "S/5"), (20, "D-5"), (20, "D7-5"), (22, "S6"), (22, "Ss")]         
 [(4, "D/3"), (4, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "S65"), (8, "S65/6"), (10, "D"), (10, "D7"), (10, "D7/3")  …  (12, "Tm"), (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "S/5"), (16, "T-5"), (18, "S6"), (18, "Ss"), (20, "D-5")]          
 [(2, "T54"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "S/3"), (6, "S/5")  …  (8, "Ts"), (10, "D64"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "Tm"), (12, "S6"), (12, "Ss"), (14, "D-5"), (14, "T-5")]          
 [(2, "S"), (2, "S/3"), (6, "S6"), (8, "D64"), (8, "D7-5"), (8, "S65"), (8, "S65/6"), (8, "T/3"), (8, "Tm"), (10, "D7")  …  (12, "D54"), (12, "Ss"), (12, "T54"), (12, "T64"), (12, "Ts"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "T"), (20, "T-5")]              
 [(2, "D7"), (2, "D7/3"), (2, "D7/5"), (2, "D7/7"), (4, "S65"), (4, "S65/6"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "D7-1")  …  (8, "Tm"), (10, "S"), (10, "T"), (12, "D7-5"), (14, "S6"), (16, "D-5"), (16, "T-5"), (16, "T/3"), (16, "T/5"), (16, "Ts")]            
 [(4, "D/5"), (6, "T"), (6, "T/5"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D64"), (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/5"), (16, "T64"), (18, "Ss")]                                              
 [(4, "D/5"), (6, "T"), (6, "T/5"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D64"), (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/5"), (16, "T64"), (18, "Ss")]                                              
 [(4, "D/5"), (6, "T"), (6, "T/5"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D64"), (14, "D7-1"), (14, "S"), (16, "D7-5"), (16, "S/5"), (16, "T64"), (18, "Ss")]                                              
 [(10, "D"), (10, "D7")]                                                                                                                                                                                                                                              
 [(16, "T")]                                                                                                                                                                                                                                                          
 [(12, "T")]                                                                                                                                                                                                                                                          

Done. Total checked: 78000, Pruned: 93175, completed: 32, time: 1.997999906539917, efficiency: 16.016016765194323
Results: bestval_func: 110, bestval_voices: 91
(15, 360, 360, 360)
[0 1 0 2 0 0 0 1 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 0; 0 0 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 0 1 0 0 1 1 0 0 1; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 3 0 0 0 1 0 0 0 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 2 0 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 0 1 0 0 0 0 0 0 2 0 0 1; 0 0 0 0 0 0 0 1 1 0 1 1; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 1 0 0 0 1 1 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 0 0 0 0 1 2 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0]
Key Counter is [0 11 0 29 7 0 3 22 32 0 19 5]
Key Score is [34; 94; 48; 102; 87; 48; 99; 37; 113; 58; 70; 106]
Position Counter for 9 is [32 0 19 5 0 11 0 29 7 0 3 22]
Any[[9.0, 87.75, 1.0]]
[9, 88, 1]
9 G# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 108
child voicing cost: 178
Best yet: 286
New solution
function cost: 108
child voicing cost: 164
Best yet: 272
New solution
function cost: 108
child voicing cost: 158
Best yet: 266
New solution
function cost: 108
child voicing cost: 157
Best yet: 265
New solution
function cost: 110
child voicing cost: 149
Best yet: 259
New solution
function cost: 110
child voicing cost: 147
Best yet: 257
New solution
function cost: 110
child voicing cost: 146
Best yet: 256
New solution
function cost: 110
child voicing cost: 145
Best yet: 255
New solution
function cost: 110
child voicing cost: 143
Best yet: 253
New solution
function cost: 110
child voicing cost: 142
Best yet: 252
New solution
function cost: 110
child voicing cost: 141
Best yet: 251
New solution
function cost: 110
child voicing cost: 139
Best yet: 249
New solution
function cost: 114
child voicing cost: 130
Best yet: 244
New solution
function cost: 110
child voicing cost: 129
Best yet: 239
New solution
function cost: 110
child voicing cost: 127
Best yet: 237
New solution
function cost: 110
child voicing cost: 126
Best yet: 236
New solution
function cost: 110
child voicing cost: 125
Best yet: 235
New solution
function cost: 110
child voicing cost: 123
Best yet: 233
New solution
function cost: 110
child voicing cost: 122
Best yet: 232
New solution
function cost: 114
child voicing cost: 117
Best yet: 231
New solution
function cost: 102
child voicing cost: 127
Best yet: 229
New solution
function cost: 102
child voicing cost: 124
Best yet: 226
New solution
function cost: 110
child voicing cost: 111
Best yet: 221
New solution
function cost: 110
child voicing cost: 109
Best yet: 219
New solution
function cost: 110
child voicing cost: 108
Best yet: 218
New solution
function cost: 104
child voicing cost: 109
Best yet: 213
New solution
function cost: 104
child voicing cost: 107
Best yet: 211
New solution
function cost: 110
child voicing cost: 98
Best yet: 208
New solution
function cost: 110
child voicing cost: 96
Best yet: 206
New solution
function cost: 110
child voicing cost: 95
Best yet: 205
New solution
function cost: 102
child voicing cost: 96
Best yet: 198
New solution
function cost: 102
child voicing cost: 94
Best yet: 196
New solution
function cost: 104
child voicing cost: 90
Best yet: 194
New solution
function cost: 100
child voicing cost: 89
Best yet: 189
New solution
function cost: 100
child voicing cost: 87
Best yet: 187
New solution
function cost: 100
child voicing cost: 85
Best yet: 185
New solution
function cost: 100
child voicing cost: 84
Best yet: 184
New solution
function cost: 100
child voicing cost: 83
Best yet: 183
New solution
function cost: 100
child voicing cost: 81
Best yet: 181
New solution
function cost: 100
child voicing cost: 80
Best yet: 180

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (14, "T", [(56, 1), (56, 1), (60, 3), (63, 5)])   
 (2, "S/3", [(53, 3), (56, 5), (61, 1), (61, 1)])  
 (8, "D", [(51, 1), (51, 1), (58, 5), (67, 3)])    
 (2, "D7", [(51, 1), (58, 5), (61, 7), (67, 3)])   
 (8, "Ts", [(53, 1), (53, 1), (60, 5), (68, 3)])   
 (8, "Ts", [(53, 1), (53, 1), (60, 5), (68, 3)])   
 (14, "D", [(51, 1), (58, 5), (63, 1), (67, 3)])   
 (10, "D", [(51, 1), (63, 1), (67, 3), (70, 5)])   
 (4, "D7-5", [(51, 1), (63, 1), (67, 3), (73, 7)]) 
 (10, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])   
 (14, "D7-1", [(58, 5), (61, 7), (67, 3), (70, 5)])
 (2, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (2, "S/3", [(53, 3), (61, 1), (68, 5), (73, 1)])  
 ?                                                 
 (0, "D/3", [(55, 3), (63, 1), (63, 1), (70, 5)])  
 (10, "T", [(56, 1), (60, 3), (63, 5), (68, 1)])   
 (4, "D/3", [(55, 3), (63, 1), (63, 1), (70, 5)])  
 (4, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (2, "S/3", [(53, 3), (61, 1), (68, 5), (73, 1)])  
 (2, "D7/3", [(55, 3), (61, 7), (70, 5), (75, 1)]) 
 (6, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])    
 (6, "T", [(56, 1), (60, 3), (68, 1), (75, 5)])    
 (6, "T", [(56, 1), (63, 5), (68, 1), (72, 3)])    
 (10, "D7", [(51, 1), (61, 7), (67, 3), (70, 5)])  
 (16, "T", [(44, 1), (60, 3), (63, 5), (68, 1)])   
 (16, "T", [(44, 1), (60, 3), (63, 5), (68, 1)])   

Done. Total checked: 109568, Pruned: 121684, completed: 40, time: 2.7100000381469727, efficiency: 14.760147393706665
Results: bestval_func: 100, bestval_voices: 80
(16, 360, 360, 360)
Total time for optimisation of piece: 6.135999917984009
["T", "S/3", "D", "D7", "Ts", "Ts", "D", "D", "D7-5", "T", "D7-1", "T", "S/3", "D", "T", "T", "D7", "Ts", "D/3", "T", "D/3", "T", "D/3", "T", "S/3", "D7/3", "T", "T", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-52.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-520.csv
[0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 1 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 0 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 1 0 0 2 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 2 0 0 0; 0 0 0 0 1 0 0 0 2 1 0 0; 0 0 0 0 0 0 3 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 2 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 2 0 1 0 0 0; 0 0 0 1 0 0 1 0 0 2 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 0 0 0 1 0 1 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1]
Key Counter is [0 11 0 7 27 0 21 0 25 13 3 22]
Key Score is [62; 67; 94; 35; 126; 43; 89; 83; 46; 119; 23; 116]
Position Counter for 5 is [27 0 21 0 25 13 3 22 0 11 0 7]
Any[[5.0, 79.75, 1.0]]
[5, 80, 1]
5 E Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", 

8-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (56, 3), (59, 5), (64, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (68, 3), (71, 5), (76, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (56, 3), (64, 1), (71, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (59, 5), (68, 3), (76, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (59, 5), (64, 1), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (64, 1), (68, 3), (71, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (52, 1), (59, 5), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (64, 1), (71, 5), (80, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(8, "T")]                                                                                                                                                                                                                                                        
 [(0, "D"), (0, "D/3"), (0, "D/5"), (0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D7-1"), (4, "Tm"), (6, "D7-5")  …  (6, "T54"), (10, "D-5"), (10, "S/3"), (10, "S/5"), (10, "Ss"), (10, "T64"), (10, "Ts"), (12, "S"), (12, "T-5"), (16, "S6")]          
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D/5"), (4, "D7-1"), (6, "S65"), (6, "S65/6")  …  (8, "T/5"), (10, "D7-5"), (10, "S/3"), (10, "S/5"), (10, "Ss"), (12, "S"), (12, "Ts"), (14, "D-5"), (16, "S6"), (18, "T-5")]       
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3")  …  (10, "Ts"), (12, "D"), (12, "D7-1"), (14, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "D-5"), (20, "S6"), (20, "Ss")]         
 [(0, "D7"), (0, "D7-1"), (0, "D7/3"), (0, "D7/7"), (0, "S6"), (0, "S65"), (0, "S65/6"), (0, "Ss"), (4, "D"), (4, "D/3")  …  (4, "T54"), (4, "T64"), (6, "D64"), (6, "D7-5"), (6, "T"), (6, "T-5"), (6, "T/3"), (6, "Tm"), (6, "Ts"), (10, "D-5")]                 
 [(0, "D64"), (0, "T/3"), (2, "Tm"), (4, "D54"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3")  …  (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Ss"), (16, "D/3"), (16, "S65"), (16, "T64"), (18, "D7-1"), (20, "T-5")]      
 [(2, "S65/6"), (6, "D54"), (8, "D"), (8, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "Ts"), (10, "D64"), (10, "T/3"), (10, "T54"), (12, "D7-1"), (12, "Ss"), (14, "T-5"), (16, "T"), (18, "D-5"), (18, "D7-5")]           
 [(2, "S"), (2, "S/3"), (6, "S6"), (8, "D64"), (8, "D7-5"), (8, "S65/6"), (8, "T/3"), (8, "T54"), (8, "Ts"), (10, "T"), (12, "D-5"), (12, "D54"), (14, "D"), (14, "D/3"), (14, "D7"), (14, "D7-1"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (20, "T-5")]         
 [(2, "Tm"), (4, "D64"), (4, "D7-5"), (6, "D"), (6, "D/3"), (8, "D-5"), (8, "D54"), (10, "D7"), (10, "D7/3"), (10, "D7/7")  …  (14, "Ss"), (14, "T"), (14, "T/3"), (16, "S65"), (16, "S65/6"), (16, "T54"), (18, "Ts"), (20, "S/3"), (20, "T64"), (24, "T-5")]     
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7-5"), (6, "T/3"), (6, "T/5"), (6, "T54"), (6, "Ts"), (8, "S6"), (8, "T")  …  (12, "D/3"), (12, "D/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "Ss"), (14, "Tm"), (16, "D7-1"), (18, "T-5")]         
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "Ts"), (10, "D7-1")  …  (10, "T"), (10, "Tm"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (14, "D"), (14, "D/3"), (14, "D/5"), (16, "D-5"), (20, "T-5")]      
 [(4, "D/3"), (4, "D/5"), (6, "T"), (6, "T/3"), (6, "T/5"), (8, "D7-1"), (8, "T54"), (10, "D"), (10, "D7"), (10, "D7/3")  …  (12, "T-5"), (12, "T64"), (12, "Tm"), (16, "D7-5"), (16, "S65"), (16, "S65/6"), (20, "D-5"), (20, "Ss"), (22, "S"), (26, "S6")]       
 [(6, "S65/6"), (6, "T-5"), (10, "D/3"), (12, "D7"), (12, "D7-1"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "T")  …  (12, "Ts"), (14, "D54"), (14, "S/3"), (14, "T54"), (14, "Tm"), (16, "D"), (16, "Ss"), (18, "D64"), (22, "D7-5"), (26, "D-5")]
 [(2, "S65/6"), (4, "Ts"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "T"), (10, "D54"), (10, "T-5"), (12, "D"), (12, "D/3"), (12, "D7-1"), (12, "Ss"), (14, "D64"), (14, "T/3"), (16, "Tm"), (18, "D7-5"), (22, "D-5")]          
 [(0, "Ts"), (4, "T"), (6, "S65/6"), (6, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D64"), (14, "T/3"), (16, "D"), (16, "D/3"), (16, "D7-1"), (16, "Ss"), (18, "D7-5"), (22, "D-5")]                 
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "T"), (8, "D54"), (8, "D7-5"), (10, "D"), (10, "D/3"), (10, "S6"), (12, "D-5"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "T-5"), (18, "D7-1")]                     

"O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

8-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (56, 3), (59, 5), (64, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (68, 3), (71, 5), (76, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (56, 3), (64, 1), (71, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (59, 5), (68, 3), (76, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (59, 5), (64, 1), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (64, 1), (68, 3), (71, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (52, 1), (59, 5), (68, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(52, 1), (64, 1), (71, 5), (80, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 90
child voicing cost: 171
Best yet: 261
New solution
function cost: 90
child voicing cost: 161
Best yet: 251
New solution
function cost: 90
child voicing cost: 152
Best yet: 242
New solution
function cost: 90
child voicing cost: 151
Best yet: 241
New solution
function cost: 90
child voicing cost: 149
Best yet: 239
New solution
function cost: 90
child voicing cost: 147
Best yet: 237
New solution
function cost: 90
child voicing cost: 145
Best yet: 235
New solution
function cost: 90
child voicing cost: 142
Best yet: 232
New solution
function cost: 96
child voicing cost: 135
Best yet: 231
New solution
function cost: 96
child voicing cost: 132
Best yet: 228
New solution
function cost: 96
child voicing cost: 129
Best yet: 225
New solution
function cost: 96
child voicing cost: 128
Best yet: 224
New solution
function cost: 86
child voicing cost: 136
Best yet: 222
New solution
function cost: 86
child voicing cost: 134
Best yet: 220
New solution
function cost: 84
child voicing cost: 134
Best yet: 218
New solution
function cost: 84
child voicing cost: 132
Best yet: 216
New solution
function cost: 90
child voicing cost: 125
Best yet: 215
New solution
function cost: 90
child voicing cost: 123
Best yet: 213
New solution
function cost: 86
child voicing cost: 126
Best yet: 212
New solution
function cost: 86
child voicing cost: 122
Best yet: 208
New solution
function cost: 86
child voicing cost: 119
Best yet: 205
New solution
function cost: 86
child voicing cost: 116
Best yet: 202
New solution
function cost: 84
child voicing cost: 113
Best yet: 197
New solution
function cost: 84
child voicing cost: 110
Best yet: 194
New solution
function cost: 86
child voicing cost: 107
Best yet: 193
New solution
function cost: 86
child voicing cost: 104
Best yet: 190
New solution
function cost: 86
child voicing cost: 101
Best yet: 187
New solution
function cost: 86
child voicing cost: 98
Best yet: 184
New solution
function cost: 86
child voicing cost: 94
Best yet: 180
New solution
function cost: 92
child voicing cost: 83
Best yet: 175
New solution
function cost: 92
child voicing cost: 79
Best yet: 171
New solution
function cost: 92
child voicing cost: 76
Best yet: 168
New solution
function cost: 84
child voicing cost: 81
Best yet: 165
New solution
function cost: 84
child voicing cost: 79
Best yet: 163
New solution
function cost: 84
child voicing cost: 78
Best yet: 162
New solution
function cost: 70
child voicing cost: 89
Best yet: 159
New solution
function cost: 70
child voicing cost: 87
Best yet: 157
New solution
function cost: 70
child voicing cost: 85
Best yet: 155
New solution
function cost: 70
child voicing cost: 82
Best yet: 152
New solution
function cost: 74
child voicing cost: 77
Best yet: 151
New solution
function cost: 74
child voicing cost: 75
Best yet: 149
New solution
function cost: 74
child voicing cost: 73
Best yet: 147
New solution
function cost: 76
child voicing cost: 70
Best yet: 146
New solution
function cost: 74
child voicing cost: 70
Best yet: 144
New solution
function cost: 60
child voicing cost: 81
Best yet: 141
New solution
function cost: 60
child voicing cost: 78
Best yet: 138
New solution
function cost: 60
child voicing cost: 76
Best yet: 136

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "Ts", [(49, 1), (64, 3), (68, 5), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "T"), (6, "Tm"), (8, "D7-5"), (8, "T54")  …  (12, "D-5"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "T-5"), (18, "D7-1")]        
 [(8, "D7-1"), (8, "S"), (8, "T"), (8, "T/3"), (10, "S65"), (10, "S65/6"), (10, "T-5"), (10, "T54"), (10, "Tm"), (12, "D7")  …  (12, "Ss"), (12, "Ts"), (14, "D/3"), (14, "D64"), (14, "S/3"), (14, "T64"), (16, "D"), (18, "D54"), (18, "D7-5"), (22, "D-5")]        
 [(8, "D7-1"), (10, "T/3"), (10, "T/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/3"), (12, "S/5")  …  (14, "S65"), (14, "S65/6"), (14, "T54"), (16, "D"), (16, "S6"), (16, "Ss"), (18, "D-5"), (18, "T-5"), (18, "T64"), (18, "Ts")] 
 [(14, "S65"), (14, "S65/6"), (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S6"), (16, "Ss"), (18, "D7-1")  …  (20, "D/3"), (20, "D/5"), (20, "S"), (20, "T"), (20, "T/3"), (20, "T/5"), (20, "Ts"), (22, "Tm"), (26, "D7-5"), (30, "D-5")]
 [(2, "Tm"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "S/5")  …  (10, "S65/6"), (10, "T54"), (12, "D"), (12, "S6"), (12, "Ss"), (14, "D-5"), (14, "T64"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]           
 [(2, "D7-1"), (6, "Ss"), (10, "S65"), (10, "S65/6"), (10, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/7"), (12, "S6"), (14, "D54")  …  (16, "D"), (16, "D/3"), (16, "S"), (16, "T"), (16, "T/3"), (16, "Ts"), (18, "Tm"), (22, "D64"), (22, "D7-5"), (26, "D-5")]     
 [(0, "T/3"), (0, "T/5"), (2, "Tm"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3"), (10, "S/5")  …  (14, "D7/7"), (14, "S6"), (14, "Ss"), (16, "D/3"), (16, "D/5"), (16, "S65"), (16, "S65/6"), (16, "T64"), (18, "D7-1"), (20, "T-5")]        
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "T"), (6, "Tm"), (8, "D7-5"), (10, "D")  …  (10, "Ss"), (12, "D-5"), (12, "S65"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "T-5"), (18, "D7-1")]          
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7-5"), (6, "T/3"), (6, "T/5"), (6, "T54"), (6, "Ts"), (8, "S6"), (8, "T")  …  (12, "D/3"), (12, "D/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "Ss"), (14, "Tm"), (16, "D7-1"), (18, "T-5")]            
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "T"), (6, "Tm"), (8, "D54"), (8, "D7-5"), (8, "T54")  …  (10, "Ss"), (12, "D-5"), (12, "S65"), (12, "S65/6"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (16, "T-5"), (18, "D7-1")]          
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D/3"), (6, "D/5"), (6, "S65")  …  (10, "T64"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (14, "T-5"), (14, "Ts"), (16, "S6"), (16, "Ss"), (18, "D-5")]            
 [(10, "D7-1"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Ss"), (14, "T"), (14, "T/5"), (16, "D54"), (16, "T64"), (18, "D"), (18, "D/5"), (18, "S"), (18, "S/5"), (20, "D64"), (24, "D7-5")]                                         
 [(0, "D7-1"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "Ss"), (8, "D"), (8, "D/5"), (10, "D54"), (10, "S65/6"), (12, "S"), (12, "T"), (12, "T/5"), (14, "D7-5"), (14, "S/5"), (14, "Tm"), (18, "D-5"), (18, "D64")]                                     
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/5"), (6, "D/5"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "D"), (8, "D7-1"), (10, "D64"), (12, "S"), (12, "S/5"), (14, "D7-5"), (14, "Ts"), (16, "Ss")]                                          
 [(4, "D7"), (8, "D")]                                                                                                                                                                                                                                                
 [(6, "T")]                                                                                                                                                                                                                                                           
 [(14, "T")]                                                                                                                                                                                                                                                          

Done. Total checked: 315839, Pruned: 410469, completed: 47, time: 6.833999872207642, efficiency: 6.877377945401865
Results: bestval_func: 60, bestval_voices: 76
(15, 392, 392, 392)
[0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 1 0 0 1 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 1 0 0 1 0 0 0 0 1 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 0 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 1 0 0 2 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 2 0 0 0; 0 0 0 0 1 0 0 0 2 1 0 0; 0 0 0 0 0 0 3 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 2 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 2 0 1 0 0 0; 0 0 0 1 0 0 1 0 0 2 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 0 0 0 1 0 1 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1]
Key Counter is [0 11 0 7 27 0 21 0 25 13 3 22]
Key Score is [62; 67; 94; 35; 126; 43; 89; 83; 46; 119; 23; 116]
Position Counter for 5 is [27 0 21 0 25 13 3 22 0 11 0 7]
Any[[5.0, 79.75, 1.0]]
[5, 80, 1]
5 E Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(4, "Ts", [(49, 1), (64, 3), (68, 5), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 114
child voicing cost: 145
Best yet: 259
New solution
function cost: 114
child voicing cost: 131
Best yet: 245
New solution
function cost: 114
child voicing cost: 128
Best yet: 242
New solution
function cost: 120
child voicing cost: 120
Best yet: 240
New solution
function cost: 114
child voicing cost: 122
Best yet: 236
New solution
function cost: 114
child voicing cost: 114
Best yet: 228
New solution
function cost: 114
child voicing cost: 112
Best yet: 226
New solution
function cost: 114
child voicing cost: 111
Best yet: 225
New solution
function cost: 114
child voicing cost: 110
Best yet: 224
New solution
function cost: 114
child voicing cost: 108
Best yet: 222
New solution
function cost: 116
child voicing cost: 104
Best yet: 220
New solution
function cost: 116
child voicing cost: 102
Best yet: 218
New solution
function cost: 116
child voicing cost: 100
Best yet: 216
New solution
function cost: 116
child voicing cost: 98
Best yet: 214
New solution
function cost: 116
child voicing cost: 97
Best yet: 213
New solution
function cost: 118
child voicing cost: 94
Best yet: 212
New solution
function cost: 106
child voicing cost: 104
Best yet: 210
New solution
function cost: 106
child voicing cost: 102
Best yet: 208
New solution
function cost: 106
child voicing cost: 101
Best yet: 207
New solution
function cost: 106
child voicing cost: 99
Best yet: 205
New solution
function cost: 110
child voicing cost: 94
Best yet: 204
New solution
function cost: 110
child voicing cost: 93
Best yet: 203
New solution
function cost: 108
child voicing cost: 93
Best yet: 201
New solution
function cost: 108
child voicing cost: 91
Best yet: 199
New solution
function cost: 112
child voicing cost: 86
Best yet: 198
New solution
function cost: 112
child voicing cost: 84
Best yet: 196
New solution
function cost: 112
child voicing cost: 83
Best yet: 195
New solution
function cost: 108
child voicing cost: 85
Best yet: 193
New solution
function cost: 108
child voicing cost: 83
Best yet: 191
New solution
function cost: 106
child voicing cost: 83
Best yet: 189
New solution
function cost: 104
child voicing cost: 84
Best yet: 188
New solution
function cost: 106
child voicing cost: 78
Best yet: 184
New solution
function cost: 106
child voicing cost: 76
Best yet: 182

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (8, "T", [(52, 1), (64, 1), (71, 5), (80, 3)])   
 (0, "D", [(47, 1), (63, 3), (71, 1), (78, 5)])   
 (0, "D7/3", [(51, 3), (59, 1), (69, 7), (78, 5)])
 (0, "T", [(52, 1), (59, 5), (68, 3), (76, 1)])   
 (0, "D7-1", [(54, 5), (57, 7), (69, 7), (75, 3)])
 (10, "T", [(52, 1), (59, 5), (68, 3), (76, 1)])  
 (8, "S", [(57, 1), (61, 3), (69, 1), (76, 5)])   
 (2, "S", [(57, 1), (64, 5), (69, 1), (73, 3)])   
 (2, "Tm", [(56, 1), (68, 1), (71, 3), (75, 5)])  
 (4, "S", [(57, 1), (64, 5), (69, 1), (73, 3)])   
 (6, "Ss", [(54, 1), (66, 1), (69, 3), (73, 5)])  
 (6, "T", [(52, 1), (68, 3), (71, 5), (76, 1)])   
 (10, "D/3", [(51, 3), (66, 5), (71, 1), (78, 5)])
 ?                                                
 (2, "D7-1", [(54, 5), (66, 5), (69, 7), (75, 3)])
 (0, "T/3", [(56, 3), (64, 1), (71, 5), (76, 1)]) 
 (6, "S", [(57, 1), (64, 5), (69, 1), (73, 3)])   
 (4, "S", [(57, 1), (61, 3), (64, 5), (69, 1)])   
 (4, "T/3", [(56, 3), (59, 5), (64, 1), (71, 5)]) 
 (4, "D7/5", [(54, 5), (57, 7), (63, 3), (71, 1)])
 (14, "T", [(52, 1), (56, 3), (64, 1), (71, 5)])  
 (0, "D7-1", [(54, 5), (57, 7), (63, 3), (69, 7)])
 (4, "T", [(52, 1), (59, 5), (64, 1), (68, 3)])   
 (4, "D7", [(47, 1), (57, 7), (63, 3), (66, 5)])  
 (6, "T", [(40, 1), (56, 3), (59, 5), (64, 1)])   
 (6, "T", [(40, 1), (56, 3), (59, 5), (64, 1)])   

4-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(53, 1), (68, 3), (72, 5), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(14, "T")]                                                                                                                                                                                                                                                         
 [(2, "D7-1"), (4, "S6"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "Dm"), (8, "S"), (10, "D"), (10, "D/3")  …  (14, "S65"), (14, "T/3"), (14, "T/5"), (16, "D7-5"), (18, "S/3"), (18, "S/5"), (20, "D-5"), (20, "T"), (22, "Ts"), (26, "T-5")]          
 [(0, "Dm"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (10, "D7-1"), (12, "D"), (12, "D/3"), (12, "D/5")  …  (14, "S"), (14, "S6"), (14, "T"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (18, "D7-5"), (20, "T-5"), (20, "Ts"), (22, "D-5")]         
 [(0, "S65"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S/3"), (4, "S/5"), (6, "D54"), (6, "S"), (8, "D")  …  (8, "Dm"), (8, "T/3"), (8, "T/5"), (8, "Ts"), (10, "S6"), (12, "Tm"), (14, "D7-5"), (14, "T"), (18, "D-5"), (20, "T-5")]                  
 [(0, "Dm"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S65"), (8, "S65/6"), (10, "D7-1"), (12, "D"), (12, "D/3"), (12, "S/3")  …  (14, "S6"), (14, "T"), (16, "D64"), (16, "T/3"), (16, "Tm"), (18, "D7-5"), (18, "T54"), (20, "T-5"), (20, "Ts"), (22, "D-5")]      
 [(8, "D-5"), (10, "D"), (12, "D54"), (12, "D7-5"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T64"), (16, "T"), (16, "T/3"), (18, "D7-1"), (18, "S65/6"), (18, "Ts"), (20, "D/3"), (20, "S"), (20, "S/3"), (24, "S6"), (26, "T-5")]   
 [(6, "D64"), (8, "D54"), (10, "D"), (10, "Ts"), (12, "D/3"), (12, "D7-5"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65"), (16, "D-5"), (16, "D7-1"), (16, "S"), (16, "S/3"), (16, "T"), (16, "T/3"), (16, "T54"), (26, "T-5")]                  
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (8, "D"), (8, "D64"), (8, "S65/6"), (8, "T/3"), (10, "D/3"), (10, "D54"), (10, "D7-5"), (10, "S"), (12, "Dm"), (12, "S/3"), (12, "T64"), (14, "D-5"), (14, "D7-1"), (14, "T"), (16, "Ts"), (24, "T-5")]          
 [(8, "D-5"), (10, "D"), (10, "Tm"), (12, "D54"), (12, "D7-5"), (12, "T54"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/7")  …  (16, "T/3"), (18, "D7-1"), (18, "S65"), (18, "S65/6"), (18, "Ts"), (20, "D/3"), (20, "S"), (20, "S/3"), (24, "S6"), (26, "T-5")]
 [(4, "D7-5"), (4, "S"), (4, "S/3"), (4, "S/5"), (6, "T/3"), (6, "T/5"), (6, "Ts"), (8, "D-5"), (8, "S6"), (10, "D")  …  (10, "T64"), (10, "Tm"), (12, "T"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (18, "D7-1"), (18, "Dm"), (22, "T-5")]            
 [(10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D7-5"), (12, "S"), (12, "S/3"), (12, "S/5"), (12, "S6"), (14, "Dm")  …  (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "T54"), (18, "D"), (18, "D/3"), (18, "D/5"), (18, "D7-1"), (20, "T"), (30, "T-5")]   
 [(6, "S"), (6, "S/3"), (6, "S/5"), (8, "D7-1"), (8, "Dm"), (8, "S65"), (10, "S6"), (10, "T"), (12, "D64"), (12, "D7")  …  (12, "T/3"), (12, "T/5"), (12, "Tm"), (12, "Ts"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "T-5"), (18, "D7-5"), (22, "D-5")]            
 [(6, "T"), (8, "D7-1"), (10, "S"), (10, "S/3"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S65"), (12, "T-5"), (14, "D54"), (16, "D"), (16, "D/3"), (16, "D64"), (16, "T/3"), (16, "Tm"), (16, "Ts"), (18, "D7-5"), (22, "D-5")]                   
 [(0, "S/3"), (0, "T64"), (4, "S65"), (4, "Ts"), (6, "T"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D54"), (10, "S"), (12, "D"), (12, "D/3"), (12, "D64"), (12, "T-5"), (12, "T/3"), (14, "D7-5"), (16, "Tm"), (18, "D-5"), (18, "D7-1")]             
 [(2, "T"), (2, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "D/3"), (10, "D54"), (12, "D"), (12, "D64"), (12, "D7-1"), (12, "T-5"), (12, "Ts"), (14, "D7-5"), (14, "S"), (14, "S/3"), (18, "D-5"), (20, "Dm")]          
 [(2, "T"), (2, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "D/3"), (10, "D54"), (12, "D"), (12, "D64"), (12, "D7-1"), (12, "T-5"), (12, "Ts"), (14, "D7-5"), (14, "S"), (14, "S/3"), (18, "D-5"), (20, "Dm")]          

Done. Total checked: 162376, Pruned: 180042, completed: 33, time: 3.1449999809265137, efficiency: 10.492845850599412
Results: bestval_func: 106, bestval_voices: 76
(16, 392, 392, 392)
Total time for optimisation of piece: 11.937000036239624
["T", "D", "D7/3", "T", "D7-1", "T", "S", "S", "Tm", "S", "Ss", "T", "D/3", "D7", "Ts", "Ts", "D7-1", "T", "D7/3", "T", "D7-1", "T/3", "S", "S", "T/3", "D7/5", "T", "D7-1", "T", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-520.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-533.csv
[0 2 0 0 0 1 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 1 0 0 0 1 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 2 0 0 2 0 0 0 0 0 0 0 0; 2 0 0 0 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 1 1 0 0 0 0 0 0 0 1 1 0; 0 0 0 1 0 1 0 0 0 1 1 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 1 0 0 0 2 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 1 0 2 1 0 0 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 0 1 0 0; 0 0 0 2 0 1 0 0 0 0 1 0; 1 0 1 0 0 2 0 0 0 0 0 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 0 0 0 1 0 0 0 0 3 0]
Key Counter is [21 6 1 18 0 33 0 13 11 7 22 0]
Key Score is [75; 111; 27; 119; 42; 97; 90; 42; 124; 25; 115; 57]
Position Counter for 9 is [11 7 22 0 21 6 1 18 0 33 0 13]
Any[[9.0, 88.0, 0.0]]
[9, 88, 0]
6 F Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

4-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(53, 1), (68, 3), (72, 5), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 136
child voicing cost: 165
Best yet: 301
New solution
function cost: 136
child voicing cost: 164
Best yet: 300
New solution
function cost: 136
child voicing cost: 163
Best yet: 299
New solution
function cost: 136
child voicing cost: 161
Best yet: 297
New solution
function cost: 136
child voicing cost: 159
Best yet: 295
New solution
function cost: 136
child voicing cost: 157
Best yet: 293
New solution
function cost: 136
child voicing cost: 150
Best yet: 286
New solution
function cost: 136
child voicing cost: 148
Best yet: 284
New solution
function cost: 136
child voicing cost: 142
Best yet: 278
New solution
function cost: 138
child voicing cost: 136
Best yet: 274
New solution
function cost: 138
child voicing cost: 135
Best yet: 273
New solution
function cost: 138
child voicing cost: 134
Best yet: 272
New solution
function cost: 138
child voicing cost: 133
Best yet: 271
New solution
function cost: 138
child voicing cost: 132
Best yet: 270
New solution
function cost: 138
child voicing cost: 131
Best yet: 269
New solution
function cost: 138
child voicing cost: 129
Best yet: 267
New solution
function cost: 140
child voicing cost: 125
Best yet: 265
New solution
function cost: 140
child voicing cost: 124
Best yet: 264
New solution
function cost: 140
child voicing cost: 123
Best yet: 263
New solution
function cost: 138
child voicing cost: 124
Best yet: 262
New solution
function cost: 138
child voicing cost: 123
Best yet: 261
New solution
function cost: 138
child voicing cost: 122
Best yet: 260
New solution
function cost: 138
child voicing cost: 119
Best yet: 257
New solution
function cost: 132
child voicing cost: 124
Best yet: 256
New solution
function cost: 132
child voicing cost: 121
Best yet: 253
New solution
function cost: 132
child voicing cost: 120
Best yet: 252
New solution
function cost: 138
child voicing cost: 111
Best yet: 249
New solution
function cost: 134
child voicing cost: 114
Best yet: 248
New solution
function cost: 134
child voicing cost: 113
Best yet: 247
New solution
function cost: 134
child voicing cost: 112
Best yet: 246
New solution
function cost: 134
child voicing cost: 111
Best yet: 245
New solution
function cost: 140
child voicing cost: 102
Best yet: 242
New solution
function cost: 134
child voicing cost: 107
Best yet: 241
New solution
function cost: 134
child voicing cost: 104
Best yet: 238
New solution
function cost: 116
child voicing cost: 110
Best yet: 226
New solution
function cost: 116
child voicing cost: 109
Best yet: 225
New solution
function cost: 116
child voicing cost: 102
Best yet: 218
New solution
function cost: 116
child voicing cost: 100
Best yet: 216
New solution
function cost: 114
child voicing cost: 100
Best yet: 214
New solution
function cost: 114
child voicing cost: 96
Best yet: 210
New solution
function cost: 114
child voicing cost: 91
Best yet: 205
New solution
function cost: 114
child voicing cost: 90
Best yet: 204
New solution
function cost: 116
child voicing cost: 86
Best yet: 202
New solution
function cost: 116
child voicing cost: 85
Best yet: 201
New solution
function cost: 116
child voicing cost: 83
Best yet: 199
New solution
function cost: 116
child voicing cost: 82
Best yet: 198
New solution
function cost: 118
child voicing cost: 79
Best yet: 197
New solution
function cost: 118
child voicing cost: 78
Best yet: 196
New solution
function cost: 118
child voicing cost: 75
Best yet: 193
New solution
function cost: 118
child voicing cost: 74
Best yet: 192
New solution
function cost: 118
child voicing cost: 73
Best yet: 191
New solution
function cost: 118
child voicing cost: 72
Best yet: 190
New solution
function cost: 116
child voicing cost: 73
Best yet: 189
New solution
function cost: 126
child voicing cost: 61
Best yet: 187
New solution
function cost: 126
child voicing cost: 58
Best yet: 184
New solution
function cost: 126
child voicing cost: 57
Best yet: 183

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "T"), (2, "T/3"), (2, "T/5"), (4, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (10, "D/3")  …  (12, "T-5"), (12, "Tm"), (12, "Ts"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (18, "D-5"), (18, "S6"), (20, "Dm")]        
 [(6, "T"), (6, "T54"), (8, "D7-1"), (8, "T64"), (10, "S"), (10, "S/3"), (12, "D7"), (12, "D7/3"), (12, "D7/7"), (12, "Dm")  …  (14, "D54"), (14, "S6"), (16, "D"), (16, "D/3"), (16, "D64"), (16, "T/3"), (16, "Tm"), (16, "Ts"), (18, "D7-5"), (22, "D-5")]     
 [(4, "T"), (8, "D7-1"), (10, "Dm"), (10, "S65"), (10, "T-5"), (12, "D/3"), (12, "D/5"), (12, "S"), (12, "S/3"), (12, "S/5")  …  (14, "D7/5"), (14, "D7/7"), (14, "T/3"), (14, "T/5"), (14, "Ts"), (18, "D"), (18, "Tm"), (20, "D7-5"), (20, "S6"), (24, "D-5")]  
 [(4, "D7-1"), (6, "Dm"), (8, "D/3"), (8, "D/5"), (8, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65")  …  (12, "S6"), (14, "D"), (14, "S/3"), (14, "S/5"), (14, "T-5"), (14, "T/3"), (14, "T/5"), (16, "S"), (20, "D7-5"), (24, "D-5")]   
 [(4, "D/3"), (4, "D/5"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65")  …  (10, "D"), (10, "Dm"), (10, "S/3"), (10, "S/5"), (12, "S"), (14, "T-5"), (14, "Ts"), (16, "D7-5"), (16, "S6"), (20, "D-5")]          
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (2, "S65"), (2, "S65/6"), (4, "D54"), (4, "T54"), (6, "D"), (6, "D/3"), (6, "D64")  …  (6, "T64"), (8, "S"), (10, "Dm"), (10, "Tm"), (10, "Ts"), (12, "D7-5"), (12, "S6"), (12, "T"), (16, "D-5"), (22, "T-5")]            
 [(0, "T/3"), (0, "T/5"), (4, "D"), (4, "Tm"), (4, "Ts"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7")  …  (10, "S/3"), (10, "S/5"), (10, "T"), (12, "T64"), (14, "D/3"), (14, "D/5"), (18, "D7-1"), (18, "S6"), (20, "Dm"), (20, "T-5")]        
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D/3"), (8, "D/5"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]    
 [(8, "T-5"), (12, "D7-1"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "Dm")  …  (16, "Ts"), (18, "S6"), (20, "D"), (20, "D/3"), (20, "D/5"), (20, "S/3"), (20, "S/5"), (22, "S"), (26, "D7-5"), (30, "D-5")]
 [(2, "D/3"), (4, "Dm"), (4, "Tm"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "T"), (10, "T/3"), (12, "D"), (12, "D7-1")  …  (14, "D54"), (14, "T54"), (16, "D64"), (16, "S/3"), (16, "T64"), (18, "D7-5"), (18, "S"), (18, "S6"), (20, "T-5"), (22, "D-5")]      
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D/3"), (8, "D/5"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]    
 [(4, "T"), (4, "T/5"), (6, "D64"), (6, "Ts"), (8, "D/5"), (8, "D54"), (10, "Dm"), (10, "S/5"), (12, "D7-1"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65/6"), (16, "D7-5"), (16, "S"), (24, "S6")]                                
 [(4, "S65"), (6, "D7-1"), (8, "S/5"), (10, "D54"), (10, "S"), (10, "T"), (12, "D64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "T/5"), (12, "Ts"), (14, "T54"), (16, "D"), (16, "D/5"), (22, "D7-5")]                                          
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D/3"), (8, "D"), (8, "D7-1"), (8, "S65"), (10, "D54"), (12, "D64"), (14, "D7-5"), (14, "S"), (14, "S/5"), (14, "T"), (14, "T/5"), (18, "D-5")]                                                           
 [(12, "D7"), (16, "D")]                                                                                                                                                                                                                                          
 [(12, "T")]                                                                                                                                                                                                                                                      
 [(14, "T")]                                                                                                                                                                                                                                                      

Done. Total checked: 205526, Pruned: 245618, completed: 56, time: 4.452000141143799, efficiency: 12.578615953415625
Results: bestval_func: 126, bestval_voices: 57
(15, 409, 409, 409)
[0 2 0 0 0 1 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 1 0 0 0 1 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 2 0 0 2 0 0 0 0 0 0 0 0; 2 0 0 0 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 1 0 1 0; 2 0 0 2 0 0 0 0 0 0 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 1 1 0 0 0 0 0 0 0 1 1 0; 0 0 0 1 0 1 0 0 0 1 1 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 1 0 0 0 2 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 0 0 0 2 0 0 0 1 1 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 0 0 0 0 1 0 1 1 0 1 0; 1 0 0 0 0 1 0 1 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 0 0 0 0 1 0 2 1 0 0 0; 1 0 0 1 0 0 0 2 0 0 0 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 0 1 0 0; 0 0 0 2 0 1 0 0 0 0 1 0; 1 0 1 0 0 2 0 0 0 0 0 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 0 0 0 1 0 0 0 0 3 0]
Key Counter is [21 6 1 18 0 33 0 13 11 7 22 0]
Key Score is [75; 111; 27; 119; 42; 97; 90; 42; 124; 25; 115; 57]
Position Counter for 9 is [11 7 22 0 21 6 1 18 0 33 0 13]
Any[[9.0, 88.0, 0.0]]
[9, 88, 0]
6 F Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 98
child voicing cost: 153
Best yet: 251
New solution
function cost: 98
child voicing cost: 145
Best yet: 243
New solution
function cost: 104
child voicing cost: 134
Best yet: 238
New solution
function cost: 98
child voicing cost: 138
Best yet: 236
New solution
function cost: 100
child voicing cost: 135
Best yet: 235
New solution
function cost: 106
child voicing cost: 126
Best yet: 232
New solution
function cost: 102
child voicing cost: 123
Best yet: 225
New solution
function cost: 98
child voicing cost: 125
Best yet: 223
New solution
function cost: 98
child voicing cost: 122
Best yet: 220
New solution
function cost: 98
child voicing cost: 121
Best yet: 219
New solution
function cost: 98
child voicing cost: 120
Best yet: 218
New solution
function cost: 98
child voicing cost: 117
Best yet: 215
New solution
function cost: 98
child voicing cost: 110
Best yet: 208
New solution
function cost: 98
child voicing cost: 109
Best yet: 207
New solution
function cost: 98
child voicing cost: 106
Best yet: 204
New solution
function cost: 98
child voicing cost: 103
Best yet: 201
New solution
function cost: 98
child voicing cost: 100
Best yet: 198
New solution
function cost: 98
child voicing cost: 99
Best yet: 197
New solution
function cost: 98
child voicing cost: 96
Best yet: 194
New solution
function cost: 98
child voicing cost: 93
Best yet: 191
New solution
function cost: 98
child voicing cost: 90
Best yet: 188
New solution
function cost: 118
child voicing cost: 69
Best yet: 187
New solution
function cost: 118
child voicing cost: 63
Best yet: 181
New solution
function cost: 102
child voicing cost: 75
Best yet: 177
New solution
function cost: 102
child voicing cost: 72
Best yet: 174
New solution
function cost: 102
child voicing cost: 71
Best yet: 173

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (14, "T", [(53, 1), (65, 1), (68, 3), (72, 5)])   
 (6, "Dm", [(51, 1), (67, 3), (70, 5), (75, 1)])   
 (12, "S/3", [(49, 3), (65, 5), (70, 1), (77, 5)]) 
 (6, "D54", [(48, 1), (67, 5), (72, 1), (77, 4)])  
 (12, "D", [(48, 1), (67, 5), (72, 1), (76, 3)])   
 (10, "D", [(48, 1), (64, 3), (72, 1), (79, 5)])   
 (10, "Ts", [(49, 1), (65, 3), (68, 5), (77, 3)])  
 (16, "Ts", [(49, 1), (65, 3), (68, 5), (73, 1)])  
 (10, "D", [(48, 1), (67, 5), (72, 1), (76, 3)])   
 (4, "S/3", [(49, 3), (65, 5), (70, 1), (77, 5)])  
 (10, "D7/3", [(52, 3), (60, 1), (70, 7), (79, 5)])
 (10, "T", [(53, 1), (60, 5), (68, 3), (77, 1)])   
 (8, "D7-1", [(55, 5), (58, 7), (67, 5), (76, 3)]) 
 ?                                                 
 (2, "S65", [(58, 1), (61, 3), (65, 5), (67, 6)])  
 (4, "D", [(60, 1), (60, 1), (64, 3), (67, 5)])    
 (0, "T", [(53, 1), (60, 5), (65, 1), (68, 3)])    
 (12, "D7-1", [(55, 5), (58, 7), (64, 3), (70, 7)])
 (8, "D7/3", [(52, 3), (58, 7), (67, 5), (72, 1)]) 
 (0, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])    
 (4, "T", [(53, 1), (56, 3), (65, 1), (72, 5)])    
 (6, "D7-1", [(55, 5), (55, 5), (64, 3), (70, 7)]) 
 (8, "D7-1", [(55, 5), (55, 5), (64, 3), (70, 7)]) 
 (12, "D7", [(48, 1), (55, 5), (64, 3), (70, 7)])  
 (12, "T", [(41, 1), (53, 1), (60, 5), (68, 3)])   
 (12, "T", [(41, 1), (53, 1), (60, 5), (68, 3)])   

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (65, 3), (68, 5), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (53, 3), (61, 1), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (61, 1), (65, 3), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(12, "T")]                                                                                                                                                                                                                                                          
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D/3"), (6, "D/5"), (6, "S65")  …  (8, "Ts"), (10, "T64"), (12, "S6"), (12, "Ss"), (14, "D7-5"), (14, "T-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "D-5")]             
 [(0, "S65"), (0, "S65/6"), (4, "S/3"), (4, "S/5"), (4, "Ss"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S")  …  (10, "D/5"), (10, "D7-1"), (10, "S6"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "T-5"), (12, "Tm"), (16, "D7-5"), (20, "D-5")]         
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]           
 [(0, "T"), (0, "T/3"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64")  …  (10, "Tm"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]            
 [(6, "Ts"), (10, "D-5"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D64"), (14, "D7-5"), (14, "S65/6"), (14, "T/3"), (14, "T54")  …  (16, "D/3"), (16, "S6"), (16, "T"), (18, "Ss"), (18, "T-5"), (20, "D7"), (20, "D7/3"), (20, "D7/5"), (20, "D7/7"), (24, "D7-1")]
 [(0, "Ts"), (8, "D64"), (8, "T/3"), (8, "T64"), (10, "S"), (10, "S/3"), (10, "T"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (12, "T-5"), (14, "D"), (14, "Ss"), (16, "D-5"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D/3"), (22, "D7-1")]       
 [(8, "Ts"), (10, "D64"), (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "D"), (12, "S"), (12, "T"), (12, "T/3"), (14, "D-5"), (14, "D54"), (14, "S65/6"), (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "Ss"), (18, "D/3"), (20, "D7-1")]    
 [(6, "S65"), (6, "S65/6"), (8, "Ts"), (10, "D7-1"), (10, "S/3"), (10, "Ss"), (10, "T64"), (12, "D7"), (12, "D7/3"), (12, "D7/7")  …  (14, "D54"), (14, "T54"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "S6"), (18, "D64"), (18, "T-5"), (22, "D7-5"), (26, "D-5")]  
 [(0, "D/3"), (0, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "Tm"), (10, "D"), (10, "D7-1"), (10, "T")  …  (14, "Ts"), (16, "D7-5"), (16, "S65"), (16, "S65/6"), (16, "T-5"), (20, "D-5"), (20, "S/3"), (20, "S/5"), (20, "T64"), (22, "S")]       
 [(0, "S/3"), (0, "S/5"), (6, "S"), (6, "T"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S6"), (10, "Ts")  …  (12, "T-5"), (14, "D"), (16, "D/3"), (16, "D/5"), (16, "D7-5"), (16, "Ss"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5")]         
 [(0, "T/3"), (0, "T/5"), (2, "Tm"), (4, "D7-5"), (6, "D"), (8, "D-5"), (8, "Ts"), (10, "S"), (10, "S/3"), (10, "S/5")  …  (14, "D7/7"), (14, "S6"), (14, "Ss"), (16, "D/3"), (16, "D/5"), (16, "S65"), (16, "S65/6"), (16, "T64"), (18, "D7-1"), (20, "T-5")]        
 [(0, "T/3"), (4, "D54"), (6, "D"), (6, "T"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D-5"), (12, "D7-5"), (12, "S65/6"), (14, "S"), (14, "S/3"), (16, "D/3"), (16, "Ss"), (16, "T-5"), (16, "Ts"), (20, "D7-1")]                     
 [(6, "T-5"), (8, "T"), (10, "D/3"), (10, "T54"), (14, "D54"), (14, "D7-1"), (14, "S65/6"), (16, "D"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D64"), (18, "Tm"), (18, "Ts"), (20, "S"), (20, "S/3"), (22, "D-5"), (22, "D7-5"), (24, "T/3")]     
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "Ss"), (18, "D-5")]          
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "Ss"), (18, "D-5")]          

Done. Total checked: 112166, Pruned: 124077, completed: 26, time: 2.3389999866485596, efficiency: 11.115861542716017
Results: bestval_func: 102, bestval_voices: 71
(16, 409, 409, 409)
Total time for optimisation of piece: 8.932000160217285
["T", "Dm", "S/3", "D54", "D", "D", "Ts", "Ts", "D", "S/3", "D7/3", "T", "D7-1", "D7/3", "T", "T", "D7-1", "T", "D7-1", "T/3", "S65", "D", "T", "D7-1", "D7/3", "T", "T", "D7-1", "D7-1", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-533.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-546.csv
[0 1 0 0 0 0 1 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 0 0 2 0; 0 1 0 2 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 3 0 0 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 2 0 0 0 0 0 0 0 0 2 0; 0 0 0 1 0 0 0 0 1 0 2 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 2 0 1 0; 0 2 0 1 0 0 1 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 0 0 1 1]
Key Counter is [4 37 0 14 0 17 8 1 25 0 24 2]
Key Score is [24; 129; 48; 85; 86; 46; 127; 15; 122; 72; 60; 110]
Position Counter for 2 is [37 0 14 0 17 8 1 25 0 24 2 4]
Any[[2.0, 85.75, 1.0]]
[2, 86, 1]
2 C# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (53, 3), (56, 5), (61, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (65, 3), (68, 5), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (53, 3), (61, 1), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (56, 5), (61, 1), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (61, 1), (65, 3), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 104
child voicing cost: 189
Best yet: 293
New solution
function cost: 104
child voicing cost: 175
Best yet: 279
New solution
function cost: 104
child voicing cost: 172
Best yet: 276
New solution
function cost: 100
child voicing cost: 171
Best yet: 271
New solution
function cost: 86
child voicing cost: 180
Best yet: 266
New solution
function cost: 86
child voicing cost: 178
Best yet: 264
New solution
function cost: 86
child voicing cost: 176
Best yet: 262
New solution
function cost: 94
child voicing cost: 164
Best yet: 258
New solution
function cost: 84
child voicing cost: 172
Best yet: 256
New solution
function cost: 86
child voicing cost: 167
Best yet: 253
New solution
function cost: 86
child voicing cost: 166
Best yet: 252
New solution
function cost: 86
child voicing cost: 165
Best yet: 251
New solution
function cost: 86
child voicing cost: 164
Best yet: 250
New solution
function cost: 86
child voicing cost: 163
Best yet: 249
New solution
function cost: 86
child voicing cost: 162
Best yet: 248
New solution
function cost: 86
child voicing cost: 161
Best yet: 247
New solution
function cost: 86
child voicing cost: 160
Best yet: 246
New solution
function cost: 88
child voicing cost: 155
Best yet: 243
New solution
function cost: 88
child voicing cost: 154
Best yet: 242
New solution
function cost: 88
child voicing cost: 147
Best yet: 235
New solution
function cost: 84
child voicing cost: 150
Best yet: 234
New solution
function cost: 84
child voicing cost: 149
Best yet: 233
New solution
function cost: 84
child voicing cost: 148
Best yet: 232
New solution
function cost: 92
child voicing cost: 139
Best yet: 231
New solution
function cost: 92
child voicing cost: 138
Best yet: 230
New solution
function cost: 84
child voicing cost: 140
Best yet: 224
New solution
function cost: 88
child voicing cost: 134
Best yet: 222
New solution
function cost: 88
child voicing cost: 131
Best yet: 219
New solution
function cost: 88
child voicing cost: 130
Best yet: 218
New solution
function cost: 88
child voicing cost: 129
Best yet: 217
New solution
function cost: 86
child voicing cost: 128
Best yet: 214
New solution
function cost: 86
child voicing cost: 124
Best yet: 210
New solution
function cost: 86
child voicing cost: 123
Best yet: 209
New solution
function cost: 86
child voicing cost: 122
Best yet: 208
New solution
function cost: 86
child voicing cost: 121
Best yet: 207
New solution
function cost: 78
child voicing cost: 125
Best yet: 203
New solution
function cost: 78
child voicing cost: 121
Best yet: 199
New solution
function cost: 96
child voicing cost: 99
Best yet: 195
New solution
function cost: 96
child voicing cost: 98
Best yet: 194
New solution
function cost: 96
child voicing cost: 97
Best yet: 193
New solution
function cost: 102
child voicing cost: 88
Best yet: 190

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (61, 1), (65, 3), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T"), (0, "T/3"), (0, "T/5"), (2, "T54"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3")  …  (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D7-5"), (16, "S6"), (16, "Ss"), (18, "D-5")]          
 [(0, "Ts"), (8, "D64"), (8, "T/3"), (8, "T64"), (10, "S"), (10, "S/3"), (10, "T"), (10, "Tm"), (12, "D54"), (12, "D7-5")  …  (12, "T54"), (14, "D"), (14, "S6"), (14, "Ss"), (16, "D-5"), (18, "D7"), (18, "D7/3"), (18, "D7/7"), (20, "D/3"), (22, "D7-1")]       
 [(0, "Ts"), (8, "T64"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "D"), (14, "T"), (16, "Ss"), (16, "T-5"), (16, "T/3")  …  (18, "S"), (18, "S/3"), (18, "S/5"), (18, "Tm"), (20, "D-5"), (20, "D/3"), (20, "D/5"), (20, "D7-5"), (22, "S6"), (24, "D7-1")]    
 [(8, "D"), (8, "D/3"), (8, "D/5"), (10, "S65"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S6")  …  (16, "D7-1"), (16, "S"), (16, "Ts"), (18, "D-5"), (18, "T54"), (18, "Tm"), (20, "T"), (20, "T/3"), (20, "T/5"), (22, "T-5")]   
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]         
 [(4, "D/3"), (8, "D54"), (8, "S65"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S6"), (10, "Ss"), (12, "D64")  …  (14, "D"), (14, "D7-1"), (14, "S"), (14, "Ts"), (16, "T54"), (18, "T"), (18, "T/3"), (20, "D7-5"), (20, "T-5"), (24, "D-5")]    
 [(8, "D-5"), (8, "D7-5"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S6"), (10, "Ss"), (14, "D7-1")  …  (16, "S65"), (16, "S65/6"), (16, "T54"), (16, "Tm"), (18, "T"), (18, "T/3"), (18, "T/5"), (20, "T64"), (22, "Ts"), (28, "T-5")]
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "S/5"), (6, "T"), (6, "Tm"), (8, "D7-5"), (10, "D")  …  (12, "S65"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/3"), (16, "D/5"), (16, "T-5"), (18, "D7-1")]       
 [(2, "S"), (2, "S/3"), (2, "S/5"), (4, "S65"), (4, "S65/6"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "T64")  …  (10, "D7/7"), (10, "T"), (12, "D7-5"), (12, "T54"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3"), (20, "D/5")]         
 [(6, "T"), (8, "T-5"), (8, "T54"), (10, "D7-1"), (10, "S"), (10, "S/3"), (10, "Ts"), (12, "T64"), (12, "Tm"), (14, "D7")  …  (14, "Ss"), (16, "D/3"), (16, "D54"), (16, "D64"), (16, "S65"), (16, "S65/6"), (16, "T/3"), (18, "D"), (20, "D7-5"), (24, "D-5")]     
 [(0, "Ts"), (8, "T/3"), (8, "T/5"), (8, "T64"), (10, "S"), (10, "S/3"), (10, "S/5"), (10, "T"), (10, "Tm"), (12, "D7-5")  …  (14, "S6"), (14, "Ss"), (16, "D-5"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D/3"), (20, "D/5"), (22, "D7-1")]    
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/5"), (6, "D/5"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "D"), (8, "D7-1"), (10, "D64"), (12, "S6"), (14, "D7-5"), (16, "S"), (16, "S/5")]                                                    
 [(8, "S"), (8, "S/5"), (10, "D54"), (10, "D64"), (10, "D7-5"), (10, "Ts"), (12, "D"), (12, "T"), (12, "T/5"), (14, "S65"), (14, "T64"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (20, "D7-1"), (22, "D/5")]                                           
 [(6, "D7-1"), (6, "S65/6"), (10, "D/3"), (10, "Ss"), (10, "T64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/5"), (12, "T"), (14, "D54"), (16, "D"), (18, "Tm"), (22, "D64"), (22, "D7-5"), (22, "T/5")]                             
 [(8, "D7"), (12, "D")]                                                                                                                                                                                                                                             
 [(10, "T")]                                                                                                                                                                                                                                                        
 [(4, "T")]                                                                                                                                                                                                                                                         

Done. Total checked: 101374, Pruned: 125396, completed: 41, time: 2.1480000019073486, efficiency: 19.08752326051836
Results: bestval_func: 102, bestval_voices: 88
(15, 365, 365, 365)
[0 1 0 0 0 0 1 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 1 0 2 0; 0 1 0 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 0 0 2 0; 0 1 0 2 0 0 0 0 0 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 2 0 0 0 0 2 0 0 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 2 0 0 0 0 0 0 2 0 0 0; 0 3 0 0 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 2 0 0 0 0 0 0 0 0 2 0; 0 0 0 1 0 0 0 0 1 0 2 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 2 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 2 0 0 0 2 0 0 0 0 0 0; 0 1 0 0 0 1 0 0 0 0 2 0; 0 1 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 2 0 1 0; 0 2 0 1 0 0 1 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 0 0 1 1]
Key Counter is [4 37 0 14 0 17 8 1 25 0 24 2]
Key Score is [24; 129; 48; 85; 86; 46; 127; 15; 122; 72; 60; 110]
Position Counter for 2 is [37 0 14 0 17 8 1 25 0 24 2 4]
Any[[2.0, 85.75, 1.0]]
[2, 86, 1]
2 C# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(49, 1), (61, 1), (65, 3), (68, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 78
child voicing cost: 223
Best yet: 301
New solution
function cost: 78
child voicing cost: 222
Best yet: 300
New solution
function cost: 78
child voicing cost: 220
Best yet: 298
New solution
function cost: 78
child voicing cost: 214
Best yet: 292
New solution
function cost: 78
child voicing cost: 213
Best yet: 291
New solution
function cost: 78
child voicing cost: 211
Best yet: 289
New solution
function cost: 78
child voicing cost: 202
Best yet: 280
New solution
function cost: 78
child voicing cost: 201
Best yet: 279
New solution
function cost: 78
child voicing cost: 199
Best yet: 277
New solution
function cost: 78
child voicing cost: 198
Best yet: 276
New solution
function cost: 78
child voicing cost: 193
Best yet: 271
New solution
function cost: 78
child voicing cost: 192
Best yet: 270
New solution
function cost: 78
child voicing cost: 190
Best yet: 268
New solution
function cost: 78
child voicing cost: 189
Best yet: 267
New solution
function cost: 78
child voicing cost: 187
Best yet: 265
New solution
function cost: 78
child voicing cost: 185
Best yet: 263
New solution
function cost: 78
child voicing cost: 184
Best yet: 262
New solution
function cost: 78
child voicing cost: 182
Best yet: 260
New solution
function cost: 78
child voicing cost: 181
Best yet: 259
New solution
function cost: 78
child voicing cost: 179
Best yet: 257
New solution
function cost: 78
child voicing cost: 177
Best yet: 255
New solution
function cost: 78
child voicing cost: 174
Best yet: 252
New solution
function cost: 82
child voicing cost: 169
Best yet: 251
New solution
function cost: 82
child voicing cost: 166
Best yet: 248
New solution
function cost: 82
child voicing cost: 165
Best yet: 247
New solution
function cost: 82
child voicing cost: 163
Best yet: 245
New solution
function cost: 82
child voicing cost: 160
Best yet: 242
New solution
function cost: 78
child voicing cost: 161
Best yet: 239
New solution
function cost: 78
child voicing cost: 160
Best yet: 238
New solution
function cost: 78
child voicing cost: 158
Best yet: 236
New solution
function cost: 78
child voicing cost: 157
Best yet: 235
New solution
function cost: 78
child voicing cost: 155
Best yet: 233
New solution
function cost: 78
child voicing cost: 154
Best yet: 232
New solution
function cost: 78
child voicing cost: 152
Best yet: 230
New solution
function cost: 78
child voicing cost: 149
Best yet: 227
New solution
function cost: 82
child voicing cost: 143
Best yet: 225
New solution
function cost: 82
child voicing cost: 140
Best yet: 222
New solution
function cost: 82
child voicing cost: 139
Best yet: 221
New solution
function cost: 82
child voicing cost: 137
Best yet: 219
New solution
function cost: 82
child voicing cost: 134
Best yet: 216
New solution
function cost: 78
child voicing cost: 134
Best yet: 212
New solution
function cost: 78
child voicing cost: 133
Best yet: 211
New solution
function cost: 78
child voicing cost: 131
Best yet: 209
New solution
function cost: 78
child voicing cost: 130
Best yet: 208
New solution
function cost: 78
child voicing cost: 128
Best yet: 206
New solution
function cost: 78
child voicing cost: 127
Best yet: 205
New solution
function cost: 78
child voicing cost: 125
Best yet: 203
New solution
function cost: 78
child voicing cost: 122
Best yet: 200

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (12, "T", [(49, 1), (49, 1), (56, 5), (65, 3)])  
 (4, "D7", [(44, 1), (54, 7), (63, 5), (72, 3)])  
 (6, "Ts", [(46, 1), (53, 5), (61, 3), (73, 3)])  
 (0, "D", [(44, 1), (56, 1), (63, 5), (72, 3)])   
 (0, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])   
 (6, "Ts", [(46, 1), (58, 1), (65, 5), (73, 3)])  
 (14, "D", [(44, 1), (63, 5), (68, 1), (72, 3)])  
 (12, "D", [(44, 1), (63, 5), (68, 1), (72, 3)])  
 (12, "D7", [(44, 1), (63, 5), (66, 7), (72, 3)]) 
 (14, "Ts", [(46, 1), (61, 3), (65, 5), (73, 3)]) 
 (10, "D7", [(44, 1), (60, 3), (66, 7), (75, 5)]) 
 (8, "Ts", [(46, 1), (61, 3), (65, 5), (73, 3)])  
 (6, "D", [(44, 1), (63, 5), (68, 1), (72, 3)])   
 ?                                                
 (4, "D/3", [(48, 3), (63, 5), (68, 1), (68, 1)]) 
 (8, "D7-5", [(44, 1), (60, 3), (66, 7), (68, 1)])
 (6, "T", [(49, 1), (61, 1), (65, 3), (68, 5)])   
 (2, "S/5", [(49, 5), (61, 5), (66, 1), (70, 3)]) 
 (6, "T", [(49, 1), (65, 3), (68, 5), (73, 1)])   
 (0, "Ts", [(46, 1), (61, 3), (70, 1), (77, 5)])  
 (4, "D7/3", [(48, 3), (63, 5), (68, 1), (78, 7)])
 (12, "T", [(49, 1), (61, 1), (68, 5), (77, 3)])  
 (6, "D7-1", [(51, 5), (60, 3), (66, 7), (75, 5)])
 (8, "D7", [(56, 1), (60, 3), (66, 7), (75, 5)])  
 (10, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])  
 (10, "T", [(49, 1), (56, 5), (65, 3), (73, 1)])  

Done. Total checked: 159607, Pruned: 176516, completed: 48, time: 3.245000123977661, efficiency: 14.791987108204633
Results: bestval_func: 78, bestval_voices: 122
(16, 365, 365, 365)
Total time for optimisation of piece: 6.805999994277954
["T", "D7", "Ts", "D", "T", "Ts", "D", "D", "D7", "Ts", "D7", "Ts", "D", "D/3", "T", "T", "Ts", "Ts", "D", "D", "D/3", "D7-5", "T", "S/5", "T", "Ts", "D7/3", "T", "D7-1", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-546.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-559.csv
[1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 1 0 0 0 1 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 2 0 0 1 0 1 0 0 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 1 0 0 0 1 0 0 0 0 1 1 0; 1 0 0 0 0 0 0 1 0 0 2 0; 2 0 0 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 0 0 1 1 0; 2 0 1 0 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 2 0; 2 0 1 0 0 1 0 0 0 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 1 0 0 0 0 1 0 2 0 0 0 0; 1 0 1 0 1 1 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 1 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 2 0 0 2 0 0 0 0 0 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 0 1 0 1 0 1 0 1 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 1 0 0 0 0 2 0]
Key Counter is [29 1 17 6 3 29 0 13 0 14 20 0]
Key Score is [105; 85; 48; 114; 24; 125; 56; 76; 98; 35; 128; 30]
Position Counter for 11 is [20 0 

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(46, 1), (62, 3), (65, 5), (70, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(58, 1), (62, 3), (65, 5), (70, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(58, 1), (62, 3), (70, 1), (77, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(46, 1), (53, 5), (62, 3), (70, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(58, 1), (65, 5), (70, 1), (74, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(58, 1), (58, 1), (62, 3), (65, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(58, 1), (58, 1), (65, 5), (74, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(12, "T")]                                                                                                                                                                                                                                                      
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (20, "S"), (22, "T-5")]       
 [(0, "S/3"), (0, "S/5"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (6, "T"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3")  …  (14, "D"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5"), (20, "D/3"), (20, "D/5")]      
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D/5"), (4, "D7-1"), (6, "S65"), (6, "S65/6")  …  (8, "T/3"), (8, "T/5"), (10, "D7-5"), (10, "S/3"), (10, "S/5"), (10, "T64"), (12, "Ts"), (14, "D-5"), (16, "S"), (18, "T-5")]     
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (6, "D54"), (6, "D64"), (6, "S65"), (6, "S65/6"), (6, "T/3"), (6, "T54"), (6, "Tm")  …  (10, "D/3"), (10, "D7-5"), (10, "Ss"), (10, "T64"), (12, "S6"), (12, "T"), (14, "D-5"), (14, "D7-1"), (14, "Ts"), (22, "T-5")]     
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "D/3"), (6, "D54"), (6, "S65/6"), (6, "Tm"), (8, "D"), (8, "D7-1"), (8, "Ts"), (10, "D64"), (12, "S6"), (14, "D7-5"), (14, "T-5"), (16, "S"), (16, "S/3"), (18, "D-5")]             
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "D/3"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "S/3"), (12, "T64"), (14, "S6"), (14, "Ts"), (16, "D64"), (16, "D7-5"), (18, "S"), (20, "D-5"), (20, "T-5")]     
 [(0, "D/3"), (4, "D54"), (6, "D"), (8, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D7-5"), (12, "S65/6"), (14, "D7-1"), (14, "T"), (14, "T/3"), (16, "D-5"), (16, "S/3"), (16, "T64"), (18, "S6"), (18, "Ts"), (22, "S"), (24, "T-5")]   
 [(6, "S65"), (6, "S65/6"), (8, "T"), (10, "D54"), (10, "T-5"), (12, "D"), (12, "D/3"), (12, "D7"), (12, "D7-1"), (12, "D7/3")  …  (12, "Ts"), (14, "D64"), (14, "T/3"), (14, "T54"), (14, "T64"), (16, "S6"), (16, "Ss"), (16, "Tm"), (22, "D-5"), (22, "D7-5")] 
 [(4, "Ts"), (6, "T64"), (8, "T"), (10, "D/3"), (10, "D/5"), (10, "S65"), (10, "S65/6"), (10, "T54"), (14, "D7-1"), (14, "Ss")  …  (16, "D7/7"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "T/3"), (18, "T/5"), (18, "Tm"), (20, "S6"), (22, "D7-5"), (26, "D-5")]
 [(0, "D/3"), (0, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "Tm"), (10, "D"), (10, "D7-1"), (10, "T")  …  (14, "Ss"), (14, "Ts"), (16, "D7-5"), (16, "S65"), (16, "S65/6"), (16, "T-5"), (20, "D-5"), (20, "S/3"), (20, "S/5"), (22, "S")]    
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D/3"), (6, "D/5"), (6, "S65")  …  (8, "Ts"), (10, "T64"), (12, "S6"), (12, "Ss"), (14, "D7-5"), (14, "T-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (18, "D-5")]         
 [(4, "D/3"), (6, "T"), (6, "T/3"), (8, "D54"), (8, "D7-1"), (8, "S65/6"), (10, "D"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Ts"), (12, "D64"), (12, "T-5"), (14, "S"), (16, "D7-5"), (16, "S/3"), (16, "T64"), (20, "D-5")]                 
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (10, "D54"), (10, "S65/6"), (10, "Tm"), (12, "D"), (12, "D/3"), (12, "D7-1"), (12, "Ts"), (14, "D64"), (16, "S6"), (18, "D7-5"), (18, "T-5"), (20, "S"), (20, "S/3"), (22, "D-5")]      
 [(0, "Ts"), (4, "T"), (6, "S65/6"), (6, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/3"), (14, "D/3"), (14, "D54"), (14, "D64"), (14, "T/3"), (16, "D"), (16, "D7-1"), (16, "Ss"), (18, "D7-5"), (22, "D-5")]                
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (10, "D54"), (10, "S65/6"), (10, "Tm"), (12, "D"), (12, "D/3"), (12, "D7-1"), (12, "Ts"), (14, "D64"), (16, "S6"), (18, "D7-5"), (18, "T-5"), (20, "S"), (20, "S/3"), (22, "D-5")]      

29 1 17 6 3 29 0 13 0 14]
Any[[11.0, 76.75, 1.0]]
[11, 77, 1]
11 A# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

7-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(46, 1), (62, 3), (65, 5), (70, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(58, 1), (62, 3), (65, 5), (70, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(58, 1), (62, 3), (70, 1), (77, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(46, 1), (53, 5), (62, 3), (70, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(58, 1), (65, 5), (70, 1), (74, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(58, 1), (58, 1), (62, 3), (65, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "T", [(58, 1), (58, 1), (65, 5), (74, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 114
child voicing cost: 193
Best yet: 307
New solution
function cost: 114
child voicing cost: 186
Best yet: 300
New solution
function cost: 114
child voicing cost: 184
Best yet: 298
New solution
function cost: 114
child voicing cost: 181
Best yet: 295
New solution
function cost: 114
child voicing cost: 179
Best yet: 293
New solution
function cost: 114
child voicing cost: 177
Best yet: 291
New solution
function cost: 114
child voicing cost: 176
Best yet: 290
New solution
function cost: 114
child voicing cost: 175
Best yet: 289
New solution
function cost: 114
child voicing cost: 172
Best yet: 286
New solution
function cost: 114
child voicing cost: 170
Best yet: 284
New solution
function cost: 114
child voicing cost: 161
Best yet: 275
New solution
function cost: 114
child voicing cost: 160
Best yet: 274
New solution
function cost: 114
child voicing cost: 159
Best yet: 273
New solution
function cost: 114
child voicing cost: 156
Best yet: 270
New solution
function cost: 114
child voicing cost: 154
Best yet: 268
New solution
function cost: 114
child voicing cost: 152
Best yet: 266
New solution
function cost: 102
child voicing cost: 161
Best yet: 263
New solution
function cost: 102
child voicing cost: 157
Best yet: 259
New solution
function cost: 102
child voicing cost: 154
Best yet: 256
New solution
function cost: 102
child voicing cost: 153
Best yet: 255
New solution
function cost: 102
child voicing cost: 150
Best yet: 252
New solution
function cost: 102
child voicing cost: 148
Best yet: 250
New solution
function cost: 106
child voicing cost: 137
Best yet: 243
New solution
function cost: 106
child voicing cost: 136
Best yet: 242
New solution
function cost: 102
child voicing cost: 138
Best yet: 240
New solution
function cost: 102
child voicing cost: 135
Best yet: 237
New solution
function cost: 106
child voicing cost: 127
Best yet: 233
New solution
function cost: 106
child voicing cost: 126
Best yet: 232
New solution
function cost: 102
child voicing cost: 128
Best yet: 230
New solution
function cost: 96
child voicing cost: 130
Best yet: 226
New solution
function cost: 100
child voicing cost: 120
Best yet: 220
New solution
function cost: 102
child voicing cost: 113
Best yet: 215
New solution
function cost: 86
child voicing cost: 126
Best yet: 212
New solution
function cost: 82
child voicing cost: 127
Best yet: 209
New solution
function cost: 82
child voicing cost: 123
Best yet: 205
New solution
function cost: 82
child voicing cost: 120
Best yet: 202
New solution
function cost: 82
child voicing cost: 118
Best yet: 200
New solution
function cost: 86
child voicing cost: 113
Best yet: 199
New solution
function cost: 86
child voicing cost: 112
Best yet: 198
New solution
function cost: 82
child voicing cost: 115
Best yet: 197
New solution
function cost: 82
child voicing cost: 113
Best yet: 195
New solution
function cost: 86
child voicing cost: 107
Best yet: 193
New solution
function cost: 86
child voicing cost: 105
Best yet: 191
New solution
function cost: 86
child voicing cost: 103
Best yet: 189
New solution
function cost: 86
child voicing cost: 101
Best yet: 187
New solution
function cost: 86
child voicing cost: 99
Best yet: 185
New solution
function cost: 86
child voicing cost: 97
Best yet: 183
New solution
function cost: 80
child voicing cost: 101
Best yet: 181
New solution
function cost: 80
child voicing cost: 98
Best yet: 178
New solution
function cost: 80
child voicing cost: 94
Best yet: 174
New solution
function cost: 80
child voicing cost: 91
Best yet: 171
New solution
function cost: 80
child voicing cost: 89
Best yet: 169
New solution
function cost: 84
child voicing cost: 84
Best yet: 168
New solution
function cost: 84
child voicing cost: 83
Best yet: 167
New solution
function cost: 80
child voicing cost: 85
Best yet: 165
New solution
function cost: 80
child voicing cost: 84
Best yet: 164
New solution
function cost: 80
child voicing cost: 82
Best yet: 162
New solution
function cost: 80
child voicing cost: 80
Best yet: 160

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "Ts", [(55, 1), (58, 3), (58, 3), (62, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "S65"), (10, "S65/6"), (10, "T54")  …  (12, "Ts"), (14, "T64"), (16, "S6"), (16, "Ss"), (18, "D7-5"), (18, "T-5"), (20, "S"), (20, "S/3"), (20, "S/5"), (22, "D-5")]       
 [(4, "D"), (4, "D/3"), (6, "D54"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (10, "D-5"), (10, "D7-5")  …  (14, "S65"), (14, "S65/6"), (14, "T54"), (14, "Tm"), (16, "T"), (16, "T/3"), (18, "S/3"), (18, "T64"), (20, "Ts"), (26, "T-5")]          
 [(8, "D"), (8, "D/3"), (8, "D/5"), (10, "S65"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S6")  …  (14, "T64"), (16, "D7-1"), (16, "S"), (16, "Ts"), (18, "T54"), (18, "Tm"), (20, "T"), (20, "T/3"), (20, "T/5"), (22, "T-5")]     
 [(6, "T/3"), (6, "T/5"), (8, "S6"), (8, "Ss"), (8, "Tm"), (10, "D7-5"), (12, "D"), (12, "D/3"), (12, "D/5"), (12, "D7")  …  (12, "D7/7"), (12, "S"), (12, "S/3"), (12, "S/5"), (14, "D-5"), (16, "T"), (18, "S65"), (18, "S65/6"), (20, "Ts"), (26, "T-5")]          
 [(2, "D/3"), (2, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "T54")  …  (14, "S65/6"), (14, "T-5"), (16, "S6"), (16, "Ss"), (18, "D7-5"), (18, "S/3"), (18, "S/5"), (18, "T64"), (20, "S"), (22, "D-5")]        
 [(2, "S65"), (2, "S65/6"), (4, "Ts"), (6, "T64"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "T")  …  (10, "T-5"), (10, "T54"), (10, "Tm"), (12, "D"), (12, "D7-1"), (12, "S6"), (12, "Ss"), (14, "D64"), (18, "D7-5"), (22, "D-5")]             
 [(2, "D"), (2, "D/3"), (2, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-5"), (8, "S65"), (8, "S65/6")  …  (12, "D-5"), (12, "S/3"), (12, "S/5"), (12, "Ss"), (12, "T64"), (12, "Tm"), (14, "S6"), (14, "Ts"), (18, "S"), (20, "T-5")]           
 [(0, "Tm"), (12, "D54"), (12, "D7-5"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D-5"), (16, "D/3")  …  (18, "S/5"), (18, "S6"), (18, "Ss"), (18, "T"), (18, "T/3"), (18, "T/5"), (20, "S65"), (20, "S65/6"), (22, "D7-1"), (28, "T-5")]
 [(4, "D7-1"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (8, "T"), (8, "T/3"), (8, "T/5")  …  (12, "D"), (12, "S"), (12, "S/3"), (12, "S/5"), (12, "Ts"), (14, "T-5"), (14, "T64"), (14, "Tm"), (18, "D7-5"), (22, "D-5")]              
 [(4, "D7-5"), (6, "S"), (8, "D-5"), (8, "D64"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S6"), (10, "Ss")  …  (12, "S65"), (12, "S65/6"), (12, "T64"), (12, "Tm"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "Ts"), (16, "D54"), (20, "T-5")]      
 [(4, "Tm"), (6, "D7-5"), (8, "D"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D-5")  …  (12, "S6"), (12, "Ss"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "S65"), (14, "S65/6"), (14, "T64"), (16, "D7-1"), (18, "T-5")]             
 [(4, "T64"), (6, "T"), (6, "T/5"), (8, "S65/6"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D/5"), (12, "D64"), (14, "D"), (14, "D7-1"), (14, "S"), (14, "S/5"), (16, "D54"), (16, "D7-5"), (18, "Ss")]                                 
 [(6, "S"), (6, "S/5"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "Ss"), (10, "Ts"), (12, "D/5"), (12, "D64"), (12, "D7-5"), (14, "D"), (14, "D7-1"), (14, "T"), (14, "T/5"), (16, "D54"), (16, "T54")]                                
 [(4, "T64"), (6, "T"), (6, "T/5"), (8, "S65/6"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D/5"), (12, "D64"), (14, "D"), (14, "D7-1"), (14, "S"), (14, "S/5"), (16, "D54"), (16, "D7-5"), (18, "Ss")]                                 
 [(8, "D"), (12, "D7")]                                                                                                                                                                                                                                               
 [(8, "T")]                                                                                                                                                                                                                                                           
 [(10, "T")]                                                                                                                                                                                                                                                          

Done. Total checked: 110454, Pruned: 130917, completed: 58, time: 2.691999912261963, efficiency: 21.545320167289784
Results: bestval_func: 80, bestval_voices: 80
(15, 367, 367, 367)
[1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 1 0 0 0 1 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 2 0 0 1 0 1 0 0 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 1 0 0 0 1 0 0 0 0 1 1 0; 1 0 0 0 0 0 0 1 0 0 2 0; 2 0 0 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 0 0 1 1 0; 2 0 1 0 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 2 0; 2 0 1 0 0 1 0 0 0 0 0 0; 1 0 0 0 0 2 0 1 0 0 0 0; 1 0 0 0 0 1 0 2 0 0 0 0; 1 0 1 0 1 1 0 0 0 0 0 0; 2 0 0 0 0 1 0 0 0 0 1 0; 1 0 1 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 2 0 0 2 0 0 0 0 0 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 0 1 0 1 0 1 0 1 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 2 0 0 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 1 0 0 0 0 2 0]
Key Counter is [29 1 17 6 3 29 0 13 0 14 20 0]
Key Score is [105; 85; 48; 114; 24; 125; 56; 76; 98; 35; 128; 30]
Position Counter for 11 is [20 0 29 1 17 6 3 29 0 13 0 14]
Any[[11.0, 76.75, 1.0]]
[11, 77, 1]
11 A# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "Ts", [(55, 1), (58, 3), (58, 3), (62, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 106
child voicing cost: 252
Best yet: 358
New solution
function cost: 106
child voicing cost: 246
Best yet: 352
New solution
function cost: 106
child voicing cost: 229
Best yet: 335
New solution
function cost: 106
child voicing cost: 222
Best yet: 328
New solution
function cost: 106
child voicing cost: 221
Best yet: 327
New solution
function cost: 106
child voicing cost: 216
Best yet: 322
New solution
function cost: 106
child voicing cost: 214
Best yet: 320
New solution
function cost: 106
child voicing cost: 213
Best yet: 319
New solution
function cost: 114
child voicing cost: 203
Best yet: 317
New solution
function cost: 114
child voicing cost: 200
Best yet: 314
New solution
function cost: 114
child voicing cost: 198
Best yet: 312
New solution
function cost: 114
child voicing cost: 192
Best yet: 306
New solution
function cost: 118
child voicing cost: 187
Best yet: 305
New solution
function cost: 106
child voicing cost: 196
Best yet: 302
New solution
function cost: 114
child voicing cost: 183
Best yet: 297
New solution
function cost: 114
child voicing cost: 180
Best yet: 294
New solution
function cost: 114
child voicing cost: 178
Best yet: 292
New solution
function cost: 114
child voicing cost: 172
Best yet: 286
New solution
function cost: 118
child voicing cost: 167
Best yet: 285
New solution
function cost: 112
child voicing cost: 172
Best yet: 284
New solution
function cost: 114
child voicing cost: 164
Best yet: 278
New solution
function cost: 116
child voicing cost: 159
Best yet: 275
New solution
function cost: 120
child voicing cost: 153
Best yet: 273
New solution
function cost: 112
child voicing cost: 160
Best yet: 272
New solution
function cost: 112
child voicing cost: 157
Best yet: 269
New solution
function cost: 112
child voicing cost: 156
Best yet: 268
New solution
function cost: 112
child voicing cost: 154
Best yet: 266
New solution
function cost: 116
child voicing cost: 146
Best yet: 262
New solution
function cost: 120
child voicing cost: 138
Best yet: 258
New solution
function cost: 120
child voicing cost: 133
Best yet: 253
New solution
function cost: 112
child voicing cost: 131
Best yet: 243
New solution
function cost: 118
child voicing cost: 121
Best yet: 239
New solution
function cost: 112
child voicing cost: 122
Best yet: 234
New solution
function cost: 120
child voicing cost: 111
Best yet: 231
New solution
function cost: 126
child voicing cost: 100
Best yet: 226
New solution
function cost: 128
child voicing cost: 96
Best yet: 224
New solution
function cost: 112
child voicing cost: 105
Best yet: 217
New solution
function cost: 118
child voicing cost: 95
Best yet: 213
New solution
function cost: 112
child voicing cost: 96
Best yet: 208
New solution
function cost: 120
child voicing cost: 85
Best yet: 205
New solution
function cost: 126
child voicing cost: 74
Best yet: 200
New solution
function cost: 128
child voicing cost: 70
Best yet: 198

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (12, "T", [(58, 1), (58, 1), (65, 5), (74, 3)])   
 (0, "D", [(53, 1), (65, 1), (69, 3), (72, 5)])    
 (0, "S/3", [(55, 3), (63, 1), (70, 5), (75, 1)])  
 (0, "D7/3", [(57, 3), (63, 7), (72, 5), (77, 1)]) 
 (12, "T", [(58, 1), (62, 3), (70, 1), (77, 5)])   
 (4, "D7/3", [(57, 3), (65, 1), (72, 5), (75, 7)]) 
 (10, "T", [(58, 1), (65, 5), (70, 1), (74, 3)])   
 (14, "T", [(58, 1), (62, 3), (65, 5), (70, 1)])   
 (8, "T", [(58, 1), (58, 1), (62, 3), (65, 5)])    
 (4, "Ts", [(55, 1), (58, 3), (62, 5), (67, 1)])   
 (0, "D/3", [(57, 3), (60, 5), (60, 5), (65, 1)])  
 (4, "T", [(58, 1), (58, 1), (62, 3), (65, 5)])    
 (4, "D/3", [(57, 3), (60, 5), (60, 5), (65, 1)])  
 ?                                                 
 (8, "T", [(46, 1), (58, 1), (65, 5), (74, 3)])    
 (2, "D", [(41, 1), (60, 5), (69, 3), (77, 1)])    
 (12, "D7-5", [(41, 1), (57, 3), (65, 1), (75, 7)])
 (8, "T", [(46, 1), (58, 1), (65, 5), (74, 3)])    
 (10, "Ss", [(48, 1), (55, 5), (63, 3), (72, 1)])  
 (8, "T/3", [(50, 3), (53, 5), (65, 5), (70, 1)])  
 (14, "S", [(51, 1), (55, 3), (63, 1), (70, 5)])   
 (6, "S", [(51, 1), (55, 3), (63, 1), (70, 5)])    
 (14, "S", [(51, 1), (58, 5), (63, 1), (67, 3)])   
 (8, "D", [(53, 1), (57, 3), (60, 5), (65, 1)])    
 (8, "T", [(46, 1), (58, 1), (62, 3), (65, 5)])    
 (8, "T", [(46, 1), (58, 1), (62, 3), (65, 5)])    

3-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(49, 1), (64, 3), (68, 5), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(49, 1), (56, 5), (64, 3), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(49, 1), (61, 1), (68, 5), (76, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "T")]                                                                                                                                                                                                                                                       
 [(0, "Tm"), (4, "D"), (6, "D54"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ts"), (10, "D-5")  …  (14, "S"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "Dm"), (18, "D7-1"), (18, "S6"), (20, "S/3"), (20, "S/5"), (24, "T-5")]         
 [(0, "S"), (0, "S/3"), (0, "S/5"), (4, "S6"), (6, "S65"), (8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (12, "D-5"), (12, "T54"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "Dm"), (14, "Tm"), (16, "T"), (22, "T-5")]     
 [(0, "Tm"), (6, "D/3"), (6, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T")  …  (12, "S65"), (14, "D54"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "S/5"), (16, "Ts"), (18, "D-5"), (18, "S6"), (20, "T-5")]      
 [(2, "S65"), (2, "S65/6"), (4, "S"), (4, "S/3"), (6, "D64"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "T/3"), (6, "T64")  …  (10, "D"), (10, "Tm"), (12, "D/3"), (12, "D7-5"), (12, "S6"), (12, "T"), (16, "D-5"), (16, "D7-1"), (18, "Dm"), (18, "T-5")]        
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "D7-1"), (12, "D"), (12, "D/3"), (12, "Tm"), (14, "D54"), (14, "S"), (14, "T"), (14, "T/3"), (16, "D64"), (16, "Ts"), (18, "D7-5"), (20, "S/3"), (20, "T-5"), (22, "D-5")]                 
 [(6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D"), (12, "D64"), (12, "S65/6"), (14, "D54"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "T64"), (16, "Ts"), (18, "D-5"), (20, "T-5")]                
 [(8, "D/3"), (8, "T"), (8, "T/3"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65/6"), (12, "D54"), (12, "T54"), (14, "D"), (14, "D64"), (14, "D7-1"), (14, "S/3"), (14, "T64"), (16, "S"), (18, "T-5"), (18, "Ts"), (20, "D7-5"), (24, "D-5")] 
 [(8, "Tm"), (10, "D/3"), (10, "S6"), (10, "T"), (10, "T/3"), (12, "D64"), (12, "D7"), (12, "D7/3"), (12, "D7/7"), (12, "Dm")  …  (14, "D7-1"), (14, "S"), (14, "T54"), (16, "D"), (16, "S/3"), (16, "T64"), (16, "Ts"), (18, "D7-5"), (20, "T-5"), (22, "D-5")]  
 [(0, "T"), (0, "T/3"), (0, "T/5"), (6, "T64"), (8, "D/3"), (8, "D/5"), (10, "T-5"), (10, "Tm"), (10, "Ts"), (12, "D7-1")  …  (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (16, "D7-5"), (16, "S"), (16, "S/3"), (16, "S/5"), (20, "D-5"), (24, "S6")]    
 [(6, "T/3"), (6, "T/5"), (10, "D/3"), (10, "D/5"), (10, "T"), (12, "D64"), (12, "Dm"), (12, "T-5"), (12, "Tm"), (12, "Ts")  …  (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S65"), (22, "D-5"), (22, "D7-5"), (22, "S"), (22, "S/3"), (22, "S/5"), (26, "S6")]
 [(0, "S"), (0, "S/3"), (0, "S/5"), (4, "S6"), (6, "S65"), (8, "D7-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (12, "D-5"), (12, "T54"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "Dm"), (14, "Tm"), (16, "T"), (22, "T-5")]     
 [(4, "T"), (4, "T/3"), (6, "D64"), (6, "Ts"), (8, "D/3"), (8, "D54"), (10, "Dm"), (10, "S/3"), (10, "T64"), (12, "D7-1"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65/6"), (14, "T-5"), (16, "D7-5"), (16, "S"), (20, "D-5")]     
 [(4, "T-5"), (6, "T"), (10, "T54"), (12, "Ts"), (16, "D64"), (16, "S65"), (16, "T/3"), (16, "Tm"), (18, "D/3"), (18, "D54"), (18, "D7-1"), (18, "S"), (18, "S/3"), (24, "D"), (24, "D7"), (24, "D7/3"), (24, "D7/5"), (24, "D7/7"), (26, "D7-5"), (30, "D-5")]   
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "D7-1"), (12, "D"), (12, "D/3"), (12, "Tm"), (14, "D54"), (14, "S"), (14, "T"), (14, "T/3"), (16, "D64"), (16, "Ts"), (18, "D7-5"), (20, "S/3"), (20, "T-5"), (22, "D-5")]                 
 [(6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D"), (12, "D64"), (12, "S65/6"), (14, "D54"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "T64"), (16, "Ts"), (18, "D-5"), (20, "T-5")]                

Done. Total checked: 210277, Pruned: 232676, completed: 42, time: 4.611999988555908, efficiency: 9.10667825329958
Results: bestval_func: 128, bestval_voices: 70
(16, 367, 367, 367)
Total time for optimisation of piece: 8.998999834060669
["T", "D", "S/3", "D7/3", "T", "D7/3", "T", "T", "T", "Ts", "D/3", "T", "D/3", "D7", "Ts", "Ts", "D", "D", "T/3", "D/5", "T", "D", "D7-5", "T", "Ss", "T/3", "S", "S", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-559.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-572.csv
[0 2 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 2 1 0 0 0 1 0 0 0; 0 0 0 1 2 0 0 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 1 2 0 0 0 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 1 1 0 1 0 0 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 0 0 0 0 0 2 0 0 1; 0 1 0 0 0 0 1 0 0 1 0 1; 0 2 0 0 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 0 1 1; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 1 0 0 0 0 1 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 0 0 1]
Key Counter is [0 23 0 10 28 0 14 0 25 6 3 23]
Key Score is [57; 75; 94; 38; 129; 37; 98; 71; 61; 119; 19; 126]
Position Counter for 5 is [28 0 14 0 25 6 3 23 0 23 0 10]
Any[[5.0, 78.75, 0.0]]
[5, 79, 0]
2 C# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

3-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(49, 1), (64, 3), (68, 5), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(49, 1), (56, 5), (64, 3), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(49, 1), (61, 1), (68, 5), (76, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 106
child voicing cost: 182
Best yet: 288
New solution
function cost: 106
child voicing cost: 181
Best yet: 287
New solution
function cost: 106
child voicing cost: 179
Best yet: 285
New solution
function cost: 106
child voicing cost: 178
Best yet: 284
New solution
function cost: 106
child voicing cost: 177
Best yet: 283
New solution
function cost: 106
child voicing cost: 175
Best yet: 281
New solution
function cost: 106
child voicing cost: 171
Best yet: 277
New solution
function cost: 106
child voicing cost: 166
Best yet: 272
New solution
function cost: 106
child voicing cost: 152
Best yet: 258
New solution
function cost: 106
child voicing cost: 150
Best yet: 256
New solution
function cost: 106
child voicing cost: 148
Best yet: 254
New solution
function cost: 106
child voicing cost: 143
Best yet: 249
New solution
function cost: 106
child voicing cost: 138
Best yet: 244
New solution
function cost: 106
child voicing cost: 137
Best yet: 243
New solution
function cost: 110
child voicing cost: 131
Best yet: 241
New solution
function cost: 110
child voicing cost: 129
Best yet: 239
New solution
function cost: 110
child voicing cost: 127
Best yet: 237
New solution
function cost: 110
child voicing cost: 126
Best yet: 236
New solution
function cost: 110
child voicing cost: 125
Best yet: 235
New solution
function cost: 110
child voicing cost: 119
Best yet: 229
New solution
function cost: 110
child voicing cost: 117
Best yet: 227
New solution
function cost: 110
child voicing cost: 115
Best yet: 225
New solution
function cost: 110
child voicing cost: 113
Best yet: 223
New solution
function cost: 110
child voicing cost: 111
Best yet: 221
New solution
function cost: 102
child voicing cost: 118
Best yet: 220
New solution
function cost: 102
child voicing cost: 117
Best yet: 219
New solution
function cost: 102
child voicing cost: 116
Best yet: 218
New solution
function cost: 102
child voicing cost: 111
Best yet: 213
New solution
function cost: 102
child voicing cost: 108
Best yet: 210
New solution
function cost: 102
child voicing cost: 107
Best yet: 209
New solution
function cost: 102
child voicing cost: 106
Best yet: 208
New solution
function cost: 102
child voicing cost: 101
Best yet: 203
New solution
function cost: 102
child voicing cost: 100
Best yet: 202
New solution
function cost: 102
child voicing cost: 99
Best yet: 201
New solution
function cost: 102
child voicing cost: 98
Best yet: 200
New solution
function cost: 102
child voicing cost: 93
Best yet: 195

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "D", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "Tm"), (6, "D/3"), (6, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T")  …  (12, "S65"), (14, "D54"), (14, "D7-5"), (14, "S"), (16, "S/3"), (16, "S/5"), (16, "Ts"), (18, "D-5"), (18, "S6"), (20, "T-5")]      
 [(8, "D7-1"), (10, "Dm"), (10, "T-5"), (12, "D/3"), (12, "T"), (12, "T/3"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (14, "S65")  …  (16, "D54"), (16, "S6"), (16, "T54"), (18, "D"), (18, "D64"), (18, "S/3"), (18, "T64"), (20, "S"), (24, "D7-5"), (28, "D-5")]
 [(0, "Tm"), (4, "D"), (6, "D54"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ts"), (10, "D-5")  …  (14, "S"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "Dm"), (18, "D7-1"), (18, "S6"), (20, "S/3"), (20, "S/5"), (24, "T-5")]         
 [(4, "D7-1"), (6, "Dm"), (8, "D/3"), (8, "D/5"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D7"), (10, "D7/3"), (10, "D7/5")  …  (10, "Tm"), (10, "Ts"), (12, "S6"), (14, "D"), (14, "S/3"), (14, "S/5"), (14, "T-5"), (16, "S"), (20, "D7-5"), (24, "D-5")]        
 [(2, "S/3"), (2, "S/5"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65")  …  (12, "D/5"), (12, "D7-5"), (12, "S"), (14, "T-5"), (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "D7-1"), (16, "S6"), (18, "Dm")]        
 [(4, "T54"), (6, "D7"), (6, "D7/3"), (6, "D7/7"), (6, "S/3"), (6, "T64"), (8, "T"), (8, "T/3"), (10, "D"), (10, "D64")  …  (10, "Ts"), (12, "D/3"), (12, "D54"), (12, "D7-5"), (12, "S"), (14, "Dm"), (16, "D-5"), (16, "D7-1"), (16, "S6"), (18, "T-5")]        
 [(6, "D"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S/3"), (10, "S/5"), (12, "D-5"), (12, "D7-5")  …  (14, "S65"), (14, "Tm"), (14, "Ts"), (16, "D/3"), (16, "D/5"), (16, "S"), (18, "Dm"), (20, "D7-1"), (20, "S6"), (22, "T-5")]
 [(4, "S/3"), (4, "S/5"), (6, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (8, "Ts"), (10, "S")  …  (12, "D/5"), (12, "T/3"), (12, "T/5"), (14, "D7-5"), (14, "S6"), (16, "Dm"), (16, "T-5"), (16, "Tm"), (18, "D-5"), (18, "D7-1")]     
 [(6, "T/3"), (6, "T/5"), (10, "D/3"), (10, "D/5"), (10, "T"), (12, "D64"), (12, "Dm"), (12, "T-5"), (12, "Tm"), (12, "Ts")  …  (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "S65"), (22, "D-5"), (22, "D7-5"), (22, "S"), (22, "S/3"), (22, "S/5"), (26, "S6")]
 [(6, "D7-5"), (6, "T54"), (8, "D64"), (8, "S/3"), (8, "T/3"), (8, "T64"), (8, "Ts"), (10, "D-5"), (10, "S"), (10, "T")  …  (12, "S65"), (12, "S65/6"), (12, "Tm"), (14, "D54"), (14, "S6"), (16, "D"), (16, "D/3"), (16, "D7-1"), (16, "Dm"), (20, "T-5")]       
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S65"), (4, "T/3"), (4, "T/5"), (6, "S"), (6, "S/3"), (6, "S/5")  …  (8, "Ts"), (10, "D/3"), (10, "D/5"), (10, "D7-5"), (10, "T"), (14, "D-5"), (14, "D7-1"), (14, "S6"), (16, "Dm"), (20, "T-5")]        
 [(4, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-1"), (8, "T"), (8, "T/5"), (10, "D"), (10, "S65/6"), (12, "D54"), (14, "D64"), (14, "S/5"), (16, "D7-5"), (16, "S"), (18, "T-5"), (20, "D-5")]                                            
 [(8, "D"), (8, "D64"), (10, "D54"), (10, "D7-5"), (10, "T"), (10, "T/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D/3"), (14, "T54"), (16, "S/3"), (16, "S65"), (16, "T64"), (18, "D7-1"), (18, "S"), (22, "S6")]                            
 [(8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "S"), (12, "D"), (12, "D64"), (12, "S/3"), (12, "T64"), (14, "D54"), (14, "D7-1"), (14, "D7-5"), (14, "T"), (14, "T/5"), (18, "D-5"), (18, "D/5")]                                         
 [(8, "D"), (12, "D7")]                                                                                                                                                                                                                                           
 [(10, "T")]                                                                                                                                                                                                                                                      
 [(14, "T")]                                                                                                                                                                                                                                                      

Done. Total checked: 94323, Pruned: 111022, completed: 36, time: 2.2209999561309814, efficiency: 16.208915223353987
Results: bestval_func: 102, bestval_voices: 93
(15, 371, 371, 371)
[0 2 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 2 1 0 0 0 1 0 0 0; 0 0 0 1 2 0 0 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 1 2 0 0 0 0 0 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 1 1 0 1 0 0 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 0 0 0 0 0 2 0 0 1; 0 1 0 0 0 0 1 0 0 1 0 1; 0 2 0 0 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 0 1 1; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 1 0 0 0 0 1 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 0 0 1]
Key Counter is [0 23 0 10 28 0 14 0 25 6 3 23]
Key Score is [57; 75; 94; 38; 129; 37; 98; 71; 61; 119; 19; 126]
Position Counter for 5 is [28 0 14 0 25 6 3 23 0 23 0 10]
Any[[5.0, 78.75, 0.0]]
[5, 79, 0]
2 C# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(12, "D", [(56, 1), (56, 1), (60, 3), (63, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 128
child voicing cost: 200
Best yet: 328
New solution
function cost: 128
child voicing cost: 192
Best yet: 320
New solution
function cost: 128
child voicing cost: 190
Best yet: 318
New solution
function cost: 128
child voicing cost: 183
Best yet: 311
New solution
function cost: 128
child voicing cost: 182
Best yet: 310
New solution
function cost: 128
child voicing cost: 179
Best yet: 307
New solution
function cost: 128
child voicing cost: 177
Best yet: 305
New solution
function cost: 128
child voicing cost: 170
Best yet: 298
New solution
function cost: 132
child voicing cost: 162
Best yet: 294
New solution
function cost: 128
child voicing cost: 165
Best yet: 293
New solution
function cost: 128
child voicing cost: 160
Best yet: 288
New solution
function cost: 128
child voicing cost: 159
Best yet: 287
New solution
function cost: 128
child voicing cost: 154
Best yet: 282
New solution
function cost: 128
child voicing cost: 153
Best yet: 281
New solution
function cost: 128
child voicing cost: 148
Best yet: 276
New solution
function cost: 128
child voicing cost: 147
Best yet: 275
New solution
function cost: 138
child voicing cost: 134
Best yet: 272
New solution
function cost: 138
child voicing cost: 133
Best yet: 271
New solution
function cost: 144
child voicing cost: 123
Best yet: 267
New solution
function cost: 144
child voicing cost: 117
Best yet: 261
New solution
function cost: 140
child voicing cost: 120
Best yet: 260
New solution
function cost: 140
child voicing cost: 115
Best yet: 255
New solution
function cost: 138
child voicing cost: 113
Best yet: 251
New solution
function cost: 138
child voicing cost: 112
Best yet: 250
New solution
function cost: 144
child voicing cost: 105
Best yet: 249
New solution
function cost: 144
child voicing cost: 102
Best yet: 246
New solution
function cost: 142
child voicing cost: 102
Best yet: 244
New solution
function cost: 142
child voicing cost: 101
Best yet: 243
New solution
function cost: 142
child voicing cost: 96
Best yet: 238
New solution
function cost: 144
child voicing cost: 89
Best yet: 233
New solution
function cost: 132
child voicing cost: 100
Best yet: 232
New solution
function cost: 132
child voicing cost: 95
Best yet: 227
New solution
function cost: 134
child voicing cost: 91
Best yet: 225
New solution
function cost: 134
child voicing cost: 89
Best yet: 223
New solution
function cost: 134
child voicing cost: 86
Best yet: 220
New solution
function cost: 134
child voicing cost: 85
Best yet: 219
New solution
function cost: 134
child voicing cost: 80
Best yet: 214

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (2, "T", [(49, 1), (61, 1), (68, 5), (76, 3)])   
 (0, "Tm", [(52, 1), (59, 5), (68, 3), (80, 3)])  
 (0, "S", [(54, 1), (66, 1), (69, 3), (73, 5)])   
 (0, "Tm", [(52, 1), (68, 3), (71, 5), (76, 1)])  
 (4, "S", [(54, 1), (66, 1), (69, 3), (73, 5)])   
 (8, "D7", [(56, 1), (63, 5), (66, 7), (72, 3)])  
 (16, "Ts", [(57, 1), (57, 1), (64, 5), (73, 3)]) 
 (18, "Ts", [(57, 1), (57, 1), (64, 5), (73, 3)]) 
 (10, "S6", [(54, 1), (57, 3), (66, 1), (75, 6)]) 
 (0, "T/3", [(52, 3), (56, 5), (68, 5), (73, 1)]) 
 (12, "Tm", [(52, 1), (56, 3), (68, 3), (71, 5)]) 
 (0, "S", [(54, 1), (61, 5), (66, 1), (69, 3)])   
 (4, "T", [(49, 1), (61, 1), (64, 3), (68, 5)])   
 ?                                                
 (6, "D7/3", [(48, 3), (56, 1), (66, 7), (75, 5)])
 (12, "T", [(49, 1), (56, 5), (64, 3), (73, 1)])  
 (4, "S/3", [(45, 3), (54, 1), (66, 1), (73, 5)]) 
 (6, "T/5", [(44, 5), (56, 5), (64, 3), (73, 1)]) 
 (12, "S65", [(42, 1), (61, 5), (69, 3), (75, 6)])
 (8, "D", [(44, 1), (60, 3), (68, 1), (75, 5)])   
 (4, "D/3", [(48, 3), (63, 5), (68, 1), (75, 5)]) 
 (10, "T", [(49, 1), (64, 3), (68, 5), (73, 1)])  
 (10, "S", [(54, 1), (61, 5), (66, 1), (69, 3)])  
 (8, "D", [(56, 1), (60, 3), (63, 5), (68, 1)])   
 (10, "T", [(49, 1), (61, 1), (64, 3), (68, 5)])  
 (10, "T", [(49, 1), (61, 1), (64, 3), (68, 5)])  

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(59, 1), (63, 3), (66, 5), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(47, 1), (51, 3), (59, 1), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(47, 1), (47, 1), (54, 5), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "T")]                                                                                                                                                                                                                                                        
 [(2, "S65"), (2, "S65/6"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "S/3"), (6, "S/5"), (6, "Ss"), (6, "T64")  …  (8, "Ts"), (10, "T54"), (10, "Tm"), (12, "S6"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "D7-5"), (14, "T-5"), (18, "D-5")]       
 [(2, "Tm"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "S/5")  …  (10, "D7-5"), (10, "S65"), (10, "S65/6"), (12, "D"), (12, "S6"), (12, "Ss"), (14, "D-5"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]       
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "S/5"), (8, "T64"), (10, "D7"), (10, "D7/3")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "T-5"), (16, "Tm"), (20, "D7-5"), (24, "D-5")]      
 [(0, "D7-1"), (4, "Ss"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "S6"), (12, "S65"), (12, "S65/6"), (12, "T-5"), (14, "D")  …  (16, "T54"), (16, "T64"), (16, "Tm"), (18, "S"), (18, "T"), (18, "T/3"), (18, "Ts"), (20, "D7-5"), (24, "D-5"), (24, "D64")]  
 [(0, "T-5"), (10, "T"), (12, "S65/6"), (16, "D/3"), (18, "D7"), (18, "D7-1"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (18, "S"), (18, "S/3"), (18, "Ts"), (20, "D54"), (20, "D64"), (22, "D"), (22, "Ss"), (24, "D7-5"), (28, "D-5"), (30, "T/3")]              
 [(0, "Ts"), (4, "T"), (6, "S65/6"), (6, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S"), (12, "S/3"), (14, "D/3"), (14, "D54"), (14, "D64"), (14, "T/3"), (16, "D"), (16, "D7-1"), (16, "Ss"), (18, "D7-5"), (22, "D-5")]                 
 [(4, "T"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "Ts"), (10, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Ss"), (14, "D/3"), (14, "D54"), (14, "D64"), (14, "S65/6"), (14, "T/3"), (14, "Tm"), (16, "D"), (18, "D7-5"), (22, "D-5")]      
 [(4, "T"), (4, "T/3"), (6, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "Tm"), (8, "Ts"), (10, "D/3"), (10, "D64")  …  (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D-5"), (14, "D54"), (14, "S65"), (14, "S65/6"), (14, "T-5"), (16, "S6"), (16, "Ss")]       
 [(8, "D7-5"), (10, "S"), (10, "S/3"), (10, "S/5"), (12, "D-5"), (12, "T/3"), (12, "T/5"), (12, "T54"), (12, "Ts"), (14, "D7")  …  (14, "T"), (16, "S65"), (16, "S65/6"), (16, "T64"), (16, "Tm"), (18, "D"), (18, "D/3"), (18, "D/5"), (18, "D7-1"), (24, "T-5")] 
 [(8, "S65"), (8, "S65/6"), (10, "D"), (10, "D/3"), (10, "D/5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S6")  …  (12, "Tm"), (14, "D7-1"), (14, "S"), (14, "Ts"), (16, "D7-5"), (18, "T"), (18, "T/3"), (18, "T/5"), (20, "D-5"), (20, "T-5")]
 [(4, "D"), (4, "D/3"), (4, "D/5"), (6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D7-5")  …  (12, "Ts"), (14, "D-5"), (14, "T54"), (14, "Tm"), (16, "S6"), (16, "Ss"), (16, "T"), (16, "T/3"), (16, "T/5"), (18, "T-5")]       
 [(4, "D64"), (4, "T/3"), (4, "Ts"), (6, "S"), (6, "S/3"), (6, "T"), (8, "D54"), (8, "D7-5"), (10, "D"), (10, "Ss"), (12, "D-5"), (12, "S65/6"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D/3"), (16, "T-5"), (18, "D7-1")]                     
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/3"), (6, "S/3"), (6, "T64"), (8, "D"), (8, "S"), (8, "Ts"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "D7-5"), (10, "S65/6"), (12, "S6"), (14, "D-5"), (14, "D7-1"), (14, "T-5")]           
 [(8, "D/3"), (8, "T-5"), (10, "T"), (12, "D54"), (12, "D7-1"), (12, "S65/6"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D64"), (16, "T/3"), (16, "Tm"), (16, "Ts"), (18, "S"), (18, "S/3"), (20, "D-5"), (20, "D7-5")]               
 [(4, "S"), (4, "S/3"), (6, "D64"), (6, "D7-5"), (6, "T/3"), (6, "T54"), (6, "Ts"), (8, "T"), (10, "D-5"), (10, "S65/6"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D54"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D7-1"), (18, "T-5")]        

Done. Total checked: 200268, Pruned: 217465, completed: 37, time: 4.50600004196167, efficiency: 8.211273780612792
Results: bestval_func: 134, bestval_voices: 80
(16, 371, 371, 371)
Total time for optimisation of piece: 8.480000019073486
["T", "Tm", "S", "Tm", "S", "D7", "Ts", "Ts", "S6", "T/3", "Tm", "S", "T", "T", "D", "D", "D7-1", "T", "D7-1", "T", "D7/3", "T", "S/3", "T/5", "S65", "D", "D/3", "T", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-572.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-585.csv
[0 0 0 1 0 0 1 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 2 0 0 1 0 0 0 1 0 0 0; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 0 0 0 0 3; 0 0 0 1 0 0 0 0 1 0 0 2; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 2 0; 0 0 0 0 1 0 1 0 2 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 0 0 0 1 0 0 0 1 2; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 1 0 0 0 0 2; 0 0 0 0 0 0 1 0 0 0 1 2; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 0 0 1 0 1 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0]
Key Counter is [0 16 0 17 13 0 23 0 21 0 16 26]
Key Score is [39; 93; 78; 54; 116; 29; 119; 62; 70; 99; 33; 132]
Position Counter for 12 is [26 0 16 0 17 13 0 23 0 21 0 16]
Any[[12.0, 83.5, 1.0]]
[12, 84, 1]
12 B Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(59, 1), (63, 3), (66, 5), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(47, 1), (51, 3), (59, 1), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(59, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(47, 1), (47, 1), (54, 5), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 120
child voicing cost: 208
Best yet: 328
New solution
function cost: 120
child voicing cost: 194
Best yet: 314
New solution
function cost: 120
child voicing cost: 189
Best yet: 309
New solution
function cost: 120
child voicing cost: 183
Best yet: 303
New solution
function cost: 120
child voicing cost: 175
Best yet: 295
New solution
function cost: 120
child voicing cost: 174
Best yet: 294
New solution
function cost: 120
child voicing cost: 172
Best yet: 292
New solution
function cost: 120
child voicing cost: 171
Best yet: 291
New solution
function cost: 120
child voicing cost: 169
Best yet: 289
New solution
function cost: 120
child voicing cost: 165
Best yet: 285
New solution
function cost: 120
child voicing cost: 164
Best yet: 284
New solution
function cost: 120
child voicing cost: 162
Best yet: 282
New solution
function cost: 120
child voicing cost: 158
Best yet: 278
New solution
function cost: 120
child voicing cost: 152
Best yet: 272
New solution
function cost: 120
child voicing cost: 148
Best yet: 268
New solution
function cost: 120
child voicing cost: 145
Best yet: 265
New solution
function cost: 120
child voicing cost: 143
Best yet: 263
New solution
function cost: 120
child voicing cost: 139
Best yet: 259
New solution
function cost: 120
child voicing cost: 137
Best yet: 257
New solution
function cost: 114
child voicing cost: 140
Best yet: 254
New solution
function cost: 114
child voicing cost: 138
Best yet: 252
New solution
function cost: 114
child voicing cost: 137
Best yet: 251
New solution
function cost: 114
child voicing cost: 132
Best yet: 246
New solution
function cost: 116
child voicing cost: 129
Best yet: 245
New solution
function cost: 116
child voicing cost: 126
Best yet: 242
New solution
function cost: 122
child voicing cost: 118
Best yet: 240
New solution
function cost: 122
child voicing cost: 115
Best yet: 237
New solution
function cost: 112
child voicing cost: 124
Best yet: 236
New solution
function cost: 112
child voicing cost: 122
Best yet: 234
New solution
function cost: 112
child voicing cost: 121
Best yet: 233
New solution
function cost: 112
child voicing cost: 119
Best yet: 231
New solution
function cost: 112
child voicing cost: 118
Best yet: 230
New solution
function cost: 114
child voicing cost: 112
Best yet: 226
New solution
function cost: 114
child voicing cost: 108
Best yet: 222
New solution
function cost: 114
child voicing cost: 107
Best yet: 221
New solution
function cost: 118
child voicing cost: 100
Best yet: 218
New solution
function cost: 110
child voicing cost: 105
Best yet: 215
New solution
function cost: 116
child voicing cost: 98
Best yet: 214
New solution
function cost: 120
child voicing cost: 90
Best yet: 210
New solution
function cost: 120
child voicing cost: 85
Best yet: 205

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7-5"), (6, "T/3"), (6, "T/5"), (6, "T54"), (6, "Ts"), (8, "S6"), (8, "T")  …  (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "Ss"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "D7-1"), (18, "T-5")]      
 [(4, "D"), (4, "D/3"), (6, "D54"), (6, "S65"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D64"), (10, "D7-5")  …  (12, "S"), (12, "Ts"), (14, "D-5"), (14, "T54"), (14, "Tm"), (16, "S6"), (16, "Ss"), (16, "T"), (16, "T/3"), (18, "T-5")]     
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S6"), (6, "Ss"), (8, "D/3"), (8, "D/5"), (8, "Tm"), (10, "D7-1")  …  (10, "T/5"), (12, "D7-5"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "D"), (14, "Ts"), (16, "D-5"), (16, "T64"), (20, "T-5")]
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "S/5"), (10, "D7"), (10, "D7/3"), (10, "D7/5")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "T"), (14, "T/3"), (14, "T/5"), (16, "T-5"), (16, "Tm"), (20, "D7-5"), (24, "D-5")]
 [(4, "Tm"), (6, "D7-5"), (8, "D"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D-5")  …  (12, "S6"), (12, "Ss"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "S65"), (14, "S65/6"), (14, "T64"), (16, "D7-1"), (18, "T-5")]      
 [(4, "T"), (4, "T/3"), (6, "D/3"), (6, "T54"), (10, "D54"), (10, "D7-1"), (10, "S65"), (10, "S65/6"), (10, "T-5"), (12, "D")  …  (14, "D64"), (14, "Ss"), (14, "T64"), (14, "Tm"), (14, "Ts"), (16, "S"), (16, "S/3"), (18, "D7-5"), (20, "S6"), (22, "D-5")] 
 [(8, "D/3"), (8, "D/5"), (8, "T-5"), (8, "T64"), (10, "T"), (12, "D7-1"), (12, "S65"), (12, "S65/6"), (12, "T54"), (14, "D")  …  (16, "T/3"), (16, "T/5"), (16, "Tm"), (16, "Ts"), (18, "S"), (18, "S/3"), (18, "S/5"), (20, "D-5"), (20, "D7-5"), (22, "S6")]
 [(4, "T"), (8, "D7-1"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "Ts"), (10, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (14, "D/5"), (14, "D64"), (14, "S65"), (14, "S65/6"), (14, "T/3"), (14, "T/5"), (14, "Tm"), (16, "D"), (18, "D7-5"), (22, "D-5")]
 [(2, "S"), (2, "S/3"), (2, "S/5"), (4, "S65"), (4, "S65/6"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "T64")  …  (10, "D7/7"), (10, "T"), (12, "D7-5"), (12, "T54"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3"), (20, "D/5")]    
 [(4, "S"), (4, "S/3"), (6, "S65"), (6, "S65/6"), (6, "Tm"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S6"), (8, "Ss")  …  (12, "D"), (12, "D7-1"), (12, "T"), (12, "T/3"), (12, "Ts"), (14, "D-5"), (14, "D54"), (14, "T54"), (18, "D/3"), (18, "T-5")]       
 [(4, "Tm"), (6, "D7-5"), (8, "D"), (8, "S"), (8, "S/3"), (8, "S/5"), (8, "T"), (8, "T/3"), (8, "T/5"), (10, "D-5")  …  (12, "S6"), (12, "Ss"), (12, "Ts"), (14, "D/3"), (14, "D/5"), (14, "S65"), (14, "S65/6"), (14, "T64"), (16, "D7-1"), (18, "T-5")]      
 [(8, "D/3"), (8, "S/3"), (8, "T64"), (10, "T"), (10, "T/5"), (12, "D54"), (12, "D7-1"), (12, "S65/6"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D64"), (16, "T-5"), (18, "S"), (20, "D7-5"), (24, "D-5")]                       
 [(4, "D"), (4, "D/5"), (6, "D54"), (6, "S65/6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D64"), (10, "D7-5"), (10, "S/5"), (12, "D7-1"), (12, "S"), (14, "D-5"), (14, "Tm"), (16, "Ss"), (16, "T"), (16, "T/5")]                              
 [(0, "D64"), (0, "T/5"), (4, "D54"), (4, "D7-5"), (6, "D"), (8, "Ts"), (10, "S"), (10, "S/5"), (10, "T"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Ss"), (16, "D/5"), (16, "S65/6"), (18, "D7-1")]                                         
 [(6, "D"), (14, "D7")]                                                                                                                                                                                                                                        
 [(6, "T")]                                                                                                                                                                                                                                                    
 [(8, "T")]                                                                                                                                                                                                                                                    

Done. Total checked: 117195, Pruned: 139997, completed: 40, time: 2.875, efficiency: 13.91304347826087
Results: bestval_func: 120, bestval_voices: 85
(15, 383, 383, 383)
[0 0 0 1 0 0 1 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 1 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 2 0 0 1 0 0 0 1 0 0 0; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 0 0 0 0 3; 0 0 0 1 0 0 0 0 1 0 0 2; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 2 0; 0 0 0 0 1 0 1 0 2 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 0 0 0 1 0 0 0 1 2; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 1 0 0 0 0 2; 0 0 0 0 0 0 1 0 0 0 1 2; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 1 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0; 0 1 0 0 0 0 0 0 1 0 1 1; 0 1 0 0 0 0 1 0 1 0 1 0; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 1 0 1 0 1 0]
Key Counter is [0 16 0 17 13 0 23 0 21 0 16 26]
Key Score is [39; 93; 78; 54; 116; 29; 119; 62; 70; 99; 33; 132]
Position Counter for 12 is [26 0 16 0 17 13 0 23 0 21 0 16]
Any[[12.0, 83.5, 1.0]]
[12, 84, 1]
12 B Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 94
child voicing cost: 227
Best yet: 321
New solution
function cost: 94
child voicing cost: 213
Best yet: 307
New solution
function cost: 94
child voicing cost: 210
Best yet: 304
New solution
function cost: 94
child voicing cost: 208
Best yet: 302
New solution
function cost: 94
child voicing cost: 206
Best yet: 300
New solution
function cost: 94
child voicing cost: 199
Best yet: 293
New solution
function cost: 94
child voicing cost: 196
Best yet: 290
New solution
function cost: 94
child voicing cost: 193
Best yet: 287
New solution
function cost: 94
child voicing cost: 191
Best yet: 285
New solution
function cost: 94
child voicing cost: 189
Best yet: 283
New solution
function cost: 94
child voicing cost: 185
Best yet: 279
New solution
function cost: 104
child voicing cost: 171
Best yet: 275
New solution
function cost: 104
child voicing cost: 170
Best yet: 274
New solution
function cost: 96
child voicing cost: 172
Best yet: 268
New solution
function cost: 102
child voicing cost: 165
Best yet: 267
New solution
function cost: 102
child voicing cost: 160
Best yet: 262
New solution
function cost: 104
child voicing cost: 154
Best yet: 258
New solution
function cost: 106
child voicing cost: 150
Best yet: 256
New solution
function cost: 102
child voicing cost: 150
Best yet: 252
New solution
function cost: 102
child voicing cost: 149
Best yet: 251
New solution
function cost: 102
child voicing cost: 148
Best yet: 250
New solution
function cost: 102
child voicing cost: 147
Best yet: 249
New solution
function cost: 114
child voicing cost: 134
Best yet: 248
New solution
function cost: 118
child voicing cost: 129
Best yet: 247
New solution
function cost: 118
child voicing cost: 124
Best yet: 242
New solution
function cost: 112
child voicing cost: 129
Best yet: 241
New solution
function cost: 116
child voicing cost: 123
Best yet: 239
New solution
function cost: 116
child voicing cost: 120
Best yet: 236
New solution
function cost: 112
child voicing cost: 117
Best yet: 229
New solution
function cost: 116
child voicing cost: 112
Best yet: 228
New solution
function cost: 116
child voicing cost: 110
Best yet: 226
New solution
function cost: 102
child voicing cost: 120
Best yet: 222
New solution
function cost: 120
child voicing cost: 100
Best yet: 220
New solution
function cost: 106
child voicing cost: 112
Best yet: 218
New solution
function cost: 106
child voicing cost: 110
Best yet: 216
New solution
function cost: 110
child voicing cost: 105
Best yet: 215
New solution
function cost: 100
child voicing cost: 110
Best yet: 210
New solution
function cost: 98
child voicing cost: 108
Best yet: 206
New solution
function cost: 98
child voicing cost: 102
Best yet: 200
New solution
function cost: 100
child voicing cost: 97
Best yet: 197
New solution
function cost: 106
child voicing cost: 87
Best yet: 193
New solution
function cost: 106
child voicing cost: 85
Best yet: 191
New solution
function cost: 106
child voicing cost: 81
Best yet: 187
New solution
function cost: 106
child voicing cost: 79
Best yet: 

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (6, "T", [(47, 1), (47, 1), (54, 5), (63, 3)])   
 (2, "S65", [(40, 1), (49, 6), (59, 5), (68, 3)]) 
 (6, "T/5", [(42, 5), (54, 5), (59, 1), (63, 3)]) 
 (4, "S65", [(40, 1), (49, 6), (59, 5), (68, 3)]) 
 (14, "D", [(42, 1), (54, 1), (58, 3), (61, 5)])  
 (18, "D7", [(42, 1), (52, 7), (58, 3), (61, 5)]) 
 (0, "Ts", [(44, 1), (51, 5), (59, 3), (59, 3)])  
 (8, "Ts", [(44, 1), (56, 1), (59, 3), (63, 5)])  
 (12, "S/3", [(44, 3), (59, 5), (59, 5), (64, 1)])
 (12, "T/5", [(42, 5), (59, 1), (63, 3), (66, 5)])
 (8, "S65", [(40, 1), (59, 5), (61, 6), (68, 3)]) 
 (4, "D", [(42, 1), (58, 3), (61, 5), (66, 1)])   
 (6, "S/3", [(44, 3), (59, 5), (59, 5), (64, 1)]) 
 ?                                                
 (4, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])   
 (8, "D/5", [(49, 5), (54, 1), (58, 3), (61, 5)]) 
 (4, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])   
 (2, "S/3", [(44, 3), (52, 1), (59, 5), (64, 1)]) 
 (8, "D7/3", [(46, 3), (52, 7), (61, 5), (66, 1)])
 (8, "T", [(47, 1), (51, 3), (59, 1), (66, 5)])   
 (8, "D/3", [(46, 3), (49, 5), (61, 5), (66, 1)]) 
 (16, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])  
 (0, "D64", [(54, 1), (54, 1), (59, 4), (63, 6)]) 
 (6, "D", [(54, 1), (54, 1), (58, 3), (61, 5)])   
 (6, "T", [(47, 1), (51, 3), (54, 5), (59, 1)])   
 (6, "T", [(47, 1), (51, 3), (54, 5), (59, 1)])   

8-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(46, 1), (61, 3), (65, 5), (70, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(46, 1), (61, 3), (70, 1), (77, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(58, 1), (61, 3), (70, 1), (77, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(46, 1), (53, 5), (61, 3), (70, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(46, 1), (65, 5), (70, 1), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(58, 1), (65, 5), (70, 1), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(46, 1), (58, 1), (65, 5), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(58, 1), (58, 1), (65, 5), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(6, "T")]                                                                                                                                                                                                                                                      
 [(2, "Dm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65"), (10, "D"), (10, "D/3"), (10, "D/5"), (10, "D7-1")  …  (12, "S6"), (14, "D64"), (14, "T/3"), (14, "T/5"), (16, "D7-5"), (16, "S"), (16, "T"), (18, "Ts"), (20, "D-5"), (22, "T-5")]    
 [(4, "T/3"), (4, "T/5"), (4, "Ts"), (6, "T"), (8, "D"), (8, "Tm"), (10, "D7-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (12, "T64"), (14, "D-5"), (14, "D/3"), (14, "D/5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "T-5"), (18, "D7-1"), (22, "S6")]     
 [(4, "S65"), (6, "S6"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S/3"), (8, "S/5"), (10, "D54"), (10, "S")  …  (12, "D7-1"), (12, "Dm"), (12, "T/3"), (12, "T/5"), (16, "Tm"), (16, "Ts"), (18, "D7-5"), (18, "T"), (22, "D-5"), (24, "T-5")]     
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (6, "D"), (6, "D/3"), (6, "D7-1"), (6, "Dm"), (6, "S65"), (6, "S65/6"), (6, "Tm")  …  (10, "S/3"), (10, "T/3"), (10, "T64"), (12, "D7-5"), (12, "S6"), (16, "D-5"), (16, "S"), (16, "T"), (18, "Ts"), (26, "T-5")]        
 [(8, "T"), (8, "T/3"), (10, "D"), (10, "D64"), (10, "Ts"), (12, "D/3"), (12, "D54"), (12, "D7-5"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T64"), (16, "D-5"), (16, "D7-1"), (18, "S65/6"), (18, "T-5"), (20, "S"), (20, "S/3"), (24, "S6")]
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65/6"), (8, "D7-5"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7")  …  (10, "T64"), (10, "Ts"), (12, "D-5"), (12, "D54"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "Tm"), (16, "T"), (22, "T-5")] 
 [(8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65"), (10, "D54"), (10, "D7-1"), (10, "S"), (12, "D"), (12, "S/3"), (12, "T64"), (12, "Ts"), (14, "D/3"), (14, "D7-5"), (14, "T"), (14, "T/3"), (18, "D-5"), (24, "T-5")]                  
 [(0, "Tm"), (6, "D/3"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D")  …  (12, "Ts"), (14, "D54"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "T54"), (16, "T64"), (18, "D-5"), (18, "S6"), (20, "T-5")]      
 [(2, "S65"), (4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "T/3"), (6, "T/5")  …  (10, "Dm"), (10, "Tm"), (12, "D/3"), (12, "D/5"), (12, "D7-5"), (12, "S6"), (12, "T"), (16, "D-5"), (16, "D7-1"), (18, "T-5")]      
 [(4, "D7-5"), (6, "Tm"), (8, "D-5"), (8, "S"), (8, "S/3"), (8, "S/5"), (10, "D"), (10, "D/3"), (10, "D/5"), (10, "T/3")  …  (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Dm"), (14, "S65"), (14, "T64"), (16, "T"), (18, "D7-1"), (26, "T-5")]   
 [(4, "Ts"), (6, "T"), (8, "T/3"), (8, "T/5"), (10, "D/3"), (10, "D/5"), (10, "T54"), (12, "Dm"), (12, "S65"), (12, "T-5")  …  (14, "S/3"), (14, "S/5"), (16, "D"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "D7-5"), (22, "D-5"), (22, "S6")] 
 [(4, "T"), (4, "T/3"), (6, "D64"), (6, "Ts"), (8, "D/3"), (8, "D54"), (10, "Dm"), (12, "D7-1"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65/6"), (14, "T-5"), (16, "D7-5"), (16, "S"), (16, "S/3"), (20, "D-5")]                 
 [(6, "S/3"), (6, "S65"), (6, "T64"), (8, "D7-1"), (10, "T-5"), (10, "Ts"), (12, "D/3"), (12, "D54"), (12, "S"), (12, "T"), (12, "T/3"), (14, "D64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (18, "D"), (24, "D7-5"), (28, "D-5")]                
 [(10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S/3"), (10, "S65"), (10, "T64"), (12, "D7-1"), (14, "D"), (14, "T-5"), (14, "Ts"), (16, "D/3"), (16, "D54"), (16, "S"), (16, "T"), (16, "T/3"), (18, "D64"), (20, "D7-5"), (24, "D-5")]            
 [(8, "D"), (8, "D/3"), (10, "D54"), (10, "T"), (10, "T/3"), (12, "D64"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "Ts"), (14, "D7-5"), (16, "D7-1"), (16, "S65/6"), (18, "D-5"), (20, "S/3"), (20, "T-5"), (22, "S6"), (26, "S")]             

185
Done. Total checked: 352734, Pruned: 393775, completed: 44, time: 7.242000102996826, efficiency: 6.075669618092421
Results: bestval_func: 106, bestval_voices: 79
(16, 383, 383, 383)
Total time for optimisation of piece: 11.848000049591064
["T", "S65", "T/5", "S65", "D", "D7", "Ts", "Ts", "S/3", "T/5", "S65", "D", "S/3", "D", "T", "T", "D", "D7", "Ts", "S/3", "T", "D/5", "T", "S/3", "D7/3", "T", "D/3", "T", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-585.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-65.csv
[0 2 0 0 0 1 0 0 0 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 1 0 0 1 0; 2 0 0 1 0 0 1 0 0 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 1 0 1 0 1 0 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 0 0 0 2 0 0 1; 1 0 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 1 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 0 0 1 0 0 2 0 0 1; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 2 0 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 0 0 1 1 0 1 0 1 0; 0 0 0 2 0 0 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0]
Key Counter is [10 19 1 23 0 20 10 2 25 0 17 4]
Key Score is [37; 124; 36; 98; 81; 50; 118; 27; 116; 59; 73; 98]
Position Counter for 2 is [19 1 23 0 20 10 2 25 0 17 4 10]
Any[[2.0, 76.0, 0.0]]
[2, 76, 0]
11 A# Minor
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

8-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(46, 1), (61, 3), (65, 5), (70, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(46, 1), (61, 3), (70, 1), (77, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(58, 1), (61, 3), (70, 1), (77, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(46, 1), (53, 5), (61, 3), (70, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(46, 1), (65, 5), (70, 1), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(58, 1), (65, 5), (70, 1), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(46, 1), (58, 1), (65, 5), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "T", [(58, 1), (58, 1), (65, 5), (73, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 86
child voicing cost: 179
Best yet: 265
New solution
function cost: 86
child voicing cost: 178
Best yet: 264
New solution
function cost: 86
child voicing cost: 176
Best yet: 262
New solution
function cost: 86
child voicing cost: 167
Best yet: 253
New solution
function cost: 86
child voicing cost: 166
Best yet: 252
New solution
function cost: 86
child voicing cost: 164
Best yet: 250
New solution
function cost: 86
child voicing cost: 160
Best yet: 246
New solution
function cost: 86
child voicing cost: 158
Best yet: 244
New solution
function cost: 86
child voicing cost: 155
Best yet: 241
New solution
function cost: 86
child voicing cost: 154
Best yet: 240
New solution
function cost: 86
child voicing cost: 152
Best yet: 238
New solution
function cost: 86
child voicing cost: 149
Best yet: 235
New solution
function cost: 86
child voicing cost: 148
Best yet: 234
New solution
function cost: 86
child voicing cost: 145
Best yet: 231
New solution
function cost: 90
child voicing cost: 140
Best yet: 230
New solution
function cost: 92
child voicing cost: 137
Best yet: 229
New solution
function cost: 86
child voicing cost: 141
Best yet: 227
New solution
function cost: 90
child voicing cost: 136
Best yet: 226
New solution
function cost: 90
child voicing cost: 134
Best yet: 224
New solution
function cost: 90
child voicing cost: 127
Best yet: 217
New solution
function cost: 86
child voicing cost: 130
Best yet: 216
New solution
function cost: 86
child voicing cost: 127
Best yet: 213
New solution
function cost: 86
child voicing cost: 126
Best yet: 212
New solution
function cost: 86
child voicing cost: 123
Best yet: 209
New solution
function cost: 90
child voicing cost: 118
Best yet: 208
New solution
function cost: 90
child voicing cost: 115
Best yet: 205
New solution
function cost: 110
child voicing cost: 93
Best yet: 203
New solution
function cost: 94
child voicing cost: 108
Best yet: 202
New solution
function cost: 86
child voicing cost: 115
Best yet: 201
New solution
function cost: 86
child voicing cost: 113
Best yet: 199
New solution
function cost: 98
child voicing cost: 99
Best yet: 197
New solution
function cost: 86
child voicing cost: 108
Best yet: 194
New solution
function cost: 86
child voicing cost: 106
Best yet: 192
New solution
function cost: 90
child voicing cost: 99
Best yet: 189
New solution
function cost: 90
child voicing cost: 97
Best yet: 187
New solution
function cost: 90
child voicing cost: 95
Best yet: 185
New solution
function cost: 90
child voicing cost: 93
Best yet: 183
New solution
function cost: 86
child voicing cost: 96
Best yet: 182
New solution
function cost: 90
child voicing cost: 91
Best yet: 181
New solution
function cost: 90
child voicing cost: 88
Best yet: 178
New solution
function cost: 90
child voicing cost: 86
Best yet: 176
New solution
function cost: 84
child voicing cost: 89
Best yet: 173
New solution
function cost: 84
child voicing cost: 87
Best yet: 171
New solution
function cost: 88
child voicing cost: 80
Best yet: 168
New solution
function cost: 88
child voicing cost: 78
Best yet: 166

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "D", [(53, 1), (60, 5), (69, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "Dm"), (8, "D"), (8, "D/3"), (8, "D/5"), (10, "T"), (10, "T/3"), (10, "T/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5")  …  (12, "Ts"), (14, "D7-5"), (16, "D7-1"), (16, "S65"), (18, "D-5"), (20, "S/3"), (20, "S/5"), (20, "T-5"), (22, "S6"), (26, "S")]       
 [(4, "S"), (4, "S/3"), (8, "S6"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/7"), (10, "Dm"), (10, "S65"), (10, "S65/6")  …  (14, "D64"), (14, "T/3"), (14, "T64"), (14, "Ts"), (16, "D/3"), (16, "D54"), (16, "D7-5"), (18, "T-5"), (18, "Tm"), (20, "D-5")]   
 [(4, "S6"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D7-5"), (8, "S"), (10, "D7-1"), (10, "Dm"), (10, "S65")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "S/3"), (14, "S/5"), (14, "T/3"), (14, "T/5"), (14, "Ts"), (20, "T"), (30, "T-5")]         
 [(0, "Tm"), (6, "D/3"), (6, "D/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Dm"), (10, "D7-1"), (10, "T")  …  (12, "S65"), (12, "Ts"), (14, "D7-5"), (14, "S"), (14, "S/3"), (14, "S/5"), (16, "T64"), (18, "D-5"), (18, "S6"), (20, "T-5")]         
 [(0, "Ts"), (4, "T/3"), (4, "T/5"), (8, "D"), (8, "S65"), (8, "Tm"), (10, "D7-5"), (10, "S"), (10, "S/3"), (10, "S/5")  …  (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D-5"), (16, "Dm"), (16, "T-5"), (18, "D/3"), (18, "D/5"), (18, "S6"), (22, "D7-1")]      
 [(10, "D"), (12, "D/3"), (12, "D54"), (14, "D7"), (14, "D7/3"), (14, "D7/7"), (14, "Dm"), (14, "Tm"), (16, "D7-1"), (16, "D7-5")  …  (18, "D64"), (18, "S/3"), (18, "S65"), (18, "S65/6"), (18, "T-5"), (18, "T64"), (18, "Ts"), (20, "D-5"), (24, "S"), (24, "S6")]
 [(6, "Dm"), (6, "S/3"), (6, "S/5"), (6, "S65"), (6, "T64"), (8, "D7-1"), (10, "T-5"), (10, "Ts"), (12, "D/3"), (12, "D/5")  …  (12, "T/5"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "S6"), (18, "D"), (18, "Tm"), (24, "D7-5"), (28, "D-5")]     
 [(2, "S/3"), (2, "S/5"), (4, "T"), (4, "T/3"), (4, "T/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S65")  …  (12, "D/5"), (12, "D7-5"), (12, "S"), (14, "Dm"), (14, "T-5"), (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "D7-1"), (16, "S6")]           
 [(8, "S"), (8, "S/3"), (8, "S/5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S65"), (10, "T/3"), (10, "T/5")  …  (12, "S6"), (14, "D"), (14, "Tm"), (14, "Ts"), (16, "D-5"), (16, "D/3"), (16, "D/5"), (16, "T"), (18, "Dm"), (22, "T-5")]        
 [(0, "S"), (0, "S/3"), (4, "S6"), (6, "S65"), (6, "S65/6"), (8, "D7-5"), (10, "D64"), (10, "D7"), (10, "D7/3"), (10, "D7/7")  …  (12, "D-5"), (12, "D54"), (12, "T54"), (14, "D"), (14, "D/3"), (14, "D7-1"), (14, "Dm"), (14, "Tm"), (16, "T"), (22, "T-5")]       
 [(2, "D/3"), (2, "D/5"), (4, "Dm"), (4, "Tm"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "T"), (10, "T/3")  …  (12, "D7-1"), (12, "Ts"), (16, "S65"), (18, "D7-5"), (18, "S6"), (20, "S/3"), (20, "S/5"), (20, "T-5"), (22, "D-5"), (22, "S")]         
 [(6, "D/3"), (6, "T"), (6, "T/5"), (8, "D64"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S65/6"), (10, "D54"), (10, "D7-1"), (10, "S"), (10, "S/5"), (12, "D"), (12, "T64"), (14, "D7-5"), (18, "D-5")]                                                
 [(4, "D"), (4, "D64"), (6, "D54"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D-5"), (12, "S65/6"), (14, "D/5"), (14, "S"), (14, "S/5"), (14, "T"), (14, "T/5"), (18, "D7-1"), (18, "T54"), (24, "T-5")]                                  
 [(4, "T"), (4, "T/5"), (6, "D64"), (6, "Ts"), (8, "D/5"), (8, "D54"), (10, "Dm"), (12, "D7-1"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S65/6"), (16, "D7-5"), (16, "S"), (16, "S/5"), (24, "S6")]                                   
 [(8, "D"), (12, "D7")]                                                                                                                                                                                                                                              
 [(12, "T")]                                                                                                                                                                                                                                                         
 [(20, "T")]                                                                                                                                                                                                                                                         

Done. Total checked: 97454, Pruned: 118947, completed: 45, time: 2.496000051498413, efficiency: 18.02884578186821
Results: bestval_func: 88, bestval_voices: 78
(15, 375, 375, 375)
[0 2 0 0 0 1 0 0 0 0 0 0; 1 0 0 1 0 0 0 1 1 0 0 0; 0 1 0 0 0 1 0 1 0 0 1 0; 2 0 0 1 0 0 1 0 0 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 1 0 1 0 1 0 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 0 0 0 2 0 0 1; 1 0 0 0 0 1 0 0 2 0 0 0; 0 0 0 2 0 0 0 0 1 0 1 0; 1 0 0 1 0 1 1 0 0 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 0 0 1 0 0 2 0 0 1; 0 0 0 1 0 0 0 0 1 0 1 1; 0 0 0 1 0 1 0 0 0 0 2 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 2 0 0 0 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 0 2 0 0 1 0 0 0; 0 1 0 0 0 1 0 0 1 0 1 0; 0 0 0 0 0 1 1 0 1 0 1 0; 0 0 0 2 0 0 0 0 1 0 1 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0]
Key Counter is [10 19 1 23 0 20 10 2 25 0 17 4]
Key Score is [37; 124; 36; 98; 81; 50; 118; 27; 116; 59; 73; 98]
Position Counter for 2 is [19 1 23 0 20 10 2 25 0 17 4 10]
Any[[2.0, 76.0, 0.0]]
[2, 76, 0]
11 A# Minor
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(8, "D", [(53, 1), (60, 5), (69, 3), (77, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 100
child voicing cost: 177
Best yet: 277
New solution
function cost: 100
child voicing cost: 172
Best yet: 272
New solution
function cost: 100
child voicing cost: 171
Best yet: 271
New solution
function cost: 100
child voicing cost: 162
Best yet: 262
New solution
function cost: 100
child voicing cost: 160
Best yet: 260
New solution
function cost: 100
child voicing cost: 158
Best yet: 258
New solution
function cost: 100
child voicing cost: 156
Best yet: 256
New solution
function cost: 110
child voicing cost: 143
Best yet: 253
New solution
function cost: 110
child voicing cost: 140
Best yet: 250
New solution
function cost: 104
child voicing cost: 143
Best yet: 247
New solution
function cost: 112
child voicing cost: 130
Best yet: 242
New solution
function cost: 112
child voicing cost: 125
Best yet: 237
New solution
function cost: 112
child voicing cost: 124
Best yet: 236
New solution
function cost: 116
child voicing cost: 115
Best yet: 231
New solution
function cost: 114
child voicing cost: 116
Best yet: 230
New solution
function cost: 114
child voicing cost: 113
Best yet: 227
New solution
function cost: 120
child voicing cost: 101
Best yet: 221
New solution
function cost: 120
child voicing cost: 98
Best yet: 218
New solution
function cost: 120
child voicing cost: 93
Best yet: 213
New solution
function cost: 120
child voicing cost: 90
Best yet: 210
New solution
function cost: 100
child voicing cost: 109
Best yet: 209
New solution
function cost: 120
child voicing cost: 83
Best yet: 203

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (6, "T", [(58, 1), (58, 1), (65, 5), (73, 3)])   
 (2, "Dm", [(56, 1), (63, 5), (72, 3), (72, 3)])  
 (4, "Ts", [(54, 1), (66, 1), (70, 3), (73, 5)])  
 (6, "S6", [(51, 1), (66, 3), (72, 6), (75, 1)])  
 (2, "D7", [(53, 1), (63, 7), (69, 3), (72, 5)])  
 (8, "T", [(58, 1), (61, 3), (65, 5), (70, 1)])   
 (0, "S", [(51, 1), (63, 1), (66, 3), (70, 5)])   
 (10, "S", [(51, 1), (63, 1), (66, 3), (70, 5)])  
 (0, "Tm", [(49, 1), (65, 3), (68, 5), (73, 1)])  
 (4, "S", [(51, 1), (63, 1), (66, 3), (70, 5)])   
 (4, "D7-5", [(53, 1), (63, 7), (65, 1), (69, 3)])
 (6, "T", [(58, 1), (61, 3), (65, 5), (70, 1)])   
 (10, "Dm", [(56, 1), (63, 5), (68, 1), (72, 3)]) 
 ?                                                
 (10, "D", [(53, 1), (65, 1), (69, 3), (72, 5)])  
 (6, "S/3", [(54, 3), (63, 1), (70, 5), (75, 1)]) 
 (4, "T/5", [(53, 5), (61, 3), (70, 1), (77, 5)]) 
 (8, "S", [(51, 1), (63, 1), (70, 5), (78, 3)])   
 (8, "D7-5", [(53, 1), (63, 7), (69, 3), (77, 1)])
 (10, "T", [(58, 1), (61, 3), (70, 1), (77, 5)])  
 (6, "T", [(58, 1), (61, 3), (70, 1), (77, 5)])   
 (8, "D7/3", [(57, 3), (65, 1), (72, 5), (75, 7)])
 (4, "T", [(58, 1), (65, 5), (70, 1), (73, 3)])   
 (8, "D", [(53, 1), (65, 1), (69, 3), (72, 5)])   
 (12, "T", [(46, 1), (61, 3), (65, 5), (70, 1)])  
 (12, "T", [(46, 1), (61, 3), (65, 5), (70, 1)])  

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (58, 3), (61, 5), (66, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (58, 3), (66, 1), (73, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (61, 5), (66, 1), (70, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (54, 1), (58, 3), (61, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (66, 1), (70, 3), (73, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (54, 1), (61, 5), (70, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(2, "T")]                                                                                                                                                                                                                                                        
 [(2, "Ts"), (6, "S/3"), (6, "S/5"), (6, "T64"), (8, "S"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "T/3"), (10, "T/5")  …  (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "D/5"), (20, "D7-1")]
 [(0, "D"), (0, "D/3"), (0, "D/5"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (6, "D7-5"), (8, "D7-1"), (10, "D-5")  …  (12, "S6"), (12, "Ss"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "S/3"), (14, "S/5"), (16, "Ts"), (20, "S"), (22, "T-5")]         
 [(2, "S"), (2, "S/3"), (2, "S/5"), (2, "S65"), (2, "S65/6"), (2, "T64"), (4, "Ts"), (6, "D64"), (6, "S6"), (6, "Ss")  …  (8, "D/5"), (8, "D7"), (8, "D7-5"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "Tm"), (10, "T-5"), (12, "D7-1")]               
 [(2, "S/3"), (2, "T"), (2, "T-5"), (2, "T/3"), (2, "T54"), (2, "T64"), (2, "Ts"), (4, "D"), (4, "D/3"), (4, "D7")  …  (4, "S"), (4, "S65"), (4, "S65/6"), (6, "D54"), (8, "D64"), (8, "S6"), (8, "Ss"), (8, "Tm"), (10, "D-5"), (10, "D7-5")]                     
 [(0, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (10, "D"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "D54"), (14, "S6"), (14, "Ts"), (16, "D64"), (16, "D7-5"), (16, "S65/6"), (16, "T-5"), (20, "D-5"), (20, "S/3"), (20, "T64"), (22, "S")]     
 [(0, "S65/6"), (4, "S/3"), (4, "Ss"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "Ts"), (8, "D54"), (10, "D"), (10, "D/3"), (10, "D7-1"), (10, "T"), (12, "T-5"), (16, "D64"), (16, "D7-5"), (16, "T/3"), (20, "D-5")]                       
 [(4, "D64"), (4, "D7-5"), (4, "T/3"), (6, "D"), (6, "D/3"), (8, "D-5"), (8, "D54"), (8, "Ts"), (10, "S"), (10, "T"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "Ss"), (16, "S/3"), (16, "S65"), (16, "T64"), (18, "D7-1"), (20, "T-5")]          
 [(4, "Tm"), (6, "D64"), (6, "D7-5"), (8, "D"), (8, "D/3"), (8, "S"), (8, "T"), (8, "T/3"), (10, "D-5"), (10, "D54")  …  (12, "D7/7"), (12, "S6"), (12, "Ss"), (12, "Ts"), (14, "S/3"), (14, "S65"), (14, "S65/6"), (14, "T64"), (16, "D7-1"), (18, "T-5")]        
 [(0, "D7-1"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S6"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D/5")  …  (12, "T/3"), (12, "T/5"), (14, "D7-5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (14, "Tm"), (16, "Ts"), (18, "D-5"), (18, "T-5")]       
 [(0, "S/3"), (0, "S/5"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (6, "T"), (8, "Ss"), (8, "T-5"), (10, "D7"), (10, "D7/3")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5")]       
 [(6, "D"), (6, "D/3"), (6, "D/5"), (8, "S65"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "T")  …  (12, "T54"), (12, "T64"), (12, "Ts"), (14, "D7-1"), (14, "S"), (16, "D-5"), (16, "T-5"), (16, "Tm"), (18, "S6"), (18, "Ss")]     
 [(4, "T-5"), (8, "S65/6"), (10, "T"), (10, "Ts"), (12, "D/3"), (12, "T54"), (14, "D7"), (14, "D7-1"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S"), (14, "S/3"), (16, "D54"), (18, "D"), (18, "Ss"), (20, "D64"), (20, "T/3"), (24, "D7-5"), (28, "D-5")]  
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "Ss"), (18, "D-5")]       
 [(4, "S"), (4, "S/3"), (6, "D64"), (6, "S65/6"), (6, "T/3"), (6, "Ts"), (8, "Ss"), (8, "T"), (10, "D54"), (12, "D"), (12, "D/3"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D-5"), (14, "D7-5"), (16, "D7-1"), (18, "T-5")]                     
 [(4, "S65/6"), (6, "D"), (6, "D/3"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D54"), (10, "D7-1"), (10, "S")  …  (10, "Tm"), (10, "Ts"), (12, "D64"), (12, "T/3"), (12, "T54"), (14, "Ss"), (16, "D-5"), (16, "D7-5"), (16, "T-5"), (18, "T")]      

Done. Total checked: 147519, Pruned: 166163, completed: 22, time: 3.3529999256134033, efficiency: 6.561288544011907
Results: bestval_func: 120, bestval_voices: 83
(16, 375, 375, 375)
Total time for optimisation of piece: 7.605999946594238
["T", "Dm", "Ts", "S6", "D7", "T", "S", "S", "Tm", "S", "D7-5", "T", "Dm", "Ts", "D", "D", "S/3", "S6", "D7", "Ts", "D", "S/3", "T/5", "S", "D7-5", "T", "T", "D7/3", "T", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-65.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-78.csv
[0 1 0 0 0 1 0 0 0 0 0 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 2 0 0 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 1 1 0 0 1 0 0 0 0 1 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 0 1 0 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 0 1; 0 1 0 0 1 1 0 0 1 0 0 0; 0 0 0 0 0 0 2 0 1 0 1 0; 0 1 0 0 0 0 2 0 0 0 1 0; 1 0 0 1 0 0 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 2 0 1 0 0 0 0 1 0 0 0; 0 3 0 0 0 0 0 0 0 0 1 0; 0 2 0 0 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 1 0 0 0 1 0; 0 1 0 1 0 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 1 0 1 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 0 1 0 0 2 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 2 0 0 0 0 0 0 1 0 0 1; 0 0 0 0 0 0 3 0 0 0 1 0; 0 0 0 0 0 0 3 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 0 1; 0 1 0 1 0 0 0 0 2 0 0 0]
Key Counter is [5 23 1 17 3 9 20 1 21 0 16 11]
Key Score is [30; 111; 59; 70; 95; 35; 117; 41; 92; 79; 49; 111]
Position Counter for 7 is [20 1 21 0 16 11 5 23 1 17 3 9]
Any[[7.0, 72.0, 1.0]]
[7, 72, 1]
7 F# Major
Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

6-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (58, 3), (61, 5), (66, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (58, 3), (66, 1), (73, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (61, 5), (66, 1), (70, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (54, 1), (58, 3), (61, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (66, 1), (70, 3), (73, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(2, "T", [(54, 1), (54, 1), (61, 5), (70, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 64
child voicing cost: 174
Best yet: 238
New solution
function cost: 64
child voicing cost: 165
Best yet: 229
New solution
function cost: 64
child voicing cost: 162
Best yet: 226
New solution
function cost: 64
child voicing cost: 160
Best yet: 224
New solution
function cost: 64
child voicing cost: 159
Best yet: 223
New solution
function cost: 64
child voicing cost: 154
Best yet: 218
New solution
function cost: 64
child voicing cost: 152
Best yet: 216
New solution
function cost: 64
child voicing cost: 150
Best yet: 214
New solution
function cost: 64
child voicing cost: 147
Best yet: 211
New solution
function cost: 64
child voicing cost: 146
Best yet: 210
New solution
function cost: 68
child voicing cost: 138
Best yet: 206
New solution
function cost: 64
child voicing cost: 139
Best yet: 203
New solution
function cost: 64
child voicing cost: 137
Best yet: 201
New solution
function cost: 64
child voicing cost: 134
Best yet: 198
New solution
function cost: 64
child voicing cost: 132
Best yet: 196
New solution
function cost: 64
child voicing cost: 129
Best yet: 193
New solution
function cost: 68
child voicing cost: 124
Best yet: 192
New solution
function cost: 72
child voicing cost: 118
Best yet: 190
New solution
function cost: 72
child voicing cost: 116
Best yet: 188
New solution
function cost: 70
child voicing cost: 116
Best yet: 186
New solution
function cost: 70
child voicing cost: 109
Best yet: 179
New solution
function cost: 68
child voicing cost: 108
Best yet: 176
New solution
function cost: 68
child voicing cost: 107
Best yet: 175
New solution
function cost: 68
child voicing cost: 106
Best yet: 174
New solution
function cost: 68
child voicing cost: 105
Best yet: 173
New solution
function cost: 68
child voicing cost: 104
Best yet: 172
New solution
function cost: 68
child voicing cost: 102
Best yet: 170
New solution
function cost: 68
child voicing cost: 100
Best yet: 168
New solution
function cost: 68
child voicing cost: 96
Best yet: 164
New solution
function cost: 68
child voicing cost: 93
Best yet: 161
New solution
function cost: 68
child voicing cost: 91
Best yet: 159
New solution
function cost: 68
child voicing cost: 89
Best yet: 157
New solution
function cost: 68
child voicing cost: 88
Best yet: 156
New solution
function cost: 68
child voicing cost: 86
Best yet: 154
New solution
function cost: 68
child voicing cost: 85
Best yet: 153
New solution
function cost: 68
child voicing cost: 81
Best yet: 149
New solution
function cost: 68
child voicing cost: 79
Best yet: 147
New solution
function cost: 68
child voicing cost: 78
Best yet: 146
New solution
function cost: 68
child voicing cost: 75
Best yet: 143

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "D", [(49, 1), (56, 5), (65, 3), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(4, "S65"), (4, "S65/6"), (6, "D"), (6, "D/3"), (6, "D/5"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "T64")  …  (10, "Ts"), (12, "T/3"), (12, "T/5"), (12, "T54"), (14, "S6"), (14, "Ss"), (16, "D-5"), (16, "D7-5"), (16, "T-5"), (18, "T")]            
 [(4, "D"), (4, "D/3"), (6, "D54"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (8, "S6"), (8, "Ss"), (10, "D-5"), (10, "D7-5")  …  (14, "D64"), (14, "S65"), (14, "S65/6"), (14, "T54"), (14, "Tm"), (14, "Ts"), (16, "T"), (16, "T/3"), (18, "T64"), (26, "T-5")]            
 [(10, "D-5"), (10, "D7-5"), (12, "D"), (14, "Tm"), (18, "Ts"), (20, "D7"), (20, "D7/3"), (20, "D7/5"), (20, "D7/7"), (20, "S")  …  (20, "T/3"), (20, "T/5"), (22, "D/3"), (22, "D/5"), (22, "T54"), (24, "D7-1"), (26, "S65"), (26, "S65/6"), (26, "T64"), (30, "T-5")]
 [(0, "Tm"), (12, "D54"), (12, "D7-5"), (14, "D"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (16, "D-5"), (16, "D/3")  …  (18, "S/5"), (18, "S6"), (18, "Ss"), (18, "T"), (18, "T/3"), (18, "T/5"), (20, "S65"), (20, "S65/6"), (22, "D7-1"), (28, "T-5")]  
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "S65"), (6, "S65/6"), (6, "T/3"), (6, "T/5"), (6, "Ts"), (8, "S6"), (8, "Ss")  …  (12, "D/5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "D-5"), (14, "D7-5"), (14, "T54"), (16, "D7-1"), (18, "T-5")]         
 [(4, "D7"), (4, "D7/3"), (4, "D7/7"), (4, "S6"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D7-1"), (8, "S"), (8, "S/3")  …  (10, "S65"), (10, "S65/6"), (10, "T/3"), (10, "T54"), (10, "Tm"), (10, "Ts"), (12, "T"), (14, "D-5"), (14, "T64"), (22, "T-5")]                
 [(2, "Tm"), (4, "D7-5"), (6, "D"), (8, "D-5"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "T"), (14, "T/3")  …  (18, "D7-1"), (18, "S"), (18, "S/3"), (18, "S/5"), (18, "S6"), (18, "Ss"), (24, "S65"), (24, "S65/6"), (24, "T-5"), (24, "T64")]       
 [(2, "D7-1"), (6, "Ss"), (10, "S65"), (10, "S65/6"), (10, "T-5"), (12, "D7"), (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (12, "S6")  …  (16, "D/3"), (16, "D/5"), (16, "S"), (16, "T"), (16, "T/3"), (16, "T/5"), (16, "Ts"), (18, "Tm"), (22, "D7-5"), (26, "D-5")]    
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S6"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7-1")  …  (10, "S65/6"), (10, "T/3"), (10, "T/5"), (10, "T54"), (10, "Tm"), (10, "Ts"), (12, "T"), (14, "D-5"), (14, "T64"), (22, "T-5")]             
 [(4, "Tm"), (8, "D64"), (10, "S"), (10, "S6"), (10, "T"), (10, "T/3"), (12, "D54"), (12, "D7-5"), (12, "S65"), (12, "S65/6")  …  (14, "D7/3"), (14, "D7/7"), (14, "Ts"), (16, "D-5"), (16, "D/3"), (16, "D7-1"), (16, "S/3"), (16, "T64"), (18, "D"), (20, "T-5")]     
 [(0, "Ss"), (4, "D7-1"), (4, "S65"), (4, "S65/6"), (6, "S6"), (8, "S/3"), (8, "S/5"), (8, "T64"), (10, "D7"), (10, "D7/3")  …  (14, "D"), (14, "D/3"), (14, "D/5"), (14, "T"), (16, "T-5"), (16, "Tm"), (20, "D7-5"), (20, "T/3"), (20, "T/5"), (24, "D-5")]           
 [(8, "S65/6"), (10, "D7-1"), (10, "Ss"), (12, "T64"), (14, "D7"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S"), (14, "S/5"), (16, "Ts"), (18, "D"), (18, "D/5"), (18, "T"), (18, "T/5"), (20, "D54"), (24, "D64"), (24, "D7-5")]                                
 [(8, "D64"), (8, "T/5"), (10, "S"), (10, "S/5"), (10, "T"), (12, "D54"), (12, "D7-5"), (12, "S65/6"), (12, "T54"), (14, "D"), (14, "D/5"), (14, "Ss"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (22, "D7-1")]                                             
 [(6, "D64"), (6, "D7-5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "Ss"), (10, "D54"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/5"), (14, "D/5"), (14, "S65/6"), (14, "Tm"), (16, "T"), (16, "T/5"), (26, "T-5")]                                      
 [(18, "D7"), (22, "D")]                                                                                                                                                                                                                                                
 [(10, "T")]                                                                                                                                                                                                                                                            
 [(14, "T")]                                                                                                                                                                                                                                                            

Done. Total checked: 124374, Pruned: 143032, completed: 39, time: 2.8409998416900635, efficiency: 13.727561483002248
Results: bestval_func: 68, bestval_voices: 75
(15, 384, 384, 384)
[0 1 0 0 0 1 0 0 0 0 0 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 2 0 0 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 0 0 0 0; 0 1 0 0 0 1 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 1 1 0 0 1 0 0 0 0 1 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 0 1 0 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 0 1; 0 1 0 0 1 1 0 0 1 0 0 0; 0 0 0 0 0 0 2 0 1 0 1 0; 0 1 0 0 0 0 2 0 0 0 1 0; 1 0 0 1 0 0 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 2 0 1 0 0 0 0 1 0 0 0; 0 3 0 0 0 0 0 0 0 0 1 0; 0 2 0 0 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 1 0 0 0 1 0; 0 1 0 1 0 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 1 0 1 0 0 0 0 1 0 0 1; 0 1 0 0 0 0 0 1 0 0 2 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 2 0 0 0 0 0 0 1 0 0 1; 0 0 0 0 0 0 3 0 0 0 1 0; 0 0 0 0 0 0 3 0 0 0 1 0; 1 0 0 1 0 0 0 0 1 0 0 1; 0 1 0 1 0 0 0 0 2 0 0 0]
Key Counter is [5 23 1 17 3 9 20 1 21 0 16 11]
Key Score is [30; 111; 59; 70; 95; 35; 117; 41; 92; 79; 49; 111]
Position Counter for 7 is [20 1 21 0 16 11 5 23 1 17 3 9]
Any[[7.0, 72.0, 1.0]]
[7, 72, 1]
7 F# Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(6, "D", [(49, 1), (56, 5), (65, 3), (73, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 146
child voicing cost: 183
Best yet: 329
New solution
function cost: 146
child voicing cost: 176
Best yet: 322
New solution
function cost: 152
child voicing cost: 166
Best yet: 318
New solution
function cost: 146
child voicing cost: 171
Best yet: 317
New solution
function cost: 146
child voicing cost: 169
Best yet: 315
New solution
function cost: 146
child voicing cost: 166
Best yet: 312
New solution
function cost: 146
child voicing cost: 159
Best yet: 305
New solution
function cost: 146
child voicing cost: 156
Best yet: 302
New solution
function cost: 146
child voicing cost: 154
Best yet: 300
New solution
function cost: 148
child voicing cost: 149
Best yet: 297
New solution
function cost: 146
child voicing cost: 150
Best yet: 296
New solution
function cost: 150
child voicing cost: 143
Best yet: 293
New solution
function cost: 150
child voicing cost: 141
Best yet: 291
New solution
function cost: 148
child voicing cost: 138
Best yet: 286
New solution
function cost: 146
child voicing cost: 138
Best yet: 284
New solution
function cost: 146
child voicing cost: 136
Best yet: 282
New solution
function cost: 152
child voicing cost: 127
Best yet: 279
New solution
function cost: 150
child voicing cost: 126
Best yet: 276
New solution
function cost: 150
child voicing cost: 124
Best yet: 274
New solution
function cost: 146
child voicing cost: 121
Best yet: 267
New solution
function cost: 146
child voicing cost: 119
Best yet: 265
New solution
function cost: 146
child voicing cost: 117
Best yet: 263
New solution
function cost: 146
child voicing cost: 115
Best yet: 261
New solution
function cost: 146
child voicing cost: 113
Best yet: 259

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (2, "T", [(54, 1), (54, 1), (61, 5), (70, 3)])    
 (2, "Ts", [(51, 1), (58, 5), (63, 1), (66, 3)])   
 (0, "D", [(49, 1), (61, 1), (65, 3), (68, 5)])    
 (2, "S/3", [(51, 3), (59, 1), (66, 5), (71, 1)])  
 (2, "T", [(54, 1), (61, 5), (66, 1), (70, 3)])    
 (0, "D/3", [(53, 3), (61, 1), (68, 5), (73, 1)])  
 (6, "Ts", [(51, 1), (58, 5), (66, 3), (75, 1)])   
 (8, "Ts", [(51, 1), (58, 5), (66, 3), (75, 1)])   
 (8, "S", [(47, 1), (59, 1), (66, 5), (75, 3)])    
 (0, "D7-1", [(44, 5), (59, 7), (68, 5), (77, 3)]) 
 (6, "T", [(42, 1), (61, 5), (70, 3), (78, 1)])    
 (6, "D/3", [(41, 3), (61, 1), (68, 5), (80, 5)])  
 (10, "T", [(42, 1), (61, 5), (70, 3), (78, 1)])   
 ?                                                 
 (4, "D7/3", [(53, 3), (59, 7), (68, 5), (73, 1)]) 
 (14, "T", [(54, 1), (58, 3), (66, 1), (73, 5)])   
 (2, "D7-1", [(56, 5), (59, 7), (65, 3), (71, 7)]) 
 (4, "D7/3", [(53, 3), (59, 7), (68, 5), (73, 1)]) 
 (10, "T", [(54, 1), (58, 3), (66, 1), (73, 5)])   
 (4, "D7-1", [(56, 5), (59, 7), (65, 3), (71, 7)]) 
 (10, "D7-1", [(56, 5), (59, 7), (65, 3), (68, 5)])
 (10, "T", [(54, 1), (61, 5), (66, 1), (70, 3)])   
 (6, "D64", [(49, 1), (61, 1), (66, 4), (70, 6)])  
 (22, "D", [(49, 1), (61, 1), (65, 3), (68, 5)])   
 (10, "T", [(42, 1), (58, 3), (61, 5), (66, 1)])   
 (10, "T", [(42, 1), (58, 3), (61, 5), (66, 1)])   

Done. Total checked: 79612, Pruned: 87560, completed: 24, time: 1.9079999923706055, efficiency: 12.578616402498547
Results: bestval_func: 146, bestval_voices: 113
(16, 384, 384, 384)
Total time for optimisation of piece: 6.661999940872192
["T", "Ts", "D", "S/3", "T", "D/3", "Ts", "Ts", "S", "D7-1", "T", "D/3", "T", "T", "D", "D", "D/3", "D7-5", "T", "S", "D7/3", "T", "D7-1", "D7/3", "T", "D7-1", "D7-1", "T", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/optimiser-78.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/neuralnet-91.csv
[0 0 0 1 0 0 0 0 0 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 0 1 0 0 1 0 0 1 0 1 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 0 0 0 1 1 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 0 1 1 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 0 2 0 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 0 2; 0 2 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 1 0 0 0; 0 0 0 0 1 0 1 0 1 0 1 0; 0 0 0 0 1 0 1 0 1 0 1 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 2 1 0 1 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 0 2 0 1 0 0 0 0 1; 0 0 0 0 0 0 2 0 0 0 1 1; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 1 0]
Key Counter is [0 11 1 13 24 2 26 0 18 1 12 23]
Key Score is [51; 82; 86; 46; 116; 40; 105; 75; 56; 104; 29; 127]
Position Counter for 12 is [23 0 11 1 13 24 2 26 0 18 1 12]
Any[[12.0, 89.5, 1.0]]
[12, 90, 1]
12 B Major

9-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (63, 3), (66, 5), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (51, 3), (59, 1), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (63, 3), (71, 1), (78, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (54, 5), (63, 3), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (66, 5), (71, 1), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (47, 1), (54, 5), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

16-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "T")]                                                                                                                                                                                                                                                           
 [(0, "D7"), (0, "D7/3"), (0, "D7/5"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D/5"), (4, "D7-1"), (6, "S65"), (6, "S65/6")  …  (8, "T/3"), (8, "T/5"), (10, "D7-5"), (10, "S/3"), (10, "S/5"), (10, "T64"), (12, "Ts"), (14, "D-5"), (16, "S"), (18, "T-5")]         
 [(0, "Ts"), (8, "T/3"), (8, "T/5"), (10, "S"), (10, "S/3"), (10, "S/5"), (10, "T"), (10, "Tm"), (12, "D7-5"), (12, "S65")  …  (14, "S6"), (14, "Ss"), (16, "D-5"), (18, "D7"), (18, "D7/3"), (18, "D7/5"), (18, "D7/7"), (20, "D/3"), (20, "D/5"), (22, "D7-1")]     
 [(6, "S65"), (6, "S65/6"), (8, "D"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "S/5")  …  (14, "D-5"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "D7-5"), (14, "T54"), (14, "Tm"), (16, "S6"), (16, "Ts"), (22, "T-5")]         
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (4, "D/3"), (4, "Tm"), (6, "D"), (6, "D7-1"), (6, "T"), (6, "T/3"), (8, "D54")  …  (10, "S6"), (10, "Ss"), (10, "Ts"), (12, "D64"), (12, "D7-5"), (12, "T64"), (16, "D-5"), (16, "T-5"), (18, "S"), (18, "S/3")]               
 [(8, "S"), (8, "S/3"), (10, "D7-5"), (12, "Ss"), (14, "D-5"), (14, "D64"), (14, "S65/6"), (14, "T/3"), (14, "T54"), (14, "Ts")  …  (16, "D7-1"), (16, "D7/3"), (16, "D7/5"), (16, "D7/7"), (16, "T"), (18, "Tm"), (20, "D"), (20, "D/3"), (22, "D54"), (26, "T-5")]  
 [(6, "D"), (6, "D/3"), (8, "D54"), (8, "S65/6"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (12, "D64"), (12, "D7-5")  …  (12, "T64"), (12, "Ts"), (14, "D7-1"), (14, "S"), (16, "D-5"), (16, "T-5"), (16, "Tm"), (18, "Ss"), (18, "T"), (18, "T/3")]     
 [(6, "Ts"), (10, "D-5"), (12, "S"), (12, "S/3"), (14, "D54"), (14, "D64"), (14, "D7-5"), (14, "S65/6"), (14, "T/3"), (14, "T54")  …  (16, "D/3"), (16, "S6"), (16, "T"), (18, "Ss"), (18, "T-5"), (20, "D7"), (20, "D7/3"), (20, "D7/5"), (20, "D7/7"), (24, "D7-1")]
 [(2, "Ts"), (6, "S/3"), (6, "T64"), (8, "S"), (10, "D64"), (10, "D7-5"), (10, "S65"), (10, "S65/6"), (10, "T/3"), (10, "T54")  …  (14, "Ss"), (14, "T-5"), (16, "D7"), (16, "D7/3"), (16, "D7/7"), (18, "D54"), (18, "Tm"), (20, "D"), (20, "D/3"), (20, "D7-1")]    
 [(2, "S"), (2, "S/3"), (2, "S/5"), (4, "S65"), (4, "S65/6"), (6, "S6"), (6, "Ss"), (8, "T/3"), (8, "T/5"), (8, "T64")  …  (10, "D7/7"), (10, "T"), (12, "D7-5"), (12, "T54"), (14, "D"), (14, "D7-1"), (16, "D-5"), (16, "T-5"), (20, "D/3"), (20, "D/5")]           
 [(0, "D7-1"), (4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S6"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D/5")  …  (12, "T"), (12, "T/3"), (12, "T/5"), (14, "D7-5"), (14, "S/3"), (14, "S/5"), (14, "Tm"), (16, "Ts"), (18, "D-5"), (18, "T-5")]            
 [(2, "Tm"), (6, "T/3"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "S"), (8, "S/3"), (8, "S/5")  …  (10, "S65/6"), (10, "T54"), (12, "D"), (12, "S6"), (12, "Ss"), (14, "D-5"), (14, "T64"), (14, "Ts"), (16, "D7-1"), (18, "T-5")]           
 [(2, "T"), (2, "T/3"), (4, "T64"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "S"), (10, "S/3"), (12, "D/3"), (12, "D64"), (12, "D7-5"), (12, "T-5"), (12, "Ts"), (16, "D-5"), (16, "D7-1")]                        
 [(0, "T"), (0, "T/3"), (2, "T54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "S65/6"), (10, "T-5"), (10, "Ts"), (12, "D"), (12, "D7-1"), (12, "S"), (12, "S/3"), (14, "D7-5"), (16, "Ss"), (18, "D-5")]          
 [(6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (8, "D54"), (8, "S65/6"), (10, "D"), (10, "D/3"), (10, "D7-1"), (10, "T"), (10, "T/3"), (12, "S/3"), (12, "T64"), (14, "S6"), (14, "Ts"), (16, "D64"), (16, "D7-5"), (18, "S"), (20, "D-5"), (20, "T-5")]         
 [(0, "S/3"), (0, "T64"), (2, "Ts"), (4, "S65/6"), (6, "T"), (8, "T-5"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S"), (12, "D54"), (14, "D"), (16, "D64"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "Tm"), (20, "D-5"), (20, "D/3")]         

Rhythm map: ["S", "O", "W", "O", "S", "C", "C", "C", "S", "O", "W", "O", "C", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...

9-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (63, 3), (66, 5), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (51, 3), (59, 1), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (63, 3), (71, 1), (78, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (54, 5), (63, 3), (71, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (66, 5), (71, 1), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (47, 1), (54, 5), (63, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 104
child voicing cost: 178
Best yet: 282
New solution
function cost: 104
child voicing cost: 177
Best yet: 281
New solution
function cost: 104
child voicing cost: 176
Best yet: 280
New solution
function cost: 104
child voicing cost: 171
Best yet: 275
New solution
function cost: 104
child voicing cost: 165
Best yet: 269
New solution
function cost: 104
child voicing cost: 164
Best yet: 268
New solution
function cost: 104
child voicing cost: 163
Best yet: 267
New solution
function cost: 104
child voicing cost: 158
Best yet: 262
New solution
function cost: 104
child voicing cost: 157
Best yet: 261
New solution
function cost: 104
child voicing cost: 156
Best yet: 260
New solution
function cost: 104
child voicing cost: 154
Best yet: 258
New solution
function cost: 84
child voicing cost: 173
Best yet: 257
New solution
function cost: 84
child voicing cost: 171
Best yet: 255
New solution
function cost: 84
child voicing cost: 169
Best yet: 253
New solution
function cost: 84
child voicing cost: 167
Best yet: 251
New solution
function cost: 84
child voicing cost: 166
Best yet: 250
New solution
function cost: 84
child voicing cost: 164
Best yet: 248
New solution
function cost: 84
child voicing cost: 163
Best yet: 247
New solution
function cost: 84
child voicing cost: 158
Best yet: 242
New solution
function cost: 84
child voicing cost: 156
Best yet: 240
New solution
function cost: 88
child voicing cost: 150
Best yet: 238
New solution
function cost: 88
child voicing cost: 149
Best yet: 237
New solution
function cost: 88
child voicing cost: 147
Best yet: 235
New solution
function cost: 88
child voicing cost: 145
Best yet: 233
New solution
function cost: 88
child voicing cost: 144
Best yet: 232
New solution
function cost: 88
child voicing cost: 143
Best yet: 231
New solution
function cost: 88
child voicing cost: 141
Best yet: 229
New solution
function cost: 88
child voicing cost: 140
Best yet: 228
New solution
function cost: 88
child voicing cost: 138
Best yet: 226
New solution
function cost: 88
child voicing cost: 137
Best yet: 225
New solution
function cost: 88
child voicing cost: 135
Best yet: 223
New solution
function cost: 88
child voicing cost: 134
Best yet: 222
New solution
function cost: 96
child voicing cost: 121
Best yet: 217
New solution
function cost: 94
child voicing cost: 122
Best yet: 216
New solution
function cost: 92
child voicing cost: 123
Best yet: 215
New solution
function cost: 92
child voicing cost: 122
Best yet: 214
New solution
function cost: 92
child voicing cost: 120
Best yet: 212
New solution
function cost: 86
child voicing cost: 125
Best yet: 211
New solution
function cost: 88
child voicing cost: 121
Best yet: 209
New solution
function cost: 92
child voicing cost: 114
Best yet: 206
New solution
function cost: 92
child voicing cost: 111
Best yet: 203
New solution
function cost: 88
child voicing cost: 113
Best yet: 201
New solution
function cost: 92
child voicing cost: 106
Best yet: 198
New solution
function cost: 92
child voicing cost: 104
Best yet: 196
New solution
function cost: 92
child voicing cost: 103
Best yet: 195
New solution
function cost: 92
child voicing cost: 100
Best yet: 192
New solution
function cost: 88
child voicing cost: 101
Best yet: 189
New solution
function cost: 92
child voicing cost: 94
Best yet: 186
New solution
function cost: 92
child voicing cost: 92
Best yet: 184
New solution
function cost: 92
child voicing cost: 91
Best yet: 183
New solution
function cost: 92
child voicing cost: 88
Best yet: 180

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "D", [(54, 1), (58, 3), (61, 5), (66, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

17-element Array{Array{Tuple{Int64,String},1},1}:
 [(0, "S/3"), (0, "S/5"), (0, "T64"), (2, "Ts"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "T"), (8, "Ss"), (8, "T-5")  …  (14, "D"), (14, "S6"), (16, "D7-1"), (16, "D7-5"), (16, "T/3"), (16, "T/5"), (16, "Tm"), (20, "D-5"), (20, "D/3"), (20, "D/5")]          
 [(2, "D7"), (2, "D7/3"), (2, "D7/7"), (4, "D54"), (4, "S65"), (4, "S65/6"), (4, "T54"), (6, "D"), (6, "D/3"), (6, "D7-1")  …  (8, "Ss"), (8, "T64"), (8, "Tm"), (10, "S6"), (10, "Ts"), (12, "D64"), (12, "D7-5"), (14, "S"), (16, "D-5"), (16, "T-5")]            
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S6"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7-1")  …  (10, "Tm"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "D-5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (22, "T-5")]           
 [(4, "T/3"), (4, "T/5"), (4, "Tm"), (6, "D7"), (6, "D7/3"), (6, "D7/5"), (6, "D7/7"), (6, "S"), (6, "S/3"), (6, "S/5")  …  (10, "D"), (10, "S6"), (10, "Ss"), (10, "T"), (12, "D-5"), (12, "D/3"), (12, "D/5"), (12, "Ts"), (14, "D7-1"), (20, "T-5")]             
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "S6"), (4, "Ss"), (8, "D"), (8, "D/3"), (8, "D/5"), (8, "D7-1")  …  (10, "Tm"), (12, "T"), (12, "T/3"), (12, "T/5"), (14, "D-5"), (14, "S/3"), (14, "S/5"), (14, "T64"), (16, "Ts"), (22, "T-5")]           
 [(6, "Tm"), (8, "D7"), (8, "D7/3"), (8, "D7/7"), (10, "D64"), (10, "T/3"), (12, "D"), (12, "S"), (12, "S/3"), (12, "S6")  …  (14, "D7-5"), (14, "S65"), (14, "S65/6"), (14, "T54"), (14, "Ts"), (16, "D7-1"), (16, "T"), (18, "D-5"), (18, "T64"), (26, "T-5")]    
 [(4, "D7-5"), (6, "S"), (8, "D-5"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S6"), (10, "Ss")  …  (12, "S65"), (12, "S65/6"), (12, "T64"), (12, "Tm"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "Ts"), (20, "T-5")]  
 [(4, "D7-5"), (6, "S"), (8, "D-5"), (8, "T54"), (10, "D7"), (10, "D7/3"), (10, "D7/5"), (10, "D7/7"), (10, "S6"), (10, "Ss")  …  (12, "S/5"), (12, "S65"), (12, "S65/6"), (12, "Tm"), (14, "D"), (14, "D/3"), (14, "D/5"), (14, "D7-1"), (14, "Ts"), (20, "T-5")]  
 [(4, "S"), (4, "S/3"), (4, "S/5"), (6, "D7-5"), (6, "T/3"), (6, "T/5"), (6, "T54"), (6, "Ts"), (8, "S6"), (8, "T")  …  (12, "D7/3"), (12, "D7/5"), (12, "D7/7"), (14, "Ss"), (14, "Tm"), (16, "D"), (16, "D/3"), (16, "D/5"), (16, "D7-1"), (18, "T-5")]           
 [(0, "D7"), (0, "D7/3"), (0, "D7/7"), (4, "D"), (4, "D/3"), (4, "D7-1"), (6, "D54"), (6, "S65"), (6, "S65/6"), (6, "T54")  …  (8, "T"), (8, "T/3"), (10, "D7-5"), (10, "S/3"), (10, "T64"), (12, "Ts"), (14, "D-5"), (14, "D64"), (16, "S"), (18, "T-5")]          
 [(10, "S6"), (10, "Ss"), (12, "T/3"), (12, "T/5"), (14, "D7"), (14, "D7-1"), (14, "D7/3"), (14, "D7/5"), (14, "D7/7"), (14, "S")  …  (16, "S65/6"), (16, "T54"), (18, "D"), (18, "T"), (20, "D-5"), (20, "D/3"), (20, "D/5"), (20, "T64"), (20, "Ts"), (28, "T-5")]
 [(4, "D7"), (4, "D7/3"), (4, "D7/5"), (4, "D7/7"), (4, "T"), (4, "T/5"), (6, "S/5"), (8, "D"), (8, "S"), (10, "D/3"), (10, "D54"), (10, "D64"), (10, "D7-5"), (10, "S65/6"), (12, "S6"), (14, "D7-1"), (14, "T-5")]                                                
 [(4, "S"), (4, "S/5"), (6, "D64"), (6, "D7-5"), (6, "T/5"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (10, "D-5"), (10, "D54"), (10, "S65/6"), (12, "D"), (12, "D/5"), (12, "D7-1"), (12, "T"), (14, "T64"), (22, "T-5")]                                  
 [(4, "D"), (6, "D54"), (8, "D7"), (8, "D7/3"), (8, "D7/5"), (8, "D7/7"), (8, "T"), (8, "T/5"), (10, "D-5"), (10, "D64"), (10, "D7-5"), (10, "S/5"), (12, "S"), (14, "D/3"), (14, "S65"), (16, "S6"), (18, "D7-1"), (18, "T-5")]                                    
 [(0, "D7"), (4, "D")]                                                                                                                                                                                                                                              
 [(4, "T")]                                                                                                                                                                                                                                                         
 [(10, "T")]                                                                                                                                                                                                                                                        

Done. Total checked: 168489, Pruned: 196564, completed: 51, time: 3.809999942779541, efficiency: 13.385826972688495
Results: bestval_func: 92, bestval_voices: 88
(15, 383, 383, 383)
[0 0 0 1 0 0 0 0 0 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 0 0 0 0 2 0 0 1; 0 0 1 0 0 1 0 0 1 0 1 0; 0 1 0 1 0 0 1 0 0 0 1 0; 0 0 0 0 1 1 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 0 1 1 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 1 0 0 2 0 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 1 0 0 1 0 0 0 0 2; 0 2 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 1 1 0 1 0 1 0 0 0; 0 0 0 0 1 0 1 0 1 0 1 0; 0 0 0 0 1 0 1 0 1 0 1 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 2 1 0 1 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 0 1 1; 0 0 0 0 2 0 1 0 0 0 0 1; 0 0 0 0 0 0 2 0 0 0 1 1; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 0 0 0 1 0 1 0 0 2; 0 0 0 1 0 0 2 0 0 0 1 0]
Key Counter is [0 11 1 13 24 2 26 0 18 1 12 23]
Key Score is [51; 82; 86; 46; 116; 40; 105; 75; 56; 104; 29; 127]
Position Counter for 12 is [23 0 11 1 13 24 2 26 0 18 1 12]
Any[[12.0, 89.5, 1.0]]
[12, 90, 1]
12 B Major
Rhythm map: ["O", "S", "O", "W", "O", "S", "O", "W", "O", "S", "O", "A", "A", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...

1-element Array{candidateSequence,1}:
 candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(14, "D", [(54, 1), (58, 3), (61, 5), (66, 1)])], 0, 0, 0, Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int16[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, Int8[0, 0, 0, 0])

Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 116
child voicing cost: 203
Best yet: 319
New solution
function cost: 116
child voicing cost: 189
Best yet: 305
New solution
function cost: 116
child voicing cost: 186
Best yet: 302
New solution
function cost: 116
child voicing cost: 180
Best yet: 296
New solution
function cost: 116
child voicing cost: 173
Best yet: 289
New solution
function cost: 120
child voicing cost: 163
Best yet: 283
New solution
function cost: 120
child voicing cost: 159
Best yet: 279
New solution
function cost: 120
child voicing cost: 154
Best yet: 274
New solution
function cost: 112
child voicing cost: 161
Best yet: 273
New solution
function cost: 112
child voicing cost: 158
Best yet: 270
New solution
function cost: 116
child voicing cost: 153
Best yet: 269
New solution
function cost: 112
child voicing cost: 154
Best yet: 266
New solution
function cost: 112
child voicing cost: 153
Best yet: 265
New solution
function cost: 112
child voicing cost: 151
Best yet: 263
New solution
function cost: 104
child voicing cost: 153
Best yet: 257
New solution
function cost: 104
child voicing cost: 152
Best yet: 256
New solution
function cost: 104
child voicing cost: 150
Best yet: 254
New solution
function cost: 108
child voicing cost: 139
Best yet: 247
New solution
function cost: 98
child voicing cost: 144
Best yet: 242
New solution
function cost: 98
child voicing cost: 143
Best yet: 241
New solution
function cost: 98
child voicing cost: 141
Best yet: 239
New solution
function cost: 102
child voicing cost: 136
Best yet: 238
New solution
function cost: 98
child voicing cost: 139
Best yet: 237
New solution
function cost: 98
child voicing cost: 137
Best yet: 235
New solution
function cost: 104
child voicing cost: 129
Best yet: 233
New solution
function cost: 108
child voicing cost: 124
Best yet: 232
New solution
function cost: 104
child voicing cost: 127
Best yet: 231
New solution
function cost: 104
child voicing cost: 126
Best yet: 230
New solution
function cost: 104
child voicing cost: 124
Best yet: 228
New solution
function cost: 98
child voicing cost: 129
Best yet: 227
New solution
function cost: 98
child voicing cost: 127
Best yet: 225
New solution
function cost: 102
child voicing cost: 120
Best yet: 222
New solution
function cost: 102
child voicing cost: 119
Best yet: 221
New solution
function cost: 102
child voicing cost: 117
Best yet: 219
New solution
function cost: 108
child voicing cost: 108
Best yet: 216
New solution
function cost: 108
child voicing cost: 101
Best yet: 209
New solution
function cost: 98
child voicing cost: 106
Best yet: 204
New solution
function cost: 98
child voicing cost: 105
Best yet: 203
New solution
function cost: 98
child voicing cost: 103
Best yet: 201
New solution
function cost: 102
child voicing cost: 98
Best yet: 200
New solution
function cost: 98
child voicing cost: 101
Best yet: 199
New solution
function cost: 106
child voicing cost: 90
Best yet: 196
New solution
function cost: 98
child voicing cost: 94
Best yet: 192
New solution
function cost: 98
child voicing cost: 93
Best yet: 191
New solution
function cost: 98
child voicing cost: 91
Best yet: 189
New solution
function cost: 102
child voicing cost: 86
Best yet: 188
New solution
function cost: 98
child voicing cost: 89
Best yet: 187

32-element Array{Tuple{Int8,String,Array{Tuple{Int16,Int16},1}},1}:
 (0, "T", [(47, 1), (59, 1), (66, 5), (75, 3)])   
 (0, "D7", [(54, 1), (64, 7), (70, 3), (73, 5)])  
 (0, "Ts", [(56, 1), (63, 5), (71, 3), (71, 3)])  
 (6, "S65", [(52, 1), (61, 6), (71, 5), (80, 3)]) 
 (6, "D", [(54, 1), (66, 1), (70, 3), (73, 5)])   
 (8, "S/3", [(56, 3), (64, 1), (71, 5), (76, 1)]) 
 (6, "D", [(54, 1), (61, 5), (70, 3), (78, 1)])   
 (16, "D", [(54, 1), (61, 5), (70, 3), (78, 1)])  
 (2, "Ts", [(56, 1), (59, 3), (71, 3), (75, 5)])  
 (2, "S/3", [(56, 3), (59, 5), (71, 5), (76, 1)]) 
 (8, "D", [(54, 1), (61, 5), (70, 3), (78, 1)])   
 (8, "S/3", [(56, 3), (64, 1), (71, 5), (76, 1)]) 
 (6, "D7/3", [(58, 3), (64, 7), (66, 1), (73, 5)])
 ?                                                
 (16, "T", [(47, 1), (51, 3), (59, 1), (66, 5)])  
 (4, "D7-5", [(42, 1), (54, 1), (58, 3), (64, 7)])
 (10, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])  
 (4, "S", [(52, 1), (56, 3), (59, 5), (64, 1)])   
 (0, "D7/7", [(52, 7), (58, 3), (61, 5), (66, 1)])
 (12, "T/3", [(51, 3), (59, 1), (59, 1), (66, 5)])
 (4, "T", [(47, 1), (59, 1), (63, 3), (66, 5)])   
 (4, "S", [(52, 1), (59, 5), (64, 1), (68, 3)])   
 (4, "D", [(54, 1), (58, 3), (61, 5), (66, 1)])   
 (0, "D7", [(54, 1), (58, 3), (61, 5), (64, 7)])  
 (4, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])   
 (4, "T", [(47, 1), (54, 5), (59, 1), (63, 3)])   

Done. Total checked: 170038, Pruned: 186252, completed: 47, time: 3.3569998741149902, efficiency: 14.000596295044742
Results: bestval_func: 98, bestval_voices: 89
(16, 383, 383, 383)
Total time for optimisation of piece: 8.907999992370605
["T", "D7", "Ts", "S65", "D", "S/3", "D", "D", "Ts", "S/3", "D", "S/3", "D7/3", "T", "D", "D", "D7", "Ts", "T/3", "D7/5", "T", "D7-5", "T", "S", "D7/7", "T/3", "T", "S", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/optimiser-91.csv
 End of file 
 
