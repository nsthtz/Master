Optimising: ../../results/neuralnet/pianoroll/AC-06-Nun-nn.csv
[0 1 0 0 0 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 2 0 0 0 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 0 0 0 2 0 0 2 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 2 0 0 0 0 2 0 0; 0 0 0 0 1 0 1 0 0 2 0 0; 0 0 0 0 1 0 0 0 1 2 0 0; 0 0 0 0 0 0 1 0 1 1 0 1; 0 0 0 1 0 0 0 0 1 1 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 0 1 0 3 0 0 0 0 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 0 1 0 2; 0 0 0 0 2 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 1 0 1 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 1 1 0 0; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 0 0 1 0 0 2 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 1 1 0 0 0 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 0 2 0 0; 0 1 0 0 0 0 1 0 1 1 0 0]
Key Counter is [0 9 10 4 22 0 21 0 16 30 0 16]
Key Score is [78; 50; 108; 30; 118; 62; 66; 99; 29; 124; 44; 88]
Position Counter for 10 is [30 0 16 0 9 10 4 22 0 21 0 16]
Any[[10.0, 89.5, 1.0]]
[10, 90, 1]
10 A Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 180
child voicing cost: 94
Best yet: 274
New solution
function cost: 174
child voicing cost: 99
Best yet: 273
New solution
function cost: 174
child voicing cost: 94
Best yet: 268
New solution
function cost: 165
child voicing cost: 97
Best yet: 262
New solution
function cost: 162
child voicing cost: 94
Best yet: 256
New solution
function cost: 147
child voicing cost: 95
Best yet: 242
New solution
function cost: 177
child voicing cost: 63
Best yet: 240
New solution
function cost: 162
child voicing cost: 77
Best yet: 239
New solution
function cost: 156
child voicing cost: 82
Best yet: 238
New solution
function cost: 156
child voicing cost: 81
Best yet: 237
##: Done. Total checked: 116949, Pruned: 134191, completed: 10, time: 2.6590001583099365, efficiency: 3.7608121115554995
Results: bestval_func: 156, bestval_voices: 81
[0 1 0 0 0 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 2 0 0 0 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 0 0 0 2 0 0 2 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 2 0 0 0 0 2 0 0; 0 0 0 0 1 0 1 0 0 2 0 0; 0 0 0 0 1 0 0 0 1 2 0 0; 0 0 0 0 0 0 1 0 1 1 0 1; 0 0 0 1 0 0 0 0 1 1 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 0 1 0 3 0 0 0 0 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 0 1 0 2; 0 0 0 0 2 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 1 0 1 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 1 1 0 0; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 0 0 1 0 0 2 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 1 1 0 0 0 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 0 2 0 0; 0 1 0 0 0 0 1 0 1 1 0 0]
Key Counter is [0 9 10 4 22 0 21 0 16 30 0 16]
Key Score is [78; 50; 108; 30; 118; 62; 66; 99; 29; 124; 44; 88]
Position Counter for 10 is [30 0 16 0 9 10 4 22 0 21 0 16]
Any[[10.0, 89.5, 1.0]]
[10, 90, 1]
10 A Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 186
child voicing cost: 70
Best yet: 256
New solution
function cost: 186
child voicing cost: 64
Best yet: 250
New solution
function cost: 162
child voicing cost: 85
Best yet: 247
New solution
function cost: 162
child voicing cost: 84
Best yet: 246
New solution
function cost: 162
child voicing cost: 82
Best yet: 244
New solution
function cost: 162
child voicing cost: 76
Best yet: 238
New solution
function cost: 147
child voicing cost: 89
Best yet: 236
New solution
function cost: 147
child voicing cost: 83
Best yet: 230
New solution
function cost: 141
child voicing cost: 83
Best yet: 224
New solution
function cost: 141
child voicing cost: 77
Best yet: 218
##: Done. Total checked: 74309, Pruned: 80950, completed: 10, time: 1.5279998779296875, efficiency: 6.544503140634518
Results: bestval_func: 141, bestval_voices: 77
#Key: 10Scale: Major

(0, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (61, 3), (64, 5)])

(0, "Ss", Tuple{Int16,Int16}[(47, 1), (54, 5), (59, 1), (62, 3)])

(0, "T/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (69, 1)])

(9, "S", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(0, "D7/3", Tuple{Int16,Int16}[(44, 3), (52, 1), (62, 7), (71, 5)])

(0, "Ts", Tuple{Int16,Int16}[(42, 1), (57, 3), (69, 3), (73, 5)])

(12, "D", Tuple{Int16,Int16}[(40, 1), (59, 5), (68, 3), (76, 1)])

(9, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(21, "S/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (69, 5), (74, 1)])

(12, "D/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(15, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(12, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (69, 1), (76, 5)])

(9, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(9, "D7-5", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (74, 7)])

(15, "T", Tuple{Int16,Int16}[(57, 1), (64, 5), (69, 1), (73, 3)])

(33, "T", Tuple{Int16,Int16}[(45, 1), (64, 5), (69, 1), (73, 3)])

(9, "S65", Tuple{Int16,Int16}[(50, 1), (66, 3), (69, 5), (71, 6)])

(12, "D", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (71, 5)])

(0, "D/3", Tuple{Int16,Int16}[(56, 3), (64, 1), (71, 5), (76, 1)])

(12, "T", Tuple{Int16,Int16}[(57, 1), (64, 5), (69, 1), (73, 3)])

(9, "D", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (71, 5)])

(3, "D7/7", Tuple{Int16,Int16}[(50, 7), (59, 5), (68, 3), (76, 1)])

(18, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (69, 1), (76, 5)])

(6, "S/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (69, 5), (74, 1)])

(6, "Ts", Tuple{Int16,Int16}[(54, 1), (57, 3), (69, 3), (73, 5)])

(6, "D/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(0, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(0, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (69, 1), (76, 5)])

(18, "S", Tuple{Int16,Int16}[(50, 1), (62, 1), (69, 5), (78, 3)])

(24, "D7", Tuple{Int16,Int16}[(52, 1), (62, 7), (68, 3), (71, 5)])

(12, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(12, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

#Total time for optimisation of piece: 14.95300006866455
#Total cost of piece: 455
["T", "Ss", "T/3", "S", "D7/3", "Ts", "D", "D", "S/3", "D/3", "T", "T", "D", "D7-5", "T", "T", "S65", "D", "D/3", "T", "D", "D7/7", "T/3", "S/3", "Ts", "D/3", "T", "T", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/AC-06-Nun-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/AC-11-Wann-nn.csv
[0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 1 0 0 0 1 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 0 0 1 0 2 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 0 0 1 0 0 1 0 2 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 1 0 1 0 1; 0 0 1 0 0 0 0 1 0 2 0 0; 0 0 1 0 0 0 0 0 0 2 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 1 0 0 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 1 0 0 1 0 0 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 1 0 0 2 0 0 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 1 0 0 0 0 0 0 2; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 1 1 0 0 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 1 2 0 0 0 0 0 0 1 0 0]
Key Counter is [0 7 41 0 13 0 17 9 0 26 0 13]
Key Score is [102; 24; 126; 50; 76; 89; 37; 119; 16; 117; 76; 50]
Position Counter for 3 is [41 0 13 0 17 9 0 26 0 13 0 7]
Any[[3.0, 93.75, 1.0]]
[3, 94, 1]
3 D Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 159
child voicing cost: 106
Best yet: 265
New solution
function cost: 159
child voicing cost: 105
Best yet: 264
New solution
function cost: 174
child voicing cost: 86
Best yet: 260
New solution
function cost: 141
child voicing cost: 101
Best yet: 242
New solution
function cost: 141
child voicing cost: 100
Best yet: 241
New solution
function cost: 141
child voicing cost: 94
Best yet: 235
New solution
function cost: 138
child voicing cost: 95
Best yet: 233
New solution
function cost: 141
child voicing cost: 89
Best yet: 230
New solution
function cost: 138
child voicing cost: 90
Best yet: 228
New solution
function cost: 141
child voicing cost: 86
Best yet: 227
New solution
function cost: 141
child voicing cost: 80
Best yet: 221
New solution
function cost: 138
child voicing cost: 81
Best yet: 219
New solution
function cost: 138
child voicing cost: 72
Best yet: 210
New solution
function cost: 126
child voicing cost: 79
Best yet: 205
##: Done. Total checked: 99791, Pruned: 121992, completed: 14, time: 2.2009999752044678, efficiency: 6.360745187513886
Results: bestval_func: 126, bestval_voices: 79
[0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 1 0 0 0 1 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 0 0 1 0 2 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 0 0 1 0 0 1 0 2 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 1 0 1 0 1; 0 0 1 0 0 0 0 1 0 2 0 0; 0 0 1 0 0 0 0 0 0 2 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 1 0 0 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 1 0 0 1 0 0 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 1 0 0 2 0 0 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 1 0 0 0 0 0 0 2; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 1 1 0 0 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 1 2 0 0 0 0 0 0 1 0 0]
Key Counter is [0 7 41 0 13 0 17 9 0 26 0 13]
Key Score is [102; 24; 126; 50; 76; 89; 37; 119; 16; 117; 76; 50]
Position Counter for 3 is [41 0 13 0 17 9 0 26 0 13 0 7]
Any[[3.0, 93.75, 1.0]]
[3, 94, 1]
3 D Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 228
child voicing cost: 115
Best yet: 343
New solution
function cost: 228
child voicing cost: 113
Best yet: 341
New solution
function cost: 228
child voicing cost: 107
Best yet: 335
New solution
function cost: 222
child voicing cost: 97
Best yet: 319
New solution
function cost: 222
child voicing cost: 94
Best yet: 316
New solution
function cost: 219
child voicing cost: 89
Best yet: 308
New solution
function cost: 225
child voicing cost: 81
Best yet: 306
New solution
function cost: 225
child voicing cost: 78
Best yet: 303
New solution
function cost: 213
child voicing cost: 88
Best yet: 301
New solution
function cost: 213
child voicing cost: 85
Best yet: 298
New solution
function cost: 213
child voicing cost: 82
Best yet: 295
New solution
function cost: 213
child voicing cost: 79
Best yet: 292
New solution
function cost: 216
child voicing cost: 75
Best yet: 291
New solution
function cost: 198
child voicing cost: 87
Best yet: 285
New solution
function cost: 189
child voicing cost: 94
Best yet: 283
New solution
function cost: 171
child voicing cost: 109
Best yet: 280
New solution
function cost: 168
child voicing cost: 111
Best yet: 279
New solution
function cost: 177
child voicing cost: 101
Best yet: 278
New solution
function cost: 171
child voicing cost: 105
Best yet: 276
New solution
function cost: 171
child voicing cost: 104
Best yet: 275
New solution
function cost: 165
child voicing cost: 105
Best yet: 270
New solution
function cost: 165
child voicing cost: 100
Best yet: 265
New solution
function cost: 168
child voicing cost: 94
Best yet: 262
New solution
function cost: 156
child voicing cost: 104
Best yet: 260
New solution
function cost: 159
child voicing cost: 98
Best yet: 257
New solution
function cost: 135
child voicing cost: 121
Best yet: 256
New solution
function cost: 138
child voicing cost: 111
Best yet: 249
New solution
function cost: 141
child voicing cost: 105
Best yet: 246
New solution
function cost: 144
child voicing cost: 101
Best yet: 245
New solution
function cost: 147
child voicing cost: 95
Best yet: 242

(0, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(0, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(0, "D7-1", Tuple{Int16,Int16}[(52, 5), (55, 7), (61, 3), (64, 5)])

(0, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(9, "S/3", Tuple{Int16,Int16}[(47, 3), (55, 1), (62, 5), (67, 1)])

(18, "D7/3", Tuple{Int16,Int16}[(49, 3), (55, 7), (64, 5), (69, 1)])

(9, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(15, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(9, "S/3", Tuple{Int16,Int16}[(47, 3), (55, 1), (62, 5), (67, 1)])

(12, "D7/3", Tuple{Int16,Int16}[(49, 3), (55, 7), (57, 1), (64, 5)])

(12, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(6, "D/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (69, 1)])

(0, "T-5", Tuple{Int16,Int16}[(50, 1), (50, 1), (54, 3), (62, 1)])

(6, "D7", Tuple{Int16,Int16}[(45, 1), (49, 3), (55, 7), (64, 5)])

(15, "Ts", Tuple{Int16,Int16}[(47, 1), (50, 3), (54, 5), (62, 3)])

(15, "Ts", Tuple{Int16,Int16}[(47, 1), (50, 3), (54, 5), (59, 1)])

(21, "D", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(18, "S/3", Tuple{Int16,Int16}[(47, 3), (50, 5), (55, 1), (62, 5)])

(0, "D", Tuple{Int16,Int16}[(45, 1), (57, 1), (61, 3), (64, 5)])

(9, "D7-1", Tuple{Int16,Int16}[(52, 5), (55, 7), (61, 3), (64, 5)])

(15, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(0, "T-5", Tuple{Int16,Int16}[(50, 1), (62, 1), (66, 3), (74, 1)])

(0, "T", Tuple{Int16,Int16}[(50, 1), (62, 1), (66, 3), (69, 5)])

(0, "S/3", Tuple{Int16,Int16}[(47, 3), (62, 5), (67, 1), (74, 5)])

(0, "Ts", Tuple{Int16,Int16}[(47, 1), (62, 3), (66, 5), (71, 1)])

(15, "D7", Tuple{Int16,Int16}[(45, 1), (64, 5), (67, 7), (73, 3)])

(6, "Ts", Tuple{Int16,Int16}[(47, 1), (62, 3), (66, 5), (74, 3)])

(18, "S/3", Tuple{Int16,Int16}[(59, 3), (62, 5), (67, 1), (74, 5)])

(18, "D64", Tuple{Int16,Int16}[(57, 1), (62, 4), (69, 1), (78, 6)])

(9, "D", Tuple{Int16,Int16}[(57, 1), (61, 3), (69, 1), (76, 5)])

(12, "T", Tuple{Int16,Int16}[(50, 1), (62, 1), (69, 5), (78, 3)])

(12, "T", Tuple{Int16,Int16}[(50, 1), (62, 1), (69, 5), (78, 3)])

##: Done. Total checked: 185428, Pruned: 219112, completed: 30, time: 4.053999900817871, efficiency: 7.400098849027518
Results: bestval_func: 147, bestval_voices: 95
#Key: 3Scale: Major
#Total time for optimisation of piece: 7.59499979019165
#Total cost of piece: 447
["T", "T", "D7-1", "T", "S/3", "D7/3", "T", "T", "S/3", "D7/3", "T", "D/3", "T-5", "D7", "Ts", "Ts", "D", "S/3", "D", "D7-1", "T", "T-5", "T", "S/3", "Ts", "D7", "Ts", "S/3", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/AC-11-Wann-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/C137-5-Lobe-nn.csv
[2 0 0 0 1 0 0 1 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 0; 2 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 0 3 0 0 0 1; 1 0 1 0 0 1 0 0 0 1 0 0; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 1 0 0 1 0 2 0 0 0 0; 1 0 2 0 0 0 0 1 0 0 0 0; 1 0 0 0 1 0 0 2 0 0 0 0; 1 0 2 0 0 0 0 1 0 0 0 0; 0 0 1 0 0 2 0 1 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 1 0 2 0 0 1 0 0 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 1 0 1 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 1 0 0 0 0 0 1; 2 0 1 0 0 0 0 1 0 0 0 0; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 2 0 0 0 0 0 0 1 0 0; 1 0 2 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 0 1 2 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 1 0 1 1 0 1 0 0 0 0]
Key Counter is [27 0 30 0 14 10 2 35 0 8 0 5]
Key Score is [129; 39; 94; 102; 29; 124; 17; 121; 72; 59; 110; 21]
Position Counter for 1 is [27 0 30 0 14 10 2 35 0 8 0 5]
Any[[1.0, 90.0, 1.0]]
[1, 90, 1]
1 C Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 135
child voicing cost: 116
Best yet: 251
New solution
function cost: 135
child voicing cost: 112
Best yet: 247
New solution
function cost: 135
child voicing cost: 109
Best yet: 244
New solution
function cost: 120
child voicing cost: 111
Best yet: 231
New solution
function cost: 120
child voicing cost: 108
Best yet: 228
New solution
function cost: 120
child voicing cost: 105
Best yet: 225
New solution
function cost: 135
child voicing cost: 87
Best yet: 222
New solution
function cost: 120
child voicing cost: 99
Best yet: 219
New solution
function cost: 120
child voicing cost: 96
Best yet: 216
New solution
function cost: 120
child voicing cost: 94
Best yet: 214
New solution
function cost: 114
child voicing cost: 97
Best yet: 211
New solution
function cost: 114
child voicing cost: 96
Best yet: 210
New solution
function cost: 105
child voicing cost: 103
Best yet: 208
New solution
function cost: 105
child voicing cost: 100
Best yet: 205
New solution
function cost: 105
child voicing cost: 99
Best yet: 204
New solution
function cost: 105
child voicing cost: 97
Best yet: 202
New solution
function cost: 105
child voicing cost: 96
Best yet: 201
##: Done. Total checked: 80424, Pruned: 89943, completed: 17, time: 1.691999912261963, efficiency: 10.04728184487517
Results: bestval_func: 105, bestval_voices: 96
[2 0 0 0 1 0 0 1 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 0; 2 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 0 3 0 0 0 1; 1 0 1 0 0 1 0 0 0 1 0 0; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 1 0 0 1 0 2 0 0 0 0; 1 0 2 0 0 0 0 1 0 0 0 0; 1 0 0 0 1 0 0 2 0 0 0 0; 1 0 2 0 0 0 0 1 0 0 0 0; 0 0 1 0 0 2 0 1 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 1 0 2 0 0 1 0 0 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 1 0 1 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 1 0 0 0 0 0 1; 2 0 1 0 0 0 0 1 0 0 0 0; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 2 0 0 0 0 0 0 1 0 0; 1 0 2 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 0 1 2 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 1 0 1 1 0 1 0 0 0 0]
Key Counter is [27 0 30 0 14 10 2 35 0 8 0 5]
Key Score is [129; 39; 94; 102; 29; 124; 17; 121; 72; 59; 110; 21]
Position Counter for 1 is [27 0 30 0 14 10 2 35 0 8 0 5]
Any[[1.0, 90.0, 1.0]]
[1, 90, 1]
1 C Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 171
child voicing cost: 106
Best yet: 277
New solution
function cost: 171
child voicing cost: 103
Best yet: 274
New solution
function cost: 171
child voicing cost: 91
Best yet: 262
New solution
function cost: 144
child voicing cost: 113
Best yet: 257
New solution
function cost: 144
child voicing cost: 105
Best yet: 249
New solution
function cost: 147
child voicing cost: 101
Best yet: 248
New solution
function cost: 147
child voicing cost: 98
Best yet: 245
New solution
function cost: 147
child voicing cost: 95
Best yet: 242
New solution
function cost: 147
child voicing cost: 93
Best yet: 240
New solution
function cost: 132
child voicing cost: 107
Best yet: 239
New solution
function cost: 132
child voicing cost: 104
Best yet: 236
New solution
function cost: 132
child voicing cost: 101
Best yet: 233
New solution
function cost: 132
child voicing cost: 98
Best yet: 230

(0, "T", Tuple{Int16,Int16}[(60, 1), (60, 1), (67, 5), (76, 3)])

(0, "D/3", Tuple{Int16,Int16}[(59, 3), (62, 5), (67, 1), (74, 5)])

(0, "T", Tuple{Int16,Int16}[(60, 1), (64, 3), (67, 5), (72, 1)])

(6, "Ts", Tuple{Int16,Int16}[(57, 1), (64, 5), (69, 1), (72, 3)])

(0, "D-5", Tuple{Int16,Int16}[(55, 1), (67, 1), (71, 3), (79, 1)])

(6, "S/3", Tuple{Int16,Int16}[(57, 3), (60, 5), (72, 5), (77, 1)])

(21, "D", Tuple{Int16,Int16}[(55, 1), (62, 5), (71, 3), (79, 1)])

(18, "D", Tuple{Int16,Int16}[(55, 1), (67, 1), (71, 3), (74, 5)])

(12, "T", Tuple{Int16,Int16}[(48, 1), (67, 5), (72, 1), (76, 3)])

(0, "T/3", Tuple{Int16,Int16}[(52, 3), (67, 5), (72, 1), (79, 5)])

(12, "T", Tuple{Int16,Int16}[(48, 1), (64, 3), (72, 1), (79, 5)])

(6, "Ss", Tuple{Int16,Int16}[(50, 1), (65, 3), (69, 5), (77, 3)])

(6, "T", Tuple{Int16,Int16}[(48, 1), (67, 5), (72, 1), (76, 3)])

(3, "D7-1", Tuple{Int16,Int16}[(50, 5), (65, 7), (71, 3), (74, 5)])

(9, "T", Tuple{Int16,Int16}[(48, 1), (64, 3), (72, 1), (79, 5)])

(6, "T", Tuple{Int16,Int16}[(60, 1), (64, 3), (72, 1), (79, 5)])

(0, "Ts", Tuple{Int16,Int16}[(57, 1), (64, 5), (72, 3), (72, 3)])

(0, "D/3", Tuple{Int16,Int16}[(59, 3), (62, 5), (67, 1), (74, 5)])

(12, "S/3", Tuple{Int16,Int16}[(57, 3), (60, 5), (65, 1), (77, 1)])

(6, "Ts", Tuple{Int16,Int16}[(57, 1), (60, 3), (72, 3), (76, 5)])

(0, "D7/3", Tuple{Int16,Int16}[(59, 3), (65, 7), (67, 1), (74, 5)])

(0, "T", Tuple{Int16,Int16}[(60, 1), (64, 3), (67, 5), (72, 1)])

(9, "S", Tuple{Int16,Int16}[(53, 1), (65, 1), (69, 3), (72, 5)])

(0, "T", Tuple{Int16,Int16}[(48, 1), (64, 3), (72, 1), (79, 5)])

(0, "D7-1", Tuple{Int16,Int16}[(50, 5), (65, 7), (71, 3), (77, 7)])

(6, "T", Tuple{Int16,Int16}[(48, 1), (67, 5), (72, 1), (76, 3)])

(9, "D", Tuple{Int16,Int16}[(55, 1), (67, 1), (71, 3), (74, 5)])

(15, "S/3", Tuple{Int16,Int16}[(57, 3), (65, 1), (72, 5), (77, 1)])

(18, "D", Tuple{Int16,Int16}[(55, 1), (62, 5), (71, 3), (79, 1)])

(15, "D", Tuple{Int16,Int16}[(55, 1), (67, 1), (71, 3), (74, 5)])

(21, "T", Tuple{Int16,Int16}[(48, 1), (67, 5), (72, 1), (76, 3)])

(21, "T", Tuple{Int16,Int16}[(48, 1), (67, 5), (72, 1), (76, 3)])

##: Done. Total checked: 92531, Pruned: 101661, completed: 13, time: 2.0759999752044678, efficiency: 6.2620424640032155
Results: bestval_func: 132, bestval_voices: 98
#Key: 1Scale: Major
#Total time for optimisation of piece: 5.426999807357788
#Total cost of piece: 431
["T", "D/3", "T", "Ts", "D-5", "S/3", "D", "D", "T", "T/3", "T", "Ss", "T", "D7-1", "T", "T", "Ts", "D/3", "S/3", "Ts", "D7/3", "T", "S", "T", "D7-1", "T", "D", "S/3", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/C137-5-Lobe-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/C140-7-Gloria-nn.csv
[0 0 0 2 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 1 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 1 0 0 1 0 1 0; 1 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 1 0 0 2 0 1 0 0 0 0 0 0; 2 0 0 1 0 0 0 0 0 0 1 0; 0 0 1 0 0 1 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 0 0 2 0 1 0 0 1 0; 0 0 0 1 0 0 0 0 0 0 3 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 0 2 0 0 0 0 0 0 2 0; 1 0 0 1 0 1 0 0 0 1 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 3 0 0 0 0 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 2 0 1 0 0 0 0 0 0 0 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0]
Key Counter is [19 0 14 18 0 24 0 10 2 3 41 0]
Key Score is [70; 104; 27; 128; 23; 111; 85; 46; 114; 19; 129; 61]
Position Counter for 11 is [41 0 19 0 14 18 0 24 0 10 2 3]
Any[[11.0, 96.75, 1.0]]
[11, 97, 1]
11 A# Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 171
child voicing cost: 104
Best yet: 275
New solution
function cost: 171
child voicing cost: 101
Best yet: 272
New solution
function cost: 180
child voicing cost: 88
Best yet: 268
New solution
function cost: 180
child voicing cost: 85
Best yet: 265
New solution
function cost: 180
child voicing cost: 83
Best yet: 263
New solution
function cost: 147
child voicing cost: 114
Best yet: 261
New solution
function cost: 150
child voicing cost: 110
Best yet: 260
New solution
function cost: 144
child voicing cost: 114
Best yet: 258
New solution
function cost: 144
child voicing cost: 112
Best yet: 256
New solution
function cost: 144
child voicing cost: 110
Best yet: 254
New solution
function cost: 141
child voicing cost: 111
Best yet: 252
New solution
function cost: 171
child voicing cost: 79
Best yet: 250
New solution
function cost: 162
child voicing cost: 85
Best yet: 247
New solution
function cost: 162
child voicing cost: 82
Best yet: 244
New solution
function cost: 156
child voicing cost: 87
Best yet: 243
New solution
function cost: 144
child voicing cost: 98
Best yet: 242
New solution
function cost: 144
child voicing cost: 97
Best yet: 241
New solution
function cost: 144
child voicing cost: 94
Best yet: 238
New solution
function cost: 144
child voicing cost: 93
Best yet: 237
New solution
function cost: 144
child voicing cost: 92
Best yet: 236
New solution
function cost: 144
child voicing cost: 91
Best yet: 235
New solution
function cost: 144
child voicing cost: 90
Best yet: 234
New solution
function cost: 144
child voicing cost: 89
Best yet: 233
New solution
function cost: 135
child voicing cost: 82
Best yet: 217
New solution
function cost: 135
child voicing cost: 79
Best yet: 214
New solution
function cost: 135
child voicing cost: 76
Best yet: 211
New solution
function cost: 120
child voicing cost: 77
Best yet: 197
New solution
function cost: 114
child voicing cost: 81
Best yet: 195
##: Done. Total checked: 251657, Pruned: 381142, completed: 28, time: 5.5329999923706055, efficiency: 5.060545822990945
Results: bestval_func: 114, bestval_voices: 81
[0 0 0 2 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 1 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 1 0 0 1 0 1 0; 1 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 1 0 0 2 0 1 0 0 0 0 0 0; 2 0 0 1 0 0 0 0 0 0 1 0; 0 0 1 0 0 1 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 0 0 2 0 1 0 0 1 0; 0 0 0 1 0 0 0 0 0 0 3 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 0 2 0 0 0 0 0 0 2 0; 1 0 0 1 0 1 0 0 0 1 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 3 0 0 0 0 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 2 0 1 0 0 0 0 0 0 0 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0]
Key Counter is [19 0 14 18 0 24 0 10 2 3 41 0]
Key Score is [70; 104; 27; 128; 23; 111; 85; 46; 114; 19; 129; 61]
Position Counter for 11 is [41 0 19 0 14 18 0 24 0 10 2 3]
Any[[11.0, 96.75, 1.0]]
[11, 97, 1]
11 A# Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 192
child voicing cost: 94
Best yet: 286
New solution
function cost: 192
child voicing cost: 91
Best yet: 283
New solution
function cost: 192
child voicing cost: 88
Best yet: 280
New solution
function cost: 177
child voicing cost: 98
Best yet: 275
New solution
function cost: 177
child voicing cost: 94
Best yet: 271
New solution
function cost: 177
child voicing cost: 91
Best yet: 268
New solution
function cost: 177
child voicing cost: 88
Best yet: 265
New solution
function cost: 174
child voicing cost: 87
Best yet: 261
New solution
function cost: 174
child voicing cost: 84
Best yet: 258
New solution
function cost: 171
child voicing cost: 86
Best yet: 257
New solution
function cost: 171
child voicing cost: 83
Best yet: 254
New solution
function cost: 168
child voicing cost: 85
Best yet: 253
New solution
function cost: 174
child voicing cost: 78
Best yet: 252
New solution
function cost: 156
child voicing cost: 93
Best yet: 249
New solution
function cost: 171
child voicing cost: 72
Best yet: 243
New solution
function cost: 171
child voicing cost: 69
Best yet: 240
New solution
function cost: 159
child voicing cost: 77
Best yet: 236
New solution
function cost: 159
child voicing cost: 74
Best yet: 233
New solution
function cost: 156
child voicing cost: 76
Best yet: 232
New solution
function cost: 156
child voicing cost: 73
Best yet: 229
New solution
function cost: 144
child voicing cost: 81
Best yet: 225
New solution
function cost: 144
child voicing cost: 78
Best yet: 222
New solution
function cost: 144
child voicing cost: 76
Best yet: 220

(18, "T", Tuple{Int16,Int16}[(46, 1), (50, 3), (58, 1), (65, 5)])

(0, "T", Tuple{Int16,Int16}[(46, 1), (53, 5), (58, 1), (62, 3)])

(6, "S", Tuple{Int16,Int16}[(51, 1), (55, 3), (58, 5), (63, 1)])

(0, "T/3", Tuple{Int16,Int16}[(50, 3), (53, 5), (58, 1), (65, 5)])

(0, "D/3", Tuple{Int16,Int16}[(45, 3), (53, 1), (60, 5), (72, 5)])

(6, "T", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(9, "S", Tuple{Int16,Int16}[(51, 1), (55, 3), (63, 1), (70, 5)])

(24, "S", Tuple{Int16,Int16}[(51, 1), (55, 3), (58, 5), (63, 1)])

(0, "T/3", Tuple{Int16,Int16}[(50, 3), (53, 5), (58, 1), (65, 5)])

(15, "D/5", Tuple{Int16,Int16}[(48, 5), (53, 1), (60, 5), (69, 3)])

(6, "T", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(12, "S", Tuple{Int16,Int16}[(51, 1), (55, 3), (63, 1), (70, 5)])

(3, "D7-1", Tuple{Int16,Int16}[(48, 5), (57, 3), (63, 7), (72, 5)])

(6, "Ts", Tuple{Int16,Int16}[(55, 1), (58, 3), (62, 5), (67, 1)])

(9, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(18, "D", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(3, "T-5", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (70, 1)])

(12, "S/5", Tuple{Int16,Int16}[(46, 5), (58, 5), (63, 1), (67, 3)])

(6, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (65, 5)])

(0, "S/3", Tuple{Int16,Int16}[(43, 3), (58, 5), (63, 1), (70, 5)])

(0, "D7", Tuple{Int16,Int16}[(41, 1), (57, 3), (63, 7), (72, 5)])

(9, "Ts", Tuple{Int16,Int16}[(43, 1), (58, 3), (62, 5), (70, 3)])

(3, "D", Tuple{Int16,Int16}[(41, 1), (60, 5), (69, 3), (77, 1)])

(3, "S/3", Tuple{Int16,Int16}[(43, 3), (58, 5), (70, 5), (75, 1)])

(9, "D/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (72, 5)])

(0, "T", Tuple{Int16,Int16}[(46, 1), (62, 3), (65, 5), (70, 1)])

(15, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(0, "S/3", Tuple{Int16,Int16}[(55, 3), (58, 5), (63, 1), (63, 1)])

(30, "D", Tuple{Int16,Int16}[(53, 1), (57, 3), (60, 5), (65, 1)])

(12, "D7", Tuple{Int16,Int16}[(53, 1), (57, 3), (60, 5), (63, 7)])

(21, "T", Tuple{Int16,Int16}[(46, 1), (53, 5), (58, 1), (62, 3)])

(21, "T", Tuple{Int16,Int16}[(46, 1), (53, 5), (58, 1), (62, 3)])

##: Done. Total checked: 202356, Pruned: 221123, completed: 23, time: 3.9880001544952393, efficiency: 5.767301682291712
Results: bestval_func: 144, bestval_voices: 76
#Key: 11Scale: Major
#Total time for optimisation of piece: 10.75
#Total cost of piece: 415
["T", "T", "S", "T/3", "D/3", "T", "S", "S", "T/3", "D/5", "T", "S", "D7-1", "Ts", "D", "D", "T-5", "S/5", "T", "S/3", "D7", "Ts", "D", "S/3", "D/3", "T", "D", "S/3", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/C140-7-Gloria-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-05-fitly-nn.csv
[0 0 1 0 2 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0 0 2 0 0; 0 0 0 0 0 0 0 2 0 0 0 1; 0 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 0 0 0 0 1 0 0 2 0 0 0 1; 0 0 1 0 1 1 0 1 0 0 0 0; 0 0 0 0 1 1 0 1 0 1 0 0; 0 0 0 0 2 1 0 1 0 0 0 0; 0 0 1 0 1 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 2 0 0 0 0; 0 0 1 0 2 0 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 2 0 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 0 1 0 1 1 0 1 0 0 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 1 0 0 0 1 0 0 0 0 2 0 0; 1 0 0 0 2 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 0 0 0 2]
Key Counter is [11 0 25 0 25 10 2 28 1 16 0 10]
Key Score is [125; 24; 106; 75; 54; 115; 23; 117; 50; 79; 90; 38]
Position Counter for 1 is [11 0 25 0 25 10 2 28 1 16 0 10]
Any[[1.0, 81.5, 0.0]]
[1, 82, 0]
10 A Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 144
child voicing cost: 93
Best yet: 237
New solution
function cost: 144
child voicing cost: 91
Best yet: 235
New solution
function cost: 144
child voicing cost: 90
Best yet: 234
New solution
function cost: 144
child voicing cost: 88
Best yet: 232
New solution
function cost: 144
child voicing cost: 86
Best yet: 230
New solution
function cost: 141
child voicing cost: 86
Best yet: 227
New solution
function cost: 141
child voicing cost: 84
Best yet: 225
New solution
function cost: 141
child voicing cost: 82
Best yet: 223
New solution
function cost: 141
child voicing cost: 80
Best yet: 221
New solution
function cost: 141
child voicing cost: 76
Best yet: 217
##: Done. Total checked: 61282, Pruned: 69735, completed: 10, time: 1.2720000743865967, efficiency: 7.861634760377159
Results: bestval_func: 141, bestval_voices: 76
[0 0 1 0 2 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0 0 2 0 0; 0 0 0 0 0 0 0 2 0 0 0 1; 0 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 0 0 0 0 1 0 0 2 0 0 0 1; 0 0 1 0 1 1 0 1 0 0 0 0; 0 0 0 0 1 1 0 1 0 1 0 0; 0 0 0 0 2 1 0 1 0 0 0 0; 0 0 1 0 1 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 2 0 0 0 0; 0 0 1 0 2 0 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 2 0 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 0 1 0 1 1 0 1 0 0 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 1 0 0 0 1 0 0 0 0 2 0 0; 1 0 0 0 2 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 0 0 0 2]
Key Counter is [11 0 25 0 25 10 2 28 1 16 0 10]
Key Score is [125; 24; 106; 75; 54; 115; 23; 117; 50; 79; 90; 38]
Position Counter for 1 is [11 0 25 0 25 10 2 28 1 16 0 10]
Any[[1.0, 81.5, 0.0]]
[1, 82, 0]
10 A Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 204
child voicing cost: 69
Best yet: 273
New solution
function cost: 204
child voicing cost: 66
Best yet: 270
New solution
function cost: 198
child voicing cost: 69
Best yet: 267
New solution
function cost: 192
child voicing cost: 73
Best yet: 265
New solution
function cost: 198
child voicing cost: 65
Best yet: 263
New solution
function cost: 186
child voicing cost: 73
Best yet: 259
New solution
function cost: 186
child voicing cost: 67
Best yet: 253
New solution
function cost: 192
child voicing cost: 59
Best yet: 251
New solution
function cost: 192
child voicing cost: 55
Best yet: 247
New solution
function cost: 198
child voicing cost: 47
Best yet: 245
New solution
function cost: 180
child voicing cost: 64
Best yet: 244
New solution
function cost: 174
child voicing cost: 68
Best yet: 242
New solution
function cost: 168
child voicing cost: 71
Best yet: 239
New solution
function cost: 174
child voicing cost: 63
Best yet: 237
New solution
function cost: 168
child voicing cost: 67
Best yet: 235
New solution
function cost: 168
child voicing cost: 61
Best yet: 229
New solution
function cost: 174
child voicing cost: 53
Best yet: 227
New solution
function cost: 171
child voicing cost: 55
Best yet: 226
New solution
function cost: 165
child voicing cost: 57
Best yet: 222
New solution
function cost: 171
child voicing cost: 49
Best yet: 220

(24, "T", Tuple{Int16,Int16}[(57, 1), (57, 1), (64, 5), (72, 3)])

(0, "S/3", Tuple{Int16,Int16}[(53, 3), (57, 5), (62, 1), (74, 1)])

(12, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (68, 3)])

(3, "D7/7", Tuple{Int16,Int16}[(50, 7), (59, 5), (64, 1), (68, 3)])

(6, "T/3", Tuple{Int16,Int16}[(48, 3), (57, 1), (64, 5), (69, 1)])

(12, "D/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (64, 1), (76, 1)])

(12, "T", Tuple{Int16,Int16}[(45, 1), (60, 3), (69, 1), (76, 5)])

(6, "T", Tuple{Int16,Int16}[(45, 1), (64, 5), (69, 1), (72, 3)])

(6, "S", Tuple{Int16,Int16}[(50, 1), (65, 3), (69, 5), (74, 1)])

(3, "S", Tuple{Int16,Int16}[(50, 1), (62, 1), (69, 5), (77, 3)])

(15, "D7-5", Tuple{Int16,Int16}[(52, 1), (62, 7), (68, 3), (76, 1)])

(15, "T", Tuple{Int16,Int16}[(57, 1), (60, 3), (69, 1), (76, 5)])

(6, "Dm", Tuple{Int16,Int16}[(55, 1), (62, 5), (71, 3), (79, 1)])

(12, "S/3", Tuple{Int16,Int16}[(53, 3), (62, 1), (69, 5), (74, 1)])

(12, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(21, "D", Tuple{Int16,Int16}[(40, 1), (59, 5), (68, 3), (76, 1)])

(12, "S/3", Tuple{Int16,Int16}[(41, 3), (57, 5), (69, 5), (74, 1)])

(18, "Ts", Tuple{Int16,Int16}[(41, 1), (57, 3), (69, 3), (72, 5)])

(12, "D", Tuple{Int16,Int16}[(40, 1), (59, 5), (68, 3), (76, 1)])

(9, "S/3", Tuple{Int16,Int16}[(41, 3), (57, 5), (69, 5), (74, 1)])

(12, "D7/3", Tuple{Int16,Int16}[(44, 3), (64, 1), (71, 5), (74, 7)])

(15, "T", Tuple{Int16,Int16}[(45, 1), (64, 5), (69, 1), (72, 3)])

(18, "S65", Tuple{Int16,Int16}[(50, 1), (65, 3), (69, 5), (71, 6)])

(6, "D", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (71, 5)])

(6, "S/3", Tuple{Int16,Int16}[(53, 3), (62, 1), (69, 5), (74, 1)])

(15, "T/5", Tuple{Int16,Int16}[(52, 5), (64, 5), (69, 1), (72, 3)])

(6, "S", Tuple{Int16,Int16}[(50, 1), (65, 3), (69, 5), (74, 1)])

(12, "T/3", Tuple{Int16,Int16}[(48, 3), (64, 5), (69, 1), (76, 5)])

(0, "S", Tuple{Int16,Int16}[(50, 1), (57, 5), (65, 3), (74, 1)])

(15, "D", Tuple{Int16,Int16}[(52, 1), (56, 3), (64, 1), (71, 5)])

(0, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (72, 3)])

(0, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (72, 3)])

##: Done. Total checked: 169662, Pruned: 194511, completed: 20, time: 3.577000141143799, efficiency: 5.591277386308602
Results: bestval_func: 171, bestval_voices: 49
#Key: 10Scale: Minor
#Total time for optimisation of piece: 6.375
#Total cost of piece: 437
["T", "S/3", "D", "D7/7", "T/3", "D/3", "T", "T", "S", "S", "D7-5", "T", "Dm", "S/3", "D", "D", "S/3", "Ts", "D", "S/3", "D7/3", "T", "S65", "D", "S/3", "T/5", "S", "T/3", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/CO-05-fitly-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-09-jesus-nn.csv
[0 0 2 0 0 0 1 0 0 0 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 1 0 0 0 1 0 1 0 0 1; 0 2 0 0 1 0 0 1 0 0 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 1 0 0 3 0 0 0 0 0 0 0; 0 1 1 0 1 0 1 0 0 0 0 0; 0 0 1 0 2 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 1 0 1 0 1; 0 0 0 0 1 0 2 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 0 0 2 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 0 0 3 0 0; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 0 0 2 0 0 1 0 0; 0 1 0 0 3 0 0 0 0 0 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 3 0 0 0 0 0 0 0 0 1; 0 0 0 0 2 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0]
Key Counter is [0 11 25 0 33 0 11 5 4 30 0 12]
Key Score is [105; 26; 127; 34; 101; 93; 38; 116; 20; 126; 60; 71]
Position Counter for 3 is [25 0 33 0 11 5 4 30 0 12 0 11]
Any[[3.0, 85.0, 1.0]]
[3, 85, 1]
3 D Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 195
child voicing cost: 80
Best yet: 275
New solution
function cost: 195
child voicing cost: 76
Best yet: 271
New solution
function cost: 195
child voicing cost: 75
Best yet: 270
New solution
function cost: 195
child voicing cost: 74
Best yet: 269
New solution
function cost: 195
child voicing cost: 72
Best yet: 267
New solution
function cost: 195
child voicing cost: 71
Best yet: 266
New solution
function cost: 195
child voicing cost: 69
Best yet: 264
New solution
function cost: 195
child voicing cost: 68
Best yet: 263
New solution
function cost: 186
child voicing cost: 75
Best yet: 261
New solution
function cost: 186
child voicing cost: 74
Best yet: 260
New solution
function cost: 186
child voicing cost: 73
Best yet: 259
New solution
function cost: 186
child voicing cost: 71
Best yet: 257
New solution
function cost: 192
child voicing cost: 63
Best yet: 255
New solution
function cost: 189
child voicing cost: 63
Best yet: 252
New solution
function cost: 180
child voicing cost: 70
Best yet: 250
New solution
function cost: 180
child voicing cost: 68
Best yet: 248
##: Done. Total checked: 155446, Pruned: 201299, completed: 16, time: 3.2850000858306885, efficiency: 4.87062392144627
Results: bestval_func: 180, bestval_voices: 68
[0 0 2 0 0 0 1 0 0 0 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 1 0 0 0 1 0 1 0 0 1; 0 2 0 0 1 0 0 1 0 0 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 1 0 0 3 0 0 0 0 0 0 0; 0 1 1 0 1 0 1 0 0 0 0 0; 0 0 1 0 2 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 1 0 1 0 1; 0 0 0 0 1 0 2 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 0 0 2 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 0 0 3 0 0; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 0 0 2 0 0 1 0 0; 0 1 0 0 3 0 0 0 0 0 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 3 0 0 0 0 0 0 0 0 1; 0 0 0 0 2 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0]
Key Counter is [0 11 25 0 33 0 11 5 4 30 0 12]
Key Score is [105; 26; 127; 34; 101; 93; 38; 116; 20; 126; 60; 71]
Position Counter for 3 is [25 0 33 0 11 5 4 30 0 12 0 11]
Any[[3.0, 85.0, 1.0]]
[3, 85, 1]
3 D Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 240
child voicing cost: 72
Best yet: 312
New solution
function cost: 240
child voicing cost: 71
Best yet: 311
New solution
function cost: 216
child voicing cost: 91
Best yet: 307
New solution
function cost: 216
child voicing cost: 88
Best yet: 304
New solution
function cost: 216
child voicing cost: 85
Best yet: 301
New solution
function cost: 210
child voicing cost: 90
Best yet: 300
New solution
function cost: 210
child voicing cost: 89
Best yet: 299
New solution
function cost: 210
child voicing cost: 86
Best yet: 296
New solution
function cost: 204
child voicing cost: 83
Best yet: 287
New solution
function cost: 204
child voicing cost: 80
Best yet: 284
New solution
function cost: 204
child voicing cost: 77
Best yet: 281
New solution
function cost: 210
child voicing cost: 70
Best yet: 280
New solution
function cost: 189
child voicing cost: 89
Best yet: 278
New solution
function cost: 192
child voicing cost: 82
Best yet: 274
New solution
function cost: 192
child voicing cost: 79
Best yet: 271
New solution
function cost: 195
child voicing cost: 72
Best yet: 267
New solution
function cost: 195
child voicing cost: 69
Best yet: 264
New solution
function cost: 177
child voicing cost: 86
Best yet: 263
New solution
function cost: 180
child voicing cost: 82
Best yet: 262
New solution
function cost: 183
child voicing cost: 75
Best yet: 258
New solution
function cost: 183
child voicing cost: 72
Best yet: 255
New solution
function cost: 183
child voicing cost: 69
Best yet: 252
New solution
function cost: 189
child voicing cost: 61
Best yet: 250
New solution
function cost: 189
child voicing cost: 60
Best yet: 249
New solution
function cost: 162
child voicing cost: 86
Best yet: 248
New solution
function cost: 162
child voicing cost: 84
Best yet: 246
New solution
function cost: 174
child voicing cost: 71
Best yet: 245
New solution
function cost: 177
child voicing cost: 65
Best yet: 242

(0, "T", Tuple{Int16,Int16}[(50, 1), (62, 1), (69, 5), (78, 3)])

(3, "D7/3", Tuple{Int16,Int16}[(49, 3), (64, 5), (69, 1), (79, 7)])

(12, "T", Tuple{Int16,Int16}[(50, 1), (62, 1), (69, 5), (78, 3)])

(9, "D7-1", Tuple{Int16,Int16}[(52, 5), (61, 3), (67, 7), (76, 5)])

(3, "D7", Tuple{Int16,Int16}[(57, 1), (61, 3), (67, 7), (76, 5)])

(0, "Ts", Tuple{Int16,Int16}[(59, 1), (62, 3), (66, 5), (74, 3)])

(30, "D", Tuple{Int16,Int16}[(57, 1), (64, 5), (69, 1), (73, 3)])

(24, "D", Tuple{Int16,Int16}[(45, 1), (64, 5), (69, 1), (73, 3)])

(15, "S/3", Tuple{Int16,Int16}[(47, 3), (50, 5), (62, 5), (67, 1)])

(12, "D", Tuple{Int16,Int16}[(45, 1), (52, 5), (61, 3), (69, 1)])

(0, "D/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (64, 5), (69, 1)])

(12, "Ts", Tuple{Int16,Int16}[(47, 1), (54, 5), (62, 3), (71, 1)])

(12, "D", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(18, "D7/3", Tuple{Int16,Int16}[(49, 3), (55, 7), (64, 5), (69, 1)])

(9, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(21, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(0, "T/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (57, 5), (62, 1)])

(6, "D/5", Tuple{Int16,Int16}[(52, 5), (57, 1), (61, 3), (64, 5)])

(21, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(0, "D", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(24, "D7-1", Tuple{Int16,Int16}[(52, 5), (55, 7), (64, 5), (73, 3)])

(6, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (74, 1)])

(9, "D7/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (67, 7), (76, 5)])

(12, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (74, 1)])

(18, "D7-1", Tuple{Int16,Int16}[(52, 5), (55, 7), (64, 5), (73, 3)])

(15, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (74, 1)])

(6, "D/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (76, 5)])

(18, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (74, 1)])

(15, "D7-1", Tuple{Int16,Int16}[(52, 5), (55, 7), (64, 5), (73, 3)])

(3, "D7", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (67, 7)])

(9, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(9, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

##: Done. Total checked: 228885, Pruned: 253405, completed: 28, time: 4.569999933242798, efficiency: 6.12691475033166
Results: bestval_func: 177, bestval_voices: 65
#Key: 3Scale: Major
#Total time for optimisation of piece: 9.223999977111816
#Total cost of piece: 490
["T", "D7/3", "T", "D7-1", "D7", "Ts", "D", "D", "S/3", "D", "D/3", "Ts", "D", "D7/3", "T", "T", "T/3", "D/5", "T", "D", "D7-1", "T", "D7/3", "T", "D7-1", "T", "D/3", "T", "D7-1", "D7", "T", "T"]
../../results/optimizer/pianoroll/CO-09-jesus-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-12-break-nn.csv
[0 0 1 0 0 0 1 0 0 0 0 0; 1 0 0 0 2 0 0 1 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 1 0 0 0 0; 0 0 0 0 0 0 1 1 0 0 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 0 1 0 0 1 0 1 0 1; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 0 0 1 0 0 1 0 2 0 0; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 2 0 0 0 2 0 0 0 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 1 0 0 0 0 0 0 0 0 2; 0 0 0 0 1 0 0 1 0 0 0 2; 0 0 2 0 1 0 0 0 0 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 3 0 0 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 1 0 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 0 0 0 1 0 1 0 0 1 0 1; 1 0 0 0 0 0 1 1 0 1 0 0; 0 0 0 1 0 0 0 1 0 0 0 2; 0 0 0 0 2 0 0 1 0 0 0 1; 0 0 0 0 1 0 1 1 0 0 0 1; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 1 0 0 0 1 0 0 0 0 2]
Key Counter is [2 7 21 4 18 0 18 14 0 18 0 25]
Key Score is [98; 31; 121; 41; 90; 73; 54; 116; 27; 107; 59; 72]
Position Counter for 3 is [21 4 18 0 18 14 0 18 0 25 2 7]
Any[[3.0, 76.0, 0.0]]
[3, 76, 0]
12 B Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 207
child voicing cost: 110
Best yet: 317
New solution
function cost: 207
child voicing cost: 109
Best yet: 316
New solution
function cost: 207
child voicing cost: 106
Best yet: 313
New solution
function cost: 195
child voicing cost: 109
Best yet: 304
New solution
function cost: 195
child voicing cost: 106
Best yet: 301
New solution
function cost: 153
child voicing cost: 121
Best yet: 274
New solution
function cost: 153
child voicing cost: 118
Best yet: 271
New solution
function cost: 135
child voicing cost: 124
Best yet: 259
New solution
function cost: 135
child voicing cost: 121
Best yet: 256
New solution
function cost: 141
child voicing cost: 114
Best yet: 255
New solution
function cost: 135
child voicing cost: 118
Best yet: 253
New solution
function cost: 141
child voicing cost: 111
Best yet: 252
New solution
function cost: 120
child voicing cost: 126
Best yet: 246
New solution
function cost: 120
child voicing cost: 123
Best yet: 243
New solution
function cost: 126
child voicing cost: 116
Best yet: 242
New solution
function cost: 120
child voicing cost: 120
Best yet: 240
New solution
function cost: 126
child voicing cost: 113
Best yet: 239
New solution
function cost: 123
child voicing cost: 115
Best yet: 238
New solution
function cost: 123
child voicing cost: 112
Best yet: 235
New solution
function cost: 129
child voicing cost: 105
Best yet: 234
New solution
function cost: 123
child voicing cost: 109
Best yet: 232
New solution
function cost: 129
child voicing cost: 102
Best yet: 231
New solution
function cost: 129
child voicing cost: 98
Best yet: 227
New solution
function cost: 120
child voicing cost: 104
Best yet: 224
New solution
function cost: 120
child voicing cost: 102
Best yet: 222
New solution
function cost: 117
child voicing cost: 104
Best yet: 221
New solution
function cost: 111
child voicing cost: 108
Best yet: 219
New solution
function cost: 117
child voicing cost: 101
Best yet: 218
New solution
function cost: 111
child voicing cost: 105
Best yet: 216
New solution
function cost: 117
child voicing cost: 98
Best yet: 215
New solution
function cost: 123
child voicing cost: 90
Best yet: 213
New solution
function cost: 111
child voicing cost: 100
Best yet: 211
New solution
function cost: 123
child voicing cost: 85
Best yet: 208
New solution
function cost: 111
child voicing cost: 95
Best yet: 206
##: Done. Total checked: 250683, Pruned: 309791, completed: 34, time: 5.121000051498413, efficiency: 6.639328189432754
Results: bestval_func: 111, bestval_voices: 95
[0 0 1 0 0 0 1 0 0 0 0 0; 1 0 0 0 2 0 0 1 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 1 0 0 0 0; 0 0 0 0 0 0 1 1 0 0 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 1 1 0 0 0 0 0 0 2; 0 0 0 0 1 0 0 1 0 1 0 1; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 0 0 1 0 0 1 0 2 0 0; 0 0 1 0 0 0 2 0 0 0 0 1; 0 0 2 0 0 0 2 0 0 0 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 1 0 0 1 0 0 0 0 1 0 1; 0 1 1 0 0 0 0 0 0 0 0 2; 0 0 0 0 1 0 0 1 0 0 0 2; 0 0 2 0 1 0 0 0 0 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 3 0 0 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 1 0 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 0 0 0 1 0 1 0 0 1 0 1; 1 0 0 0 0 0 1 1 0 1 0 0; 0 0 0 1 0 0 0 1 0 0 0 2; 0 0 0 0 2 0 0 1 0 0 0 1; 0 0 0 0 1 0 1 1 0 0 0 1; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 1 0 0 0 1 0 0 0 0 2]
Key Counter is [2 7 21 4 18 0 18 14 0 18 0 25]
Key Score is [98; 31; 121; 41; 90; 73; 54; 116; 27; 107; 59; 72]
Position Counter for 3 is [21 4 18 0 18 14 0 18 0 25 2 7]
Any[[3.0, 76.0, 0.0]]
[3, 76, 0]
12 B Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 201
child voicing cost: 92
Best yet: 293
New solution
function cost: 201
child voicing cost: 89
Best yet: 290
New solution
function cost: 189
child voicing cost: 92
Best yet: 281
New solution
function cost: 189
child voicing cost: 89
Best yet: 278
New solution
function cost: 189
child voicing cost: 86
Best yet: 275
New solution
function cost: 183
child voicing cost: 87
Best yet: 270
New solution
function cost: 183
child voicing cost: 84
Best yet: 267
New solution
function cost: 183
child voicing cost: 81
Best yet: 264
New solution
function cost: 183
child voicing cost: 78
Best yet: 261

(0, "T", Tuple{Int16,Int16}[(59, 1), (59, 1), (62, 3), (66, 5)])

(3, "S", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

(0, "Tm", Tuple{Int16,Int16}[(50, 1), (62, 1), (66, 3), (69, 5)])

(6, "S", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

(3, "D/3", Tuple{Int16,Int16}[(46, 3), (61, 5), (66, 1), (73, 5)])

(6, "T", Tuple{Int16,Int16}[(47, 1), (62, 3), (66, 5), (71, 1)])

(12, "D", Tuple{Int16,Int16}[(54, 1), (61, 5), (66, 1), (70, 3)])

(9, "D", Tuple{Int16,Int16}[(54, 1), (66, 1), (70, 3), (73, 5)])

(9, "T", Tuple{Int16,Int16}[(59, 1), (66, 5), (71, 1), (74, 3)])

(6, "S/3", Tuple{Int16,Int16}[(55, 3), (64, 1), (71, 5), (76, 1)])

(9, "D", Tuple{Int16,Int16}[(54, 1), (61, 5), (70, 3), (78, 1)])

(12, "S/3", Tuple{Int16,Int16}[(55, 3), (59, 5), (71, 5), (76, 1)])

(0, "D64", Tuple{Int16,Int16}[(54, 1), (59, 4), (66, 1), (74, 6)])

(15, "D", Tuple{Int16,Int16}[(54, 1), (58, 3), (66, 1), (73, 5)])

(6, "T", Tuple{Int16,Int16}[(47, 1), (59, 1), (66, 5), (74, 3)])

(15, "T", Tuple{Int16,Int16}[(47, 1), (62, 3), (66, 5), (71, 1)])

(6, "T-5", Tuple{Int16,Int16}[(47, 1), (59, 1), (62, 3), (71, 1)])

(0, "S/5", Tuple{Int16,Int16}[(47, 5), (59, 5), (64, 1), (67, 3)])

(21, "T", Tuple{Int16,Int16}[(47, 1), (59, 1), (62, 3), (66, 5)])

(9, "D/3", Tuple{Int16,Int16}[(46, 3), (54, 1), (61, 5), (66, 1)])

(9, "T", Tuple{Int16,Int16}[(47, 1), (54, 5), (59, 1), (62, 3)])

(3, "D7-1", Tuple{Int16,Int16}[(49, 5), (52, 7), (58, 3), (61, 5)])

(21, "T", Tuple{Int16,Int16}[(47, 1), (54, 5), (59, 1), (62, 3)])

(6, "S/3", Tuple{Int16,Int16}[(43, 3), (52, 1), (59, 5), (64, 1)])

(12, "D7", Tuple{Int16,Int16}[(42, 1), (52, 7), (61, 5), (70, 3)])

(21, "Ts", Tuple{Int16,Int16}[(43, 1), (50, 5), (59, 3), (71, 3)])

(12, "T/3", Tuple{Int16,Int16}[(50, 3), (54, 5), (59, 1), (71, 1)])

(9, "Tm", Tuple{Int16,Int16}[(50, 1), (54, 3), (66, 3), (69, 5)])

(18, "S", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

(15, "D7", Tuple{Int16,Int16}[(54, 1), (58, 3), (61, 5), (64, 7)])

(18, "T", Tuple{Int16,Int16}[(47, 1), (54, 5), (59, 1), (62, 3)])

(18, "T", Tuple{Int16,Int16}[(47, 1), (54, 5), (59, 1), (62, 3)])

##: Done. Total checked: 91211, Pruned: 101286, completed: 9, time: 1.8350000381469727, efficiency: 4.904632050628412
Results: bestval_func: 183, bestval_voices: 78
#Key: 12Scale: Minor
#Total time for optimisation of piece: 8.459999799728394
#Total cost of piece: 467
["T", "S", "Tm", "S", "D/3", "T", "D", "D", "T", "S/3", "D", "S/3", "D64", "D", "T", "T", "T-5", "S/5", "T", "D/3", "T", "D7-1", "T", "S/3", "D7", "Ts", "T/3", "Tm", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/CO-12-break-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-17-gloom-nn.csv
[2 0 0 0 1 0 0 0 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 0 1; 1 0 0 0 1 0 0 0 0 2 0 0; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 2 0 0 0 1 1 0 0 0 0 0 0; 0 0 1 0 0 1 0 0 0 0 1 1; 2 0 0 0 1 0 0 1 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 2 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 0 0 1 0 1 1 0; 0 0 1 0 0 1 0 0 0 1 1 0; 1 0 0 0 1 0 0 0 0 1 1 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 0 0 2 1 0 0 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 1 0 0 1 0 1 0 0; 1 0 0 0 0 1 0 2 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 1 0 0 2 0 0 0 0 0 0; 0 0 2 0 0 1 0 0 0 0 1 0; 0 0 1 0 1 0 0 0 0 1 1 0; 0 0 1 0 0 0 1 0 0 1 1 0; 1 0 1 0 0 0 2 0 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 2 0 0 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 3 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 1 0 0 0 0 0 0 2]
Key Counter is [28 0 21 1 13 18 4 18 0 12 9 7]
Key Score is [117; 60; 75; 95; 37; 119; 39; 103; 74; 57; 107; 34]
Position Counter for 6 is [18 4 18 0 12 9 7 28 0 21 1 13]
Any[[6.0, 80.75, 1.0]]
[6, 81, 1]
6 F Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 201
child voicing cost: 112
Best yet: 313
New solution
function cost: 201
child voicing cost: 110
Best yet: 311
New solution
function cost: 201
child voicing cost: 109
Best yet: 310
New solution
function cost: 201
child voicing cost: 97
Best yet: 298
New solution
function cost: 201
child voicing cost: 94
Best yet: 295
New solution
function cost: 189
child voicing cost: 101
Best yet: 290
New solution
function cost: 189
child voicing cost: 100
Best yet: 289
New solution
function cost: 186
child voicing cost: 99
Best yet: 285
New solution
function cost: 186
child voicing cost: 95
Best yet: 281
New solution
function cost: 195
child voicing cost: 85
Best yet: 280
New solution
function cost: 186
child voicing cost: 89
Best yet: 275
New solution
function cost: 174
child voicing cost: 99
Best yet: 273
New solution
function cost: 174
child voicing cost: 98
Best yet: 272
New solution
function cost: 174
child voicing cost: 96
Best yet: 270
New solution
function cost: 174
child voicing cost: 94
Best yet: 268
New solution
function cost: 171
child voicing cost: 90
Best yet: 261
New solution
function cost: 171
child voicing cost: 89
Best yet: 260
New solution
function cost: 162
child voicing cost: 96
Best yet: 258
New solution
function cost: 159
child voicing cost: 98
Best yet: 257
New solution
function cost: 159
child voicing cost: 95
Best yet: 254
New solution
function cost: 159
child voicing cost: 93
Best yet: 252
New solution
function cost: 159
child voicing cost: 92
Best yet: 251
New solution
function cost: 147
child voicing cost: 102
Best yet: 249
New solution
function cost: 147
child voicing cost: 101
Best yet: 248
New solution
function cost: 147
child voicing cost: 96
Best yet: 243
New solution
function cost: 153
child voicing cost: 89
Best yet: 242
New solution
function cost: 159
child voicing cost: 82
Best yet: 241
New solution
function cost: 153
child voicing cost: 85
Best yet: 238
New solution
function cost: 153
child voicing cost: 83
Best yet: 236
New solution
function cost: 147
child voicing cost: 84
Best yet: 231
##: Done. Total checked: 184295, Pruned: 211223, completed: 30, time: 3.815000057220459, efficiency: 7.863695819144356
Results: bestval_func: 147, bestval_voices: 84
[2 0 0 0 1 0 0 0 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 0 1; 1 0 0 0 1 0 0 0 0 2 0 0; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 2 0 0 0 1 1 0 0 0 0 0 0; 0 0 1 0 0 1 0 0 0 0 1 1; 2 0 0 0 1 0 0 1 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 2 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 0 0 1 0 1 1 0; 0 0 1 0 0 1 0 0 0 1 1 0; 1 0 0 0 1 0 0 0 0 1 1 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 0 0 2 1 0 0 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 1 0 0 1 0 1 0 0; 1 0 0 0 0 1 0 2 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 1 0 0 2 0 0 0 0 0 0; 0 0 2 0 0 1 0 0 0 0 1 0; 0 0 1 0 1 0 0 0 0 1 1 0; 0 0 1 0 0 0 1 0 0 1 1 0; 1 0 1 0 0 0 2 0 0 0 0 0; 0 0 2 0 0 0 0 2 0 0 0 0; 2 0 0 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 3 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 1 0 0 0 0 0 0 2]
Key Counter is [28 0 21 1 13 18 4 18 0 12 9 7]
Key Score is [117; 60; 75; 95; 37; 119; 39; 103; 74; 57; 107; 34]
Position Counter for 6 is [18 4 18 0 12 9 7 28 0 21 1 13]
Any[[6.0, 80.75, 1.0]]
[6, 81, 1]
6 F Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 258
child voicing cost: 75
Best yet: 333
New solution
function cost: 252
child voicing cost: 79
Best yet: 331
New solution
function cost: 249
child voicing cost: 64
Best yet: 313
New solution
function cost: 243
child voicing cost: 62
Best yet: 305
New solution
function cost: 243
child voicing cost: 59
Best yet: 302
New solution
function cost: 225
child voicing cost: 76
Best yet: 301
New solution
function cost: 222
child voicing cost: 74
Best yet: 296
New solution
function cost: 222
child voicing cost: 71
Best yet: 293
New solution
function cost: 222
child voicing cost: 68
Best yet: 290
New solution
function cost: 219
child voicing cost: 70
Best yet: 289
New solution
function cost: 219
child voicing cost: 67
Best yet: 286
New solution
function cost: 219
child voicing cost: 64
Best yet: 283
New solution
function cost: 222
child voicing cost: 58
Best yet: 280
New solution
function cost: 213
child voicing cost: 64
Best yet: 277
New solution
function cost: 207
child voicing cost: 68
Best yet: 275
New solution
function cost: 207
child voicing cost: 65
Best yet: 272
New solution
function cost: 213
child voicing cost: 58
Best yet: 271

(12, "T", Tuple{Int16,Int16}[(53, 1), (53, 1), (60, 5), (69, 3)])

(12, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(0, "Tm", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (72, 3)])

(12, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(9, "D/3", Tuple{Int16,Int16}[(52, 3), (55, 5), (60, 1), (67, 5)])

(12, "T", Tuple{Int16,Int16}[(53, 1), (57, 3), (60, 5), (65, 1)])

(3, "S", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (65, 5)])

(30, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(3, "D", Tuple{Int16,Int16}[(48, 1), (52, 3), (60, 1), (67, 5)])

(3, "Ts", Tuple{Int16,Int16}[(50, 1), (53, 3), (57, 5), (65, 3)])

(12, "T/3", Tuple{Int16,Int16}[(45, 3), (53, 1), (60, 5), (72, 5)])

(3, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(6, "D7/3", Tuple{Int16,Int16}[(40, 3), (55, 5), (60, 1), (70, 7)])

(15, "T", Tuple{Int16,Int16}[(41, 1), (53, 1), (60, 5), (69, 3)])

(18, "D", Tuple{Int16,Int16}[(48, 1), (52, 3), (60, 1), (67, 5)])

(9, "D", Tuple{Int16,Int16}[(48, 1), (52, 3), (55, 5), (60, 1)])

(3, "D7/7", Tuple{Int16,Int16}[(46, 7), (52, 3), (55, 5), (60, 1)])

(12, "T/3", Tuple{Int16,Int16}[(45, 3), (53, 1), (60, 5), (65, 1)])

(0, "D", Tuple{Int16,Int16}[(48, 1), (55, 5), (60, 1), (64, 3)])

(15, "D", Tuple{Int16,Int16}[(48, 1), (52, 3), (60, 1), (67, 5)])

(3, "Ts", Tuple{Int16,Int16}[(50, 1), (53, 3), (57, 5), (65, 3)])

(12, "D7", Tuple{Int16,Int16}[(48, 1), (52, 3), (58, 7), (67, 5)])

(18, "Ts", Tuple{Int16,Int16}[(50, 1), (53, 3), (57, 5), (62, 1)])

(15, "D", Tuple{Int16,Int16}[(48, 1), (55, 5), (60, 1), (64, 3)])

(21, "D7/7", Tuple{Int16,Int16}[(46, 7), (55, 5), (60, 1), (64, 3)])

(21, "T/3", Tuple{Int16,Int16}[(45, 3), (53, 1), (60, 5), (65, 1)])

(15, "S65", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (67, 6)])

(18, "T/5", Tuple{Int16,Int16}[(48, 5), (53, 1), (60, 5), (69, 3)])

(15, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(15, "D", Tuple{Int16,Int16}[(48, 1), (52, 3), (60, 1), (67, 5)])

(15, "T", Tuple{Int16,Int16}[(41, 1), (53, 1), (60, 5), (69, 3)])

(15, "T", Tuple{Int16,Int16}[(41, 1), (53, 1), (60, 5), (69, 3)])

##: Done. Total checked: 153307, Pruned: 183083, completed: 17, time: 3.3559999465942383, efficiency: 5.065554311838435
Results: bestval_func: 213, bestval_voices: 58
#Key: 6Scale: Major
#Total time for optimisation of piece: 8.771999835968018
#Total cost of piece: 502
["T", "S", "Tm", "S", "D/3", "T", "S", "S", "D", "Ts", "T/3", "S", "D7/3", "T", "D", "D", "D7/7", "T/3", "D", "D", "Ts", "D7", "Ts", "D", "D7/7", "T/3", "S65", "T/5", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/CO-17-gloom-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-23-hosts-nn.csv
[0 0 1 0 0 0 0 2 0 0 0 1; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 1 0 1 0 0 0 1 1 0 0 0 0; 1 0 0 0 0 0 2 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 0 1 2 0 0 0 0 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 1 1 0 1 1 0 0 0 0 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 0 1 0 0 1 0 0 2 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 0 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 1 0 0 0 0; 0 0 2 0 1 0 1 0 0 0 0 0; 0 0 2 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 0 0 1 0 0 2 0 0 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 0 0 3 0 0 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0]
Key Counter is [5 3 38 0 17 1 14 24 0 19 0 10]
Key Score is [114; 23; 125; 68; 63; 104; 28; 127; 33; 101; 87; 44]
Position Counter for 8 is [24 0 19 0 10 5 3 38 0 17 1 14]
Any[[8.0, 92.5, 1.0]]
[8, 92, 1]
8 G Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 153
child voicing cost: 76
Best yet: 229
New solution
function cost: 153
child voicing cost: 75
Best yet: 228
New solution
function cost: 153
child voicing cost: 73
Best yet: 226
New solution
function cost: 153
child voicing cost: 72
Best yet: 225
New solution
function cost: 150
child voicing cost: 72
Best yet: 222
New solution
function cost: 150
child voicing cost: 70
Best yet: 220
New solution
function cost: 150
child voicing cost: 69
Best yet: 219
New solution
function cost: 150
child voicing cost: 67
Best yet: 217
New solution
function cost: 147
child voicing cost: 69
Best yet: 216
New solution
function cost: 147
child voicing cost: 67
Best yet: 214
New solution
function cost: 141
child voicing cost: 72
Best yet: 213
New solution
function cost: 141
child voicing cost: 70
Best yet: 211
New solution
function cost: 141
child voicing cost: 68
Best yet: 209
##: Done. Total checked: 105211, Pruned: 118390, completed: 13, time: 2.189000129699707, efficiency: 5.938784481380262
Results: bestval_func: 141, bestval_voices: 68
[0 0 1 0 0 0 0 2 0 0 0 1; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 1 0 1 0 0 0 1 1 0 0 0 0; 1 0 0 0 0 0 2 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 0 1; 0 1 2 0 0 0 0 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 1 1 0 1 1 0 0 0 0 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 0 1 0 0 1 0 0 2 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 0 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 1 0 0 1 0 0 0 0; 0 0 2 0 1 0 1 0 0 0 0 0; 0 0 2 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 0 0 1 0 0 2 0 0 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 0 0 3 0 0 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0]
Key Counter is [5 3 38 0 17 1 14 24 0 19 0 10]
Key Score is [114; 23; 125; 68; 63; 104; 28; 127; 33; 101; 87; 44]
Position Counter for 8 is [24 0 19 0 10 5 3 38 0 17 1 14]
Any[[8.0, 92.5, 1.0]]
[8, 92, 1]
8 G Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 198
child voicing cost: 86
Best yet: 284
New solution
function cost: 198
child voicing cost: 80
Best yet: 278
New solution
function cost: 198
child voicing cost: 76
Best yet: 274
New solution
function cost: 195
child voicing cost: 73
Best yet: 268
New solution
function cost: 195
child voicing cost: 69
Best yet: 264
New solution
function cost: 195
child voicing cost: 66
Best yet: 261
New solution
function cost: 195
child voicing cost: 65
Best yet: 260
New solution
function cost: 195
child voicing cost: 64
Best yet: 259
New solution
function cost: 195
child voicing cost: 61
Best yet: 256

(0, "T", Tuple{Int16,Int16}[(55, 1), (59, 3), (67, 1), (74, 5)])

(0, "D/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (69, 5), (74, 1)])

(6, "Ts", Tuple{Int16,Int16}[(52, 1), (59, 5), (67, 3), (76, 1)])

(0, "D", Tuple{Int16,Int16}[(50, 1), (62, 1), (69, 5), (78, 3)])

(3, "T", Tuple{Int16,Int16}[(43, 1), (62, 5), (71, 3), (79, 1)])

(15, "D/3", Tuple{Int16,Int16}[(42, 3), (62, 1), (69, 5), (74, 1)])

(9, "T", Tuple{Int16,Int16}[(43, 1), (59, 3), (67, 1), (74, 5)])

(15, "T", Tuple{Int16,Int16}[(43, 1), (59, 3), (62, 5), (67, 1)])

(6, "T", Tuple{Int16,Int16}[(43, 1), (55, 1), (62, 5), (71, 3)])

(12, "D7/3", Tuple{Int16,Int16}[(42, 3), (57, 5), (62, 1), (72, 7)])

(6, "T", Tuple{Int16,Int16}[(43, 1), (55, 1), (62, 5), (71, 3)])

(12, "D7-1", Tuple{Int16,Int16}[(45, 5), (54, 3), (60, 7), (69, 5)])

(15, "D7", Tuple{Int16,Int16}[(50, 1), (54, 3), (60, 7), (69, 5)])

(6, "Ts", Tuple{Int16,Int16}[(52, 1), (55, 3), (59, 5), (67, 3)])

(21, "D", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(15, "D", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(6, "Ts", Tuple{Int16,Int16}[(52, 1), (55, 3), (59, 5), (67, 3)])

(0, "D", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(24, "T", Tuple{Int16,Int16}[(43, 1), (55, 1), (62, 5), (71, 3)])

(6, "D/5", Tuple{Int16,Int16}[(45, 5), (54, 3), (62, 1), (69, 5)])

(18, "T/3", Tuple{Int16,Int16}[(47, 3), (55, 1), (62, 5), (74, 5)])

(15, "S", Tuple{Int16,Int16}[(48, 1), (55, 5), (64, 3), (72, 1)])

(15, "D64", Tuple{Int16,Int16}[(50, 1), (55, 4), (62, 1), (71, 6)])

(6, "D", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(6, "D7/7", Tuple{Int16,Int16}[(48, 7), (54, 3), (62, 1), (69, 5)])

(15, "T/3", Tuple{Int16,Int16}[(47, 3), (55, 1), (62, 5), (74, 5)])

(0, "Ts", Tuple{Int16,Int16}[(40, 1), (59, 5), (67, 3), (76, 1)])

(15, "T/3", Tuple{Int16,Int16}[(47, 3), (62, 5), (67, 1), (74, 5)])

(15, "S", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(9, "D7", Tuple{Int16,Int16}[(50, 1), (60, 7), (66, 3), (69, 5)])

(9, "T", Tuple{Int16,Int16}[(55, 1), (59, 3), (62, 5), (67, 1)])

(9, "T", Tuple{Int16,Int16}[(55, 1), (59, 3), (62, 5), (67, 1)])

##: Done. Total checked: 105043, Pruned: 121992, completed: 9, time: 2.2260000705718994, efficiency: 4.0431265564550225
Results: bestval_func: 195, bestval_voices: 61
#Key: 8Scale: Major
#Total time for optimisation of piece: 6.039000034332275
#Total cost of piece: 465
["T", "D/3", "Ts", "D", "T", "D/3", "T", "T", "T", "D7/3", "T", "D7-1", "D7", "Ts", "D", "D", "Ts", "D", "T", "D/5", "T/3", "S", "D64", "D", "D7/7", "T/3", "Ts", "T/3", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/CO-23-hosts-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-28-lord-nn.csv
[0 0 0 0 1 0 0 1 0 0 0 0; 0 1 0 0 1 0 0 0 0 0 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 0 0 1 0 0 2 0 0 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 0 3 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 0 0 1 0 1 1 0 0 0 1; 1 0 0 0 0 0 1 1 0 0 0 1; 0 0 1 0 0 0 1 1 0 1 0 0; 1 0 0 0 2 0 0 1 0 0 0 0; 1 0 0 0 0 0 1 0 0 2 0 0; 1 0 0 0 1 0 0 0 0 0 0 2; 1 0 0 0 0 0 1 0 0 1 0 1; 1 0 0 0 0 0 1 1 0 0 0 1; 0 0 0 1 0 0 1 1 0 0 0 1; 0 0 0 1 1 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 0 0 1 0 2; 0 0 1 0 0 0 0 0 0 1 0 2; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 0 0 1 0 1 2 0 0 0 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 0 0 0 0 0 1 1 0 0 2; 0 0 0 0 2 0 0 1 0 0 0 1]
Key Counter is [6 5 21 2 16 0 16 17 1 24 0 20]
Key Score is [104; 30; 119; 47; 84; 84; 44; 120; 31; 103; 70; 60]
Position Counter for 8 is [17 1 24 0 20 6 5 21 2 16 0 16]
Any[[8.0, 76.5, 0.0]]
[8, 76, 0]
5 E Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 231
child voicing cost: 113
Best yet: 344
New solution
function cost: 231
child voicing cost: 110
Best yet: 341
New solution
function cost: 231
child voicing cost: 109
Best yet: 340
New solution
function cost: 231
child voicing cost: 107
Best yet: 338
New solution
function cost: 234
child voicing cost: 102
Best yet: 336
New solution
function cost: 234
child voicing cost: 100
Best yet: 334
New solution
function cost: 228
child voicing cost: 105
Best yet: 333
New solution
function cost: 231
child voicing cost: 100
Best yet: 331
New solution
function cost: 231
child voicing cost: 97
Best yet: 328
New solution
function cost: 228
child voicing cost: 97
Best yet: 325
New solution
function cost: 213
child voicing cost: 111
Best yet: 324
New solution
function cost: 213
child voicing cost: 107
Best yet: 320
New solution
function cost: 213
child voicing cost: 101
Best yet: 314
New solution
function cost: 216
child voicing cost: 93
Best yet: 309
New solution
function cost: 204
child voicing cost: 101
Best yet: 305
New solution
function cost: 204
child voicing cost: 100
Best yet: 304
New solution
function cost: 204
child voicing cost: 98
Best yet: 302
New solution
function cost: 198
child voicing cost: 89
Best yet: 287
New solution
function cost: 198
child voicing cost: 87
Best yet: 285
New solution
function cost: 198
child voicing cost: 86
Best yet: 284
New solution
function cost: 198
child voicing cost: 84
Best yet: 282
New solution
function cost: 177
child voicing cost: 104
Best yet: 281
New solution
function cost: 177
child voicing cost: 102
Best yet: 279
New solution
function cost: 189
child voicing cost: 88
Best yet: 277
New solution
function cost: 186
child voicing cost: 89
Best yet: 275
New solution
function cost: 183
child voicing cost: 91
Best yet: 274
New solution
function cost: 189
child voicing cost: 83
Best yet: 272
New solution
function cost: 192
child voicing cost: 78
Best yet: 270
New solution
function cost: 168
child voicing cost: 101
Best yet: 269
New solution
function cost: 168
child voicing cost: 100
Best yet: 268
New solution
function cost: 168
child voicing cost: 98
Best yet: 266
New solution
function cost: 180
child voicing cost: 84
Best yet: 264
New solution
function cost: 174
child voicing cost: 89
Best yet: 263
New solution
function cost: 174
child voicing cost: 87
Best yet: 261
New solution
function cost: 174
child voicing cost: 86
Best yet: 260
New solution
function cost: 174
child voicing cost: 84
Best yet: 258
New solution
function cost: 174
child voicing cost: 83
Best yet: 257
##: Done. Total checked: 277267, Pruned: 328968, completed: 37, time: 5.45799994468689, efficiency: 6.779040010071416
Results: bestval_func: 174, bestval_voices: 83
[0 0 0 0 1 0 0 1 0 0 0 0; 0 1 0 0 1 0 0 0 0 0 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 0 0 1 0 0 2 0 0 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 0 3 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 0 0 1 0 1 1 0 0 0 1; 1 0 0 0 0 0 1 1 0 0 0 1; 0 0 1 0 0 0 1 1 0 1 0 0; 1 0 0 0 2 0 0 1 0 0 0 0; 1 0 0 0 0 0 1 0 0 2 0 0; 1 0 0 0 1 0 0 0 0 0 0 2; 1 0 0 0 0 0 1 0 0 1 0 1; 1 0 0 0 0 0 1 1 0 0 0 1; 0 0 0 1 0 0 1 1 0 0 0 1; 0 0 0 1 1 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 0 0 1 0 2; 0 0 1 0 0 0 0 0 0 1 0 2; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 1 0 0 0 1; 0 0 0 0 1 0 1 2 0 0 0 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 0 0 0 0 0 1 1 0 0 2; 0 0 0 0 2 0 0 1 0 0 0 1]
Key Counter is [6 5 21 2 16 0 16 17 1 24 0 20]
Key Score is [104; 30; 119; 47; 84; 84; 44; 120; 31; 103; 70; 60]
Position Counter for 8 is [17 1 24 0 20 6 5 21 2 16 0 16]
Any[[8.0, 76.5, 0.0]]
[8, 76, 0]
5 E Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 246
child voicing cost: 76
Best yet: 322
New solution
function cost: 246
child voicing cost: 70
Best yet: 316
New solution
function cost: 246
child voicing cost: 69
Best yet: 315
New solution
function cost: 249
child voicing cost: 65
Best yet: 314
New solution
function cost: 237
child voicing cost: 74
Best yet: 311
New solution
function cost: 243
child voicing cost: 67
Best yet: 310
New solution
function cost: 237
child voicing cost: 72
Best yet: 309
New solution
function cost: 234
child voicing cost: 70
Best yet: 304
New solution
function cost: 222
child voicing cost: 80
Best yet: 302
New solution
function cost: 222
child voicing cost: 79
Best yet: 301
New solution
function cost: 216
child voicing cost: 81
Best yet: 297
New solution
function cost: 219
child voicing cost: 75
Best yet: 294
New solution
function cost: 222
child voicing cost: 66
Best yet: 288
New solution
function cost: 222
child voicing cost: 63
Best yet: 285
New solution
function cost: 219
child voicing cost: 60
Best yet: 279
New solution
function cost: 219
child voicing cost: 58
Best yet: 277

(0, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (59, 5), (64, 1)])

(9, "Dm", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(9, "S/3", Tuple{Int16,Int16}[(48, 3), (57, 1), (64, 5), (69, 1)])

(9, "T/5", Tuple{Int16,Int16}[(47, 5), (55, 3), (64, 1), (71, 5)])

(3, "S/3", Tuple{Int16,Int16}[(48, 3), (57, 1), (64, 5), (64, 5)])

(12, "D7", Tuple{Int16,Int16}[(47, 1), (57, 7), (63, 3), (66, 5)])

(18, "T", Tuple{Int16,Int16}[(40, 1), (55, 3), (64, 1), (71, 5)])

(27, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (64, 1), (71, 5)])

(15, "D7-1", Tuple{Int16,Int16}[(54, 5), (57, 7), (63, 3), (69, 7)])

(6, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

(9, "Ts", Tuple{Int16,Int16}[(48, 1), (60, 1), (64, 3), (67, 5)])

(6, "D7-1", Tuple{Int16,Int16}[(54, 5), (57, 7), (63, 3), (66, 5)])

(3, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (64, 1), (71, 5)])

(6, "S", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (72, 3)])

(21, "D", Tuple{Int16,Int16}[(47, 1), (54, 5), (63, 3), (71, 1)])

(21, "D", Tuple{Int16,Int16}[(47, 1), (59, 1), (63, 3), (66, 5)])

(15, "D7/7", Tuple{Int16,Int16}[(45, 7), (59, 1), (63, 3), (66, 5)])

(9, "T/3", Tuple{Int16,Int16}[(43, 3), (59, 5), (64, 1), (71, 5)])

(9, "S65/6", Tuple{Int16,Int16}[(42, 6), (57, 1), (64, 5), (72, 3)])

(12, "D", Tuple{Int16,Int16}[(47, 1), (59, 1), (63, 3), (66, 5)])

(3, "D7-5", Tuple{Int16,Int16}[(47, 1), (57, 7), (63, 3), (71, 1)])

(18, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (64, 1), (71, 5)])

(12, "S65/6", Tuple{Int16,Int16}[(54, 6), (57, 1), (64, 5), (72, 3)])

(9, "D7-1", Tuple{Int16,Int16}[(54, 5), (57, 7), (63, 3), (66, 5)])

(12, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

(15, "Dm", Tuple{Int16,Int16}[(50, 1), (62, 1), (66, 3), (69, 5)])

(9, "S/3", Tuple{Int16,Int16}[(48, 3), (52, 5), (64, 5), (69, 1)])

(12, "T/5", Tuple{Int16,Int16}[(47, 5), (55, 3), (64, 1), (71, 5)])

(21, "S", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (72, 3)])

(6, "D7", Tuple{Int16,Int16}[(47, 1), (57, 7), (63, 3), (66, 5)])

(30, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (59, 5), (64, 1)])

(30, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (59, 5), (64, 1)])

##: Done. Total checked: 304146, Pruned: 340492, completed: 16, time: 6.450000047683716, efficiency: 2.4806201366999714
Results: bestval_func: 219, bestval_voices: 58
#Key: 5Scale: Minor
#Total time for optimisation of piece: 13.491999864578247
#Total cost of piece: 534
["T", "Dm", "S/3", "T/5", "S/3", "D7", "T", "T", "D7-1", "T", "Ts", "D7-1", "T", "S", "D", "D", "D7/7", "T/3", "S65/6", "D", "D7-5", "T", "S65/6", "D7-1", "T", "Dm", "S/3", "T/5", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/CO-28-lord-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-33-thee-nn.csv
[2 0 0 0 1 0 0 1 0 0 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 1 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 0 0 1 1 0 1 0 0 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 1 0 1 0 0 1 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 0 0 0 0 1 1 0 2 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 0 0 2 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 2 0 0 0 0 0 0 2 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 1 1 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 0 0 1 0 0; 1 0 2 0 0 0 0 1 0 0 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 0 0 0 0 1 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 2 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 2 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 2 0 0 0 1 1 0 0 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 0 0 1 1 0 0 0 1 0 0; 1 0 0 0 0 0 0 2 0 0 1 0]
Key Counter is [33 1 20 0 16 9 2 34 1 8 2 6]
Key Score is [126; 48; 87; 99; 34; 122; 21; 119; 80; 54; 106; 28]
Position Counter for 1 is [33 1 20 0 16 9 2 34 1 8 2 6]
Any[[1.0, 93.0, 1.0]]
[1, 93, 1]
1 C Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 171
child voicing cost: 98
Best yet: 269
New solution
function cost: 171
child voicing cost: 97
Best yet: 268
New solution
function cost: 174
child voicing cost: 75
Best yet: 249
New solution
function cost: 153
child voicing cost: 92
Best yet: 245
New solution
function cost: 153
child voicing cost: 89
Best yet: 242
New solution
function cost: 153
child voicing cost: 88
Best yet: 241
New solution
function cost: 159
child voicing cost: 78
Best yet: 237
New solution
function cost: 159
child voicing cost: 77
Best yet: 236
New solution
function cost: 159
child voicing cost: 76
Best yet: 235
New solution
function cost: 159
child voicing cost: 74
Best yet: 233
New solution
function cost: 150
child voicing cost: 82
Best yet: 232
New solution
function cost: 156
child voicing cost: 74
Best yet: 230
New solution
function cost: 156
child voicing cost: 71
Best yet: 227
New solution
function cost: 117
child voicing cost: 89
Best yet: 206
New solution
function cost: 117
child voicing cost: 85
Best yet: 202
New solution
function cost: 123
child voicing cost: 78
Best yet: 201
New solution
function cost: 117
child voicing cost: 82
Best yet: 199
New solution
function cost: 117
child voicing cost: 80
Best yet: 197
##: Done. Total checked: 191045, Pruned: 239815, completed: 18, time: 4.138999938964844, efficiency: 4.348876604357179
Results: bestval_func: 117, bestval_voices: 80
[2 0 0 0 1 0 0 1 0 0 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 1 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 0 0 1 1 0 1 0 0 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 1 0 1 0 0 1 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 0 0 0 0 1 1 0 2 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 0 0 2 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 2 0 0 0 0 0 0 2 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 1 1 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 0 0 1 0 0; 1 0 2 0 0 0 0 1 0 0 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 0 0 0 0 1 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 2 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 2 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 2 0 0 0 1 1 0 0 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 0 0 1 1 0 0 0 1 0 0; 1 0 0 0 0 0 0 2 0 0 1 0]
Key Counter is [33 1 20 0 16 9 2 34 1 8 2 6]
Key Score is [126; 48; 87; 99; 34; 122; 21; 119; 80; 54; 106; 28]
Position Counter for 1 is [33 1 20 0 16 9 2 34 1 8 2 6]
Any[[1.0, 93.0, 1.0]]
[1, 93, 1]
1 C Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 192
child voicing cost: 78
Best yet: 270
New solution
function cost: 183
child voicing cost: 72
Best yet: 255
New solution
function cost: 183
child voicing cost: 69
Best yet: 252
New solution
function cost: 177
child voicing cost: 69
Best yet: 246
New solution
function cost: 174
child voicing cost: 70
Best yet: 244
New solution
function cost: 153
child voicing cost: 83
Best yet: 236
New solution
function cost: 159
child voicing cost: 75
Best yet: 234
New solution
function cost: 153
child voicing cost: 80
Best yet: 233
New solution
function cost: 153
child voicing cost: 76
Best yet: 229
New solution
function cost: 150
child voicing cost: 78
Best yet: 228
New solution
function cost: 150
child voicing cost: 77
Best yet: 227
New solution
function cost: 150
child voicing cost: 76
Best yet: 226
New solution
function cost: 162
child voicing cost: 62
Best yet: 224
New solution
function cost: 159
child voicing cost: 64
Best yet: 223
New solution
function cost: 159
child voicing cost: 63
Best yet: 222
New solution
function cost: 159
child voicing cost: 62
Best yet: 221
New solution
function cost: 141
child voicing cost: 76
Best yet: 217
New solution
function cost: 138
child voicing cost: 78
Best yet: 216
New solution
function cost: 138
child voicing cost: 77
Best yet: 215
New solution
function cost: 138
child voicing cost: 76
Best yet: 214
New solution
function cost: 126
child voicing cost: 87
Best yet: 213
New solution
function cost: 126
child voicing cost: 86
Best yet: 212

(0, "T", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(9, "D54", Tuple{Int16,Int16}[(55, 1), (62, 5), (67, 1), (72, 4)])

(0, "D", Tuple{Int16,Int16}[(55, 1), (62, 5), (67, 1), (71, 3)])

(3, "S/3", Tuple{Int16,Int16}[(57, 3), (60, 5), (65, 1), (77, 1)])

(0, "D64", Tuple{Int16,Int16}[(55, 1), (60, 4), (67, 1), (76, 6)])

(0, "D", Tuple{Int16,Int16}[(55, 1), (59, 3), (67, 1), (74, 5)])

(15, "T", Tuple{Int16,Int16}[(48, 1), (60, 1), (67, 5), (76, 3)])

(15, "T", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(6, "D7/3", Tuple{Int16,Int16}[(47, 3), (55, 1), (65, 7), (74, 5)])

(6, "T", Tuple{Int16,Int16}[(48, 1), (55, 5), (64, 3), (72, 1)])

(18, "D7/7", Tuple{Int16,Int16}[(41, 7), (55, 1), (62, 5), (71, 3)])

(0, "T/3", Tuple{Int16,Int16}[(40, 3), (55, 5), (60, 1), (72, 1)])

(9, "D", Tuple{Int16,Int16}[(43, 1), (50, 5), (59, 3), (67, 1)])

(3, "D7", Tuple{Int16,Int16}[(43, 1), (50, 5), (59, 3), (65, 7)])

(18, "Ts", Tuple{Int16,Int16}[(45, 1), (48, 3), (60, 3), (64, 5)])

(15, "Ts", Tuple{Int16,Int16}[(45, 1), (48, 3), (57, 1), (64, 5)])

(6, "T/3", Tuple{Int16,Int16}[(52, 3), (55, 5), (55, 5), (60, 1)])

(0, "D/5", Tuple{Int16,Int16}[(50, 5), (55, 1), (59, 3), (62, 5)])

(0, "T/3", Tuple{Int16,Int16}[(52, 3), (55, 5), (60, 1), (67, 5)])

(0, "T", Tuple{Int16,Int16}[(48, 1), (52, 3), (60, 1), (67, 5)])

(9, "D7-1", Tuple{Int16,Int16}[(50, 5), (53, 7), (59, 3), (65, 7)])

(6, "Ts", Tuple{Int16,Int16}[(45, 1), (52, 5), (60, 3), (72, 3)])

(3, "D/3", Tuple{Int16,Int16}[(47, 3), (50, 5), (62, 5), (67, 1)])

(9, "T", Tuple{Int16,Int16}[(48, 1), (52, 3), (60, 1), (67, 5)])

(15, "S", Tuple{Int16,Int16}[(41, 1), (57, 3), (60, 5), (65, 1)])

(12, "D", Tuple{Int16,Int16}[(43, 1), (55, 1), (59, 3), (62, 5)])

(6, "D7/7", Tuple{Int16,Int16}[(41, 7), (55, 1), (59, 3), (62, 5)])

(12, "T/3", Tuple{Int16,Int16}[(40, 3), (55, 5), (60, 1), (67, 5)])

(9, "S", Tuple{Int16,Int16}[(41, 1), (53, 1), (60, 5), (69, 3)])

(18, "D7", Tuple{Int16,Int16}[(43, 1), (53, 7), (59, 3), (62, 5)])

(6, "T", Tuple{Int16,Int16}[(48, 1), (52, 3), (55, 5), (60, 1)])

(6, "T", Tuple{Int16,Int16}[(48, 1), (52, 3), (55, 5), (60, 1)])

##: Done. Total checked: 143017, Pruned: 154473, completed: 22, time: 2.825000047683716, efficiency: 7.787610488020459
Results: bestval_func: 126, bestval_voices: 86
#Key: 1Scale: Major
#Total time for optimisation of piece: 8.682999849319458
#Total cost of piece: 409
["T", "D54", "D", "S/3", "D64", "D", "T", "T", "D7/3", "T", "D7/7", "T/3", "D", "D7", "Ts", "Ts", "T/3", "D/5", "T/3", "T", "D7-1", "Ts", "D/3", "T", "S", "D", "D7/7", "T/3", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/CO-33-thee-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-35-rejoi-nn.csv
[0 1 0 0 0 0 2 0 0 1 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 1 0 0 1; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 2 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 0 0 3 0 0 0 0 0 0 1; 0 0 0 0 3 0 0 0 0 0 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 0 1 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 0 0 3 0 0; 0 0 0 0 0 0 2 0 1 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 2 0 1 0 0 0 0 0; 0 0 0 1 0 0 2 0 0 1 0 0; 0 0 0 2 0 0 1 0 0 1 0 0; 0 0 0 1 1 0 0 0 2 0 0 0; 1 0 0 1 1 0 0 0 1 0 0 0; 0 0 0 1 2 0 0 0 1 0 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 1 0 1 0 1 0 0 1 0 0]
Key Counter is [1 9 3 8 38 1 18 0 16 20 0 16]
Key Score is [79; 53; 104; 29; 125; 63; 68; 96; 35; 120; 33; 105]
Position Counter for 5 is [38 1 18 0 16 20 0 16 1 9 3 8]
Any[[5.0, 92.75, 1.0]]
[5, 93, 1]
5 E Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 107
Best yet: 257
New solution
function cost: 132
child voicing cost: 122
Best yet: 254
New solution
function cost: 147
child voicing cost: 94
Best yet: 241
New solution
function cost: 156
child voicing cost: 75
Best yet: 231
New solution
function cost: 156
child voicing cost: 73
Best yet: 229
New solution
function cost: 156
child voicing cost: 70
Best yet: 226
New solution
function cost: 156
child voicing cost: 68
Best yet: 224
##: Done. Total checked: 52142, Pruned: 61963, completed: 7, time: 1.313999891281128, efficiency: 5.32724549404271
Results: bestval_func: 156, bestval_voices: 68
[0 1 0 0 0 0 2 0 0 1 0 0; 0 1 0 0 0 1 0 0 1 0 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 1 0 0 1; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 2 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 0 0 3 0 0 0 0 0 0 1; 0 0 0 0 3 0 0 0 0 0 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 0 1 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 0 0 3 0 0; 0 0 0 0 0 0 2 0 1 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 2 0 1 0 0 0 0 0; 0 0 0 1 0 0 2 0 0 1 0 0; 0 0 0 2 0 0 1 0 0 1 0 0; 0 0 0 1 1 0 0 0 2 0 0 0; 1 0 0 1 1 0 0 0 1 0 0 0; 0 0 0 1 2 0 0 0 1 0 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 1 0 1 0 1 0 0 1 0 0]
Key Counter is [1 9 3 8 38 1 18 0 16 20 0 16]
Key Score is [79; 53; 104; 29; 125; 63; 68; 96; 35; 120; 33; 105]
Position Counter for 5 is [38 1 18 0 16 20 0 16 1 9 3 8]
Any[[5.0, 92.75, 1.0]]
[5, 93, 1]
5 E Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 192
child voicing cost: 84
Best yet: 276
New solution
function cost: 192
child voicing cost: 82
Best yet: 274
New solution
function cost: 192
child voicing cost: 76
Best yet: 268
New solution
function cost: 192
child voicing cost: 71
Best yet: 263
New solution
function cost: 195
child voicing cost: 66
Best yet: 261
New solution
function cost: 180
child voicing cost: 80
Best yet: 260
New solution
function cost: 180
child voicing cost: 79
Best yet: 259
New solution
function cost: 189
child voicing cost: 67
Best yet: 256
New solution
function cost: 162
child voicing cost: 85
Best yet: 247
New solution
function cost: 168
child voicing cost: 77
Best yet: 245
New solution
function cost: 159
child voicing cost: 85
Best yet: 244
New solution
function cost: 159
child voicing cost: 82
Best yet: 241
New solution
function cost: 159
child voicing cost: 81
Best yet: 240
New solution
function cost: 156
child voicing cost: 83
Best yet: 239

(21, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(3, "Ts", Tuple{Int16,Int16}[(49, 1), (61, 1), (68, 5), (76, 3)])

(3, "D7", Tuple{Int16,Int16}[(47, 1), (63, 3), (69, 7), (78, 5)])

(15, "Ts", Tuple{Int16,Int16}[(49, 1), (64, 3), (68, 5), (73, 1)])

(6, "D7/3", Tuple{Int16,Int16}[(51, 3), (66, 5), (69, 7), (71, 1)])

(0, "T", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (71, 5)])

(18, "D", Tuple{Int16,Int16}[(47, 1), (63, 3), (71, 1), (78, 5)])

(15, "D", Tuple{Int16,Int16}[(47, 1), (66, 5), (71, 1), (75, 3)])

(18, "S/3", Tuple{Int16,Int16}[(49, 3), (64, 5), (69, 1), (76, 5)])

(3, "D7/3", Tuple{Int16,Int16}[(51, 3), (66, 5), (69, 7), (71, 1)])

(15, "T", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (71, 5)])

(15, "D/3", Tuple{Int16,Int16}[(51, 3), (59, 1), (66, 5), (78, 5)])

(12, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(15, "D7/5", Tuple{Int16,Int16}[(54, 5), (59, 1), (69, 7), (75, 3)])

(3, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(15, "T", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (71, 5)])

(6, "D7/3", Tuple{Int16,Int16}[(51, 3), (66, 5), (69, 7), (71, 1)])

(27, "Ts", Tuple{Int16,Int16}[(49, 1), (56, 5), (64, 3), (73, 1)])

(12, "D7-1", Tuple{Int16,Int16}[(42, 5), (57, 7), (66, 5), (75, 3)])

(0, "T", Tuple{Int16,Int16}[(40, 1), (59, 5), (68, 3), (76, 1)])

(6, "T/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (64, 1), (76, 1)])

(9, "S", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(12, "T", Tuple{Int16,Int16}[(52, 1), (56, 3), (64, 1), (71, 5)])

(0, "D7-1", Tuple{Int16,Int16}[(54, 5), (57, 7), (63, 3), (69, 7)])

(12, "D7/7", Tuple{Int16,Int16}[(57, 7), (59, 1), (63, 3), (66, 5)])

(12, "T/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(6, "T", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (71, 5)])

(3, "T-5", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (76, 1)])

(18, "D7-1", Tuple{Int16,Int16}[(54, 5), (63, 3), (66, 5), (69, 7)])

(12, "D7", Tuple{Int16,Int16}[(59, 1), (63, 3), (66, 5), (69, 7)])

(15, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (68, 3)])

(15, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (68, 3)])

##: Done. Total checked: 143451, Pruned: 157212, completed: 14, time: 2.7760000228881836, efficiency: 5.043227624124524
Results: bestval_func: 156, bestval_voices: 83
#Key: 5Scale: Major
#Total time for optimisation of piece: 5.61899995803833
#Total cost of piece: 463
["T", "Ts", "D7", "Ts", "D7/3", "T", "D", "D", "S/3", "D7/3", "T", "D/3", "T", "D7/5", "T", "T", "D7/3", "Ts", "D7-1", "T", "T/3", "S", "T", "D7-1", "D7/7", "T/3", "T", "T-5", "D7-1", "D7", "T", "T"]
../../results/optimizer/pianoroll/CO-35-rejoi-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-46-alldk-nn.csv
[0 1 0 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 0 1 0 0 0 1 0 0 0 2; 0 0 0 0 1 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 1 0 1 0 0 0 0 1 0 1; 0 1 0 0 2 0 0 0 1 0 0 0; 0 0 0 0 1 0 2 0 1 0 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 0 0 0 2 0 0 1 0 1; 0 0 0 0 0 0 2 0 0 1 0 1; 0 2 0 0 1 0 1 0 0 0 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 1 0 0; 0 1 0 0 0 0 0 0 1 1 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 2 0 0 2 0 0 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 2 0 0]
Key Counter is [0 17 3 2 30 0 14 1 19 23 0 21]
Key Score is [78; 52; 109; 25; 126; 57; 73; 92; 39; 127; 29; 103]
Position Counter for 10 is [23 0 21 0 17 3 2 30 0 14 1 19]
Any[[10.0, 88.0, 1.0]]
[10, 88, 1]
10 A Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 141
child voicing cost: 121
Best yet: 262
New solution
function cost: 141
child voicing cost: 118
Best yet: 259
New solution
function cost: 141
child voicing cost: 116
Best yet: 257
New solution
function cost: 150
child voicing cost: 97
Best yet: 247
New solution
function cost: 150
child voicing cost: 96
Best yet: 246
New solution
function cost: 150
child voicing cost: 94
Best yet: 244
New solution
function cost: 147
child voicing cost: 91
Best yet: 238
New solution
function cost: 135
child voicing cost: 98
Best yet: 233
New solution
function cost: 135
child voicing cost: 97
Best yet: 232
New solution
function cost: 135
child voicing cost: 95
Best yet: 230
New solution
function cost: 135
child voicing cost: 90
Best yet: 225
New solution
function cost: 129
child voicing cost: 92
Best yet: 221
New solution
function cost: 129
child voicing cost: 90
Best yet: 219
New solution
function cost: 129
child voicing cost: 89
Best yet: 218
New solution
function cost: 123
child voicing cost: 91
Best yet: 214
New solution
function cost: 123
child voicing cost: 90
Best yet: 213
New solution
function cost: 123
child voicing cost: 87
Best yet: 210
New solution
function cost: 123
child voicing cost: 86
Best yet: 209
New solution
function cost: 126
child voicing cost: 82
Best yet: 208
New solution
function cost: 126
child voicing cost: 81
Best yet: 207
New solution
function cost: 123
child voicing cost: 83
Best yet: 206
New solution
function cost: 123
child voicing cost: 82
Best yet: 205
New solution
function cost: 123
child voicing cost: 81
Best yet: 204
New solution
function cost: 123
child voicing cost: 80
Best yet: 203
New solution
function cost: 123
child voicing cost: 79
Best yet: 202
New solution
function cost: 123
child voicing cost: 78
Best yet: 201
New solution
function cost: 123
child voicing cost: 75
Best yet: 198
New solution
function cost: 123
child voicing cost: 74
Best yet: 197
New solution
function cost: 123
child voicing cost: 71
Best yet: 194
New solution
function cost: 123
child voicing cost: 68
Best yet: 191
New solution
function cost: 123
child voicing cost: 67
Best yet: 190
##: Done. Total checked: 603850, Pruned: 751336, completed: 31, time: 12.391000032424927, efficiency: 2.5018158275263342
Results: bestval_func: 123, bestval_voices: 67
[0 1 0 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 0 1 0 0 0 1 0 0 0 2; 0 0 0 0 1 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 1 0 1 0 0 0 0 1 0 1; 0 1 0 0 2 0 0 0 1 0 0 0; 0 0 0 0 1 0 2 0 1 0 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 0 0 0 2 0 0 1 0 1; 0 0 0 0 0 0 2 0 0 1 0 1; 0 2 0 0 1 0 1 0 0 0 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 1 0 0; 0 1 0 0 0 0 0 0 1 1 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 2 0 0 2 0 0 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 2 0 0]
Key Counter is [0 17 3 2 30 0 14 1 19 23 0 21]
Key Score is [78; 52; 109; 25; 126; 57; 73; 92; 39; 127; 29; 103]
Position Counter for 10 is [23 0 21 0 17 3 2 30 0 14 1 19]
Any[[10.0, 88.0, 1.0]]
[10, 88, 1]
10 A Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 73
Best yet: 247
New solution
function cost: 174
child voicing cost: 70
Best yet: 244

(0, "T", Tuple{Int16,Int16}[(57, 1), (57, 1), (64, 5), (73, 3)])

(6, "D", Tuple{Int16,Int16}[(52, 1), (56, 3), (64, 1), (71, 5)])

(9, "D7/7", Tuple{Int16,Int16}[(50, 7), (56, 3), (64, 1), (71, 5)])

(0, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (69, 1)])

(12, "S65/6", Tuple{Int16,Int16}[(47, 6), (57, 5), (66, 3), (74, 1)])

(24, "D", Tuple{Int16,Int16}[(40, 1), (59, 5), (68, 3), (76, 1)])

(0, "T", Tuple{Int16,Int16}[(45, 1), (61, 3), (69, 1), (76, 5)])

(9, "T", Tuple{Int16,Int16}[(45, 1), (61, 3), (64, 5), (69, 1)])

(9, "D/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (64, 1), (71, 5)])

(6, "D", Tuple{Int16,Int16}[(40, 1), (59, 5), (68, 3), (76, 1)])

(18, "S/3", Tuple{Int16,Int16}[(42, 3), (57, 5), (69, 5), (74, 1)])

(0, "D/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (64, 1), (71, 5)])

(0, "T", Tuple{Int16,Int16}[(45, 1), (61, 3), (64, 5), (69, 1)])

(6, "D/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (64, 1), (71, 5)])

(12, "Ts", Tuple{Int16,Int16}[(42, 1), (57, 3), (69, 3), (73, 5)])

(12, "Ts", Tuple{Int16,Int16}[(42, 1), (57, 3), (66, 1), (73, 5)])

(6, "D", Tuple{Int16,Int16}[(40, 1), (59, 5), (68, 3), (76, 1)])

(9, "S/3", Tuple{Int16,Int16}[(42, 3), (57, 5), (69, 5), (74, 1)])

(6, "Ts", Tuple{Int16,Int16}[(42, 1), (57, 3), (69, 3), (73, 5)])

(6, "Ts", Tuple{Int16,Int16}[(54, 1), (57, 3), (69, 3), (73, 5)])

(18, "D/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(6, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(6, "D/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(0, "D7", Tuple{Int16,Int16}[(52, 1), (59, 5), (62, 7), (68, 3)])

(15, "T-5", Tuple{Int16,Int16}[(45, 1), (57, 1), (61, 3), (69, 1)])

(18, "D7/3", Tuple{Int16,Int16}[(44, 3), (52, 1), (62, 7), (71, 5)])

(9, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (61, 3), (69, 1)])

(12, "T/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (64, 5)])

(15, "S", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(12, "D", Tuple{Int16,Int16}[(52, 1), (52, 1), (56, 3), (59, 5)])

(9, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(9, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

##: Done. Total checked: 65927, Pruned: 73133, completed: 2, time: 1.38100004196167, efficiency: 1.4482258792396985
Results: bestval_func: 174, bestval_voices: 70
#Key: 10Scale: Major
#Total time for optimisation of piece: 15.085999965667725
#Total cost of piece: 434
["T", "D", "D7/7", "T/3", "S65/6", "D", "T", "T", "D/3", "D", "S/3", "D/3", "T", "D/3", "Ts", "Ts", "D", "S/3", "Ts", "Ts", "D/3", "T", "D/3", "D7", "T-5", "D7/3", "T", "T/3", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/CO-46-alldk-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-53-heart-nn.csv
[0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 0 0 1 0 0 2 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 2 0 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 1 0 0 0 1 0 0 1 0 0; 0 0 0 0 2 0 0 0 0 0 0 2; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 2 0 0 0 0 0 0 0 2 0 0; 0 0 0 0 0 0 1 0 0 1 0 2; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 1 0 0 1 0 1; 0 1 0 0 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 1 0 0; 0 0 0 0 1 0 0 0 1 2 0 0; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 1 0 1 0 0 1 0 1; 0 1 0 0 2 0 0 0 1 0 0 0; 0 1 0 0 2 0 0 0 0 0 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0]
Key Counter is [0 15 4 1 33 0 11 0 21 24 0 23]
Key Score is [84; 48; 110; 26; 128; 61; 71; 95; 37; 131; 29; 104]
Position Counter for 10 is [24 0 23 0 15 4 1 33 0 11 0 21]
Any[[10.0, 94.25, 1.0]]
[10, 94, 1]
10 A Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 123
child voicing cost: 115
Best yet: 238
New solution
function cost: 123
child voicing cost: 112
Best yet: 235
New solution
function cost: 123
child voicing cost: 111
Best yet: 234
New solution
function cost: 123
child voicing cost: 108
Best yet: 231
New solution
function cost: 123
child voicing cost: 107
Best yet: 230
New solution
function cost: 123
child voicing cost: 103
Best yet: 226
New solution
function cost: 135
child voicing cost: 69
Best yet: 204
New solution
function cost: 135
child voicing cost: 61
Best yet: 196
##: Done. Total checked: 70862, Pruned: 84101, completed: 8, time: 1.5350000858306885, efficiency: 5.211726092947206
Results: bestval_func: 135, bestval_voices: 61
[0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 0 0 1 0 0 2 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 2 0 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 1 1 0 0 0 1 0 0 1 0 0; 0 0 0 0 2 0 0 0 0 0 0 2; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 2 0 0 1 0 0 0 1 0 0 0; 0 0 0 0 1 0 1 0 0 1 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 2 0 0 0 0 0 0 0 2 0 0; 0 0 0 0 0 0 1 0 0 1 0 2; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 1 0 0 1 0 1; 0 1 0 0 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 1 0 0; 0 0 0 0 1 0 0 0 1 2 0 0; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 1 0 1 0 0 1 0 1; 0 1 0 0 2 0 0 0 1 0 0 0; 0 1 0 0 2 0 0 0 0 0 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 2 0 0]
Key Counter is [0 15 4 1 33 0 11 0 21 24 0 23]
Key Score is [84; 48; 110; 26; 128; 61; 71; 95; 37; 131; 29; 104]
Position Counter for 10 is [24 0 23 0 15 4 1 33 0 11 0 21]
Any[[10.0, 94.25, 1.0]]
[10, 94, 1]
10 A Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 75
Best yet: 249
New solution
function cost: 174
child voicing cost: 72
Best yet: 246
New solution
function cost: 174
child voicing cost: 69
Best yet: 243
New solution
function cost: 174
child voicing cost: 67
Best yet: 241
New solution
function cost: 168
child voicing cost: 72
Best yet: 240
New solution
function cost: 168
child voicing cost: 71
Best yet: 239
New solution
function cost: 171
child voicing cost: 67
Best yet: 238
New solution
function cost: 159
child voicing cost: 76
Best yet: 235
New solution
function cost: 159
child voicing cost: 74
Best yet: 233
New solution
function cost: 159
child voicing cost: 73
Best yet: 232
New solution
function cost: 159
child voicing cost: 71
Best yet: 230
New solution
function cost: 162
child voicing cost: 65
Best yet: 227
New solution
function cost: 156
child voicing cost: 70
Best yet: 226
New solution
function cost: 156
child voicing cost: 67
Best yet: 223

(15, "T", Tuple{Int16,Int16}[(57, 1), (57, 1), (64, 5), (73, 3)])

(0, "Ts", Tuple{Int16,Int16}[(54, 1), (57, 3), (66, 1), (73, 5)])

(6, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(12, "S/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (69, 5), (74, 1)])

(15, "D7/3", Tuple{Int16,Int16}[(56, 3), (64, 1), (71, 5), (74, 7)])

(15, "T", Tuple{Int16,Int16}[(57, 1), (64, 5), (69, 1), (73, 3)])

(6, "D", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (71, 5)])

(9, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(3, "S/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (69, 5), (74, 1)])

(0, "D/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(0, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(9, "D7/5", Tuple{Int16,Int16}[(59, 5), (62, 7), (64, 1), (68, 3)])

(15, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(9, "D/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (71, 5), (76, 1)])

(18, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (69, 1), (76, 5)])

(18, "T", Tuple{Int16,Int16}[(57, 1), (64, 5), (69, 1), (73, 3)])

(0, "D/3", Tuple{Int16,Int16}[(56, 3), (64, 1), (71, 5), (76, 1)])

(9, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (69, 1), (76, 5)])

(15, "D7-1", Tuple{Int16,Int16}[(59, 5), (62, 7), (68, 3), (74, 7)])

(3, "T", Tuple{Int16,Int16}[(57, 1), (64, 5), (69, 1), (73, 3)])

(9, "D/3", Tuple{Int16,Int16}[(56, 3), (64, 1), (71, 5), (76, 1)])

(12, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (69, 1), (76, 5)])

(6, "S65", Tuple{Int16,Int16}[(50, 1), (59, 6), (69, 5), (78, 3)])

(3, "T/5", Tuple{Int16,Int16}[(52, 5), (57, 1), (69, 1), (73, 3)])

(9, "S/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (69, 5), (74, 1)])

(15, "D/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(15, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(9, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (69, 1), (76, 5)])

(9, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(6, "D", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (71, 5)])

(21, "T", Tuple{Int16,Int16}[(45, 1), (64, 5), (69, 1), (73, 3)])

(21, "T", Tuple{Int16,Int16}[(45, 1), (64, 5), (69, 1), (73, 3)])

##: Done. Total checked: 82307, Pruned: 89882, completed: 14, time: 1.7750000953674316, efficiency: 7.887323519890824
Results: bestval_func: 156, bestval_voices: 67
#Key: 10Scale: Major
#Total time for optimisation of piece: 4.6540000438690186
#Total cost of piece: 419
["T", "Ts", "D", "S/3", "D7/3", "T", "D", "D", "S/3", "D/3", "T", "D7/5", "T", "D/3", "T", "T", "D/3", "T", "D7-1", "T", "D/3", "T", "S65", "T/5", "S/3", "D/3", "T", "T", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/CO-53-heart-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/CO-59-besid-nn.csv
[0 0 0 0 2 0 0 1 0 0 0 1; 0 0 0 0 2 0 0 1 0 0 0 1; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 1 0 1 0 0 0 0 1 0 1; 0 1 1 0 1 0 0 1 0 0 0 0; 0 0 3 0 0 0 0 1 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 2 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 1 0 0 2 0 0 0 1; 1 1 0 0 0 0 1 0 0 0 1 0; 0 0 1 0 0 0 1 1 0 0 0 1; 2 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 0 0 1 0 0 1 0 1 0 1; 1 0 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 0 1 0 0 0 1 0 2; 0 0 0 0 2 0 0 0 0 0 0 2; 0 0 0 0 1 0 1 0 0 2 0 0; 0 1 1 0 0 0 0 0 0 2 0 0]
Key Counter is [6 3 26 0 21 1 12 18 2 24 1 17]
Key Score is [113; 25; 121; 54; 79; 97; 36; 124; 31; 105; 76; 56]
Position Counter for 8 is [18 2 24 1 17 6 3 26 0 21 1 12]
Any[[8.0, 77.5, 0.0]]
[8, 78, 0]
5 E Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 180
child voicing cost: 98
Best yet: 278
New solution
function cost: 180
child voicing cost: 97
Best yet: 277
New solution
function cost: 180
child voicing cost: 96
Best yet: 276
New solution
function cost: 177
child voicing cost: 98
Best yet: 275
New solution
function cost: 150
child voicing cost: 104
Best yet: 254
New solution
function cost: 150
child voicing cost: 103
Best yet: 253
New solution
function cost: 150
child voicing cost: 102
Best yet: 252
New solution
function cost: 150
child voicing cost: 101
Best yet: 251
New solution
function cost: 150
child voicing cost: 91
Best yet: 241
New solution
function cost: 150
child voicing cost: 90
Best yet: 240
New solution
function cost: 150
child voicing cost: 89
Best yet: 239
New solution
function cost: 150
child voicing cost: 88
Best yet: 238
New solution
function cost: 144
child voicing cost: 92
Best yet: 236
New solution
function cost: 144
child voicing cost: 88
Best yet: 232
New solution
function cost: 144
child voicing cost: 86
Best yet: 230
New solution
function cost: 138
child voicing cost: 87
Best yet: 225
New solution
function cost: 138
child voicing cost: 85
Best yet: 223
New solution
function cost: 138
child voicing cost: 84
Best yet: 222
New solution
function cost: 138
child voicing cost: 82
Best yet: 220
##: Done. Total checked: 95711, Pruned: 109514, completed: 19, time: 2.01200008392334, efficiency: 9.44333956634364
Results: bestval_func: 138, bestval_voices: 82
[0 0 0 0 2 0 0 1 0 0 0 1; 0 0 0 0 2 0 0 1 0 0 0 1; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 0 1; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 0 0 0 2 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 1 0 1 0 0 0 0 1 0 1; 0 1 1 0 1 0 0 1 0 0 0 0; 0 0 3 0 0 0 0 1 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 2 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 1 0 0 2 0 0 0 1; 1 1 0 0 0 0 1 0 0 0 1 0; 0 0 1 0 0 0 1 1 0 0 0 1; 2 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 2 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 2 0 0 0 0; 0 0 0 0 1 0 0 1 0 1 0 1; 1 0 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 0 1 0 0 0 1 0 2; 0 0 0 0 2 0 0 0 0 0 0 2; 0 0 0 0 1 0 1 0 0 2 0 0; 0 1 1 0 0 0 0 0 0 2 0 0]
Key Counter is [6 3 26 0 21 1 12 18 2 24 1 17]
Key Score is [113; 25; 121; 54; 79; 97; 36; 124; 31; 105; 76; 56]
Position Counter for 8 is [18 2 24 1 17 6 3 26 0 21 1 12]
Any[[8.0, 77.5, 0.0]]
[8, 78, 0]
5 E Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 198
child voicing cost: 105
Best yet: 303
New solution
function cost: 198
child voicing cost: 102
Best yet: 300
New solution
function cost: 198
child voicing cost: 99
Best yet: 297
New solution
function cost: 192
child voicing cost: 97
Best yet: 289
New solution
function cost: 192
child voicing cost: 94
Best yet: 286
New solution
function cost: 192
child voicing cost: 91
Best yet: 283
New solution
function cost: 192
child voicing cost: 90
Best yet: 282
New solution
function cost: 192
child voicing cost: 87
Best yet: 279
New solution
function cost: 204
child voicing cost: 72
Best yet: 276
New solution
function cost: 204
child voicing cost: 69
Best yet: 273
New solution
function cost: 195
child voicing cost: 70
Best yet: 265
New solution
function cost: 195
child voicing cost: 67
Best yet: 262
New solution
function cost: 195
child voicing cost: 62
Best yet: 257
New solution
function cost: 195
child voicing cost: 61
Best yet: 256

(0, "T", Tuple{Int16,Int16}[(52, 1), (64, 1), (67, 3), (71, 5)])

(0, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (67, 3), (76, 1)])

(6, "D7/3", Tuple{Int16,Int16}[(51, 3), (59, 1), (69, 7), (78, 5)])

(6, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (67, 3), (76, 1)])

(3, "D7-1", Tuple{Int16,Int16}[(54, 5), (57, 7), (69, 7), (75, 3)])

(12, "D7", Tuple{Int16,Int16}[(47, 1), (63, 3), (69, 7), (78, 5)])

(9, "Ts", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (76, 3)])

(12, "Ts", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(9, "D7", Tuple{Int16,Int16}[(47, 1), (63, 3), (69, 7), (78, 5)])

(12, "T", Tuple{Int16,Int16}[(52, 1), (64, 1), (67, 3), (71, 5)])

(18, "T-5", Tuple{Int16,Int16}[(52, 1), (64, 1), (67, 3), (76, 1)])

(12, "D7/3", Tuple{Int16,Int16}[(51, 3), (59, 1), (69, 7), (78, 5)])

(15, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (67, 3), (76, 1)])

(3, "D7-1", Tuple{Int16,Int16}[(54, 5), (57, 7), (66, 5), (75, 3)])

(3, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (67, 3), (76, 1)])

(18, "T", Tuple{Int16,Int16}[(52, 1), (64, 1), (67, 3), (71, 5)])

(6, "Tm", Tuple{Int16,Int16}[(55, 1), (62, 5), (67, 1), (71, 3)])

(21, "S", Tuple{Int16,Int16}[(57, 1), (60, 3), (64, 5), (69, 1)])

(3, "Tm", Tuple{Int16,Int16}[(55, 1), (59, 3), (67, 1), (74, 5)])

(12, "D7/3", Tuple{Int16,Int16}[(51, 3), (59, 1), (66, 5), (69, 7)])

(12, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

(3, "D7-1", Tuple{Int16,Int16}[(54, 5), (57, 7), (63, 3), (66, 5)])

(21, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

(12, "S", Tuple{Int16,Int16}[(45, 1), (60, 3), (64, 5), (69, 1)])

(18, "T/3", Tuple{Int16,Int16}[(43, 3), (59, 5), (64, 1), (71, 5)])

(12, "D7/5", Tuple{Int16,Int16}[(42, 5), (59, 1), (63, 3), (69, 7)])

(18, "T", Tuple{Int16,Int16}[(40, 1), (59, 5), (64, 1), (67, 3)])

(6, "T/3", Tuple{Int16,Int16}[(43, 3), (59, 5), (64, 1), (71, 5)])

(0, "S", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (72, 3)])

(15, "D7", Tuple{Int16,Int16}[(47, 1), (57, 7), (63, 3), (66, 5)])

(12, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (59, 5), (64, 1)])

(12, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (59, 5), (64, 1)])

##: Done. Total checked: 95724, Pruned: 108410, completed: 14, time: 2.0959999561309814, efficiency: 6.6793894527758875
Results: bestval_func: 195, bestval_voices: 61
#Key: 5Scale: Minor
#Total time for optimisation of piece: 5.685999870300293
#Total cost of piece: 476
["T", "T", "D7/3", "T", "D7-1", "D7", "Ts", "Ts", "D7", "T", "T-5", "D7/3", "T", "D7-1", "T", "T", "Tm", "S", "Tm", "D7/3", "T", "D7-1", "T", "S", "T/3", "D7/5", "T", "T/3", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/CO-59-besid-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/M3-01-Jesu-nn.csv
[0 1 0 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 1 0 0 1 0 0 1; 0 0 0 0 0 0 2 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 1 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 1 0 0; 2 0 1 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 3 0; 0 0 0 0 0 2 1 0 0 1 0 0; 0 0 0 0 0 2 0 0 0 0 2 0; 1 0 0 1 0 0 0 0 0 1 1 0; 0 0 0 0 0 1 0 0 0 0 3 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 1 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 1 0 1 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 0 1 0 0 0 2 0]
Key Counter is [8 3 7 22 0 28 9 5 7 3 38 1]
Key Score is [52; 115; 28; 115; 45; 89; 108; 33; 111; 30; 111; 80]
Position Counter for 2 is [3 7 22 0 28 9 5 7 3 38 1 8]
Position Counter for 4 is [22 0 28 9 5 7 3 38 1 8 3 7]
Any[[2.0, 97.0, 0.0], [4.0, 84.25, 1.0]]
[2, 97, 0]
11 A# Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 168
child voicing cost: 107
Best yet: 275
New solution
function cost: 168
child voicing cost: 106
Best yet: 274
New solution
function cost: 168
child voicing cost: 104
Best yet: 272
New solution
function cost: 168
child voicing cost: 101
Best yet: 269
New solution
function cost: 165
child voicing cost: 102
Best yet: 267
New solution
function cost: 165
child voicing cost: 99
Best yet: 264
New solution
function cost: 159
child voicing cost: 103
Best yet: 262
New solution
function cost: 159
child voicing cost: 100
Best yet: 259
New solution
function cost: 165
child voicing cost: 90
Best yet: 255
New solution
function cost: 165
child voicing cost: 89
Best yet: 254
New solution
function cost: 156
child voicing cost: 90
Best yet: 246
New solution
function cost: 156
child voicing cost: 88
Best yet: 244
New solution
function cost: 159
child voicing cost: 71
Best yet: 230
New solution
function cost: 147
child voicing cost: 78
Best yet: 225
New solution
function cost: 141
child voicing cost: 80
Best yet: 221
New solution
function cost: 141
child voicing cost: 78
Best yet: 219
New solution
function cost: 141
child voicing cost: 76
Best yet: 217
New solution
function cost: 141
child voicing cost: 75
Best yet: 216
New solution
function cost: 129
child voicing cost: 86
Best yet: 215
New solution
function cost: 129
child voicing cost: 85
Best yet: 214
New solution
function cost: 129
child voicing cost: 83
Best yet: 212
New solution
function cost: 129
child voicing cost: 81
Best yet: 210
New solution
function cost: 129
child voicing cost: 80
Best yet: 209
##: Done. Total checked: 198185, Pruned: 229788, completed: 23, time: 4.019999980926514, efficiency: 5.7213930619718685
Results: bestval_func: 129, bestval_voices: 80
[0 1 0 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 1 0 0 1 0 0 1; 0 0 0 0 0 0 2 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 1 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 1 0 0; 2 0 1 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 3 0; 0 0 0 0 0 2 1 0 0 1 0 0; 0 0 0 0 0 2 0 0 0 0 2 0; 1 0 0 1 0 0 0 0 0 1 1 0; 0 0 0 0 0 1 0 0 0 0 3 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 1 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 1 0 1 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 0 1 0 0 0 2 0]
Key Counter is [8 3 7 22 0 28 9 5 7 3 38 1]
Key Score is [52; 115; 28; 115; 45; 89; 108; 33; 111; 30; 111; 80]
Position Counter for 2 is [3 7 22 0 28 9 5 7 3 38 1 8]
Position Counter for 4 is [22 0 28 9 5 7 3 38 1 8 3 7]
Any[[2.0, 97.0, 0.0], [4.0, 84.25, 1.0]]
[2, 97, 0]
11 A# Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 183
child voicing cost: 66
Best yet: 249
New solution
function cost: 171
child voicing cost: 74
Best yet: 245
New solution
function cost: 177
child voicing cost: 66
Best yet: 243
New solution
function cost: 162
child voicing cost: 79
Best yet: 241
New solution
function cost: 168
child voicing cost: 71
Best yet: 239
New solution
function cost: 162
child voicing cost: 74
Best yet: 236
New solution
function cost: 168
child voicing cost: 66
Best yet: 234
New solution
function cost: 147
child voicing cost: 86
Best yet: 233
New solution
function cost: 147
child voicing cost: 81
Best yet: 228
New solution
function cost: 147
child voicing cost: 80
Best yet: 227
New solution
function cost: 147
child voicing cost: 78
Best yet: 225
New solution
function cost: 147
child voicing cost: 77
Best yet: 224
New solution
function cost: 150
child voicing cost: 72
Best yet: 222
New solution
function cost: 150
child voicing cost: 71
Best yet: 221
New solution
function cost: 150
child voicing cost: 69
Best yet: 219
New solution
function cost: 150
child voicing cost: 66
Best yet: 216
New solution
function cost: 156
child voicing cost: 58
Best yet: 214
New solution
function cost: 150
child voicing cost: 61
Best yet: 211
New solution
function cost: 156
child voicing cost: 53
Best yet: 209

(0, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (73, 3)])

(9, "D7", Tuple{Int16,Int16}[(53, 1), (57, 3), (63, 7), (72, 5)])

(0, "Ts", Tuple{Int16,Int16}[(54, 1), (58, 3), (61, 5), (70, 3)])

(3, "T/3", Tuple{Int16,Int16}[(49, 3), (58, 1), (65, 5), (77, 5)])

(0, "S", Tuple{Int16,Int16}[(51, 1), (58, 5), (66, 3), (75, 1)])

(9, "S/3", Tuple{Int16,Int16}[(54, 3), (58, 5), (63, 1), (70, 5)])

(12, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(9, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(12, "S/3", Tuple{Int16,Int16}[(54, 3), (58, 5), (70, 5), (75, 1)])

(12, "T/5", Tuple{Int16,Int16}[(53, 5), (61, 3), (70, 1), (77, 5)])

(6, "S65", Tuple{Int16,Int16}[(51, 1), (60, 6), (70, 5), (78, 3)])

(15, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(3, "S/3", Tuple{Int16,Int16}[(54, 3), (63, 1), (70, 5), (75, 1)])

(9, "D7/3", Tuple{Int16,Int16}[(57, 3), (63, 7), (65, 1), (72, 5)])

(21, "T", Tuple{Int16,Int16}[(58, 1), (61, 3), (65, 5), (70, 1)])

(9, "T", Tuple{Int16,Int16}[(46, 1), (61, 3), (65, 5), (70, 1)])

(18, "D/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (72, 5)])

(12, "T", Tuple{Int16,Int16}[(46, 1), (61, 3), (65, 5), (70, 1)])

(6, "D7-1", Tuple{Int16,Int16}[(48, 5), (60, 5), (63, 7), (69, 3)])

(9, "T", Tuple{Int16,Int16}[(46, 1), (61, 3), (65, 5), (70, 1)])

(9, "S/3", Tuple{Int16,Int16}[(42, 3), (58, 5), (63, 1), (75, 1)])

(3, "T/5", Tuple{Int16,Int16}[(41, 5), (58, 1), (65, 5), (73, 3)])

(6, "S/3", Tuple{Int16,Int16}[(42, 3), (58, 5), (63, 1), (70, 5)])

(9, "D", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(0, "S/3", Tuple{Int16,Int16}[(42, 3), (58, 5), (63, 1), (75, 1)])

(3, "D7/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (75, 7)])

(3, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (73, 3)])

(15, "T/3", Tuple{Int16,Int16}[(49, 3), (58, 1), (65, 5), (77, 5)])

(3, "S", Tuple{Int16,Int16}[(51, 1), (58, 5), (66, 3), (75, 1)])

(24, "D", Tuple{Int16,Int16}[(53, 1), (57, 3), (65, 1), (72, 5)])

(24, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (73, 3)])

(24, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (73, 3)])

##: Done. Total checked: 125079, Pruned: 146793, completed: 19, time: 2.690000057220459, efficiency: 7.063196875777187
Results: bestval_func: 156, bestval_voices: 53
#Key: 11Scale: Minor
#Total time for optimisation of piece: 8.023000001907349
#Total cost of piece: 418
["T", "D7", "Ts", "T/3", "S", "S/3", "D", "D", "S/3", "T/5", "S65", "D", "S/3", "D7/3", "T", "T", "D/3", "T", "D7-1", "T", "S/3", "T/5", "S/3", "D", "S/3", "D7/3", "T", "T/3", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/M3-01-Jesu-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/M3-07-Weg-nn.csv
[0 0 0 1 0 0 1 0 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 1 0 0 1 0 0 0 0 1 0; 0 0 1 2 0 0 0 0 1 0 0 0; 0 0 0 2 0 1 0 0 0 0 1 0; 0 0 1 1 0 2 0 0 0 0 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 2 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 0 0 0 1 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 1 0 0 0 0 1; 0 0 1 0 0 1 1 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 0 0 0 2 0 1 0 0 1 0 0 0; 0 0 1 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 0 0 0 1 1 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 1 0 1 0; 1 0 0 2 0 1 0 0 0 0 0 0]
Key Counter is [2 1 12 29 0 27 6 9 8 0 31 1]
Key Score is [51; 104; 29; 118; 45; 81; 103; 30; 107; 28; 110; 76]
Position Counter for 4 is [29 0 27 6 9 8 0 31 1 2 1 12]
Any[[4.0, 89.5, 1.0]]
[4, 90, 1]
4 D# Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 159
child voicing cost: 103
Best yet: 262
New solution
function cost: 159
child voicing cost: 102
Best yet: 261
New solution
function cost: 156
child voicing cost: 104
Best yet: 260
New solution
function cost: 156
child voicing cost: 100
Best yet: 256
New solution
function cost: 165
child voicing cost: 90
Best yet: 255
New solution
function cost: 165
child voicing cost: 88
Best yet: 253
New solution
function cost: 165
child voicing cost: 87
Best yet: 252
New solution
function cost: 165
child voicing cost: 85
Best yet: 250
New solution
function cost: 147
child voicing cost: 102
Best yet: 249
New solution
function cost: 159
child voicing cost: 89
Best yet: 248
New solution
function cost: 159
child voicing cost: 86
Best yet: 245
New solution
function cost: 153
child voicing cost: 91
Best yet: 244
New solution
function cost: 153
child voicing cost: 90
Best yet: 243
New solution
function cost: 153
child voicing cost: 88
Best yet: 241
New solution
function cost: 135
child voicing cost: 105
Best yet: 240
New solution
function cost: 147
child voicing cost: 92
Best yet: 239
New solution
function cost: 147
child voicing cost: 89
Best yet: 236
##: Done. Total checked: 116123, Pruned: 138559, completed: 17, time: 2.5209999084472656, efficiency: 6.743356056078019
Results: bestval_func: 147, bestval_voices: 89
[0 0 0 1 0 0 1 0 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 0 0; 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 1 0 0 1 0 0 0 0 1 0; 0 0 1 2 0 0 0 0 1 0 0 0; 0 0 0 2 0 1 0 0 0 0 1 0; 0 0 1 1 0 2 0 0 0 0 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 0 0 1 0 0 1 0 0 0 2 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 0 0 0 1 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 1 0 0 0 0 1; 0 0 1 0 0 1 1 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 0 0 0 2 0 1 0 0 1 0 0 0; 0 0 1 1 0 1 0 0 1 0 0 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 0 0 0 1 1 0 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 0 0 2 0 0 1 0 1 0; 1 0 0 2 0 1 0 0 0 0 0 0]
Key Counter is [2 1 12 29 0 27 6 9 8 0 31 1]
Key Score is [51; 104; 29; 118; 45; 81; 103; 30; 107; 28; 110; 76]
Position Counter for 4 is [29 0 27 6 9 8 0 31 1 2 1 12]
Any[[4.0, 89.5, 1.0]]
[4, 90, 1]
4 D# Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 94
Best yet: 244
New solution
function cost: 150
child voicing cost: 91
Best yet: 241
New solution
function cost: 156
child voicing cost: 82
Best yet: 238
New solution
function cost: 138
child voicing cost: 99
Best yet: 237
New solution
function cost: 138
child voicing cost: 96
Best yet: 234
New solution
function cost: 138
child voicing cost: 93
Best yet: 231
New solution
function cost: 153
child voicing cost: 76
Best yet: 229
New solution
function cost: 144
child voicing cost: 83
Best yet: 227
New solution
function cost: 138
child voicing cost: 86
Best yet: 224
New solution
function cost: 138
child voicing cost: 83
Best yet: 221
New solution
function cost: 138
child voicing cost: 80
Best yet: 218

(3, "T", Tuple{Int16,Int16}[(51, 1), (51, 1), (58, 5), (67, 3)])

(0, "D7/3", Tuple{Int16,Int16}[(50, 3), (53, 5), (58, 1), (68, 7)])

(3, "Ts", Tuple{Int16,Int16}[(48, 1), (55, 5), (60, 1), (63, 3)])

(0, "D", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (65, 5)])

(6, "S/3", Tuple{Int16,Int16}[(48, 3), (56, 1), (63, 5), (68, 1)])

(9, "D/3", Tuple{Int16,Int16}[(50, 3), (53, 5), (65, 5), (70, 1)])

(24, "T", Tuple{Int16,Int16}[(51, 1), (55, 3), (63, 1), (70, 5)])

(12, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (63, 1), (67, 3)])

(3, "D54", Tuple{Int16,Int16}[(46, 1), (58, 1), (63, 4), (65, 5)])

(9, "D", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (65, 5)])

(21, "S/3", Tuple{Int16,Int16}[(48, 3), (56, 1), (63, 5), (68, 1)])

(6, "D", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(6, "D7-5", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (68, 7)])

(0, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (63, 1), (67, 3)])

(24, "D", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (65, 5)])

(24, "D", Tuple{Int16,Int16}[(46, 1), (50, 3), (58, 1), (65, 5)])

(18, "D7/7", Tuple{Int16,Int16}[(44, 7), (50, 3), (58, 1), (65, 5)])

(12, "T/3", Tuple{Int16,Int16}[(43, 3), (51, 1), (58, 5), (63, 1)])

(0, "D", Tuple{Int16,Int16}[(46, 1), (53, 5), (58, 1), (62, 3)])

(3, "D7-5", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (68, 7)])

(0, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (63, 1), (67, 3)])

(0, "T", Tuple{Int16,Int16}[(51, 1), (55, 3), (63, 1), (70, 5)])

(3, "D7-1", Tuple{Int16,Int16}[(53, 5), (56, 7), (62, 3), (68, 7)])

(9, "D7-1", Tuple{Int16,Int16}[(53, 5), (56, 7), (62, 3), (65, 5)])

(21, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (63, 1), (67, 3)])

(3, "D/3", Tuple{Int16,Int16}[(50, 3), (58, 1), (65, 5), (70, 1)])

(12, "D", Tuple{Int16,Int16}[(46, 1), (62, 3), (65, 5), (70, 1)])

(21, "S/3", Tuple{Int16,Int16}[(48, 3), (56, 1), (63, 5), (68, 1)])

(3, "D64", Tuple{Int16,Int16}[(46, 1), (58, 1), (63, 4), (67, 6)])

(18, "D", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (65, 5)])

(0, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (63, 1), (67, 3)])

(0, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (63, 1), (67, 3)])

##: Done. Total checked: 56625, Pruned: 71400, completed: 11, time: 1.3970000743865967, efficiency: 7.8740153287607715
Results: bestval_func: 138, bestval_voices: 80
#Key: 4Scale: Major
#Total time for optimisation of piece: 5.289999961853027
#Total cost of piece: 454
["T", "D7/3", "Ts", "D", "S/3", "D/3", "T", "T", "D54", "D", "S/3", "D", "D7-5", "T", "D", "D", "D7/7", "T/3", "D", "D7-5", "T", "T", "D7-1", "D7-1", "T", "D/3", "D", "S/3", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/M3-07-Weg-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/M3-11-Weich-nn.csv
[0 1 0 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 1 0 0 1 0 0 1; 0 0 0 0 0 0 2 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 1 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 1 0 0; 2 0 1 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 3 0; 0 0 0 0 0 2 1 0 0 1 0 0; 0 0 0 0 0 2 0 0 0 0 2 0; 1 0 0 1 0 0 0 0 0 1 1 0; 0 0 0 0 0 1 0 0 0 0 3 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 1 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 1 0 1 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 0 1 0 0 0 2 0]
Key Counter is [8 3 7 22 0 28 9 5 7 3 38 1]
Key Score is [52; 115; 28; 115; 45; 89; 108; 33; 111; 30; 111; 80]
Position Counter for 2 is [3 7 22 0 28 9 5 7 3 38 1 8]
Position Counter for 4 is [22 0 28 9 5 7 3 38 1 8 3 7]
Any[[2.0, 97.0, 0.0], [4.0, 84.25, 1.0]]
[2, 97, 0]
11 A# Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 168
child voicing cost: 107
Best yet: 275
New solution
function cost: 168
child voicing cost: 106
Best yet: 274
New solution
function cost: 168
child voicing cost: 104
Best yet: 272
New solution
function cost: 168
child voicing cost: 101
Best yet: 269
New solution
function cost: 165
child voicing cost: 102
Best yet: 267
New solution
function cost: 165
child voicing cost: 99
Best yet: 264
New solution
function cost: 159
child voicing cost: 103
Best yet: 262
New solution
function cost: 159
child voicing cost: 100
Best yet: 259
New solution
function cost: 165
child voicing cost: 90
Best yet: 255
New solution
function cost: 165
child voicing cost: 89
Best yet: 254
New solution
function cost: 156
child voicing cost: 90
Best yet: 246
New solution
function cost: 156
child voicing cost: 88
Best yet: 244
New solution
function cost: 159
child voicing cost: 71
Best yet: 230
New solution
function cost: 147
child voicing cost: 78
Best yet: 225
New solution
function cost: 141
child voicing cost: 80
Best yet: 221
New solution
function cost: 141
child voicing cost: 78
Best yet: 219
New solution
function cost: 141
child voicing cost: 76
Best yet: 217
New solution
function cost: 141
child voicing cost: 75
Best yet: 216
New solution
function cost: 129
child voicing cost: 86
Best yet: 215
New solution
function cost: 129
child voicing cost: 85
Best yet: 214
New solution
function cost: 129
child voicing cost: 83
Best yet: 212
New solution
function cost: 129
child voicing cost: 81
Best yet: 210
New solution
function cost: 129
child voicing cost: 80
Best yet: 209
##: Done. Total checked: 198185, Pruned: 229788, completed: 23, time: 3.930999994277954, efficiency: 5.850928525433549
Results: bestval_func: 129, bestval_voices: 80
[0 1 0 0 0 1 0 0 0 0 2 0; 0 0 1 0 0 1 0 0 1 0 0 1; 0 0 0 0 0 0 2 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 1 0 0 0 1 0; 0 0 0 1 0 1 0 0 1 0 1 0; 0 0 0 1 0 2 0 0 1 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 0 1 2 0 0 0 0 0 0 1 0; 0 0 0 2 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 1 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 0 0 0 1 1 0 0; 2 0 1 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 3 0; 0 0 0 0 0 2 1 0 0 1 0 0; 0 0 0 0 0 2 0 0 0 0 2 0; 1 0 0 1 0 0 0 0 0 1 1 0; 0 0 0 0 0 1 0 0 0 0 3 0; 0 0 0 1 0 2 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 1 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 2 0 0 1 0 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 1 0 1 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 0 1 1 0 0 0 1 0; 0 1 0 0 0 0 1 0 0 0 2 0]
Key Counter is [8 3 7 22 0 28 9 5 7 3 38 1]
Key Score is [52; 115; 28; 115; 45; 89; 108; 33; 111; 30; 111; 80]
Position Counter for 2 is [3 7 22 0 28 9 5 7 3 38 1 8]
Position Counter for 4 is [22 0 28 9 5 7 3 38 1 8 3 7]
Any[[2.0, 97.0, 0.0], [4.0, 84.25, 1.0]]
[2, 97, 0]
11 A# Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 183
child voicing cost: 66
Best yet: 249
New solution
function cost: 171
child voicing cost: 74
Best yet: 245
New solution
function cost: 177
child voicing cost: 66
Best yet: 243
New solution
function cost: 162
child voicing cost: 79
Best yet: 241
New solution
function cost: 168
child voicing cost: 71
Best yet: 239
New solution
function cost: 162
child voicing cost: 74
Best yet: 236
New solution
function cost: 168
child voicing cost: 66
Best yet: 234
New solution
function cost: 147
child voicing cost: 86
Best yet: 233
New solution
function cost: 147
child voicing cost: 81
Best yet: 228
New solution
function cost: 147
child voicing cost: 80
Best yet: 227
New solution
function cost: 147
child voicing cost: 78
Best yet: 225
New solution
function cost: 147
child voicing cost: 77
Best yet: 224
New solution
function cost: 150
child voicing cost: 72
Best yet: 222
New solution
function cost: 150
child voicing cost: 71
Best yet: 221
New solution
function cost: 150
child voicing cost: 69
Best yet: 219
New solution
function cost: 150
child voicing cost: 66
Best yet: 216
New solution
function cost: 156
child voicing cost: 58
Best yet: 214
New solution
function cost: 150
child voicing cost: 61
Best yet: 211
New solution
function cost: 156
child voicing cost: 53
Best yet: 209

(0, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (73, 3)])

(9, "D7", Tuple{Int16,Int16}[(53, 1), (57, 3), (63, 7), (72, 5)])

(0, "Ts", Tuple{Int16,Int16}[(54, 1), (58, 3), (61, 5), (70, 3)])

(3, "T/3", Tuple{Int16,Int16}[(49, 3), (58, 1), (65, 5), (77, 5)])

(0, "S", Tuple{Int16,Int16}[(51, 1), (58, 5), (66, 3), (75, 1)])

(9, "S/3", Tuple{Int16,Int16}[(54, 3), (58, 5), (63, 1), (70, 5)])

(12, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(9, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(12, "S/3", Tuple{Int16,Int16}[(54, 3), (58, 5), (70, 5), (75, 1)])

(12, "T/5", Tuple{Int16,Int16}[(53, 5), (61, 3), (70, 1), (77, 5)])

(6, "S65", Tuple{Int16,Int16}[(51, 1), (60, 6), (70, 5), (78, 3)])

(15, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(3, "S/3", Tuple{Int16,Int16}[(54, 3), (63, 1), (70, 5), (75, 1)])

(9, "D7/3", Tuple{Int16,Int16}[(57, 3), (63, 7), (65, 1), (72, 5)])

(21, "T", Tuple{Int16,Int16}[(58, 1), (61, 3), (65, 5), (70, 1)])

(9, "T", Tuple{Int16,Int16}[(46, 1), (61, 3), (65, 5), (70, 1)])

(18, "D/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (72, 5)])

(12, "T", Tuple{Int16,Int16}[(46, 1), (61, 3), (65, 5), (70, 1)])

(6, "D7-1", Tuple{Int16,Int16}[(48, 5), (60, 5), (63, 7), (69, 3)])

(9, "T", Tuple{Int16,Int16}[(46, 1), (61, 3), (65, 5), (70, 1)])

(9, "S/3", Tuple{Int16,Int16}[(42, 3), (58, 5), (63, 1), (75, 1)])

(3, "T/5", Tuple{Int16,Int16}[(41, 5), (58, 1), (65, 5), (73, 3)])

(6, "S/3", Tuple{Int16,Int16}[(42, 3), (58, 5), (63, 1), (70, 5)])

(9, "D", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(0, "S/3", Tuple{Int16,Int16}[(42, 3), (58, 5), (63, 1), (75, 1)])

(3, "D7/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (75, 7)])

(3, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (73, 3)])

(15, "T/3", Tuple{Int16,Int16}[(49, 3), (58, 1), (65, 5), (77, 5)])

(3, "S", Tuple{Int16,Int16}[(51, 1), (58, 5), (66, 3), (75, 1)])

(24, "D", Tuple{Int16,Int16}[(53, 1), (57, 3), (65, 1), (72, 5)])

(24, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (73, 3)])

(24, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (73, 3)])

##: Done. Total checked: 125079, Pruned: 146793, completed: 19, time: 2.700000047683716, efficiency: 7.037036912758493
Results: bestval_func: 156, bestval_voices: 53
#Key: 11Scale: Minor
#Total time for optimisation of piece: 7.92900013923645
#Total cost of piece: 418
["T", "D7", "Ts", "T/3", "S", "S/3", "D", "D", "S/3", "T/5", "S65", "D", "S/3", "D7/3", "T", "T", "D/3", "T", "D7-1", "T", "S/3", "T/5", "S/3", "D", "S/3", "D7/3", "T", "T/3", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/M3-11-Weich-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/MBM-03-kyrie-nn.csv
[0 0 0 0 0 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 0 1 1 0 1 1; 0 1 0 0 1 0 0 1 0 0 1 0; 1 1 0 0 1 0 0 1 0 0 0 0; 2 0 0 1 1 0 0 0 0 0 0 0; 0 0 0 1 1 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 1 1 0 0; 0 1 0 0 0 1 0 0 0 1 1 0; 0 0 0 0 0 1 1 0 0 0 2 0; 0 0 0 0 0 0 1 0 1 1 1 0; 1 1 0 1 0 1 0 0 0 0 0 0; 1 1 0 0 0 1 1 0 0 0 0 0; 1 1 0 1 0 1 0 0 0 0 0 0; 0 0 0 1 0 1 0 0 0 0 1 1; 0 0 2 0 0 0 0 0 0 0 1 1; 0 0 2 0 0 0 0 1 0 0 1 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 1 0 1 1 0 0 0 0 1 0; 0 0 0 0 1 0 0 1 0 1 1 0; 0 0 0 0 1 0 0 1 0 1 1 0; 0 0 1 0 1 1 0 1 0 0 0 0; 0 0 2 0 0 1 0 1 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 0 0 1 0 1 1 0 0 0 1 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0]
Key Counter is [10 7 14 6 11 13 5 16 5 9 18 3]
Key Score is [76; 64; 65; 82; 46; 91; 57; 68; 75; 54; 86; 55]
Position Counter for 6 is [13 5 16 5 9 18 3 10 7 14 6 11]
Any[[6.0, 61.75, 1.0]]
[6, 62, 1]
6 F Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 165
child voicing cost: 85
Best yet: 250
New solution
function cost: 168
child voicing cost: 81
Best yet: 249
New solution
function cost: 168
child voicing cost: 78
Best yet: 246
New solution
function cost: 165
child voicing cost: 79
Best yet: 244
New solution
function cost: 165
child voicing cost: 76
Best yet: 241
New solution
function cost: 171
child voicing cost: 68
Best yet: 239
New solution
function cost: 168
child voicing cost: 70
Best yet: 238
New solution
function cost: 168
child voicing cost: 67
Best yet: 235
New solution
function cost: 162
child voicing cost: 70
Best yet: 232
##: Done. Total checked: 81043, Pruned: 96087, completed: 9, time: 1.7649998664855957, efficiency: 5.099150527371131
Results: bestval_func: 162, bestval_voices: 70
[0 0 0 0 0 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 0 1 1 0 1 1; 0 1 0 0 1 0 0 1 0 0 1 0; 1 1 0 0 1 0 0 1 0 0 0 0; 2 0 0 1 1 0 0 0 0 0 0 0; 0 0 0 1 1 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 1 1 0 0; 0 1 0 0 0 1 0 0 0 1 1 0; 0 0 0 0 0 1 1 0 0 0 2 0; 0 0 0 0 0 0 1 0 1 1 1 0; 1 1 0 1 0 1 0 0 0 0 0 0; 1 1 0 0 0 1 1 0 0 0 0 0; 1 1 0 1 0 1 0 0 0 0 0 0; 0 0 0 1 0 1 0 0 0 0 1 1; 0 0 2 0 0 0 0 0 0 0 1 1; 0 0 2 0 0 0 0 1 0 0 1 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 1 0 0 0 0 1 0 0 2 0; 0 0 1 0 1 1 0 0 0 0 1 0; 0 0 0 0 1 0 0 1 0 1 1 0; 0 0 0 0 1 0 0 1 0 1 1 0; 0 0 1 0 1 1 0 1 0 0 0 0; 0 0 2 0 0 1 0 1 0 0 0 0; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 0 0 1 0 1 1 0 0 0 1 0 0; 0 0 1 0 0 1 0 1 0 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0]
Key Counter is [10 7 14 6 11 13 5 16 5 9 18 3]
Key Score is [76; 64; 65; 82; 46; 91; 57; 68; 75; 54; 86; 55]
Position Counter for 6 is [13 5 16 5 9 18 3 10 7 14 6 11]
Any[[6.0, 61.75, 1.0]]
[6, 62, 1]
6 F Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 198
child voicing cost: 79
Best yet: 277
New solution
function cost: 198
child voicing cost: 76
Best yet: 274
New solution
function cost: 177
child voicing cost: 91
Best yet: 268
New solution
function cost: 177
child voicing cost: 88
Best yet: 265
New solution
function cost: 177
child voicing cost: 85
Best yet: 262
New solution
function cost: 171
child voicing cost: 84
Best yet: 255
New solution
function cost: 171
child voicing cost: 81
Best yet: 252
New solution
function cost: 171
child voicing cost: 78
Best yet: 249
New solution
function cost: 171
child voicing cost: 76
Best yet: 247
New solution
function cost: 171
child voicing cost: 73
Best yet: 244
New solution
function cost: 165
child voicing cost: 78
Best yet: 243
New solution
function cost: 165
child voicing cost: 75
Best yet: 240
New solution
function cost: 159
child voicing cost: 77
Best yet: 236
New solution
function cost: 159
child voicing cost: 74
Best yet: 233
New solution
function cost: 159
child voicing cost: 71
Best yet: 230
New solution
function cost: 159
child voicing cost: 69
Best yet: 228

(6, "T", Tuple{Int16,Int16}[(53, 1), (53, 1), (57, 3), (60, 5)])

(0, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (58, 1), (62, 3)])

(3, "T/3", Tuple{Int16,Int16}[(45, 3), (53, 1), (60, 5), (65, 1)])

(3, "D/5", Tuple{Int16,Int16}[(43, 5), (52, 3), (60, 1), (67, 5)])

(0, "T", Tuple{Int16,Int16}[(41, 1), (53, 1), (60, 5), (69, 3)])

(15, "D7/3", Tuple{Int16,Int16}[(40, 3), (55, 5), (58, 7), (60, 1)])

(15, "T", Tuple{Int16,Int16}[(41, 1), (53, 1), (57, 3), (60, 5)])

(21, "T", Tuple{Int16,Int16}[(41, 1), (48, 5), (57, 3), (65, 1)])

(18, "D7/3", Tuple{Int16,Int16}[(40, 3), (48, 1), (58, 7), (67, 5)])

(24, "T", Tuple{Int16,Int16}[(41, 1), (48, 5), (57, 3), (65, 1)])

(6, "Tm", Tuple{Int16,Int16}[(45, 1), (48, 3), (60, 3), (64, 5)])

(6, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (58, 1), (62, 3)])

(12, "D7/3", Tuple{Int16,Int16}[(40, 3), (55, 5), (60, 1), (70, 7)])

(18, "T", Tuple{Int16,Int16}[(41, 1), (53, 1), (60, 5), (69, 3)])

(12, "D", Tuple{Int16,Int16}[(48, 1), (52, 3), (60, 1), (67, 5)])

(9, "D", Tuple{Int16,Int16}[(48, 1), (52, 3), (55, 5), (60, 1)])

(18, "D7/7", Tuple{Int16,Int16}[(46, 7), (52, 3), (55, 5), (60, 1)])

(15, "T/3", Tuple{Int16,Int16}[(45, 3), (53, 1), (60, 5), (72, 5)])

(12, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(21, "T/5", Tuple{Int16,Int16}[(48, 5), (53, 1), (60, 5), (69, 3)])

(6, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(6, "S", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (65, 5)])

(0, "Ss", Tuple{Int16,Int16}[(43, 1), (58, 3), (62, 5), (67, 1)])

(12, "T", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(3, "D7-1", Tuple{Int16,Int16}[(43, 5), (58, 7), (64, 3), (67, 5)])

(3, "D7-1", Tuple{Int16,Int16}[(43, 5), (58, 7), (64, 3), (70, 7)])

(9, "Ts", Tuple{Int16,Int16}[(50, 1), (53, 3), (65, 3), (69, 5)])

(18, "S/3", Tuple{Int16,Int16}[(50, 3), (53, 5), (65, 5), (70, 1)])

(0, "D", Tuple{Int16,Int16}[(48, 1), (55, 5), (64, 3), (72, 1)])

(15, "D", Tuple{Int16,Int16}[(48, 1), (60, 1), (64, 3), (67, 5)])

(9, "T", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(9, "T", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

##: Done. Total checked: 79650, Pruned: 89681, completed: 16, time: 1.751000165939331, efficiency: 9.137634770820673
Results: bestval_func: 159, bestval_voices: 69
#Key: 6Scale: Major
#Total time for optimisation of piece: 5.161999940872192
#Total cost of piece: 460
["T", "S", "T/3", "D/5", "T", "D7/3", "T", "T", "D7/3", "T", "Tm", "S", "D7/3", "T", "D", "D", "D7/7", "T/3", "S", "T/5", "S", "S", "Ss", "T", "D7-1", "D7-1", "Ts", "S/3", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/MBM-03-kyrie-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/MBM-06-grati-nn.csv
[0 0 0 0 1 0 0 0 0 0 0 0; 0 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 0 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 0 0 0; 0 0 2 0 0 0 0 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 0 0 2 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 2 1 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 1 0 0 0 0 0 1 0 0 2; 0 1 1 0 1 0 0 1 0 0 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 0 0 1 0 1 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 1 0 1 0 0 0 1 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 2 0 1 0 0 0 0 0 0 1; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 1 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 0 0 0 2 0 1; 0 0 0 0 0 0 1 0 0 3 0 0; 0 0 1 0 0 0 0 0 0 3 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 1 0 1 0 0 0 0 1 0 0 0 1]
Key Counter is [1 9 26 0 14 0 16 5 5 28 0 17]
Key Score is [91; 31; 115; 37; 89; 74; 47; 107; 20; 115; 60; 61]
Position Counter for 3 is [26 0 14 0 16 5 5 28 0 17 1 9]
Position Counter for 10 is [28 0 17 1 9 26 0 14 0 16 5 5]
Any[[3.0, 79.75, 1.0], [10.0, 83.5, 1.0]]
[10, 84, 1]
10 A Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 126
Best yet: 276
New solution
function cost: 150
child voicing cost: 123
Best yet: 273
New solution
function cost: 150
child voicing cost: 114
Best yet: 264
New solution
function cost: 150
child voicing cost: 109
Best yet: 259
New solution
function cost: 138
child voicing cost: 120
Best yet: 258
New solution
function cost: 135
child voicing cost: 120
Best yet: 255
New solution
function cost: 150
child voicing cost: 98
Best yet: 248
New solution
function cost: 150
child voicing cost: 95
Best yet: 245
New solution
function cost: 150
child voicing cost: 92
Best yet: 242
New solution
function cost: 138
child voicing cost: 103
Best yet: 241
New solution
function cost: 129
child voicing cost: 109
Best yet: 238
New solution
function cost: 129
child voicing cost: 107
Best yet: 236
New solution
function cost: 129
child voicing cost: 106
Best yet: 235
New solution
function cost: 129
child voicing cost: 105
Best yet: 234
New solution
function cost: 129
child voicing cost: 104
Best yet: 233
New solution
function cost: 126
child voicing cost: 106
Best yet: 232
New solution
function cost: 126
child voicing cost: 104
Best yet: 230
New solution
function cost: 132
child voicing cost: 97
Best yet: 229
New solution
function cost: 132
child voicing cost: 95
Best yet: 227
New solution
function cost: 132
child voicing cost: 94
Best yet: 226
New solution
function cost: 132
child voicing cost: 93
Best yet: 225
New solution
function cost: 138
child voicing cost: 86
Best yet: 224
New solution
function cost: 138
child voicing cost: 84
Best yet: 222
New solution
function cost: 138
child voicing cost: 82
Best yet: 220
New solution
function cost: 138
child voicing cost: 78
Best yet: 216
New solution
function cost: 138
child voicing cost: 77
Best yet: 215
New solution
function cost: 123
child voicing cost: 91
Best yet: 214
New solution
function cost: 129
child voicing cost: 83
Best yet: 212
New solution
function cost: 114
child voicing cost: 97
Best yet: 211
New solution
function cost: 114
child voicing cost: 96
Best yet: 210
New solution
function cost: 114
child voicing cost: 95
Best yet: 209
New solution
function cost: 117
child voicing cost: 91
Best yet: 208
New solution
function cost: 117
child voicing cost: 90
Best yet: 207
New solution
function cost: 123
child voicing cost: 83
Best yet: 206
New solution
function cost: 129
child voicing cost: 76
Best yet: 205
New solution
function cost: 117
child voicing cost: 87
Best yet: 204
New solution
function cost: 117
child voicing cost: 85
Best yet: 202
New solution
function cost: 117
child voicing cost: 84
Best yet: 201
New solution
function cost: 117
child voicing cost: 83
Best yet: 200
New solution
function cost: 108
child voicing cost: 90
Best yet: 198
New solution
function cost: 108
child voicing cost: 89
Best yet: 197
New solution
function cost: 108
child voicing cost: 88
Best yet: 196
New solution
function cost: 111
child voicing cost: 84
Best yet: 195
New solution
function cost: 111
child voicing cost: 83
Best yet: 194
New solution
function cost: 117
child voicing cost: 76
Best yet: 193
New solution
function cost: 123
child voicing cost: 69
Best yet: 192
New solution
function cost: 111
child voicing cost: 80
Best yet: 191
New solution
function cost: 111
child voicing cost: 78
Best yet: 189
New solution
function cost: 111
child voicing cost: 77
Best yet: 188
New solution
function cost: 111
child voicing cost: 76
Best yet: 187
##: Done. Total checked: 234039, Pruned: 268203, completed: 50, time: 5.059000015258789, efficiency: 9.883376131486786
Results: bestval_func: 111, bestval_voices: 76
[0 0 0 0 1 0 0 0 0 0 0 0; 0 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 0 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 0 0 0; 0 0 2 0 0 0 0 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 0 0 2 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 2 1 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 1 0 0 0 0 0 1 0 0 2; 0 1 1 0 1 0 0 1 0 0 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 0 0 1 0 1 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 1 0 1 0 0 0 1 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 2 0 1 0 0 0 0 0 0 1; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 1 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 0 0 0 2 0 1; 0 0 0 0 0 0 1 0 0 3 0 0; 0 0 1 0 0 0 0 0 0 3 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 1 0 1 0 0 0 0 1 0 0 0 1]
Key Counter is [1 9 26 0 14 0 16 5 5 28 0 17]
Key Score is [91; 31; 115; 37; 89; 74; 47; 107; 20; 115; 60; 61]
Position Counter for 3 is [26 0 14 0 16 5 5 28 0 17 1 9]
Position Counter for 10 is [28 0 17 1 9 26 0 14 0 16 5 5]
Any[[3.0, 79.75, 1.0], [10.0, 83.5, 1.0]]
[10, 84, 1]
10 A Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 207
child voicing cost: 82
Best yet: 289
New solution
function cost: 204
child voicing cost: 76
Best yet: 280
New solution
function cost: 204
child voicing cost: 73
Best yet: 277
New solution
function cost: 195
child voicing cost: 81
Best yet: 276
New solution
function cost: 195
child voicing cost: 78
Best yet: 273
New solution
function cost: 195
child voicing cost: 76
Best yet: 271
New solution
function cost: 195
child voicing cost: 74
Best yet: 269
New solution
function cost: 195
child voicing cost: 69
Best yet: 264
New solution
function cost: 195
child voicing cost: 66
Best yet: 261
New solution
function cost: 186
child voicing cost: 74
Best yet: 260
New solution
function cost: 186
child voicing cost: 71
Best yet: 257
New solution
function cost: 186
child voicing cost: 68
Best yet: 254
New solution
function cost: 180
child voicing cost: 72
Best yet: 252
New solution
function cost: 180
child voicing cost: 69
Best yet: 249
New solution
function cost: 165
child voicing cost: 81
Best yet: 246
New solution
function cost: 165
child voicing cost: 78
Best yet: 243
New solution
function cost: 165
child voicing cost: 76
Best yet: 241
New solution
function cost: 165
child voicing cost: 70
Best yet: 235
New solution
function cost: 165
child voicing cost: 67
Best yet: 232

(0, "T", Tuple{Int16,Int16}[(57, 1), (57, 1), (61, 3), (64, 5)])

(0, "Ts", Tuple{Int16,Int16}[(54, 1), (57, 3), (61, 5), (66, 1)])

(3, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (68, 3)])

(0, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (69, 1)])

(0, "S", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(3, "D7-1", Tuple{Int16,Int16}[(47, 5), (59, 5), (62, 7), (68, 3)])

(0, "T", Tuple{Int16,Int16}[(45, 1), (61, 3), (64, 5), (69, 1)])

(21, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(12, "D7/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (64, 1), (74, 7)])

(18, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(15, "S65/6", Tuple{Int16,Int16}[(47, 6), (57, 5), (62, 1), (66, 3)])

(0, "D7-1", Tuple{Int16,Int16}[(47, 5), (59, 5), (62, 7), (68, 3)])

(12, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (69, 1)])

(0, "S/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (62, 1), (62, 1)])

(12, "D", Tuple{Int16,Int16}[(52, 1), (56, 3), (59, 5), (64, 1)])

(15, "D", Tuple{Int16,Int16}[(40, 1), (56, 3), (59, 5), (64, 1)])

(9, "S/3", Tuple{Int16,Int16}[(42, 3), (50, 1), (57, 5), (62, 1)])

(6, "T/5", Tuple{Int16,Int16}[(40, 5), (49, 3), (57, 1), (64, 5)])

(6, "S/3", Tuple{Int16,Int16}[(42, 3), (50, 1), (57, 5), (69, 5)])

(3, "Ts", Tuple{Int16,Int16}[(42, 1), (49, 5), (57, 3), (66, 1)])

(0, "D/3", Tuple{Int16,Int16}[(44, 3), (47, 5), (59, 5), (64, 1)])

(15, "T", Tuple{Int16,Int16}[(45, 1), (49, 3), (57, 1), (64, 5)])

(0, "Ss", Tuple{Int16,Int16}[(47, 1), (50, 3), (54, 5), (62, 3)])

(12, "D7-1", Tuple{Int16,Int16}[(47, 5), (50, 7), (59, 5), (68, 3)])

(12, "T/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (69, 1)])

(6, "D7/5", Tuple{Int16,Int16}[(47, 5), (52, 1), (56, 3), (62, 7)])

(12, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(18, "S/3", Tuple{Int16,Int16}[(42, 3), (50, 1), (57, 5), (62, 1)])

(30, "D", Tuple{Int16,Int16}[(40, 1), (56, 3), (59, 5), (64, 1)])

(24, "D7", Tuple{Int16,Int16}[(40, 1), (56, 3), (59, 5), (62, 7)])

(3, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(3, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

##: Done. Total checked: 107341, Pruned: 124519, completed: 19, time: 2.309999942779541, efficiency: 8.225108428850424
Results: bestval_func: 165, bestval_voices: 67
#Key: 10Scale: Major
#Total time for optimisation of piece: 8.714999914169312
#Total cost of piece: 419
["T", "Ts", "D", "T/3", "S", "D7-1", "T", "T", "D7/3", "T", "S65/6", "D7-1", "T/3", "S/3", "D", "D", "S/3", "T/5", "S/3", "Ts", "D/3", "T", "Ss", "D7-1", "T/3", "D7/5", "T", "S/3", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/MBM-06-grati-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/MBM-08-quitl-nn.csv
[0 0 1 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 0 2 0 0 1 0 0; 0 0 0 0 0 0 2 0 0 2 0 0; 0 0 0 0 0 0 2 1 0 1 0 0; 0 0 0 0 0 0 2 2 0 0 0 0; 0 0 0 0 0 0 1 1 0 0 0 2; 0 0 0 0 1 0 1 1 0 0 0 1; 0 1 1 0 0 0 0 1 0 0 0 1; 0 1 1 0 1 0 0 1 0 0 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 1 0 0 0 0 0 0 1 0 1; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 1 0 1; 0 0 1 0 1 0 0 0 0 1 0 1; 0 1 2 0 1 0 0 0 0 0 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 2 0 1 0 0 0 0 0 0 0; 0 0 2 0 0 0 0 0 0 0 0 2; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1]
Key Counter is [1 8 28 0 20 0 15 10 0 18 0 18]
Key Score is [95; 24; 117; 39; 79; 77; 41; 110; 19; 107; 57; 61]
Position Counter for 3 is [28 0 20 0 15 10 0 18 0 18 1 8]
Any[[3.0, 77.25, 1.0]]
[3, 77, 1]
3 D Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 198
child voicing cost: 90
Best yet: 288
New solution
function cost: 198
child voicing cost: 89
Best yet: 287
New solution
function cost: 192
child voicing cost: 89
Best yet: 281
New solution
function cost: 192
child voicing cost: 85
Best yet: 277
New solution
function cost: 192
child voicing cost: 83
Best yet: 275
New solution
function cost: 192
child voicing cost: 80
Best yet: 272
New solution
function cost: 192
child voicing cost: 77
Best yet: 269
New solution
function cost: 180
child voicing cost: 87
Best yet: 267
New solution
function cost: 177
child voicing cost: 84
Best yet: 261
New solution
function cost: 177
child voicing cost: 79
Best yet: 256
##: Done. Total checked: 81895, Pruned: 98087, completed: 10, time: 1.7720000743865967, efficiency: 5.643340620886624
Results: bestval_func: 177, bestval_voices: 79
[0 0 1 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 0 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 0 0 2 0 0 1 0 0; 0 0 0 0 0 0 2 0 0 2 0 0; 0 0 0 0 0 0 2 1 0 1 0 0; 0 0 0 0 0 0 2 2 0 0 0 0; 0 0 0 0 0 0 1 1 0 0 0 2; 0 0 0 0 1 0 1 1 0 0 0 1; 0 1 1 0 0 0 0 1 0 0 0 1; 0 1 1 0 1 0 0 1 0 0 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 1 0 0 0 0 0 0 1 0 1; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 1 0 1; 0 0 1 0 1 0 0 0 0 1 0 1; 0 1 2 0 1 0 0 0 0 0 0 0; 0 1 1 0 1 0 0 0 0 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 2 0 1 0 0 0 0 0 0 0; 0 0 2 0 0 0 0 0 0 0 0 2; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 2 0 1 0 0 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1]
Key Counter is [1 8 28 0 20 0 15 10 0 18 0 18]
Key Score is [95; 24; 117; 39; 79; 77; 41; 110; 19; 107; 57; 61]
Position Counter for 3 is [28 0 20 0 15 10 0 18 0 18 1 8]
Any[[3.0, 77.25, 1.0]]
[3, 77, 1]
3 D Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 207
child voicing cost: 97
Best yet: 304
New solution
function cost: 171
child voicing cost: 84
Best yet: 255
New solution
function cost: 183
child voicing cost: 65
Best yet: 248

(0, "T", Tuple{Int16,Int16}[(50, 1), (50, 1), (57, 5), (66, 3)])

(0, "Ts", Tuple{Int16,Int16}[(47, 1), (50, 3), (59, 1), (66, 5)])

(6, "D", Tuple{Int16,Int16}[(45, 1), (52, 5), (61, 3), (69, 1)])

(0, "S/3", Tuple{Int16,Int16}[(47, 3), (50, 5), (62, 5), (67, 1)])

(0, "D7/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (67, 7)])

(18, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(21, "D", Tuple{Int16,Int16}[(45, 1), (57, 1), (61, 3), (64, 5)])

(27, "D", Tuple{Int16,Int16}[(45, 1), (49, 3), (57, 1), (64, 5)])

(24, "T/3", Tuple{Int16,Int16}[(42, 3), (50, 1), (57, 5), (69, 5)])

(12, "S", Tuple{Int16,Int16}[(43, 1), (50, 5), (59, 3), (67, 1)])

(9, "S/3", Tuple{Int16,Int16}[(47, 3), (50, 5), (62, 5), (67, 1)])

(6, "Ts", Tuple{Int16,Int16}[(47, 1), (50, 3), (62, 3), (66, 5)])

(6, "S65", Tuple{Int16,Int16}[(43, 1), (52, 6), (62, 5), (71, 3)])

(15, "D", Tuple{Int16,Int16}[(45, 1), (52, 5), (61, 3), (69, 1)])

(18, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(15, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(9, "D/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (64, 5)])

(12, "S/3", Tuple{Int16,Int16}[(47, 3), (50, 5), (55, 1), (67, 1)])

(21, "D/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (64, 5)])

(9, "Ts", Tuple{Int16,Int16}[(47, 1), (54, 5), (59, 1), (62, 3)])

(6, "D/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (69, 1)])

(18, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(0, "Ts", Tuple{Int16,Int16}[(47, 1), (54, 5), (62, 3), (71, 1)])

(9, "D/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (64, 5)])

(15, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(6, "D7/5", Tuple{Int16,Int16}[(52, 5), (55, 7), (57, 1), (61, 3)])

(12, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(24, "S/3", Tuple{Int16,Int16}[(47, 3), (55, 1), (62, 5), (67, 1)])

(0, "D64", Tuple{Int16,Int16}[(45, 1), (57, 1), (62, 4), (66, 6)])

(15, "D", Tuple{Int16,Int16}[(45, 1), (57, 1), (61, 3), (64, 5)])

(12, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(12, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

##: Done. Total checked: 66090, Pruned: 74948, completed: 3, time: 1.4300000667572021, efficiency: 2.0979019999649875
Results: bestval_func: 183, bestval_voices: 65
#Key: 3Scale: Major
#Total time for optimisation of piece: 4.563999891281128
#Total cost of piece: 504
["T", "Ts", "D", "S/3", "D7/3", "T", "D", "D", "T/3", "S", "S/3", "Ts", "S65", "D", "T", "T", "D/3", "S/3", "D/3", "Ts", "D/3", "T", "Ts", "D/3", "T", "D7/5", "T", "S/3", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/MBM-08-quitl-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/MBM-13-patrm-nn.csv
[0 1 0 0 1 0 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 0 1 0 0 0 1 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 1 0 0; 0 0 0 0 0 0 3 0 0 1 0 0; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 0 3 0 0 0 0 0 0 1; 0 0 0 0 3 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 1 0 0 0 0 0 0 1 0 2; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 1 0 2 0 0 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 0 0 2; 0 2 1 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 2 0 0 0 0 0; 0 0 2 0 1 0 0 0 0 0 0 1]
Key Counter is [0 14 15 0 30 0 13 0 7 32 0 13]
Key Score is [90; 34; 117; 22; 109; 77; 47; 103; 21; 124; 47; 77]
Position Counter for 10 is [32 0 13 0 14 15 0 30 0 13 0 7]
Any[[10.0, 94.0, 1.0]]
[10, 94, 1]
10 A Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 115
Best yet: 289
New solution
function cost: 174
child voicing cost: 114
Best yet: 288
New solution
function cost: 174
child voicing cost: 112
Best yet: 286
New solution
function cost: 171
child voicing cost: 114
Best yet: 285
New solution
function cost: 171
child voicing cost: 112
Best yet: 283
New solution
function cost: 174
child voicing cost: 108
Best yet: 282
New solution
function cost: 174
child voicing cost: 103
Best yet: 277
New solution
function cost: 186
child voicing cost: 89
Best yet: 275
New solution
function cost: 177
child voicing cost: 96
Best yet: 273
New solution
function cost: 177
child voicing cost: 95
Best yet: 272
New solution
function cost: 183
child voicing cost: 88
Best yet: 271
New solution
function cost: 183
child voicing cost: 83
Best yet: 266
New solution
function cost: 168
child voicing cost: 97
Best yet: 265
New solution
function cost: 171
child voicing cost: 93
Best yet: 264
New solution
function cost: 171
child voicing cost: 92
Best yet: 263
New solution
function cost: 180
child voicing cost: 81
Best yet: 261
New solution
function cost: 180
child voicing cost: 70
Best yet: 250
Iterations done: 10000
Nodes in active set: 423
Lowest depth: 5 current depth: 14
Iterations done: 20000
Nodes in active set: 383
Lowest depth: 5 current depth: 15
Iterations done: 30000
Nodes in active set: 410
Lowest depth: 5 current depth: 14
Iterations done: 40000
Nodes in active set: 453
Lowest depth: 5 current depth: 14
Iterations done: 50000
Nodes in active set: 379
Lowest depth: 5 current depth: 13
Iterations done: 60000
Nodes in active set: 363
Lowest depth: 5 current depth: 14
Iterations done: 70000
Nodes in active set: 346
Lowest depth: 5 current depth: 14
Iterations done: 80000
Nodes in active set: 340
Lowest depth: 5 current depth: 13
Iterations done: 90000
Nodes in active set: 423
Lowest depth: 5 current depth: 12
Iterations done: 100000
Nodes in active set: 386
Lowest depth: 5 current depth: 14
Iterations done: 110000
Nodes in active set: 434
Lowest depth: 5 current depth: 14
Iterations done: 120000
Nodes in active set: 407
Lowest depth: 5 current depth: 14
Iterations done: 130000
Nodes in active set: 311
Lowest depth: 5 current depth: 12
Iterations done: 140000
Nodes in active set: 431
Lowest depth: 5 current depth: 14
Iterations done: 150000
Nodes in active set: 434
Lowest depth: 5 current depth: 14
Iterations done: 160000
Nodes in active set: 350
Lowest depth: 5 current depth: 14
Iterations done: 170000
Nodes in active set: 337
Lowest depth: 5 current depth: 14
Iterations done: 180000
Nodes in active set: 330
Lowest depth: 5 current depth: 12
Iterations done: 190000
Nodes in active set: 364
Lowest depth: 5 current depth: 13
Iterations done: 200000
Nodes in active set: 371
Lowest depth: 5 current depth: 13
Iterations done: 210000
Nodes in active set: 360
Lowest depth: 5 current depth: 12
Iterations done: 220000
Nodes in active set: 385
Lowest depth: 5 current depth: 12
Iterations done: 230000
Nodes in active set: 370
Lowest depth: 5 current depth: 12
Iterations done: 240000
Nodes in active set: 402
Lowest depth: 5 current depth: 14
Iterations done: 250000
Nodes in active set: 410
Lowest depth: 5 current depth: 14
Iterations done: 260000
Nodes in active set: 384
Lowest depth: 5 current depth: 13
Iterations done: 270000
Nodes in active set: 361
Lowest depth: 5 current depth: 12
Iterations done: 280000
Nodes in active set: 404
Lowest depth: 5 current depth: 14
Iterations done: 290000
Nodes in active set: 367
Lowest depth: 5 current depth: 14
Iterations done: 300000
Nodes in active set: 302
Lowest depth: 5 current depth: 11
Iterations done: 310000
Nodes in active set: 348
Lowest depth: 5 current depth: 14
Iterations done: 320000
Nodes in active set: 345
Lowest depth: 5 current depth: 12
Iterations done: 330000
Nodes in active set: 343
Lowest depth: 5 current depth: 12
Iterations done: 340000
Nodes in active set: 334
Lowest depth: 5 current depth: 12
Iterations done: 350000
Nodes in active set: 350
Lowest depth: 5 current depth: 12
Iterations done: 360000
Nodes in active set: 335
Lowest depth: 5 current depth: 12
Iterations done: 370000
Nodes in active set: 289
Lowest depth: 5 current depth: 12
Iterations done: 380000
Nodes in active set: 289
Lowest depth: 5 current depth: 12
Iterations done: 390000
Nodes in active set: 416
Lowest depth: 5 current depth: 14
Iterations done: 400000
Nodes in active set: 370
Lowest depth: 5 current depth: 14
Iterations done: 410000
Nodes in active set: 288
Lowest depth: 5 current depth: 13
Iterations done: 420000
Nodes in active set: 304
Lowest depth: 5 current depth: 14
Iterations done: 430000
Nodes in active set: 324
Lowest depth: 5 current depth: 12
Iterations done: 440000
Nodes in active set: 287
Lowest depth: 5 current depth: 12
Iterations done: 450000
Nodes in active set: 306
Lowest depth: 5 current depth: 12
Iterations done: 460000
Nodes in active set: 245
Lowest depth: 5 current depth: 12
Iterations done: 470000
Nodes in active set: 294
Lowest depth: 5 current depth: 12
Iterations done: 480000
Nodes in active set: 291
Lowest depth: 5 current depth: 12
Iterations done: 490000
Nodes in active set: 330
Lowest depth: 5 current depth: 12

candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (57, 1), (64, 5), (73, 3)]), (0, "T", [(57, 1), (61, 3), (64, 5), (69, 1)]), (0, "S65", [(50, 1), (59, 6), (66, 3), (69, 5)]), (0, "D", [(52, 1), (59, 5), (64, 1), (68, 3)]), (6, "D7/3", [(56, 3), (59, 5), (62, 7), (64, 1)]), (12, "T", [(57, 1), (57, 1), (61, 3), (64, 5)]), (27, "S", [(50, 1), (57, 5), (62, 1), (66, 3)]), (18, "S", [(50, 1), (57, 5), (66, 3), (74, 1)]), (12, "Ts", [(54, 1), (57, 3), (66, 1), (73, 5)]), (18, "D", [(52, 1), (59, 5), (68, 3), (76, 1)]), (21, "S/3", [(54, 3), (57, 5), (69, 5), (74, 1)]), (21, "Ts", [(54, 1), (57, 3), (69, 3), (73, 5)]), (9, "D-5", [(52, 1), (64, 1), (68, 3), (76, 1)]), (15, "D7-5", [(52, 1), (64, 1), (68, 3), (74, 7)]), (12, "T", [(57, 1), (64, 5), (69, 1), (73, 3)]), (0, "T", [(45, 1), (64, 5), (69, 1), (73, 3)])], 171, 92, 263, Int16[0, 5, 11, 13, 25, 42, 79, 110, 128, 150, 173, 198, 214, 231, 253, 263], Int16[0, 0, 0, 0, 6, 18, 45, 63, 75, 93, 114, 135, 144, 159, 171, 171], 2, Int8[0, 3, 1, 1], ["D7", "T54", "T/3", "T"], Int8[76, 74, 73, 73], "S")

candidateSequence(Tuple{Int8,String,Array{Tuple{Int16,Int16},1}}[(0, "T", [(57, 1), (57, 1), (64, 5), (73, 3)]), (0, "T", [(57, 1), (61, 3), (64, 5), (69, 1)]), (0, "S65", [(50, 1), (59, 6), (66, 3), (69, 5)]), (0, "D", [(52, 1), (59, 5), (64, 1), (68, 3)]), (9, "S/3", [(54, 3), (57, 5), (62, 1), (74, 1)]), (6, "D", [(52, 1), (59, 5), (68, 3), (76, 1)]), (15, "T", [(45, 1), (61, 3), (69, 1), (76, 5)]), (0, "T", [(45, 1), (61, 3), (64, 5), (69, 1)]), (18, "D/3", [(44, 3), (59, 5), (64, 1), (71, 5)]), (15, "S/3", [(42, 3), (57, 5), (62, 1), (74, 1)]), (27, "D64", [(40, 1), (57, 4), (64, 1), (73, 6)]), (12, "D", [(40, 1), (56, 3), (64, 1), (71, 5)]), (24, "S/3", [(42, 3), (57, 5), (62, 1), (74, 1)]), (12, "D", [(40, 1), (59, 5), (68, 3), (76, 1)]), (27, "Ts", [(42, 1), (57, 3), (69, 3), (73, 5)]), (15, "Ts", [(54, 1), (57, 3), (69, 3), (73, 5)])], 180, 70, 250, Int16[0, 5, 11, 13, 26, 37, 56, 67, 87, 104, 133, 147, 177, 194, 229, 250], Int16[0, 0, 0, 0, 9, 15, 30, 30, 48, 63, 90, 102, 126, 138, 165, 180], 2, Int8[0, 1, 1, 1], ["S/3", "S", "D7-1", "Ts"], Int8[74, 76, 73, 73], "T")

17-element Array{Int64,1}:
   0
   0
   0
   0
   0
 238
 221
 184
 151
 127
 112
  89
  65
  48
  22
   6
   0

Iterations done: 500000
Nodes in active set: 297
Lowest depth: 5 current depth: 12
Timed out
##: Done. Total checked: 33265089, Pruned: 41070781, completed: 17, time: 731.6930000782013, efficiency: 0.023233787938634218
Results: bestval_func: 180, bestval_voices: 70
[0 1 0 0 1 0 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 0 1 0 0 0 1 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 1 0 0; 0 0 0 0 0 0 3 0 0 1 0 0; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 0 3 0 0 0 0 0 0 1; 0 0 0 0 3 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 3 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 0 1 1 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 1 0 0 0 0 0 0 1 0 2; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 1 0 2 0 0 0 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 0 0 2; 0 2 1 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 2 0 0 0 0 0; 0 0 2 0 1 0 0 0 0 0 0 1]
Key Counter is [0 14 15 0 30 0 13 0 7 32 0 13]
Key Score is [90; 34; 117; 22; 109; 77; 47; 103; 21; 124; 47; 77]
Position Counter for 10 is [32 0 13 0 14 15 0 30 0 13 0 7]
Any[[10.0, 94.0, 1.0]]
[10, 94, 1]
10 A Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 165
child voicing cost: 84
Best yet: 249
New solution
function cost: 165
child voicing cost: 78
Best yet: 243
New solution
function cost: 165
child voicing cost: 74
Best yet: 239
New solution
function cost: 165
child voicing cost: 73
Best yet: 238
New solution
function cost: 165
child voicing cost: 71
Best yet: 236
New solution
function cost: 165
child voicing cost: 65
Best yet: 230
New solution
function cost: 144
child voicing cost: 82
Best yet: 226
New solution
function cost: 144
child voicing cost: 76
Best yet: 220
New solution
function cost: 144
child voicing cost: 73
Best yet: 217
New solution
function cost: 144
child voicing cost: 72
Best yet: 216
New solution
function cost: 144
child voicing cost: 70
Best yet: 214
New solution
function cost: 144
child voicing cost: 69
Best yet: 213
New solution
function cost: 144
child voicing cost: 68
Best yet: 212
New solution
function cost: 144
child voicing cost: 67
Best yet: 211
New solution
function cost: 144
child voicing cost: 65
Best yet: 209
New solution
function cost: 144
child voicing cost: 64
Best yet: 208
New solution
function cost: 144
child voicing cost: 63
Best yet: 207

(0, "T", Tuple{Int16,Int16}[(57, 1), (57, 1), (64, 5), (73, 3)])

(0, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(0, "S65", Tuple{Int16,Int16}[(50, 1), (59, 6), (66, 3), (69, 5)])

(0, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (68, 3)])

(9, "S/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (62, 1), (74, 1)])

(6, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(15, "T", Tuple{Int16,Int16}[(45, 1), (61, 3), (69, 1), (76, 5)])

(0, "T", Tuple{Int16,Int16}[(45, 1), (61, 3), (64, 5), (69, 1)])

(18, "D/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (64, 1), (71, 5)])

(15, "S/3", Tuple{Int16,Int16}[(42, 3), (57, 5), (62, 1), (74, 1)])

(27, "D64", Tuple{Int16,Int16}[(40, 1), (57, 4), (64, 1), (73, 6)])

(12, "D", Tuple{Int16,Int16}[(40, 1), (56, 3), (64, 1), (71, 5)])

(24, "S/3", Tuple{Int16,Int16}[(42, 3), (57, 5), (62, 1), (74, 1)])

(12, "D", Tuple{Int16,Int16}[(40, 1), (59, 5), (68, 3), (76, 1)])

(27, "Ts", Tuple{Int16,Int16}[(42, 1), (57, 3), (69, 3), (73, 5)])

(15, "Ts", Tuple{Int16,Int16}[(54, 1), (57, 3), (69, 3), (73, 5)])

(6, "D/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(0, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(12, "D7/3", Tuple{Int16,Int16}[(56, 3), (62, 7), (71, 5), (76, 1)])

(6, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (69, 1), (76, 5)])

(3, "D7-1", Tuple{Int16,Int16}[(59, 5), (62, 7), (68, 3), (71, 5)])

(9, "T", Tuple{Int16,Int16}[(57, 1), (64, 5), (69, 1), (73, 3)])

(9, "S/3", Tuple{Int16,Int16}[(54, 3), (62, 1), (69, 5), (74, 1)])

(6, "T/5", Tuple{Int16,Int16}[(52, 5), (61, 3), (69, 1), (76, 5)])

(6, "S/3", Tuple{Int16,Int16}[(54, 3), (62, 1), (69, 5), (69, 5)])

(12, "D7", Tuple{Int16,Int16}[(52, 1), (62, 7), (68, 3), (71, 5)])

(0, "T", Tuple{Int16,Int16}[(45, 1), (61, 3), (69, 1), (76, 5)])

(0, "T/3", Tuple{Int16,Int16}[(49, 3), (64, 5), (69, 1), (76, 5)])

(6, "S", Tuple{Int16,Int16}[(50, 1), (62, 1), (69, 5), (78, 3)])

(15, "D7", Tuple{Int16,Int16}[(52, 1), (62, 7), (68, 3), (71, 5)])

(27, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(27, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

##: Done. Total checked: 100859, Pruned: 109438, completed: 17, time: 1.943000078201294, efficiency: 8.749356312809581
Results: bestval_func: 144, bestval_voices: 63
#Key: 10Scale: Major
#Total time for optimisation of piece: 734.9569997787476
#Total cost of piece: 457
["T", "T", "S65", "D", "S/3", "D", "T", "T", "D/3", "S/3", "D64", "D", "S/3", "D", "Ts", "Ts", "D/3", "T", "D7/3", "T", "D7-1", "T", "S/3", "T/5", "S/3", "D7", "T", "T/3", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/MBM-13-patrm-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/MBM-16-cruci-nn.csv
[1 0 0 0 0 0 0 0 0 0 0 0; 1 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 1; 0 0 0 0 0 1 0 0 0 0 0 1; 0 0 0 0 0 1 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 1 0 0 0 0 0 0 0 0 2; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 0 0 1 0 0 0 0 1 0 1; 1 0 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 0 0 1 0 0 1 0 2; 0 0 0 0 1 0 0 1 0 0 0 2; 0 0 0 0 1 0 0 2 0 0 0 1; 0 0 0 1 0 0 1 1 0 0 0 1; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 1 0 0 0 0 0 0 1 0 2; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 0 0 1 0 1 0 0 1 0 0; 2 0 0 0 1 0 0 0 0 0 0 1; 1 0 0 0 0 0 0 1 0 0 0 2; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 0 0 1 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 0 0 1; 0 0 0 0 1 0 1 1 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 0 0 1 0 0 0 0 2]
Key Counter is [17 0 12 2 16 6 18 7 0 12 0 29]
Key Score is [99; 43; 94; 44; 77; 70; 55; 111; 32; 87; 56; 65]
Position Counter for 8 is [7 0 12 0 29 17 0 12 2 16 6 18]
Any[[8.0, 72.0, 0.0]]
[8, 72, 0]
5 E Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 159
child voicing cost: 97
Best yet: 256
New solution
function cost: 159
child voicing cost: 93
Best yet: 252
New solution
function cost: 156
child voicing cost: 91
Best yet: 247
New solution
function cost: 156
child voicing cost: 85
Best yet: 241
New solution
function cost: 147
child voicing cost: 85
Best yet: 232
New solution
function cost: 147
child voicing cost: 81
Best yet: 228
New solution
function cost: 147
child voicing cost: 79
Best yet: 226
New solution
function cost: 132
child voicing cost: 93
Best yet: 225
New solution
function cost: 132
child voicing cost: 89
Best yet: 221
New solution
function cost: 132
child voicing cost: 87
Best yet: 219
New solution
function cost: 138
child voicing cost: 79
Best yet: 217
New solution
function cost: 138
child voicing cost: 77
Best yet: 215
New solution
function cost: 138
child voicing cost: 75
Best yet: 213
New solution
function cost: 135
child voicing cost: 77
Best yet: 212
New solution
function cost: 135
child voicing cost: 75
Best yet: 210
New solution
function cost: 135
child voicing cost: 73
Best yet: 208
New solution
function cost: 129
child voicing cost: 78
Best yet: 207
New solution
function cost: 129
child voicing cost: 77
Best yet: 206
New solution
function cost: 129
child voicing cost: 73
Best yet: 202
New solution
function cost: 129
child voicing cost: 71
Best yet: 200
New solution
function cost: 129
child voicing cost: 69
Best yet: 198
##: Done. Total checked: 122572, Pruned: 145946, completed: 21, time: 2.5280001163482666, efficiency: 8.306961642998186
Results: bestval_func: 129, bestval_voices: 69
[1 0 0 0 0 0 0 0 0 0 0 0; 1 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0 0 0 1; 0 0 0 0 0 1 0 0 0 0 0 1; 0 0 0 0 0 1 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 0 1; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 1 0 0 0 0 0 0 0 0 2; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 0 0 1 0 0 0 0 1 0 1; 1 0 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 0 0 1 0 0 1 0 2; 0 0 0 0 1 0 0 1 0 0 0 2; 0 0 0 0 1 0 0 2 0 0 0 1; 0 0 0 1 0 0 1 1 0 0 0 1; 0 0 0 1 0 0 2 0 0 0 0 1; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 1 0 0 0 0 0 0 1 0 2; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 0 0 1 0 1 0 0 1 0 0; 2 0 0 0 1 0 0 0 0 0 0 1; 1 0 0 0 0 0 0 1 0 0 0 2; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 0 0 1 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 0 0 1; 0 0 0 0 1 0 1 1 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 0 1 0 0 0 1 0 0 0 0 2]
Key Counter is [17 0 12 2 16 6 18 7 0 12 0 29]
Key Score is [99; 43; 94; 44; 77; 70; 55; 111; 32; 87; 56; 65]
Position Counter for 8 is [7 0 12 0 29 17 0 12 2 16 6 18]
Any[[8.0, 72.0, 0.0]]
[8, 72, 0]
5 E Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 153
child voicing cost: 115
Best yet: 268
New solution
function cost: 153
child voicing cost: 112
Best yet: 265
New solution
function cost: 153
child voicing cost: 109
Best yet: 262
New solution
function cost: 156
child voicing cost: 104
Best yet: 260
New solution
function cost: 156
child voicing cost: 103
Best yet: 259
New solution
function cost: 156
child voicing cost: 101
Best yet: 257
New solution
function cost: 156
child voicing cost: 99
Best yet: 255
New solution
function cost: 156
child voicing cost: 98
Best yet: 254
New solution
function cost: 156
child voicing cost: 96
Best yet: 252
New solution
function cost: 156
child voicing cost: 94
Best yet: 250
New solution
function cost: 159
child voicing cost: 90
Best yet: 249
New solution
function cost: 141
child voicing cost: 104
Best yet: 245
New solution
function cost: 141
child voicing cost: 101
Best yet: 242
New solution
function cost: 141
child voicing cost: 98
Best yet: 239
New solution
function cost: 141
child voicing cost: 95
Best yet: 236
New solution
function cost: 141
child voicing cost: 92
Best yet: 233
New solution
function cost: 141
child voicing cost: 91
Best yet: 232
New solution
function cost: 141
child voicing cost: 88
Best yet: 229

(3, "T", Tuple{Int16,Int16}[(52, 1), (52, 1), (55, 3), (59, 5)])

(0, "S", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (60, 3)])

(3, "T/3", Tuple{Int16,Int16}[(43, 3), (52, 1), (59, 5), (64, 1)])

(3, "D/5", Tuple{Int16,Int16}[(42, 5), (51, 3), (59, 1), (66, 5)])

(3, "T", Tuple{Int16,Int16}[(40, 1), (52, 1), (59, 5), (67, 3)])

(15, "D7", Tuple{Int16,Int16}[(47, 1), (51, 3), (57, 7), (66, 5)])

(12, "Ts", Tuple{Int16,Int16}[(48, 1), (52, 3), (55, 5), (64, 3)])

(21, "Ts", Tuple{Int16,Int16}[(48, 1), (52, 3), (55, 5), (60, 1)])

(18, "D", Tuple{Int16,Int16}[(47, 1), (54, 5), (59, 1), (63, 3)])

(9, "T/3", Tuple{Int16,Int16}[(43, 3), (52, 1), (59, 5), (64, 1)])

(0, "S", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (60, 3)])

(12, "D7/7", Tuple{Int16,Int16}[(45, 7), (54, 5), (59, 1), (63, 3)])

(0, "T/3", Tuple{Int16,Int16}[(43, 3), (52, 1), (59, 5), (64, 1)])

(12, "D7/5", Tuple{Int16,Int16}[(42, 5), (51, 3), (59, 1), (69, 7)])

(9, "T", Tuple{Int16,Int16}[(40, 1), (52, 1), (59, 5), (67, 3)])

(12, "T", Tuple{Int16,Int16}[(40, 1), (59, 5), (64, 1), (67, 3)])

(12, "S65/6", Tuple{Int16,Int16}[(42, 6), (60, 3), (64, 5), (69, 1)])

(3, "D7-1", Tuple{Int16,Int16}[(54, 5), (63, 3), (66, 5), (69, 7)])

(18, "D7", Tuple{Int16,Int16}[(47, 1), (63, 3), (69, 7), (78, 5)])

(6, "Ts", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (76, 3)])

(6, "D7", Tuple{Int16,Int16}[(47, 1), (63, 3), (69, 7), (78, 5)])

(12, "Ts", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(12, "D", Tuple{Int16,Int16}[(47, 1), (66, 5), (71, 1), (75, 3)])

(9, "S/3", Tuple{Int16,Int16}[(48, 3), (64, 5), (69, 1), (76, 5)])

(6, "D7/3", Tuple{Int16,Int16}[(51, 3), (66, 5), (69, 7), (71, 1)])

(6, "T", Tuple{Int16,Int16}[(52, 1), (64, 1), (67, 3), (71, 5)])

(6, "D/3", Tuple{Int16,Int16}[(51, 3), (59, 1), (66, 5), (78, 5)])

(9, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (67, 3), (76, 1)])

(15, "D7-1", Tuple{Int16,Int16}[(54, 5), (57, 7), (66, 5), (75, 3)])

(3, "D7", Tuple{Int16,Int16}[(59, 1), (63, 3), (66, 5), (69, 7)])

(9, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

(9, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

##: Done. Total checked: 147977, Pruned: 164216, completed: 18, time: 3.120000123977661, efficiency: 5.769230539982145
Results: bestval_func: 141, bestval_voices: 88
#Key: 5Scale: Minor
#Total time for optimisation of piece: 7.209000110626221
#Total cost of piece: 427
["T", "S", "T/3", "D/5", "T", "D7", "Ts", "Ts", "D", "T/3", "S", "D7/7", "T/3", "D7/5", "T", "T", "S65/6", "D7-1", "D7", "Ts", "D7", "Ts", "D", "S/3", "D7/3", "T", "D/3", "T", "D7-1", "D7", "T", "T"]
../../results/optimizer/pianoroll/MBM-16-cruci-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/MBM-24-pacem-nn.csv
[0 0 0 0 1 0 0 0 0 0 0 0; 0 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 0 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 0 0 0; 0 0 2 0 0 0 0 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 0 0 2 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 2 1 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 1 0 0 0 0 0 1 0 0 2; 0 1 1 0 1 0 0 1 0 0 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 0 0 1 0 1 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 1 0 1 0 0 0 1 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 2 0 1 0 0 0 0 0 0 1; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 1 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 0 0 0 2 0 1; 0 0 0 0 0 0 1 0 0 3 0 0; 0 0 1 0 0 0 0 0 0 3 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 1 0 1 0 0 0 0 1 0 0 0 1]
Key Counter is [1 9 26 0 14 0 16 5 5 28 0 17]
Key Score is [91; 31; 115; 37; 89; 74; 47; 107; 20; 115; 60; 61]
Position Counter for 3 is [26 0 14 0 16 5 5 28 0 17 1 9]
Position Counter for 10 is [28 0 17 1 9 26 0 14 0 16 5 5]
Any[[3.0, 79.75, 1.0], [10.0, 83.5, 1.0]]
[10, 84, 1]
10 A Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 126
Best yet: 276
New solution
function cost: 150
child voicing cost: 123
Best yet: 273
New solution
function cost: 150
child voicing cost: 114
Best yet: 264
New solution
function cost: 150
child voicing cost: 109
Best yet: 259
New solution
function cost: 138
child voicing cost: 120
Best yet: 258
New solution
function cost: 135
child voicing cost: 120
Best yet: 255
New solution
function cost: 150
child voicing cost: 98
Best yet: 248
New solution
function cost: 150
child voicing cost: 95
Best yet: 245
New solution
function cost: 150
child voicing cost: 92
Best yet: 242
New solution
function cost: 138
child voicing cost: 103
Best yet: 241
New solution
function cost: 129
child voicing cost: 109
Best yet: 238
New solution
function cost: 129
child voicing cost: 107
Best yet: 236
New solution
function cost: 129
child voicing cost: 106
Best yet: 235
New solution
function cost: 129
child voicing cost: 105
Best yet: 234
New solution
function cost: 129
child voicing cost: 104
Best yet: 233
New solution
function cost: 126
child voicing cost: 106
Best yet: 232
New solution
function cost: 126
child voicing cost: 104
Best yet: 230
New solution
function cost: 132
child voicing cost: 97
Best yet: 229
New solution
function cost: 132
child voicing cost: 95
Best yet: 227
New solution
function cost: 132
child voicing cost: 94
Best yet: 226
New solution
function cost: 132
child voicing cost: 93
Best yet: 225
New solution
function cost: 138
child voicing cost: 86
Best yet: 224
New solution
function cost: 138
child voicing cost: 84
Best yet: 222
New solution
function cost: 138
child voicing cost: 82
Best yet: 220
New solution
function cost: 138
child voicing cost: 78
Best yet: 216
New solution
function cost: 138
child voicing cost: 77
Best yet: 215
New solution
function cost: 123
child voicing cost: 91
Best yet: 214
New solution
function cost: 129
child voicing cost: 83
Best yet: 212
New solution
function cost: 114
child voicing cost: 97
Best yet: 211
New solution
function cost: 114
child voicing cost: 96
Best yet: 210
New solution
function cost: 114
child voicing cost: 95
Best yet: 209
New solution
function cost: 117
child voicing cost: 91
Best yet: 208
New solution
function cost: 117
child voicing cost: 90
Best yet: 207
New solution
function cost: 123
child voicing cost: 83
Best yet: 206
New solution
function cost: 129
child voicing cost: 76
Best yet: 205
New solution
function cost: 117
child voicing cost: 87
Best yet: 204
New solution
function cost: 117
child voicing cost: 85
Best yet: 202
New solution
function cost: 117
child voicing cost: 84
Best yet: 201
New solution
function cost: 117
child voicing cost: 83
Best yet: 200
New solution
function cost: 108
child voicing cost: 90
Best yet: 198
New solution
function cost: 108
child voicing cost: 89
Best yet: 197
New solution
function cost: 108
child voicing cost: 88
Best yet: 196
New solution
function cost: 111
child voicing cost: 84
Best yet: 195
New solution
function cost: 111
child voicing cost: 83
Best yet: 194
New solution
function cost: 117
child voicing cost: 76
Best yet: 193
New solution
function cost: 123
child voicing cost: 69
Best yet: 192
New solution
function cost: 111
child voicing cost: 80
Best yet: 191
New solution
function cost: 111
child voicing cost: 78
Best yet: 189
New solution
function cost: 111
child voicing cost: 77
Best yet: 188
New solution
function cost: 111
child voicing cost: 76
Best yet: 187
##: Done. Total checked: 234039, Pruned: 268203, completed: 50, time: 4.818000078201294, efficiency: 10.377749935335519
Results: bestval_func: 111, bestval_voices: 76
[0 0 0 0 1 0 0 0 0 0 0 0; 0 0 0 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 0 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 0 0 0; 0 0 2 0 0 0 0 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 0 0 0 0 2 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 2 1 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 1 0 0 0 0 0 1 0 0 2; 0 1 1 0 1 0 0 1 0 0 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 1 0 0 0 1 0 1 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 1 0 1 0 0 0 1 1 0 0; 0 1 1 0 0 0 0 1 0 1 0 0; 0 0 1 0 0 0 2 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 0 2 0 1 0 0 0 0 0 0 1; 0 1 1 0 1 0 0 0 0 0 0 1; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 1 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 0 0 0 2 0 1; 0 0 0 0 0 0 1 0 0 3 0 0; 0 0 1 0 0 0 0 0 0 3 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 1 0 1 0 0 0 0 1 0 0 0 1]
Key Counter is [1 9 26 0 14 0 16 5 5 28 0 17]
Key Score is [91; 31; 115; 37; 89; 74; 47; 107; 20; 115; 60; 61]
Position Counter for 3 is [26 0 14 0 16 5 5 28 0 17 1 9]
Position Counter for 10 is [28 0 17 1 9 26 0 14 0 16 5 5]
Any[[3.0, 79.75, 1.0], [10.0, 83.5, 1.0]]
[10, 84, 1]
10 A Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 207
child voicing cost: 82
Best yet: 289
New solution
function cost: 204
child voicing cost: 76
Best yet: 280
New solution
function cost: 204
child voicing cost: 73
Best yet: 277
New solution
function cost: 195
child voicing cost: 81
Best yet: 276
New solution
function cost: 195
child voicing cost: 78
Best yet: 273
New solution
function cost: 195
child voicing cost: 76
Best yet: 271
New solution
function cost: 195
child voicing cost: 74
Best yet: 269
New solution
function cost: 195
child voicing cost: 69
Best yet: 264
New solution
function cost: 195
child voicing cost: 66
Best yet: 261
New solution
function cost: 186
child voicing cost: 74
Best yet: 260
New solution
function cost: 186
child voicing cost: 71
Best yet: 257
New solution
function cost: 186
child voicing cost: 68
Best yet: 254
New solution
function cost: 180
child voicing cost: 72
Best yet: 252
New solution
function cost: 180
child voicing cost: 69
Best yet: 249
New solution
function cost: 165
child voicing cost: 81
Best yet: 246
New solution
function cost: 165
child voicing cost: 78
Best yet: 243
New solution
function cost: 165
child voicing cost: 76
Best yet: 241
New solution
function cost: 165
child voicing cost: 70
Best yet: 235
New solution
function cost: 165
child voicing cost: 67
Best yet: 232

(0, "T", Tuple{Int16,Int16}[(57, 1), (57, 1), (61, 3), (64, 5)])

(0, "Ts", Tuple{Int16,Int16}[(54, 1), (57, 3), (61, 5), (66, 1)])

(3, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (68, 3)])

(0, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (69, 1)])

(0, "S", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(3, "D7-1", Tuple{Int16,Int16}[(47, 5), (59, 5), (62, 7), (68, 3)])

(0, "T", Tuple{Int16,Int16}[(45, 1), (61, 3), (64, 5), (69, 1)])

(21, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(12, "D7/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (64, 1), (74, 7)])

(18, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(15, "S65/6", Tuple{Int16,Int16}[(47, 6), (57, 5), (62, 1), (66, 3)])

(0, "D7-1", Tuple{Int16,Int16}[(47, 5), (59, 5), (62, 7), (68, 3)])

(12, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (69, 1)])

(0, "S/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (62, 1), (62, 1)])

(12, "D", Tuple{Int16,Int16}[(52, 1), (56, 3), (59, 5), (64, 1)])

(15, "D", Tuple{Int16,Int16}[(40, 1), (56, 3), (59, 5), (64, 1)])

(9, "S/3", Tuple{Int16,Int16}[(42, 3), (50, 1), (57, 5), (62, 1)])

(6, "T/5", Tuple{Int16,Int16}[(40, 5), (49, 3), (57, 1), (64, 5)])

(6, "S/3", Tuple{Int16,Int16}[(42, 3), (50, 1), (57, 5), (69, 5)])

(3, "Ts", Tuple{Int16,Int16}[(42, 1), (49, 5), (57, 3), (66, 1)])

(0, "D/3", Tuple{Int16,Int16}[(44, 3), (47, 5), (59, 5), (64, 1)])

(15, "T", Tuple{Int16,Int16}[(45, 1), (49, 3), (57, 1), (64, 5)])

(0, "Ss", Tuple{Int16,Int16}[(47, 1), (50, 3), (54, 5), (62, 3)])

(12, "D7-1", Tuple{Int16,Int16}[(47, 5), (50, 7), (59, 5), (68, 3)])

(12, "T/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (69, 1)])

(6, "D7/5", Tuple{Int16,Int16}[(47, 5), (52, 1), (56, 3), (62, 7)])

(12, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(18, "S/3", Tuple{Int16,Int16}[(42, 3), (50, 1), (57, 5), (62, 1)])

(30, "D", Tuple{Int16,Int16}[(40, 1), (56, 3), (59, 5), (64, 1)])

(24, "D7", Tuple{Int16,Int16}[(40, 1), (56, 3), (59, 5), (62, 7)])

(3, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(3, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

##: Done. Total checked: 107341, Pruned: 124519, completed: 19, time: 2.2070000171661377, efficiency: 8.608971387502136
Results: bestval_func: 165, bestval_voices: 67
#Key: 10Scale: Major
#Total time for optimisation of piece: 8.36299991607666
#Total cost of piece: 419
["T", "Ts", "D", "T/3", "S", "D7-1", "T", "T", "D7/3", "T", "S65/6", "D7-1", "T/3", "S/3", "D", "D", "S/3", "T/5", "S/3", "Ts", "D/3", "T", "Ss", "D7-1", "T/3", "D7/5", "T", "S/3", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/MBM-24-pacem-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-07-love-nn.csv
[0 0 1 0 0 0 0 1 0 0 0 0; 0 0 2 0 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 2 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 2 0; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 0 0 0 0 0 2 0 0 1 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 0 1 0; 0 0 1 0 0 0 0 1 0 0 2 0; 1 0 0 1 0 2 0 0 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 2 0 0 1 0 1 0 0 0 0; 2 0 1 0 0 0 0 1 0 0 0 0; 1 0 1 0 0 0 0 0 0 2 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 0 0 2 0 0 0 0 1 0 0 1 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 1 0; 0 0 2 0 0 0 0 1 0 0 1 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 3 0 0 0 0; 3 0 0 0 0 0 0 1 0 0 0 0; 2 0 1 1 0 0 0 0 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 1 0 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 1 0; 2 0 1 0 0 0 0 1 0 0 0 0; 1 0 2 0 0 1 0 0 0 0 0 0; 0 0 2 0 0 1 0 1 0 0 0 0]
Key Counter is [21 0 39 4 0 9 4 24 0 11 13 0]
Key Score is [104; 51; 78; 110; 19; 117; 30; 99; 71; 54; 121; 21]
Position Counter for 11 is [13 0 21 0 39 4 0 9 4 24 0 11]
Any[[11.0, 96.25, 0.0]]
[11, 96, 0]
8 G Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 192
child voicing cost: 115
Best yet: 307
New solution
function cost: 192
child voicing cost: 107
Best yet: 299
New solution
function cost: 192
child voicing cost: 106
Best yet: 298
New solution
function cost: 198
child voicing cost: 95
Best yet: 293
New solution
function cost: 198
child voicing cost: 92
Best yet: 290
New solution
function cost: 198
child voicing cost: 90
Best yet: 288
New solution
function cost: 198
child voicing cost: 85
Best yet: 283
New solution
function cost: 186
child voicing cost: 90
Best yet: 276
New solution
function cost: 186
child voicing cost: 89
Best yet: 275
New solution
function cost: 186
child voicing cost: 88
Best yet: 274
New solution
function cost: 183
child voicing cost: 86
Best yet: 269
New solution
function cost: 183
child voicing cost: 82
Best yet: 265
New solution
function cost: 168
child voicing cost: 94
Best yet: 262
New solution
function cost: 165
child voicing cost: 96
Best yet: 261
New solution
function cost: 162
child voicing cost: 97
Best yet: 259
New solution
function cost: 162
child voicing cost: 94
Best yet: 256
New solution
function cost: 156
child voicing cost: 99
Best yet: 255
New solution
function cost: 162
child voicing cost: 90
Best yet: 252
New solution
function cost: 156
child voicing cost: 88
Best yet: 244
New solution
function cost: 141
child voicing cost: 102
Best yet: 243
New solution
function cost: 141
child voicing cost: 99
Best yet: 240
New solution
function cost: 141
child voicing cost: 97
Best yet: 238
New solution
function cost: 141
child voicing cost: 95
Best yet: 236
New solution
function cost: 141
child voicing cost: 92
Best yet: 233
New solution
function cost: 141
child voicing cost: 87
Best yet: 228
New solution
function cost: 141
child voicing cost: 83
Best yet: 224
##: Done. Total checked: 116882, Pruned: 149553, completed: 26, time: 2.6539998054504395, efficiency: 9.796534252415762
Results: bestval_func: 141, bestval_voices: 83
[0 0 1 0 0 0 0 1 0 0 0 0; 0 0 2 0 0 0 0 0 0 0 1 0; 1 0 0 1 0 0 0 2 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 2 0; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 0 0 0 0 0 2 0 0 1 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 0 1 0; 0 0 1 0 0 0 0 1 0 0 2 0; 1 0 0 1 0 2 0 0 0 0 0 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 2 0 0 1 0 1 0 0 0 0; 2 0 1 0 0 0 0 1 0 0 0 0; 1 0 1 0 0 0 0 0 0 2 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 0 0 2 0 0 0 0 1 0 0 1 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 1 0; 0 0 2 0 0 0 0 1 0 0 1 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 1 0 0 0 0 3 0 0 0 0; 3 0 0 0 0 0 0 1 0 0 0 0; 2 0 1 1 0 0 0 0 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 1 1 0 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 1 0; 2 0 1 0 0 0 0 1 0 0 0 0; 1 0 2 0 0 1 0 0 0 0 0 0; 0 0 2 0 0 1 0 1 0 0 0 0]
Key Counter is [21 0 39 4 0 9 4 24 0 11 13 0]
Key Score is [104; 51; 78; 110; 19; 117; 30; 99; 71; 54; 121; 21]
Position Counter for 11 is [13 0 21 0 39 4 0 9 4 24 0 11]
Any[[11.0, 96.25, 0.0]]
[11, 96, 0]
8 G Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 189
child voicing cost: 97
Best yet: 286
New solution
function cost: 189
child voicing cost: 92
Best yet: 281
New solution
function cost: 189
child voicing cost: 82
Best yet: 271
New solution
function cost: 180
child voicing cost: 86
Best yet: 266
New solution
function cost: 189
child voicing cost: 76
Best yet: 265
New solution
function cost: 189
child voicing cost: 72
Best yet: 261
New solution
function cost: 189
child voicing cost: 68
Best yet: 257
New solution
function cost: 189
child voicing cost: 65
Best yet: 254
New solution
function cost: 189
child voicing cost: 62
Best yet: 251
New solution
function cost: 171
child voicing cost: 78
Best yet: 249
New solution
function cost: 174
child voicing cost: 74
Best yet: 248
New solution
function cost: 174
child voicing cost: 70
Best yet: 244
New solution
function cost: 165
child voicing cost: 78
Best yet: 243
New solution
function cost: 165
child voicing cost: 75
Best yet: 240
New solution
function cost: 165
child voicing cost: 71
Best yet: 236
New solution
function cost: 156
child voicing cost: 79
Best yet: 235
New solution
function cost: 162
child voicing cost: 70
Best yet: 232
New solution
function cost: 162
child voicing cost: 67
Best yet: 229
New solution
function cost: 162
child voicing cost: 64
Best yet: 226

(0, "T", Tuple{Int16,Int16}[(55, 1), (55, 1), (62, 5), (70, 3)])

(3, "D", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (74, 1)])

(0, "S/3", Tuple{Int16,Int16}[(51, 3), (55, 5), (67, 5), (72, 1)])

(0, "T", Tuple{Int16,Int16}[(55, 1), (62, 5), (67, 1), (70, 3)])

(0, "D7/3", Tuple{Int16,Int16}[(54, 3), (60, 7), (69, 5), (74, 1)])

(9, "T", Tuple{Int16,Int16}[(55, 1), (58, 3), (67, 1), (74, 5)])

(12, "S", Tuple{Int16,Int16}[(48, 1), (60, 1), (67, 5), (75, 3)])

(18, "S", Tuple{Int16,Int16}[(48, 1), (63, 3), (67, 5), (72, 1)])

(0, "D/3", Tuple{Int16,Int16}[(54, 3), (62, 1), (69, 5), (74, 1)])

(3, "D", Tuple{Int16,Int16}[(50, 1), (62, 1), (69, 5), (78, 3)])

(12, "D7/7", Tuple{Int16,Int16}[(48, 7), (62, 1), (69, 5), (78, 3)])

(24, "T/3", Tuple{Int16,Int16}[(46, 3), (62, 5), (67, 1), (79, 1)])

(12, "S", Tuple{Int16,Int16}[(48, 1), (60, 1), (67, 5), (75, 3)])

(9, "D", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (74, 1)])

(18, "Ts", Tuple{Int16,Int16}[(51, 1), (55, 3), (67, 3), (70, 5)])

(21, "Ts", Tuple{Int16,Int16}[(51, 1), (55, 3), (63, 1), (70, 5)])

(9, "S", Tuple{Int16,Int16}[(48, 1), (55, 5), (63, 3), (72, 1)])

(0, "T/3", Tuple{Int16,Int16}[(46, 3), (55, 1), (62, 5), (74, 5)])

(3, "D/3", Tuple{Int16,Int16}[(42, 3), (57, 5), (62, 1), (74, 1)])

(6, "T", Tuple{Int16,Int16}[(43, 1), (55, 1), (62, 5), (70, 3)])

(3, "D", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(9, "Ts", Tuple{Int16,Int16}[(51, 1), (55, 3), (58, 5), (67, 3)])

(0, "T/3", Tuple{Int16,Int16}[(46, 3), (55, 1), (62, 5), (67, 1)])

(9, "D7/5", Tuple{Int16,Int16}[(45, 5), (54, 3), (62, 1), (72, 7)])

(9, "T", Tuple{Int16,Int16}[(43, 1), (55, 1), (62, 5), (70, 3)])

(18, "T/3", Tuple{Int16,Int16}[(46, 3), (55, 1), (62, 5), (67, 1)])

(15, "S", Tuple{Int16,Int16}[(48, 1), (60, 1), (63, 3), (67, 5)])

(15, "Tm", Tuple{Int16,Int16}[(46, 1), (62, 3), (65, 5), (74, 3)])

(12, "S", Tuple{Int16,Int16}[(48, 1), (55, 5), (63, 3), (72, 1)])

(6, "D", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(21, "T", Tuple{Int16,Int16}[(43, 1), (55, 1), (62, 5), (70, 3)])

(21, "T", Tuple{Int16,Int16}[(43, 1), (55, 1), (62, 5), (70, 3)])

##: Done. Total checked: 92914, Pruned: 116970, completed: 19, time: 2.114000082015991, efficiency: 8.987700691989035
Results: bestval_func: 162, bestval_voices: 64
#Key: 8Scale: Minor
#Total time for optimisation of piece: 6.0279998779296875
#Total cost of piece: 450
["T", "D", "S/3", "T", "D7/3", "T", "S", "S", "D/3", "D", "D7/7", "T/3", "S", "D", "Ts", "Ts", "S", "T/3", "D/3", "T", "D", "Ts", "T/3", "D7/5", "T", "T/3", "S", "Tm", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/SJP-07-love-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-09-will-nn.csv
[0 0 2 0 0 1 0 0 0 1 0 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 0 0 1 0 0; 0 1 0 0 1 0 0 2 0 0 0 0; 0 0 1 0 0 1 0 0 0 2 0 0; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 0 0 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 0 0 1 1 0; 1 0 1 0 0 0 0 0 0 1 1 0; 1 0 0 0 0 1 0 0 0 1 1 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 2 0 0 0 0 0 0 1 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 3 0 0 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 0 2 0 0; 2 0 1 0 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 1 0 0 0 0 0 0 0 0 2 1 0; 1 0 0 0 1 0 0 0 0 1 1 0; 1 0 1 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 0 0 0 0 1 1 0; 0 0 0 0 1 0 0 1 0 1 1 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 2 0 1 0 0 0 0; 2 0 1 0 0 1 0 0 0 0 0 0]
Key Counter is [31 2 20 0 5 20 0 15 0 23 14 1]
Key Score is [115; 67; 66; 100; 31; 128; 37; 95; 82; 51; 123; 22]
Position Counter for 6 is [20 0 15 0 23 14 1 31 2 20 0 5]
Any[[6.0, 84.5, 1.0]]
[6, 84, 1]
6 F Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 88
Best yet: 262
New solution
function cost: 174
child voicing cost: 84
Best yet: 258
New solution
function cost: 162
child voicing cost: 85
Best yet: 247
New solution
function cost: 162
child voicing cost: 79
Best yet: 241
##: Done. Total checked: 60418, Pruned: 68739, completed: 4, time: 1.3220000267028809, efficiency: 3.0257185470534025
Results: bestval_func: 162, bestval_voices: 79
[0 0 2 0 0 1 0 0 0 1 0 0; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 0 0 1 0 0; 0 1 0 0 1 0 0 2 0 0 0 0; 0 0 1 0 0 1 0 0 0 2 0 0; 2 0 1 0 0 0 0 0 0 1 0 0; 1 0 0 0 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 0 0 1 1 0; 1 0 1 0 0 0 0 0 0 1 1 0; 1 0 0 0 0 1 0 0 0 1 1 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 1 1 0; 2 0 0 0 0 0 0 1 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 3 0 0 0 0 0 0 1 0 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 0 0 1 0 0 0 2 0 0; 2 0 1 0 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 1 0 0 0 0 0 0 0 0 2 1 0; 1 0 0 0 1 0 0 0 0 1 1 0; 1 0 1 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 2 0 0 0 1 1 0 0 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 0 0 0 0 1 1 0; 0 0 0 0 1 0 0 1 0 1 1 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 2 0 1 0 0 0 0; 2 0 1 0 0 1 0 0 0 0 0 0]
Key Counter is [31 2 20 0 5 20 0 15 0 23 14 1]
Key Score is [115; 67; 66; 100; 31; 128; 37; 95; 82; 51; 123; 22]
Position Counter for 6 is [20 0 15 0 23 14 1 31 2 20 0 5]
Any[[6.0, 84.5, 1.0]]
[6, 84, 1]
6 F Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 207
child voicing cost: 84
Best yet: 291
New solution
function cost: 207
child voicing cost: 81
Best yet: 288
New solution
function cost: 207
child voicing cost: 78
Best yet: 285
New solution
function cost: 210
child voicing cost: 74
Best yet: 284
New solution
function cost: 210
child voicing cost: 71
Best yet: 281
New solution
function cost: 207
child voicing cost: 72
Best yet: 279
New solution
function cost: 183
child voicing cost: 86
Best yet: 269
New solution
function cost: 183
child voicing cost: 80
Best yet: 263
New solution
function cost: 195
child voicing cost: 64
Best yet: 259
New solution
function cost: 186
child voicing cost: 72
Best yet: 258
New solution
function cost: 186
child voicing cost: 69
Best yet: 255
New solution
function cost: 183
child voicing cost: 71
Best yet: 254
New solution
function cost: 186
child voicing cost: 67
Best yet: 253
New solution
function cost: 183
child voicing cost: 69
Best yet: 252
New solution
function cost: 180
child voicing cost: 71
Best yet: 251

(15, "T", Tuple{Int16,Int16}[(53, 1), (53, 1), (60, 5), (69, 3)])

(6, "D7/3", Tuple{Int16,Int16}[(52, 3), (55, 5), (60, 1), (70, 7)])

(0, "Ts", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (65, 3)])

(12, "D7", Tuple{Int16,Int16}[(48, 1), (58, 7), (64, 3), (67, 5)])

(12, "Ts", Tuple{Int16,Int16}[(50, 1), (57, 5), (65, 3), (65, 3)])

(12, "D", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(15, "T", Tuple{Int16,Int16}[(53, 1), (65, 1), (69, 3), (72, 5)])

(15, "T", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(12, "D7/3", Tuple{Int16,Int16}[(52, 3), (60, 1), (70, 7), (79, 5)])

(15, "T", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(12, "T/3", Tuple{Int16,Int16}[(57, 3), (60, 5), (65, 1), (72, 5)])

(12, "S", Tuple{Int16,Int16}[(58, 1), (62, 3), (65, 5), (70, 1)])

(0, "T/3", Tuple{Int16,Int16}[(57, 3), (60, 5), (65, 1), (77, 1)])

(9, "S", Tuple{Int16,Int16}[(58, 1), (62, 3), (70, 1), (77, 5)])

(15, "D", Tuple{Int16,Int16}[(60, 1), (64, 3), (67, 5), (72, 1)])

(15, "D", Tuple{Int16,Int16}[(60, 1), (64, 3), (72, 1), (79, 5)])

(6, "D7", Tuple{Int16,Int16}[(48, 1), (64, 3), (70, 7), (79, 5)])

(27, "Ts", Tuple{Int16,Int16}[(50, 1), (65, 3), (69, 5), (77, 3)])

(3, "D7/3", Tuple{Int16,Int16}[(52, 3), (60, 1), (67, 5), (70, 7)])

(12, "T", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(9, "D-5", Tuple{Int16,Int16}[(48, 1), (60, 1), (64, 3), (72, 1)])

(9, "D7/7", Tuple{Int16,Int16}[(46, 7), (55, 5), (64, 3), (72, 1)])

(18, "T/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (77, 1)])

(3, "Tm", Tuple{Int16,Int16}[(45, 1), (60, 3), (69, 1), (76, 5)])

(6, "D7/3", Tuple{Int16,Int16}[(52, 3), (60, 1), (67, 5), (70, 7)])

(0, "T", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(12, "D7/3", Tuple{Int16,Int16}[(52, 3), (58, 7), (67, 5), (72, 1)])

(15, "T", Tuple{Int16,Int16}[(53, 1), (57, 3), (65, 1), (72, 5)])

(24, "S", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (74, 3)])

(9, "D7", Tuple{Int16,Int16}[(48, 1), (58, 7), (64, 3), (67, 5)])

(15, "T", Tuple{Int16,Int16}[(53, 1), (57, 3), (60, 5), (65, 1)])

(15, "T", Tuple{Int16,Int16}[(53, 1), (57, 3), (60, 5), (65, 1)])

##: Done. Total checked: 114238, Pruned: 132945, completed: 15, time: 2.5870001316070557, efficiency: 5.798221583654089
Results: bestval_func: 180, bestval_voices: 71
#Key: 6Scale: Major
#Total time for optimisation of piece: 5.49399995803833
#Total cost of piece: 492
["T", "D7/3", "Ts", "D7", "Ts", "D", "T", "T", "D7/3", "T", "T/3", "S", "T/3", "S", "D", "D", "D7", "Ts", "D7/3", "T", "D-5", "D7/7", "T/3", "Tm", "D7/3", "T", "D7/3", "T", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/SJP-09-will-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-15-hatrd-nn.csv
[0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 0 1 0 0 2; 0 0 1 0 1 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 1 1 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 2 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 2 0 0 0 0 0 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 2 0 1 0 0 0 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 0 1 0 1; 0 2 0 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 1 0 0 0 1 0 1 0 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0 0 1 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 2 0 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 1 0 0 0 0 0 1 1 0 0; 0 0 1 0 0 0 0 0 2 0 0 1; 0 1 0 0 0 0 1 0 0 2 0 0; 0 2 0 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 1 0 0 0 0 1]
Key Counter is [0 21 13 1 26 0 16 1 11 21 0 21]
Key Score is [82; 49; 119; 26; 117; 61; 70; 98; 34; 129; 36; 96]
Position Counter for 10 is [21 0 21 0 21 13 1 26 0 16 1 11]
Any[[10.0, 85.5, 1.0]]
[10, 86, 1]
10 A Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 228
child voicing cost: 100
Best yet: 328
New solution
function cost: 228
child voicing cost: 97
Best yet: 325
New solution
function cost: 228
child voicing cost: 94
Best yet: 322
New solution
function cost: 213
child voicing cost: 103
Best yet: 316
New solution
function cost: 213
child voicing cost: 100
Best yet: 313
New solution
function cost: 213
child voicing cost: 97
Best yet: 310
New solution
function cost: 222
child voicing cost: 86
Best yet: 308
New solution
function cost: 213
child voicing cost: 94
Best yet: 307
New solution
function cost: 213
child voicing cost: 91
Best yet: 304
New solution
function cost: 204
child voicing cost: 86
Best yet: 290
New solution
function cost: 204
child voicing cost: 83
Best yet: 287
New solution
function cost: 204
child voicing cost: 78
Best yet: 282
New solution
function cost: 198
child voicing cost: 82
Best yet: 280
New solution
function cost: 177
child voicing cost: 78
Best yet: 255
New solution
function cost: 162
child voicing cost: 89
Best yet: 251
New solution
function cost: 162
child voicing cost: 86
Best yet: 248
New solution
function cost: 162
child voicing cost: 81
Best yet: 243
New solution
function cost: 171
child voicing cost: 71
Best yet: 242
New solution
function cost: 162
child voicing cost: 79
Best yet: 241
New solution
function cost: 162
child voicing cost: 77
Best yet: 239
New solution
function cost: 168
child voicing cost: 70
Best yet: 238
New solution
function cost: 168
child voicing cost: 67
Best yet: 235
New solution
function cost: 159
child voicing cost: 75
Best yet: 234
New solution
function cost: 147
child voicing cost: 85
Best yet: 232
New solution
function cost: 147
child voicing cost: 80
Best yet: 227
New solution
function cost: 141
child voicing cost: 84
Best yet: 225
New solution
function cost: 141
child voicing cost: 83
Best yet: 224
##: Done. Total checked: 232442, Pruned: 281303, completed: 27, time: 4.619999885559082, efficiency: 5.844155988920038
Results: bestval_func: 141, bestval_voices: 83
[0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 0 1 0 0 2; 0 0 1 0 1 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 1 1 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 2 0 0 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 2 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 2 0 0 0 0 0 0 1; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 2 0 1 0 0 0 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 0 1 0 1; 0 2 0 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 1 0 0 0 1 0 1 0 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0 0 1 0 2; 0 0 0 0 1 0 0 0 1 0 0 2; 0 2 0 0 1 0 0 0 0 1 0 0; 0 1 1 0 1 0 0 0 0 1 0 0; 0 1 1 0 0 0 0 0 1 1 0 0; 0 0 1 0 0 0 0 0 2 0 0 1; 0 1 0 0 0 0 1 0 0 2 0 0; 0 2 0 0 0 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 0 1 0 1; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 1 0 0 0 0 1]
Key Counter is [0 21 13 1 26 0 16 1 11 21 0 21]
Key Score is [82; 49; 119; 26; 117; 61; 70; 98; 34; 129; 36; 96]
Position Counter for 10 is [21 0 21 0 21 13 1 26 0 16 1 11]
Any[[10.0, 85.5, 1.0]]
[10, 86, 1]
10 A Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 207
child voicing cost: 65
Best yet: 272
New solution
function cost: 204
child voicing cost: 63
Best yet: 267
New solution
function cost: 195
child voicing cost: 66
Best yet: 261
New solution
function cost: 195
child voicing cost: 63
Best yet: 258

(0, "T", Tuple{Int16,Int16}[(57, 1), (57, 1), (61, 3), (64, 5)])

(0, "S", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(0, "D7-1", Tuple{Int16,Int16}[(47, 5), (56, 3), (62, 7), (71, 5)])

(3, "D7/7", Tuple{Int16,Int16}[(50, 7), (56, 3), (64, 1), (71, 5)])

(6, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (76, 5)])

(0, "S", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (74, 1)])

(12, "D", Tuple{Int16,Int16}[(52, 1), (56, 3), (64, 1), (71, 5)])

(18, "D", Tuple{Int16,Int16}[(40, 1), (56, 3), (64, 1), (71, 5)])

(15, "Ts", Tuple{Int16,Int16}[(42, 1), (57, 3), (61, 5), (69, 3)])

(0, "D/3", Tuple{Int16,Int16}[(44, 3), (47, 5), (59, 5), (64, 1)])

(15, "T", Tuple{Int16,Int16}[(45, 1), (49, 3), (57, 1), (64, 5)])

(9, "S/5", Tuple{Int16,Int16}[(45, 5), (50, 1), (57, 5), (66, 3)])

(21, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(6, "D7-1", Tuple{Int16,Int16}[(47, 5), (50, 7), (56, 3), (59, 5)])

(24, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(12, "T", Tuple{Int16,Int16}[(45, 1), (49, 3), (57, 1), (64, 5)])

(3, "D/3", Tuple{Int16,Int16}[(44, 3), (47, 5), (59, 5), (64, 1)])

(12, "S/3", Tuple{Int16,Int16}[(42, 3), (50, 1), (57, 5), (69, 5)])

(9, "D7", Tuple{Int16,Int16}[(40, 1), (50, 7), (59, 5), (68, 3)])

(12, "Ts", Tuple{Int16,Int16}[(42, 1), (49, 5), (57, 3), (69, 3)])

(6, "D7/3", Tuple{Int16,Int16}[(44, 3), (50, 7), (59, 5), (64, 1)])

(15, "T", Tuple{Int16,Int16}[(45, 1), (49, 3), (57, 1), (64, 5)])

(15, "D7-1", Tuple{Int16,Int16}[(47, 5), (50, 7), (56, 3), (62, 7)])

(9, "D7/7", Tuple{Int16,Int16}[(50, 7), (52, 1), (56, 3), (59, 5)])

(9, "T/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (64, 5)])

(9, "S", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(9, "T/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (69, 1)])

(21, "Tm", Tuple{Int16,Int16}[(49, 1), (52, 3), (64, 3), (68, 5)])

(18, "S", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(18, "D7", Tuple{Int16,Int16}[(52, 1), (56, 3), (59, 5), (62, 7)])

(6, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(6, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

##: Done. Total checked: 46252, Pruned: 53955, completed: 4, time: 1.0859999656677246, efficiency: 3.6832413687422254
Results: bestval_func: 195, bestval_voices: 63
#Key: 10Scale: Major
#Total time for optimisation of piece: 7.000999927520752
#Total cost of piece: 482
["T", "S", "D7-1", "D7/7", "T/3", "S", "D", "D", "Ts", "D/3", "T", "S/5", "T", "D7-1", "T", "T", "D/3", "S/3", "D7", "Ts", "D7/3", "T", "D7-1", "D7/7", "T/3", "S", "T/3", "Tm", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/SJP-15-hatrd-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-20-peter-nn.csv
[0 1 0 0 0 0 2 0 0 1 0 0; 0 0 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 0 0 0 0 0 0 0 1 0 0 2; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 2 0 0 0 0 2 0 0 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 2 0 0 1 0 1 0 0 0 0 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 1 0 1 1 0 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 2 0 0 1 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 1 0 0 0 1 0 0 0; 0 1 0 1 1 0 1 0 0 0 0 0; 1 0 0 2 0 0 1 0 0 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 1 0 0 1 1 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 1 0 0]
Key Counter is [6 18 0 18 21 1 17 0 28 9 0 11]
Key Score is [48; 88; 76; 53; 122; 37; 93; 64; 71; 104; 34; 113]
Position Counter for 5 is [21 1 17 0 28 9 0 11 6 18 0 18]
Any[[5.0, 82.25, 0.0]]
[5, 82, 0]
2 C# Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 180
child voicing cost: 99
Best yet: 279
New solution
function cost: 180
child voicing cost: 95
Best yet: 275
New solution
function cost: 174
child voicing cost: 95
Best yet: 269
New solution
function cost: 174
child voicing cost: 92
Best yet: 266
New solution
function cost: 174
child voicing cost: 91
Best yet: 265
New solution
function cost: 174
child voicing cost: 84
Best yet: 258
New solution
function cost: 174
child voicing cost: 83
Best yet: 257
New solution
function cost: 165
child voicing cost: 91
Best yet: 256
New solution
function cost: 168
child voicing cost: 85
Best yet: 253
New solution
function cost: 156
child voicing cost: 90
Best yet: 246
New solution
function cost: 156
child voicing cost: 89
Best yet: 245
New solution
function cost: 156
child voicing cost: 84
Best yet: 240
New solution
function cost: 156
child voicing cost: 83
Best yet: 239
New solution
function cost: 156
child voicing cost: 82
Best yet: 238
New solution
function cost: 159
child voicing cost: 74
Best yet: 233
New solution
function cost: 156
child voicing cost: 74
Best yet: 230
New solution
function cost: 156
child voicing cost: 73
Best yet: 229
New solution
function cost: 141
child voicing cost: 87
Best yet: 228
New solution
function cost: 141
child voicing cost: 86
Best yet: 227
New solution
function cost: 141
child voicing cost: 81
Best yet: 222
New solution
function cost: 141
child voicing cost: 80
Best yet: 221
New solution
function cost: 141
child voicing cost: 79
Best yet: 220
New solution
function cost: 141
child voicing cost: 78
Best yet: 219
New solution
function cost: 138
child voicing cost: 77
Best yet: 215
New solution
function cost: 135
child voicing cost: 77
Best yet: 212
New solution
function cost: 135
child voicing cost: 76
Best yet: 211
New solution
function cost: 135
child voicing cost: 74
Best yet: 209
New solution
function cost: 132
child voicing cost: 74
Best yet: 206
New solution
function cost: 132
child voicing cost: 73
Best yet: 205
##: Done. Total checked: 216985, Pruned: 264947, completed: 29, time: 4.242000102996826, efficiency: 6.83639775951738
Results: bestval_func: 132, bestval_voices: 73
[0 1 0 0 0 0 2 0 0 1 0 0; 0 0 0 0 0 1 0 0 1 0 0 1; 0 1 0 0 0 0 2 0 0 1 0 0; 0 0 0 0 0 0 0 0 1 0 0 2; 0 1 0 0 1 0 0 0 0 1 0 0; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 0 0 2 0 0 0 0 2 0 0 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 2 0 0 1 0 1 0 0 0 0 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 1 0 1 1 0 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 2 0 0 1 0 0 0 1 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 1 0 0 0 1 0 0 0; 0 1 0 1 1 0 1 0 0 0 0 0; 1 0 0 2 0 0 1 0 0 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 1 0 0 1 1 0 0 0 1 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 2 0 0 1 0 0 0 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 1 0 0 0 1 1 0 0]
Key Counter is [6 18 0 18 21 1 17 0 28 9 0 11]
Key Score is [48; 88; 76; 53; 122; 37; 93; 64; 71; 104; 34; 113]
Position Counter for 5 is [21 1 17 0 28 9 0 11 6 18 0 18]
Any[[5.0, 82.25, 0.0]]
[5, 82, 0]
2 C# Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 162
child voicing cost: 99
Best yet: 261
New solution
function cost: 162
child voicing cost: 96
Best yet: 258
New solution
function cost: 162
child voicing cost: 93
Best yet: 255
New solution
function cost: 153
child voicing cost: 100
Best yet: 253
New solution
function cost: 153
child voicing cost: 97
Best yet: 250
New solution
function cost: 129
child voicing cost: 119
Best yet: 248
New solution
function cost: 123
child voicing cost: 122
Best yet: 245
New solution
function cost: 123
child voicing cost: 118
Best yet: 241
New solution
function cost: 123
child voicing cost: 115
Best yet: 238
New solution
function cost: 129
child voicing cost: 108
Best yet: 237
New solution
function cost: 138
child voicing cost: 98
Best yet: 236
New solution
function cost: 138
child voicing cost: 97
Best yet: 235
New solution
function cost: 144
child voicing cost: 89
Best yet: 233
New solution
function cost: 120
child voicing cost: 110
Best yet: 230
New solution
function cost: 120
child voicing cost: 107
Best yet: 227
New solution
function cost: 120
child voicing cost: 104
Best yet: 224
New solution
function cost: 150
child voicing cost: 71
Best yet: 221
New solution
function cost: 150
child voicing cost: 68
Best yet: 218
New solution
function cost: 141
child voicing cost: 75
Best yet: 216
New solution
function cost: 141
child voicing cost: 72
Best yet: 213
New solution
function cost: 126
child voicing cost: 83
Best yet: 209
New solution
function cost: 126
child voicing cost: 81
Best yet: 207
New solution
function cost: 126
child voicing cost: 75
Best yet: 201
New solution
function cost: 132
child voicing cost: 67
Best yet: 199

(24, "T", Tuple{Int16,Int16}[(49, 1), (61, 1), (68, 5), (76, 3)])

(3, "Tm", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(0, "S", Tuple{Int16,Int16}[(54, 1), (57, 3), (66, 1), (73, 5)])

(15, "D7/3", Tuple{Int16,Int16}[(48, 3), (56, 1), (66, 7), (75, 5)])

(3, "T", Tuple{Int16,Int16}[(49, 1), (56, 5), (64, 3), (73, 1)])

(6, "D7-1", Tuple{Int16,Int16}[(51, 5), (54, 7), (63, 5), (72, 3)])

(12, "T", Tuple{Int16,Int16}[(49, 1), (56, 5), (64, 3), (73, 1)])

(21, "T", Tuple{Int16,Int16}[(49, 1), (61, 1), (64, 3), (68, 5)])

(6, "Dm", Tuple{Int16,Int16}[(47, 1), (63, 3), (66, 5), (71, 1)])

(6, "S/3", Tuple{Int16,Int16}[(45, 3), (61, 5), (66, 1), (73, 5)])

(6, "D64", Tuple{Int16,Int16}[(44, 1), (61, 4), (68, 1), (76, 6)])

(9, "D", Tuple{Int16,Int16}[(44, 1), (60, 3), (68, 1), (75, 5)])

(9, "D7/3", Tuple{Int16,Int16}[(48, 3), (56, 1), (66, 7), (75, 5)])

(6, "T", Tuple{Int16,Int16}[(49, 1), (56, 5), (64, 3), (73, 1)])

(9, "D", Tuple{Int16,Int16}[(44, 1), (56, 1), (63, 5), (72, 3)])

(21, "D", Tuple{Int16,Int16}[(44, 1), (63, 5), (68, 1), (72, 3)])

(6, "Ts", Tuple{Int16,Int16}[(45, 1), (61, 3), (64, 5), (73, 3)])

(6, "D", Tuple{Int16,Int16}[(44, 1), (60, 3), (68, 1), (75, 5)])

(0, "T", Tuple{Int16,Int16}[(49, 1), (61, 1), (68, 5), (76, 3)])

(0, "D/5", Tuple{Int16,Int16}[(51, 5), (60, 3), (68, 1), (75, 5)])

(3, "T/3", Tuple{Int16,Int16}[(52, 3), (61, 1), (68, 5), (73, 1)])

(15, "Ts", Tuple{Int16,Int16}[(45, 1), (61, 3), (69, 1), (76, 5)])

(0, "D7-1", Tuple{Int16,Int16}[(51, 5), (63, 5), (66, 7), (72, 3)])

(0, "T/3", Tuple{Int16,Int16}[(52, 3), (61, 1), (68, 5), (73, 1)])

(12, "S65", Tuple{Int16,Int16}[(54, 1), (61, 5), (69, 3), (75, 6)])

(6, "D", Tuple{Int16,Int16}[(56, 1), (60, 3), (68, 1), (75, 5)])

(12, "S/3", Tuple{Int16,Int16}[(57, 3), (61, 5), (66, 1), (78, 1)])

(0, "T/5", Tuple{Int16,Int16}[(56, 5), (61, 1), (68, 5), (76, 3)])

(15, "S", Tuple{Int16,Int16}[(54, 1), (61, 5), (69, 3), (78, 1)])

(15, "D", Tuple{Int16,Int16}[(56, 1), (60, 3), (68, 1), (75, 5)])

(21, "T", Tuple{Int16,Int16}[(49, 1), (61, 1), (68, 5), (76, 3)])

(21, "T", Tuple{Int16,Int16}[(49, 1), (61, 1), (68, 5), (76, 3)])

##: Done. Total checked: 161309, Pruned: 180094, completed: 24, time: 3.0460000038146973, efficiency: 7.879185807597929
Results: bestval_func: 132, bestval_voices: 67
#Key: 2Scale: Minor
#Total time for optimisation of piece: 8.51800012588501
#Total cost of piece: 404
["T", "Tm", "S", "D7/3", "T", "D7-1", "T", "T", "Dm", "S/3", "D64", "D", "D7/3", "T", "D", "D", "Ts", "D", "T", "D/5", "T/3", "Ts", "D7-1", "T/3", "S65", "D", "S/3", "T/5", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/SJP-20-peter-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-21-life-nn.csv
[1 0 0 0 0 0 0 0 0 2 0 0; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 1 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 1 0 0 0 1 0 0 0 1 1 0 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 1 0 1 0 0 0 0 2 0 0 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 1 0 1 0 0 0 0 0 0 1; 3 0 0 0 1 0 0 0 0 0 0 0; 2 0 1 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 3 0 0 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 2 0 1; 1 0 1 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 2 0 0 0 0; 1 0 0 0 0 0 1 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 1 1 0 0 0 0 0 0 1; 1 0 0 1 0 0 0 1 0 0 0 1]
Key Counter is [28 0 23 2 19 4 3 18 2 14 1 16]
Key Score is [122; 40; 93; 78; 56; 107; 28; 121; 55; 77; 90; 43]
Position Counter for 1 is [28 0 23 2 19 4 3 18 2 14 1 16]
Any[[1.0, 80.0, 1.0]]
[1, 80, 1]
1 C Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 198
child voicing cost: 77
Best yet: 275
New solution
function cost: 198
child voicing cost: 74
Best yet: 272
New solution
function cost: 186
child voicing cost: 85
Best yet: 271
New solution
function cost: 186
child voicing cost: 83
Best yet: 269
New solution
function cost: 189
child voicing cost: 75
Best yet: 264
New solution
function cost: 189
child voicing cost: 74
Best yet: 263
New solution
function cost: 186
child voicing cost: 76
Best yet: 262
New solution
function cost: 186
child voicing cost: 74
Best yet: 260
New solution
function cost: 186
child voicing cost: 71
Best yet: 257
New solution
function cost: 201
child voicing cost: 55
Best yet: 256
New solution
function cost: 201
child voicing cost: 54
Best yet: 255
##: Done. Total checked: 87018, Pruned: 103265, completed: 11, time: 1.7799999713897705, efficiency: 6.179775380227412
Results: bestval_func: 201, bestval_voices: 54
[1 0 0 0 0 0 0 0 0 2 0 0; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 1 0 1 1 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 1 0 0 0 1 0 0 0 1 1 0 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 1 0 1 0 0 0 0 2 0 0 0 0; 1 0 1 0 0 0 0 2 0 0 0 0; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 0 0 1; 1 0 1 0 1 0 0 0 0 0 0 1; 3 0 0 0 1 0 0 0 0 0 0 0; 2 0 1 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 1 0 0 0 0; 2 0 0 0 1 0 0 0 0 1 0 0; 1 0 2 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 0 2; 3 0 0 0 1 0 0 0 0 0 0 0; 1 0 1 0 1 0 0 0 0 0 0 1; 0 0 0 0 1 0 0 0 0 2 0 1; 1 0 1 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 2 0 0 0 0; 1 0 0 0 0 0 1 1 0 1 0 0; 0 0 1 0 0 0 1 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 1 0 0 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 1 1 0 0 0 0 0 0 1; 1 0 0 1 0 0 0 1 0 0 0 1]
Key Counter is [28 0 23 2 19 4 3 18 2 14 1 16]
Key Score is [122; 40; 93; 78; 56; 107; 28; 121; 55; 77; 90; 43]
Position Counter for 1 is [28 0 23 2 19 4 3 18 2 14 1 16]
Any[[1.0, 80.0, 1.0]]
[1, 80, 1]
1 C Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 225
child voicing cost: 100
Best yet: 325
New solution
function cost: 225
child voicing cost: 92
Best yet: 317
New solution
function cost: 228
child voicing cost: 83
Best yet: 311
New solution
function cost: 228
child voicing cost: 76
Best yet: 304
New solution
function cost: 225
child voicing cost: 69
Best yet: 294
New solution
function cost: 225
child voicing cost: 66
Best yet: 291
New solution
function cost: 213
child voicing cost: 77
Best yet: 290
New solution
function cost: 213
child voicing cost: 74
Best yet: 287
New solution
function cost: 204
child voicing cost: 77
Best yet: 281
New solution
function cost: 204
child voicing cost: 74
Best yet: 278
New solution
function cost: 204
child voicing cost: 73
Best yet: 277
New solution
function cost: 204
child voicing cost: 70
Best yet: 274
New solution
function cost: 186
child voicing cost: 85
Best yet: 271
New solution
function cost: 171
child voicing cost: 80
Best yet: 251
New solution
function cost: 171
child voicing cost: 77
Best yet: 248
New solution
function cost: 171
child voicing cost: 74
Best yet: 245
New solution
function cost: 165
child voicing cost: 77
Best yet: 242
New solution
function cost: 168
child voicing cost: 73
Best yet: 241
New solution
function cost: 174
child voicing cost: 65
Best yet: 239
New solution
function cost: 174
child voicing cost: 62
Best yet: 236

(15, "T", Tuple{Int16,Int16}[(60, 1), (60, 1), (67, 5), (76, 3)])

(3, "T", Tuple{Int16,Int16}[(60, 1), (64, 3), (67, 5), (72, 1)])

(12, "D/3", Tuple{Int16,Int16}[(59, 3), (62, 5), (67, 1), (74, 5)])

(6, "S/3", Tuple{Int16,Int16}[(57, 3), (60, 5), (65, 1), (77, 1)])

(15, "D7", Tuple{Int16,Int16}[(55, 1), (62, 5), (71, 3), (77, 7)])

(3, "Ts", Tuple{Int16,Int16}[(57, 1), (60, 3), (72, 3), (76, 5)])

(30, "D", Tuple{Int16,Int16}[(55, 1), (62, 5), (71, 3), (79, 1)])

(9, "D", Tuple{Int16,Int16}[(43, 1), (62, 5), (71, 3), (79, 1)])

(18, "S/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (72, 5), (77, 1)])

(3, "D/3", Tuple{Int16,Int16}[(47, 3), (62, 5), (67, 1), (74, 5)])

(27, "T", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(6, "D7-1", Tuple{Int16,Int16}[(50, 5), (62, 5), (65, 7), (71, 3)])

(24, "T", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(15, "D/3", Tuple{Int16,Int16}[(47, 3), (62, 5), (67, 1), (74, 5)])

(15, "T", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(15, "T", Tuple{Int16,Int16}[(48, 1), (64, 3), (72, 1), (79, 5)])

(6, "D7", Tuple{Int16,Int16}[(55, 1), (62, 5), (71, 3), (77, 7)])

(0, "Ts", Tuple{Int16,Int16}[(57, 1), (60, 3), (72, 3), (76, 5)])

(9, "S65", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (74, 6)])

(12, "D", Tuple{Int16,Int16}[(55, 1), (59, 3), (67, 1), (74, 5)])

(0, "T-5", Tuple{Int16,Int16}[(48, 1), (60, 1), (64, 3), (72, 1)])

(15, "D/3", Tuple{Int16,Int16}[(47, 3), (62, 5), (62, 5), (67, 1)])

(12, "Ts", Tuple{Int16,Int16}[(45, 1), (60, 3), (64, 5), (69, 1)])

(18, "D", Tuple{Int16,Int16}[(43, 1), (59, 3), (67, 1), (74, 5)])

(9, "D7/7", Tuple{Int16,Int16}[(41, 7), (59, 3), (67, 1), (74, 5)])

(0, "T/3", Tuple{Int16,Int16}[(40, 3), (60, 1), (67, 5), (79, 5)])

(9, "S", Tuple{Int16,Int16}[(41, 1), (60, 5), (69, 3), (77, 1)])

(15, "T/5", Tuple{Int16,Int16}[(43, 5), (60, 1), (67, 5), (76, 3)])

(15, "S", Tuple{Int16,Int16}[(41, 1), (60, 5), (69, 3), (77, 1)])

(15, "D", Tuple{Int16,Int16}[(43, 1), (59, 3), (67, 1), (74, 5)])

(18, "T", Tuple{Int16,Int16}[(48, 1), (60, 1), (67, 5), (76, 3)])

(18, "T", Tuple{Int16,Int16}[(48, 1), (60, 1), (67, 5), (76, 3)])

##: Done. Total checked: 174532, Pruned: 203844, completed: 20, time: 3.4040000438690186, efficiency: 5.875440582329667
Results: bestval_func: 174, bestval_voices: 62
#Key: 1Scale: Major
#Total time for optimisation of piece: 6.807999849319458
#Total cost of piece: 491
["T", "T", "D/3", "S/3", "D7", "Ts", "D", "D", "S/3", "D/3", "T", "D7-1", "T", "D/3", "T", "T", "D7", "Ts", "S65", "D", "T-5", "D/3", "Ts", "D", "D7/7", "T/3", "S", "T/5", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/SJP-21-life-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-27-king-nn.csv
[0 0 1 0 0 0 0 0 0 2 0 1; 1 0 0 0 1 0 0 0 0 1 0 1; 1 0 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 1 0 1 0 0 0 0 1 0 1; 1 0 1 0 0 0 0 0 0 1 0 1; 0 0 2 0 0 0 0 2 0 0 0 0; 1 0 0 0 2 0 0 0 0 1 0 0; 1 0 1 0 1 0 0 0 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 0 0 1 0 1 1 0 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 1 0 0 0 1 0 0 0 1 1 0 0; 1 0 0 0 1 0 0 0 0 1 0 1; 0 0 2 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 1 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 1 0 0 0 0 1 0 1 0 1; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 0 0 2; 0 0 1 0 1 0 1 0 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0]
Key Counter is [13 0 25 1 24 0 8 11 5 23 0 21]
Key Score is [117; 27; 112; 55; 82; 96; 35; 125; 30; 106; 73; 59]
Position Counter for 8 is [11 5 23 0 21 13 0 25 1 24 0 8]
Any[[8.0, 83.0, 0.0]]
[8, 83, 0]
5 E Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 204
child voicing cost: 103
Best yet: 307
New solution
function cost: 204
child voicing cost: 101
Best yet: 305
New solution
function cost: 204
child voicing cost: 100
Best yet: 304
New solution
function cost: 204
child voicing cost: 98
Best yet: 302
New solution
function cost: 183
child voicing cost: 103
Best yet: 286
New solution
function cost: 174
child voicing cost: 109
Best yet: 283
New solution
function cost: 183
child voicing cost: 99
Best yet: 282
New solution
function cost: 183
child voicing cost: 96
Best yet: 279
New solution
function cost: 183
child voicing cost: 95
Best yet: 278
New solution
function cost: 177
child voicing cost: 98
Best yet: 275
New solution
function cost: 174
child voicing cost: 100
Best yet: 274
New solution
function cost: 183
child voicing cost: 86
Best yet: 269
New solution
function cost: 183
child voicing cost: 83
Best yet: 266
New solution
function cost: 183
child voicing cost: 80
Best yet: 263
New solution
function cost: 162
child voicing cost: 99
Best yet: 261
New solution
function cost: 162
child voicing cost: 96
Best yet: 258
New solution
function cost: 162
child voicing cost: 93
Best yet: 255
New solution
function cost: 162
child voicing cost: 90
Best yet: 252
New solution
function cost: 144
child voicing cost: 105
Best yet: 249
New solution
function cost: 144
child voicing cost: 102
Best yet: 246
New solution
function cost: 144
child voicing cost: 99
Best yet: 243
New solution
function cost: 144
child voicing cost: 98
Best yet: 242
New solution
function cost: 144
child voicing cost: 95
Best yet: 239
New solution
function cost: 144
child voicing cost: 92
Best yet: 236
New solution
function cost: 144
child voicing cost: 89
Best yet: 233
##: Done. Total checked: 157157, Pruned: 181083, completed: 25, time: 3.067000150680542, efficiency: 8.1512875030191
Results: bestval_func: 144, bestval_voices: 89
[0 0 1 0 0 0 0 0 0 2 0 1; 1 0 0 0 1 0 0 0 0 1 0 1; 1 0 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 1 0 1 0 0 0 0 1 0 1; 1 0 1 0 0 0 0 0 0 1 0 1; 0 0 2 0 0 0 0 2 0 0 0 0; 1 0 0 0 2 0 0 0 0 1 0 0; 1 0 1 0 1 0 0 0 0 0 0 1; 1 0 0 0 1 0 0 1 0 0 0 1; 0 0 0 0 1 0 1 1 0 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 2 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 1 0 0 0 1 0 0 0 1 1 0 0; 1 0 0 0 1 0 0 0 0 1 0 1; 0 0 2 0 1 0 0 1 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 0 1; 1 0 1 0 1 0 0 0 0 1 0 0; 1 0 1 0 0 0 0 0 0 1 0 1; 0 0 1 0 0 0 0 1 0 0 0 2; 0 0 1 0 0 0 0 1 0 1 0 1; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 2 0 0 0 0 0 0 0 0 2; 0 0 1 0 1 0 1 0 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0]
Key Counter is [13 0 25 1 24 0 8 11 5 23 0 21]
Key Score is [117; 27; 112; 55; 82; 96; 35; 125; 30; 106; 73; 59]
Position Counter for 8 is [11 5 23 0 21 13 0 25 1 24 0 8]
Any[[8.0, 83.0, 0.0]]
[8, 83, 0]
5 E Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 222
child voicing cost: 69
Best yet: 291
New solution
function cost: 219
child voicing cost: 67
Best yet: 286
New solution
function cost: 210
child voicing cost: 65
Best yet: 275
New solution
function cost: 210
child voicing cost: 63
Best yet: 273
New solution
function cost: 210
child voicing cost: 62
Best yet: 272
New solution
function cost: 204
child voicing cost: 66
Best yet: 270
New solution
function cost: 210
child voicing cost: 58
Best yet: 268
New solution
function cost: 189
child voicing cost: 76
Best yet: 265
New solution
function cost: 189
child voicing cost: 72
Best yet: 261
New solution
function cost: 183
child voicing cost: 77
Best yet: 260
New solution
function cost: 189
child voicing cost: 69
Best yet: 258
New solution
function cost: 168
child voicing cost: 80
Best yet: 248
New solution
function cost: 168
child voicing cost: 74
Best yet: 242
New solution
function cost: 168
child voicing cost: 71
Best yet: 239
New solution
function cost: 156
child voicing cost: 80
Best yet: 236
New solution
function cost: 156
child voicing cost: 74
Best yet: 230
New solution
function cost: 156
child voicing cost: 71
Best yet: 227
New solution
function cost: 156
child voicing cost: 70
Best yet: 226

(27, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

(6, "S/3", Tuple{Int16,Int16}[(48, 3), (57, 1), (64, 5), (69, 1)])

(0, "S", Tuple{Int16,Int16}[(45, 1), (60, 3), (64, 5), (69, 1)])

(3, "T/3", Tuple{Int16,Int16}[(43, 3), (59, 5), (64, 1), (71, 5)])

(3, "T", Tuple{Int16,Int16}[(40, 1), (59, 5), (67, 3), (76, 1)])

(9, "D7", Tuple{Int16,Int16}[(47, 1), (57, 7), (66, 5), (75, 3)])

(15, "Ts", Tuple{Int16,Int16}[(48, 1), (55, 5), (64, 3), (76, 3)])

(21, "Ts", Tuple{Int16,Int16}[(48, 1), (52, 3), (64, 3), (67, 5)])

(0, "S/3", Tuple{Int16,Int16}[(48, 3), (52, 5), (64, 5), (69, 1)])

(12, "D", Tuple{Int16,Int16}[(47, 1), (54, 5), (63, 3), (71, 1)])

(12, "S/3", Tuple{Int16,Int16}[(48, 3), (52, 5), (64, 5), (69, 1)])

(6, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (67, 3)])

(6, "D7-1", Tuple{Int16,Int16}[(54, 5), (57, 7), (63, 3), (66, 5)])

(12, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (64, 1), (71, 5)])

(18, "D", Tuple{Int16,Int16}[(47, 1), (54, 5), (63, 3), (71, 1)])

(21, "D", Tuple{Int16,Int16}[(47, 1), (54, 5), (59, 1), (63, 3)])

(3, "D7/7", Tuple{Int16,Int16}[(45, 7), (54, 5), (59, 1), (63, 3)])

(9, "T/3", Tuple{Int16,Int16}[(43, 3), (52, 1), (59, 5), (64, 1)])

(9, "T", Tuple{Int16,Int16}[(40, 1), (52, 1), (59, 5), (67, 3)])

(3, "S", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (60, 3)])

(6, "D7-5", Tuple{Int16,Int16}[(47, 1), (51, 3), (57, 7), (59, 1)])

(15, "T", Tuple{Int16,Int16}[(52, 1), (52, 1), (55, 3), (59, 5)])

(0, "Dm", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(12, "S/3", Tuple{Int16,Int16}[(48, 3), (52, 5), (57, 1), (64, 5)])

(9, "D", Tuple{Int16,Int16}[(47, 1), (54, 5), (63, 3), (71, 1)])

(6, "S/3", Tuple{Int16,Int16}[(48, 3), (52, 5), (64, 5), (69, 1)])

(12, "S", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (72, 3)])

(0, "Tm", Tuple{Int16,Int16}[(43, 1), (59, 3), (67, 1), (74, 5)])

(15, "S", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (72, 3)])

(18, "D7", Tuple{Int16,Int16}[(47, 1), (57, 7), (63, 3), (66, 5)])

(24, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (59, 5), (64, 1)])

(24, "T", Tuple{Int16,Int16}[(52, 1), (55, 3), (59, 5), (64, 1)])

##: Done. Total checked: 80852, Pruned: 89830, completed: 18, time: 1.7379999160766602, efficiency: 10.356732375817934
Results: bestval_func: 156, bestval_voices: 70
#Key: 5Scale: Minor
#Total time for optimisation of piece: 6.327000141143799
#Total cost of piece: 459
["T", "S/3", "S", "T/3", "T", "D7", "Ts", "Ts", "S/3", "D", "S/3", "T", "D7-1", "T", "D", "D", "D7/7", "T/3", "T", "S", "D7-5", "T", "Dm", "S/3", "D", "S/3", "S", "Tm", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/SJP-27-king-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-40-fetrs-nn.csv
[0 0 0 0 0 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 0 0 1; 0 2 0 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 1 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 0 0 0 2 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 0 0 0 0 0 1 2 0 1; 0 0 0 0 1 0 0 0 1 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 2 0 0 0 0 1 0 0 1 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 0 0 0 0 0 2 0 0 1 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 2 0 0 0 0 1 0 0 1 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 2 0 0 0 0 0 0 1 1 0 0; 0 0 0 1 0 0 2 0 1 0 0 0; 0 1 0 0 0 0 0 0 2 1 0 0; 0 1 0 0 1 0 1 0 1 0 0 0]
Key Counter is [0 30 2 1 15 2 25 0 22 17 0 12]
Key Score is [48; 80; 101; 27; 122; 36; 92; 71; 55; 123; 22; 105]
Position Counter for 10 is [17 0 12 0 30 2 1 15 2 25 0 22]
Any[[10.0, 82.5, 0.0]]
[10, 82, 0]
7 F# Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 183
child voicing cost: 106
Best yet: 289
New solution
function cost: 183
child voicing cost: 103
Best yet: 286
New solution
function cost: 177
child voicing cost: 101
Best yet: 278
New solution
function cost: 177
child voicing cost: 100
Best yet: 277
New solution
function cost: 162
child voicing cost: 108
Best yet: 270
New solution
function cost: 162
child voicing cost: 107
Best yet: 269
New solution
function cost: 162
child voicing cost: 104
Best yet: 266
New solution
function cost: 165
child voicing cost: 100
Best yet: 265
New solution
function cost: 165
child voicing cost: 99
Best yet: 264
New solution
function cost: 162
child voicing cost: 91
Best yet: 253
New solution
function cost: 165
child voicing cost: 84
Best yet: 249
New solution
function cost: 156
child voicing cost: 90
Best yet: 246
New solution
function cost: 156
child voicing cost: 89
Best yet: 245
New solution
function cost: 156
child voicing cost: 80
Best yet: 236
##: Done. Total checked: 230627, Pruned: 300426, completed: 14, time: 4.957000017166138, efficiency: 2.824288874625352
Results: bestval_func: 156, bestval_voices: 80
[0 0 0 0 0 0 1 0 0 1 0 1; 0 0 0 0 1 0 0 0 1 0 0 1; 0 2 0 0 0 0 0 0 0 1 0 0; 0 0 1 0 0 0 0 0 1 0 0 0; 0 1 0 0 0 0 0 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 1 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 0 0 0 2 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 0 0 0 0 0 1 2 0 1; 0 0 0 0 1 0 0 0 1 2 0 0; 0 1 0 0 1 0 0 0 0 2 0 0; 0 2 0 0 0 0 1 0 0 1 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 1 0 0 0 0 1 0 1 0 0 1; 0 0 0 0 0 0 2 0 0 1 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 1 0 0 1; 0 2 0 0 0 0 1 0 0 1 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 0 1 1 0 1 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 2 0 0 0 0 1 0 1 0 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 0 2 0 0 0 0 0 0 1 1 0 0; 0 0 0 1 0 0 2 0 1 0 0 0; 0 1 0 0 0 0 0 0 2 1 0 0; 0 1 0 0 1 0 1 0 1 0 0 0]
Key Counter is [0 30 2 1 15 2 25 0 22 17 0 12]
Key Score is [48; 80; 101; 27; 122; 36; 92; 71; 55; 123; 22; 105]
Position Counter for 10 is [17 0 12 0 30 2 1 15 2 25 0 22]
Any[[10.0, 82.5, 0.0]]
[10, 82, 0]
7 F# Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 147
child voicing cost: 94
Best yet: 241
New solution
function cost: 150
child voicing cost: 76
Best yet: 226
New solution
function cost: 135
child voicing cost: 81
Best yet: 216
New solution
function cost: 135
child voicing cost: 80
Best yet: 215
New solution
function cost: 132
child voicing cost: 79
Best yet: 211
New solution
function cost: 132
child voicing cost: 78
Best yet: 210
New solution
function cost: 132
child voicing cost: 76
Best yet: 208
New solution
function cost: 132
child voicing cost: 75
Best yet: 207
New solution
function cost: 108
child voicing cost: 96
Best yet: 204
New solution
function cost: 108
child voicing cost: 95
Best yet: 203
New solution
function cost: 108
child voicing cost: 93
Best yet: 201
New solution
function cost: 108
child voicing cost: 92
Best yet: 200

(6, "T", Tuple{Int16,Int16}[(54, 1), (54, 1), (61, 5), (69, 3)])

(0, "Dm", Tuple{Int16,Int16}[(52, 1), (56, 3), (64, 1), (71, 5)])

(6, "Ts", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (78, 3)])

(3, "D", Tuple{Int16,Int16}[(49, 1), (61, 1), (68, 5), (77, 3)])

(3, "S/3", Tuple{Int16,Int16}[(50, 3), (54, 5), (66, 5), (71, 1)])

(0, "T", Tuple{Int16,Int16}[(54, 1), (57, 3), (66, 1), (73, 5)])

(18, "D", Tuple{Int16,Int16}[(49, 1), (56, 5), (65, 3), (73, 1)])

(9, "D", Tuple{Int16,Int16}[(49, 1), (53, 3), (61, 1), (68, 5)])

(6, "T", Tuple{Int16,Int16}[(42, 1), (54, 1), (61, 5), (69, 3)])

(18, "D7/3", Tuple{Int16,Int16}[(41, 3), (56, 5), (61, 1), (71, 7)])

(21, "T", Tuple{Int16,Int16}[(42, 1), (54, 1), (61, 5), (69, 3)])

(12, "D7-1", Tuple{Int16,Int16}[(44, 5), (47, 7), (59, 7), (65, 3)])

(15, "T", Tuple{Int16,Int16}[(42, 1), (49, 5), (57, 3), (66, 1)])

(12, "D7/3", Tuple{Int16,Int16}[(41, 3), (49, 1), (59, 7), (68, 5)])

(18, "T", Tuple{Int16,Int16}[(42, 1), (49, 5), (57, 3), (66, 1)])

(15, "T", Tuple{Int16,Int16}[(42, 1), (54, 1), (57, 3), (61, 5)])

(6, "T/3", Tuple{Int16,Int16}[(45, 3), (54, 1), (61, 5), (73, 5)])

(3, "D7/5", Tuple{Int16,Int16}[(44, 5), (53, 3), (61, 1), (71, 7)])

(6, "T", Tuple{Int16,Int16}[(42, 1), (54, 1), (61, 5), (69, 3)])

(9, "Tm", Tuple{Int16,Int16}[(45, 1), (52, 5), (61, 3), (69, 1)])

(15, "S", Tuple{Int16,Int16}[(47, 1), (50, 3), (59, 1), (66, 5)])

(3, "D7/7", Tuple{Int16,Int16}[(47, 7), (56, 5), (61, 1), (65, 3)])

(0, "T/3", Tuple{Int16,Int16}[(45, 3), (54, 1), (61, 5), (66, 1)])

(3, "D/5", Tuple{Int16,Int16}[(44, 5), (53, 3), (61, 1), (68, 5)])

(6, "T", Tuple{Int16,Int16}[(42, 1), (54, 1), (61, 5), (69, 3)])

(3, "D/3", Tuple{Int16,Int16}[(41, 3), (56, 5), (68, 5), (73, 1)])

(9, "T", Tuple{Int16,Int16}[(42, 1), (57, 3), (66, 1), (73, 5)])

(3, "T/3", Tuple{Int16,Int16}[(45, 3), (54, 1), (61, 5), (66, 1)])

(9, "D54", Tuple{Int16,Int16}[(49, 1), (54, 4), (61, 1), (68, 5)])

(12, "D", Tuple{Int16,Int16}[(49, 1), (53, 3), (61, 1), (68, 5)])

(9, "T", Tuple{Int16,Int16}[(42, 1), (54, 1), (61, 5), (69, 3)])

(9, "T", Tuple{Int16,Int16}[(42, 1), (54, 1), (61, 5), (69, 3)])

New solution
function cost: 108
child voicing cost: 87
Best yet: 195
New solution
function cost: 108
child voicing cost: 86
Best yet: 194
##: Done. Total checked: 64560, Pruned: 74070, completed: 14, time: 1.4550001621246338, efficiency: 9.621992055008977
Results: bestval_func: 108, bestval_voices: 86
#Key: 7Scale: Minor
#Total time for optimisation of piece: 7.837000131607056
#Total cost of piece: 430
["T", "Dm", "Ts", "D", "S/3", "T", "D", "D", "T", "D7/3", "T", "D7-1", "T", "D7/3", "T", "T", "T/3", "D7/5", "T", "Tm", "S", "D7/7", "T/3", "D/5", "T", "D/3", "T", "T/3", "D54", "D", "T", "T"]
../../results/optimizer/pianoroll/SJP-40-fetrs-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-52-name-nn.csv
[0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 2 0 0 0 0 0 0 0 0 1; 2 0 0 2 0 0 0 0 0 0 0 0; 1 0 0 1 0 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 1 1 0 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 2 0 0 1 0 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 0 0 2 0 0 0 0 2 0; 0 0 0 0 0 0 0 2 0 0 2 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 2 1 0 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 0 0 1 0 1 0 0 2 0; 2 0 0 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 1 0 0 0 0; 0 0 2 0 0 1 0 0 1 0 0 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 1 1 0 0 0 0 1 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0]
Key Counter is [12 0 10 23 0 19 0 23 11 1 29 1]
Key Score is [66; 94; 35; 127; 36; 94; 83; 47; 117; 23; 117; 64]
Position Counter for 4 is [23 0 19 0 23 11 1 29 1 12 0 10]
Any[[4.0, 86.5, 1.0]]
[4, 86, 1]
4 D# Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 141
child voicing cost: 105
Best yet: 246
New solution
function cost: 141
child voicing cost: 104
Best yet: 245
New solution
function cost: 141
child voicing cost: 96
Best yet: 237
New solution
function cost: 141
child voicing cost: 95
Best yet: 236
New solution
function cost: 129
child voicing cost: 90
Best yet: 219
New solution
function cost: 129
child voicing cost: 87
Best yet: 216
##: Done. Total checked: 102050, Pruned: 127756, completed: 6, time: 2.172999858856201, efficiency: 2.761159866415367
Results: bestval_func: 129, bestval_voices: 87
[0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 0 2 0 0 0 0 0 0 0 0 1; 2 0 0 2 0 0 0 0 0 0 0 0; 1 0 0 1 0 1 0 1 0 0 0 0; 1 0 0 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 1 1 0 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 0 0 1 0 1 0 0 2 0; 0 0 2 0 0 1 0 0 0 0 1 0; 0 0 0 0 0 1 0 1 0 0 2 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 0 0 2 0 0 0 0 2 0; 0 0 0 0 0 0 0 2 0 0 2 0; 0 0 0 0 0 2 0 0 2 0 0 0; 0 0 0 1 0 1 0 0 1 0 1 0; 1 0 0 2 0 0 0 1 0 0 0 0; 0 0 0 0 0 1 0 2 1 0 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 0 0 0 1 0 1 0 0 2 0; 2 0 0 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 1 0 0 0 0; 0 0 2 0 0 1 0 0 1 0 0 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 1 1 0 0 0 0 1 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 1 0]
Key Counter is [12 0 10 23 0 19 0 23 11 1 29 1]
Key Score is [66; 94; 35; 127; 36; 94; 83; 47; 117; 23; 117; 64]
Position Counter for 4 is [23 0 19 0 23 11 1 29 1 12 0 10]
Any[[4.0, 86.5, 1.0]]
[4, 86, 1]
4 D# Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 144
child voicing cost: 100
Best yet: 244
New solution
function cost: 153
child voicing cost: 83
Best yet: 236
New solution
function cost: 144
child voicing cost: 90
Best yet: 234
New solution
function cost: 144
child voicing cost: 87
Best yet: 231

(0, "T", Tuple{Int16,Int16}[(51, 1), (51, 1), (58, 5), (67, 3)])

(0, "T", Tuple{Int16,Int16}[(51, 1), (55, 3), (58, 5), (63, 1)])

(9, "D/3", Tuple{Int16,Int16}[(50, 3), (53, 5), (58, 1), (65, 5)])

(0, "S/3", Tuple{Int16,Int16}[(48, 3), (51, 5), (56, 1), (68, 1)])

(12, "D7/3", Tuple{Int16,Int16}[(50, 3), (53, 5), (58, 1), (68, 7)])

(0, "Ts", Tuple{Int16,Int16}[(48, 1), (55, 5), (60, 1), (63, 3)])

(18, "D", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (65, 5)])

(6, "D", Tuple{Int16,Int16}[(46, 1), (50, 3), (58, 1), (65, 5)])

(0, "T/3", Tuple{Int16,Int16}[(43, 3), (51, 1), (58, 5), (70, 5)])

(9, "S", Tuple{Int16,Int16}[(44, 1), (51, 5), (60, 3), (68, 1)])

(0, "D", Tuple{Int16,Int16}[(46, 1), (50, 3), (58, 1), (65, 5)])

(15, "D7/7", Tuple{Int16,Int16}[(44, 7), (50, 3), (58, 1), (65, 5)])

(12, "T/3", Tuple{Int16,Int16}[(43, 3), (51, 1), (58, 5), (70, 5)])

(12, "D7-5", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (68, 7)])

(15, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (63, 1), (67, 3)])

(21, "T", Tuple{Int16,Int16}[(51, 1), (55, 3), (63, 1), (70, 5)])

(0, "Tm", Tuple{Int16,Int16}[(55, 1), (58, 3), (62, 5), (70, 3)])

(21, "S", Tuple{Int16,Int16}[(56, 1), (56, 1), (60, 3), (63, 5)])

(3, "D7/3", Tuple{Int16,Int16}[(50, 3), (56, 7), (58, 1), (65, 5)])

(0, "Ts", Tuple{Int16,Int16}[(48, 1), (51, 3), (63, 3), (67, 5)])

(18, "D7-1", Tuple{Int16,Int16}[(41, 5), (53, 5), (62, 3), (68, 7)])

(9, "D7/7", Tuple{Int16,Int16}[(44, 7), (53, 5), (62, 3), (70, 1)])

(0, "T/3", Tuple{Int16,Int16}[(43, 3), (51, 1), (63, 1), (70, 5)])

(9, "S", Tuple{Int16,Int16}[(44, 1), (56, 1), (60, 3), (63, 5)])

(15, "D", Tuple{Int16,Int16}[(46, 1), (53, 5), (58, 1), (62, 3)])

(15, "T/3", Tuple{Int16,Int16}[(43, 3), (51, 1), (58, 5), (63, 1)])

(9, "S65", Tuple{Int16,Int16}[(44, 1), (51, 5), (60, 3), (65, 6)])

(24, "T/5", Tuple{Int16,Int16}[(46, 5), (51, 1), (58, 5), (67, 3)])

(12, "S", Tuple{Int16,Int16}[(44, 1), (51, 5), (60, 3), (68, 1)])

(6, "D7", Tuple{Int16,Int16}[(46, 1), (56, 7), (62, 3), (65, 5)])

(3, "T", Tuple{Int16,Int16}[(51, 1), (55, 3), (58, 5), (63, 1)])

(3, "T", Tuple{Int16,Int16}[(51, 1), (55, 3), (58, 5), (63, 1)])

##: Done. Total checked: 47635, Pruned: 57806, completed: 4, time: 1.1380000114440918, efficiency: 3.5149384532291053
Results: bestval_func: 144, bestval_voices: 87
#Key: 4Scale: Major
#Total time for optimisation of piece: 4.681999921798706
#Total cost of piece: 447
["T", "T", "D/3", "S/3", "D7/3", "Ts", "D", "D", "T/3", "S", "D", "D7/7", "T/3", "D7-5", "T", "T", "Tm", "S", "D7/3", "Ts", "D7-1", "D7/7", "T/3", "S", "D", "T/3", "S65", "T/5", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/SJP-52-name-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-56-right-nn.csv
[0 1 0 0 0 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 0 0 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 1 0 0 0 1 0 1 0 0 1; 0 1 1 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 1 0 0 0 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 0 0 0 0 0 0 2 0 0 2; 0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 0 0 0 2 0 0 2 0 0; 0 3 0 0 1 0 0 0 0 0 0 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 2 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 1 0 1 0 0 0 1 1 0 0; 0 2 1 0 1 0 0 0 0 0 0 0; 0 1 1 0 1 0 0 0 1 0 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 1 0 1 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1]
Key Counter is [0 15 7 4 27 0 14 0 25 16 0 19]
Key Score is [69; 58; 98; 36; 120; 50; 77; 83; 44; 123; 27; 104]
Position Counter for 10 is [16 0 19 0 15 7 4 27 0 14 0 25]
Any[[10.0, 87.0, 1.0]]
[10, 87, 1]
10 A Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 159
child voicing cost: 75
Best yet: 234
New solution
function cost: 159
child voicing cost: 74
Best yet: 233
New solution
function cost: 150
child voicing cost: 78
Best yet: 228
New solution
function cost: 150
child voicing cost: 76
Best yet: 226
New solution
function cost: 150
child voicing cost: 70
Best yet: 220
New solution
function cost: 147
child voicing cost: 71
Best yet: 218
New solution
function cost: 144
child voicing cost: 71
Best yet: 215
New solution
function cost: 135
child voicing cost: 79
Best yet: 214
New solution
function cost: 135
child voicing cost: 78
Best yet: 213
New solution
function cost: 141
child voicing cost: 71
Best yet: 212
New solution
function cost: 141
child voicing cost: 69
Best yet: 210
New solution
function cost: 135
child voicing cost: 74
Best yet: 209
New solution
function cost: 141
child voicing cost: 66
Best yet: 207
New solution
function cost: 114
child voicing cost: 90
Best yet: 204
New solution
function cost: 114
child voicing cost: 88
Best yet: 202
New solution
function cost: 114
child voicing cost: 85
Best yet: 199
New solution
function cost: 120
child voicing cost: 78
Best yet: 198
New solution
function cost: 114
child voicing cost: 83
Best yet: 197
New solution
function cost: 123
child voicing cost: 73
Best yet: 196
New solution
function cost: 120
child voicing cost: 74
Best yet: 194
New solution
function cost: 123
child voicing cost: 70
Best yet: 193
New solution
function cost: 126
child voicing cost: 66
Best yet: 192
New solution
function cost: 123
child voicing cost: 67
Best yet: 190
##: Done. Total checked: 260876, Pruned: 320213, completed: 23, time: 5.187999963760376, efficiency: 4.433307663967117
Results: bestval_func: 123, bestval_voices: 67
[0 1 0 0 0 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 0 0 0 0 0 1 0 0; 0 0 0 0 1 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 1 0 0 0 1 0 1 0 0 1; 0 1 1 0 0 0 1 0 0 1 0 0; 0 1 1 0 1 0 1 0 0 0 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 1 0 0; 0 1 0 0 1 0 0 0 1 1 0 0; 0 0 0 0 0 0 0 0 2 0 0 2; 0 0 0 0 1 0 1 0 1 1 0 0; 0 0 0 0 0 0 2 0 0 2 0 0; 0 3 0 0 1 0 0 0 0 0 0 0; 0 0 0 0 0 0 1 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 1 0 0 1 0 0 2 0 0; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 0 0 1 1 0 1 0 0 0 0 1; 0 0 0 0 2 0 0 0 1 1 0 0; 0 0 0 1 2 0 0 0 0 0 0 1; 0 0 1 0 1 0 0 0 1 1 0 0; 0 2 1 0 1 0 0 0 0 0 0 0; 0 1 1 0 1 0 0 0 1 0 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 0 0 0 0 0 1 0 1 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1]
Key Counter is [0 15 7 4 27 0 14 0 25 16 0 19]
Key Score is [69; 58; 98; 36; 120; 50; 77; 83; 44; 123; 27; 104]
Position Counter for 10 is [16 0 19 0 15 7 4 27 0 14 0 25]
Any[[10.0, 87.0, 1.0]]
[10, 87, 1]
10 A Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 210
child voicing cost: 77
Best yet: 287
New solution
function cost: 210
child voicing cost: 74
Best yet: 284
New solution
function cost: 204
child voicing cost: 75
Best yet: 279
New solution
function cost: 204
child voicing cost: 72
Best yet: 276

(0, "T", Tuple{Int16,Int16}[(57, 1), (64, 5), (69, 1), (73, 3)])

(0, "D/5", Tuple{Int16,Int16}[(59, 5), (64, 1), (68, 3), (71, 5)])

(0, "T", Tuple{Int16,Int16}[(57, 1), (64, 5), (69, 1), (73, 3)])

(0, "D7/3", Tuple{Int16,Int16}[(56, 3), (62, 7), (71, 5), (76, 1)])

(3, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (69, 1), (76, 5)])

(15, "Ts", Tuple{Int16,Int16}[(54, 1), (61, 5), (69, 3), (78, 1)])

(0, "D", Tuple{Int16,Int16}[(52, 1), (64, 1), (71, 5), (80, 3)])

(12, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(9, "S/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (69, 5), (74, 1)])

(3, "S", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (74, 1)])

(15, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (69, 1)])

(0, "D/5", Tuple{Int16,Int16}[(47, 5), (56, 3), (64, 1), (71, 5)])

(12, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(9, "D7/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (62, 7), (64, 1)])

(27, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (61, 3), (64, 5)])

(18, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (61, 3), (69, 1)])

(0, "Ts", Tuple{Int16,Int16}[(42, 1), (54, 1), (61, 5), (69, 3)])

(24, "D7", Tuple{Int16,Int16}[(40, 1), (56, 3), (62, 7), (71, 5)])

(12, "Ts", Tuple{Int16,Int16}[(42, 1), (57, 3), (61, 5), (66, 1)])

(9, "D/3", Tuple{Int16,Int16}[(44, 3), (47, 5), (59, 5), (64, 1)])

(12, "D", Tuple{Int16,Int16}[(40, 1), (47, 5), (56, 3), (64, 1)])

(18, "S/3", Tuple{Int16,Int16}[(42, 3), (50, 1), (57, 5), (62, 1)])

(12, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(9, "D/5", Tuple{Int16,Int16}[(47, 5), (52, 1), (56, 3), (59, 5)])

(18, "T/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (64, 5)])

(6, "D", Tuple{Int16,Int16}[(52, 1), (56, 3), (59, 5), (64, 1)])

(15, "D7/7", Tuple{Int16,Int16}[(50, 7), (52, 1), (59, 5), (68, 3)])

(6, "T/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (69, 1)])

(21, "S", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(6, "D7", Tuple{Int16,Int16}[(52, 1), (56, 3), (59, 5), (62, 7)])

(15, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

(15, "T", Tuple{Int16,Int16}[(45, 1), (52, 5), (57, 1), (61, 3)])

##: Done. Total checked: 46239, Pruned: 50822, completed: 4, time: 1.003000020980835, efficiency: 3.988035808900976
Results: bestval_func: 204, bestval_voices: 72
#Key: 10Scale: Major
#Total time for optimisation of piece: 7.521000146865845
#Total cost of piece: 466
["T", "D/5", "T", "D7/3", "T", "Ts", "D", "D", "S/3", "S", "T/3", "D/5", "T", "D7/3", "T", "T", "Ts", "D7", "Ts", "D/3", "D", "S/3", "T", "D/5", "T/3", "D", "D7/7", "T/3", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/SJP-56-right-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-65-help-nn.csv
[0 1 0 0 0 0 0 0 0 0 2 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 0 0 1 0 1 1 0 0 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 2 0 0 0 0 0 0 0 0 2 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 2 0 0 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 1 1 0 0 0 0 2 0; 1 0 0 1 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 0 1 1 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 0 0 1 0; 0 0 1 0 0 1 1 0 0 0 1 0; 0 0 1 0 0 2 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 0 1 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 0 0 0 1 2 0 0 0 0 1 0; 1 1 0 0 0 1 0 0 0 1 0 0; 2 1 0 0 0 0 0 0 0 0 1 0; 0 2 0 0 0 1 0 0 0 0 1 0; 1 1 0 0 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 0 0 0 0 2 0; 1 1 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 1 0 0 0 1 0 1 0; 1 1 0 0 0 1 0 0 1 0 0 0]
Key Counter is [21 19 3 10 3 29 4 0 9 5 27 0]
Key Score is [61; 119; 34; 99; 50; 88; 98; 36; 115; 43; 95; 72]
Position Counter for 2 is [19 3 10 3 29 4 0 9 5 27 0 21]
Any[[2.0, 83.0, 0.0]]
[2, 83, 0]
11 A# Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 132
child voicing cost: 105
Best yet: 237
New solution
function cost: 132
child voicing cost: 102
Best yet: 234
New solution
function cost: 165
child voicing cost: 67
Best yet: 232
New solution
function cost: 159
child voicing cost: 70
Best yet: 229
New solution
function cost: 153
child voicing cost: 74
Best yet: 227
New solution
function cost: 153
child voicing cost: 70
Best yet: 223
New solution
function cost: 138
child voicing cost: 78
Best yet: 216
New solution
function cost: 129
child voicing cost: 86
Best yet: 215
New solution
function cost: 138
child voicing cost: 74
Best yet: 212
New solution
function cost: 138
child voicing cost: 73
Best yet: 211
New solution
function cost: 138
child voicing cost: 68
Best yet: 206
##: Done. Total checked: 51508, Pruned: 60529, completed: 11, time: 1.187000036239624, efficiency: 9.267059531731464
Results: bestval_func: 138, bestval_voices: 68
[0 1 0 0 0 0 0 0 0 0 2 0; 1 1 0 0 0 1 0 0 1 0 0 0; 0 0 0 1 0 1 1 0 0 0 0 0; 0 1 0 1 0 0 1 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 2 0 0 0 0 0 0 0 0 2 0; 1 1 0 1 0 0 0 0 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 2 0 0 0 1 0 0 1 0 0 0; 0 1 0 2 0 0 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 0 1 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 1 1 0 0 0 0 2 0; 1 0 0 1 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 0 1 1 0 0; 1 1 0 0 0 1 0 0 1 0 0 0; 1 0 0 1 0 0 1 0 0 0 1 0; 0 0 1 0 0 1 1 0 0 0 1 0; 0 0 1 0 0 2 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 0 0 1 1 0; 2 0 0 0 0 2 0 0 0 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 0 0 0 0 1 2 0 0 0 0 1 0; 1 1 0 0 0 1 0 0 0 1 0 0; 2 1 0 0 0 0 0 0 0 0 1 0; 0 2 0 0 0 1 0 0 0 0 1 0; 1 1 0 0 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 0 0 0 0 2 0; 1 1 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 1 0 0 0 1 0 1 0; 1 1 0 0 0 1 0 0 1 0 0 0]
Key Counter is [21 19 3 10 3 29 4 0 9 5 27 0]
Key Score is [61; 119; 34; 99; 50; 88; 98; 36; 115; 43; 95; 72]
Position Counter for 2 is [19 3 10 3 29 4 0 9 5 27 0 21]
Any[[2.0, 83.0, 0.0]]
[2, 83, 0]
11 A# Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 165
child voicing cost: 92
Best yet: 257
New solution
function cost: 165
child voicing cost: 89
Best yet: 254
New solution
function cost: 165
child voicing cost: 86
Best yet: 251
New solution
function cost: 153
child voicing cost: 96
Best yet: 249
New solution
function cost: 153
child voicing cost: 93
Best yet: 246
New solution
function cost: 153
child voicing cost: 92
Best yet: 245
New solution
function cost: 153
child voicing cost: 91
Best yet: 244
New solution
function cost: 150
child voicing cost: 93
Best yet: 243
New solution
function cost: 147
child voicing cost: 95
Best yet: 242
New solution
function cost: 150
child voicing cost: 86
Best yet: 236
New solution
function cost: 147
child voicing cost: 88
Best yet: 235

(0, "T", Tuple{Int16,Int16}[(58, 1), (58, 1), (65, 5), (73, 3)])

(9, "Dm", Tuple{Int16,Int16}[(56, 1), (60, 3), (68, 1), (75, 5)])

(6, "S/3", Tuple{Int16,Int16}[(54, 3), (58, 5), (70, 5), (75, 1)])

(9, "T/5", Tuple{Int16,Int16}[(53, 5), (61, 3), (70, 1), (77, 5)])

(15, "S65", Tuple{Int16,Int16}[(51, 1), (60, 6), (70, 5), (78, 3)])

(0, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(12, "T", Tuple{Int16,Int16}[(58, 1), (61, 3), (65, 5), (70, 1)])

(12, "T", Tuple{Int16,Int16}[(46, 1), (61, 3), (65, 5), (70, 1)])

(3, "D7/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (75, 7)])

(15, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (73, 3)])

(12, "S65/6", Tuple{Int16,Int16}[(48, 6), (58, 5), (66, 3), (75, 1)])

(3, "D", Tuple{Int16,Int16}[(53, 1), (57, 3), (65, 1), (72, 5)])

(6, "D7", Tuple{Int16,Int16}[(53, 1), (57, 3), (63, 7), (72, 5)])

(18, "Ts", Tuple{Int16,Int16}[(54, 1), (58, 3), (61, 5), (70, 3)])

(9, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(9, "D", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(9, "D7", Tuple{Int16,Int16}[(41, 1), (60, 5), (63, 7), (69, 3)])

(12, "Ts", Tuple{Int16,Int16}[(42, 1), (58, 3), (61, 5), (70, 3)])

(6, "T/3", Tuple{Int16,Int16}[(49, 3), (58, 1), (65, 5), (77, 5)])

(12, "S", Tuple{Int16,Int16}[(51, 1), (58, 5), (66, 3), (75, 1)])

(3, "T/3", Tuple{Int16,Int16}[(49, 3), (58, 1), (65, 5), (70, 1)])

(6, "T", Tuple{Int16,Int16}[(46, 1), (61, 3), (65, 5), (70, 1)])

(0, "D/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (72, 5)])

(9, "D", Tuple{Int16,Int16}[(41, 1), (60, 5), (69, 3), (77, 1)])

(12, "S/3", Tuple{Int16,Int16}[(42, 3), (58, 5), (70, 5), (75, 1)])

(3, "D/3", Tuple{Int16,Int16}[(45, 3), (53, 1), (60, 5), (72, 5)])

(12, "T-5", Tuple{Int16,Int16}[(46, 1), (58, 1), (61, 3), (70, 1)])

(9, "T", Tuple{Int16,Int16}[(46, 1), (58, 1), (61, 3), (65, 5)])

(21, "D7-1", Tuple{Int16,Int16}[(48, 5), (57, 3), (60, 5), (63, 7)])

(18, "D7", Tuple{Int16,Int16}[(53, 1), (57, 3), (60, 5), (63, 7)])

(6, "T", Tuple{Int16,Int16}[(46, 1), (53, 5), (58, 1), (61, 3)])

(6, "T", Tuple{Int16,Int16}[(46, 1), (53, 5), (58, 1), (61, 3)])

##: Done. Total checked: 100296, Pruned: 112373, completed: 11, time: 2.0840001106262207, efficiency: 5.278310660307313
Results: bestval_func: 147, bestval_voices: 88
#Key: 11Scale: Minor
#Total time for optimisation of piece: 4.559999942779541
#Total cost of piece: 441
["T", "Dm", "S/3", "T/5", "S65", "D", "T", "T", "D7/3", "T", "S65/6", "D", "D7", "Ts", "D", "D", "D7", "Ts", "T/3", "S", "T/3", "T", "D/3", "D", "S/3", "D/3", "T-5", "T", "D7-1", "D7", "T", "T"]
../../results/optimizer/pianoroll/SJP-65-help-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SJP-68-lord-nn.csv
[0 0 0 2 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 2 0 0 1 0 0 0 1 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 1 0 0 0 0 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 1 0 0 0 1 0 0 0 0; 1 0 0 1 0 0 0 2 0 0 0 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 2 1 0 0 0 0 0 0 0 0; 0 0 1 1 0 1 0 0 0 0 1 0; 1 0 0 1 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 1; 1 0 2 0 0 1 0 0 0 0 0 0; 0 0 2 0 0 0 0 1 0 0 1 0; 1 0 0 2 0 1 0 0 0 0 0 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 1 0 0 0 0 0 0; 0 0 2 0 0 0 0 0 0 0 2 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 1 0 0 0 0 1 0; 1 1 0 1 0 1 0 0 0 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 0 0 1 0 0 2 0 0 0 0 1 0]
Key Counter is [21 3 15 20 0 21 0 17 7 0 27 1]
Key Score is [75; 99; 36; 128; 31; 101; 79; 54; 116; 26; 121; 58]
Position Counter for 4 is [20 0 21 0 17 7 0 27 1 21 3 15]
Any[[4.0, 83.75, 1.0]]
[4, 84, 1]
4 D# Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 150
child voicing cost: 121
Best yet: 271
New solution
function cost: 150
child voicing cost: 120
Best yet: 270
New solution
function cost: 150
child voicing cost: 119
Best yet: 269
New solution
function cost: 150
child voicing cost: 116
Best yet: 266
New solution
function cost: 156
child voicing cost: 108
Best yet: 264
New solution
function cost: 153
child voicing cost: 100
Best yet: 253
New solution
function cost: 153
child voicing cost: 97
Best yet: 250
New solution
function cost: 150
child voicing cost: 98
Best yet: 248
New solution
function cost: 153
child voicing cost: 93
Best yet: 246
New solution
function cost: 156
child voicing cost: 89
Best yet: 245
New solution
function cost: 150
child voicing cost: 87
Best yet: 237
New solution
function cost: 150
child voicing cost: 83
Best yet: 233
New solution
function cost: 150
child voicing cost: 77
Best yet: 227
New solution
function cost: 150
child voicing cost: 74
Best yet: 224
##: Done. Total checked: 163432, Pruned: 206636, completed: 14, time: 3.3380000591278076, efficiency: 4.194128146198442
Results: bestval_func: 150, bestval_voices: 74
[0 0 0 2 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 2 0 0 1 0 0 0 1 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 0 1 0 0 0 1 0 0 1 0 1 0; 1 1 0 0 0 0 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 0 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 2 0 0 1 0 0 0 1 0 0 0 0; 1 0 0 1 0 0 0 2 0 0 0 0; 0 0 0 1 0 0 0 2 0 0 1 0; 1 0 2 1 0 0 0 0 0 0 0 0; 0 0 1 1 0 1 0 0 0 0 1 0; 1 0 0 1 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 1; 1 0 2 0 0 1 0 0 0 0 0 0; 0 0 2 0 0 0 0 1 0 0 1 0; 1 0 0 2 0 1 0 0 0 0 0 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 1 0 0 0 0 0 0; 0 0 2 0 0 0 0 0 0 0 2 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 1 1 0 0 0 0 0 0 2 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 1 0 1 0 0 0 0 1 0; 1 1 0 1 0 1 0 0 0 0 0 0; 0 0 0 0 0 2 0 0 1 0 1 0; 1 0 0 0 0 1 0 0 1 0 1 0; 0 0 1 0 0 2 0 0 0 0 1 0]
Key Counter is [21 3 15 20 0 21 0 17 7 0 27 1]
Key Score is [75; 99; 36; 128; 31; 101; 79; 54; 116; 26; 121; 58]
Position Counter for 4 is [20 0 21 0 17 7 0 27 1 21 3 15]
Any[[4.0, 83.75, 1.0]]
[4, 84, 1]
4 D# Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 201
child voicing cost: 77
Best yet: 278
New solution
function cost: 201
child voicing cost: 72
Best yet: 273
New solution
function cost: 189
child voicing cost: 76
Best yet: 265
New solution
function cost: 189
child voicing cost: 74
Best yet: 263
New solution
function cost: 189
child voicing cost: 68
Best yet: 257
New solution
function cost: 195
child voicing cost: 60
Best yet: 255
New solution
function cost: 192
child voicing cost: 61
Best yet: 253
New solution
function cost: 171
child voicing cost: 77
Best yet: 248
New solution
function cost: 177
child voicing cost: 70
Best yet: 247
New solution
function cost: 177
child voicing cost: 67
Best yet: 244

(0, "T", Tuple{Int16,Int16}[(51, 1), (63, 1), (70, 5), (79, 3)])

(0, "D/5", Tuple{Int16,Int16}[(53, 5), (62, 3), (70, 1), (77, 5)])

(12, "T/3", Tuple{Int16,Int16}[(55, 3), (63, 1), (70, 5), (75, 1)])

(0, "Tm", Tuple{Int16,Int16}[(55, 1), (58, 3), (70, 3), (74, 5)])

(3, "D7/3", Tuple{Int16,Int16}[(50, 3), (58, 1), (68, 7), (77, 5)])

(18, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (67, 3), (75, 1)])

(21, "S", Tuple{Int16,Int16}[(56, 1), (60, 3), (68, 1), (75, 5)])

(15, "S", Tuple{Int16,Int16}[(56, 1), (60, 3), (63, 5), (68, 1)])

(0, "Ts", Tuple{Int16,Int16}[(60, 1), (60, 1), (63, 3), (67, 5)])

(6, "S", Tuple{Int16,Int16}[(56, 1), (60, 3), (63, 5), (68, 1)])

(9, "T/3", Tuple{Int16,Int16}[(55, 3), (58, 5), (63, 1), (70, 5)])

(24, "D/5", Tuple{Int16,Int16}[(53, 5), (58, 1), (65, 5), (74, 3)])

(9, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (67, 3), (75, 1)])

(12, "D7/3", Tuple{Int16,Int16}[(50, 3), (58, 1), (68, 7), (77, 5)])

(9, "T", Tuple{Int16,Int16}[(51, 1), (63, 1), (67, 3), (70, 5)])

(12, "T", Tuple{Int16,Int16}[(51, 1), (55, 3), (63, 1), (70, 5)])

(3, "T/3", Tuple{Int16,Int16}[(55, 3), (58, 5), (63, 1), (70, 5)])

(18, "D/5", Tuple{Int16,Int16}[(53, 5), (58, 1), (65, 5), (74, 3)])

(6, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (67, 3), (75, 1)])

(6, "Ts", Tuple{Int16,Int16}[(48, 1), (60, 1), (67, 5), (75, 3)])

(6, "D7", Tuple{Int16,Int16}[(46, 1), (62, 3), (68, 7), (77, 5)])

(15, "Ts", Tuple{Int16,Int16}[(48, 1), (63, 3), (67, 5), (72, 1)])

(9, "S", Tuple{Int16,Int16}[(44, 1), (63, 5), (68, 1), (72, 3)])

(18, "T/3", Tuple{Int16,Int16}[(43, 3), (63, 1), (70, 5), (75, 1)])

(9, "D", Tuple{Int16,Int16}[(46, 1), (65, 5), (70, 1), (74, 3)])

(9, "S/3", Tuple{Int16,Int16}[(48, 3), (63, 5), (68, 1), (80, 1)])

(6, "D", Tuple{Int16,Int16}[(46, 1), (65, 5), (70, 1), (74, 3)])

(0, "T/3", Tuple{Int16,Int16}[(43, 3), (63, 1), (70, 5), (75, 1)])

(15, "S", Tuple{Int16,Int16}[(44, 1), (63, 5), (68, 1), (72, 3)])

(24, "D", Tuple{Int16,Int16}[(46, 1), (62, 3), (65, 5), (70, 1)])

(15, "T", Tuple{Int16,Int16}[(51, 1), (63, 1), (67, 3), (70, 5)])

(15, "T", Tuple{Int16,Int16}[(51, 1), (63, 1), (67, 3), (70, 5)])

##: Done. Total checked: 82164, Pruned: 89905, completed: 10, time: 1.6770000457763672, efficiency: 5.963029056072863
Results: bestval_func: 177, bestval_voices: 67
#Key: 4Scale: Major
#Total time for optimisation of piece: 6.363000154495239
#Total cost of piece: 468
["T", "D/5", "T/3", "Tm", "D7/3", "T", "S", "S", "Ts", "S", "T/3", "D/5", "T", "D7/3", "T", "T", "T/3", "D/5", "T", "Ts", "D7", "Ts", "S", "T/3", "D", "S/3", "D", "T/3", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/SJP-68-lord-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-03-chorl-nn.csv
[0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 0 1 0; 0 1 1 0 0 0 1 0 0 0 0 1; 0 0 0 0 1 1 0 0 0 1 0 1; 0 2 0 0 1 0 0 0 0 1 0 0; 0 0 1 0 2 0 0 0 0 0 0 1; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 0 0 0 2 0 0 0 0 2; 0 1 0 0 0 0 1 0 1 0 0 1; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 0 2 0 0 0 1 0 0 0; 0 0 0 0 2 0 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 0 0 3 0 0 0 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 0 0 0 0 2 0 0 2; 0 0 0 0 0 0 2 0 0 1 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 1 0 0 2 0 0 0 1 0 0 0; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 1 0 1 0 0 1; 0 2 0 0 1 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 1 0 0 1 0 0 0 0 2]
Key Counter is [0 19 3 3 23 1 28 0 21 4 3 27]
Key Score is [58; 75; 104; 31; 125; 34; 102; 85; 47; 125; 14; 124]
Position Counter for 5 is [23 1 28 0 21 4 3 27 0 19 3 3]
Position Counter for 10 is [4 3 27 0 19 3 3 23 1 28 0 21]
Any[[5.0, 82.25, 0.0], [10.0, 87.5, 0.0]]
[10, 88, 0]
7 F# Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 168
child voicing cost: 114
Best yet: 282
New solution
function cost: 168
child voicing cost: 111
Best yet: 279
New solution
function cost: 168
child voicing cost: 106
Best yet: 274
New solution
function cost: 168
child voicing cost: 105
Best yet: 273
New solution
function cost: 168
child voicing cost: 101
Best yet: 269
New solution
function cost: 168
child voicing cost: 100
Best yet: 268
New solution
function cost: 186
child voicing cost: 81
Best yet: 267
New solution
function cost: 186
child voicing cost: 80
Best yet: 266
New solution
function cost: 186
child voicing cost: 78
Best yet: 264
New solution
function cost: 168
child voicing cost: 88
Best yet: 256
New solution
function cost: 168
child voicing cost: 87
Best yet: 255
New solution
function cost: 168
child voicing cost: 84
Best yet: 252
New solution
function cost: 147
child voicing cost: 94
Best yet: 241
New solution
function cost: 147
child voicing cost: 91
Best yet: 238
New solution
function cost: 144
child voicing cost: 92
Best yet: 236
New solution
function cost: 147
child voicing cost: 87
Best yet: 234
New solution
function cost: 147
child voicing cost: 86
Best yet: 233
New solution
function cost: 144
child voicing cost: 88
Best yet: 232
New solution
function cost: 144
child voicing cost: 84
Best yet: 228
New solution
function cost: 147
child voicing cost: 80
Best yet: 227
##: Done. Total checked: 97235, Pruned: 117474, completed: 20, time: 2.00600004196167, efficiency: 9.97008952225244
Results: bestval_func: 147, bestval_voices: 80
[0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 1 0 0 0 1 0 0 0 0 2; 0 1 0 0 0 0 2 0 0 0 1 0; 0 1 1 0 0 0 1 0 0 0 0 1; 0 0 0 0 1 1 0 0 0 1 0 1; 0 2 0 0 1 0 0 0 0 1 0 0; 0 0 1 0 2 0 0 0 0 0 0 1; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 0 0 0 2 0 0 0 0 2; 0 1 0 0 0 0 1 0 1 0 0 1; 0 2 0 0 1 0 0 0 1 0 0 0; 0 1 0 0 2 0 0 0 1 0 0 0; 0 0 0 0 2 0 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 2 0 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 0 0 3 0 0 0 0 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 0 0 0 0 2 0 0 2; 0 0 0 0 0 0 2 0 0 1 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 1 0 0 2 0 0 0 1 0 0 0; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 1 0 1 0 0 1; 0 2 0 0 1 0 0 0 1 0 0 0; 0 2 0 0 0 0 0 0 0 1 0 1; 0 1 0 0 1 0 0 0 2 0 0 0; 0 0 0 1 0 0 1 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 1 0 0 1 0 0 0 0 2]
Key Counter is [0 19 3 3 23 1 28 0 21 4 3 27]
Key Score is [58; 75; 104; 31; 125; 34; 102; 85; 47; 125; 14; 124]
Position Counter for 5 is [23 1 28 0 21 4 3 27 0 19 3 3]
Position Counter for 10 is [4 3 27 0 19 3 3 23 1 28 0 21]
Any[[5.0, 82.25, 0.0], [10.0, 87.5, 0.0]]
[10, 88, 0]
7 F# Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 210
child voicing cost: 74
Best yet: 284
New solution
function cost: 210
child voicing cost: 71
Best yet: 281
New solution
function cost: 210
child voicing cost: 68
Best yet: 278
New solution
function cost: 186
child voicing cost: 80
Best yet: 266
New solution
function cost: 186
child voicing cost: 78
Best yet: 264
New solution
function cost: 186
child voicing cost: 72
Best yet: 258
New solution
function cost: 186
child voicing cost: 69
Best yet: 255
New solution
function cost: 186
child voicing cost: 67
Best yet: 253
New solution
function cost: 186
child voicing cost: 64
Best yet: 250
New solution
function cost: 189
child voicing cost: 60
Best yet: 249
New solution
function cost: 186
child voicing cost: 61
Best yet: 247
New solution
function cost: 189
child voicing cost: 57
Best yet: 246

(3, "T", Tuple{Int16,Int16}[(54, 1), (54, 1), (61, 5), (69, 3)])

(3, "T", Tuple{Int16,Int16}[(54, 1), (57, 3), (61, 5), (66, 1)])

(0, "S", Tuple{Int16,Int16}[(47, 1), (59, 1), (62, 3), (66, 5)])

(3, "T/3", Tuple{Int16,Int16}[(45, 3), (54, 1), (61, 5), (73, 5)])

(6, "S", Tuple{Int16,Int16}[(47, 1), (54, 5), (62, 3), (71, 1)])

(12, "D7", Tuple{Int16,Int16}[(49, 1), (53, 3), (59, 7), (68, 5)])

(12, "Ts", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (66, 3)])

(18, "Ts", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(15, "D", Tuple{Int16,Int16}[(49, 1), (56, 5), (61, 1), (65, 3)])

(0, "S/3", Tuple{Int16,Int16}[(50, 3), (54, 5), (59, 1), (66, 5)])

(9, "D64", Tuple{Int16,Int16}[(49, 1), (54, 4), (61, 1), (69, 6)])

(3, "D", Tuple{Int16,Int16}[(49, 1), (53, 3), (61, 1), (68, 5)])

(15, "T", Tuple{Int16,Int16}[(42, 1), (54, 1), (61, 5), (69, 3)])

(21, "D7/3", Tuple{Int16,Int16}[(41, 3), (56, 5), (59, 7), (61, 1)])

(15, "T", Tuple{Int16,Int16}[(42, 1), (54, 1), (57, 3), (61, 5)])

(15, "T", Tuple{Int16,Int16}[(42, 1), (49, 5), (57, 3), (66, 1)])

(15, "D/3", Tuple{Int16,Int16}[(41, 3), (49, 1), (56, 5), (68, 5)])

(30, "T", Tuple{Int16,Int16}[(42, 1), (49, 5), (57, 3), (66, 1)])

(0, "D7-1", Tuple{Int16,Int16}[(44, 5), (47, 7), (56, 5), (65, 3)])

(6, "T", Tuple{Int16,Int16}[(42, 1), (49, 5), (57, 3), (66, 1)])

(6, "Dm", Tuple{Int16,Int16}[(40, 1), (56, 3), (59, 5), (68, 3)])

(6, "Dm", Tuple{Int16,Int16}[(52, 1), (56, 3), (59, 5), (68, 3)])

(6, "S/3", Tuple{Int16,Int16}[(50, 3), (54, 5), (59, 1), (71, 1)])

(15, "T/5", Tuple{Int16,Int16}[(49, 5), (54, 1), (61, 5), (69, 3)])

(6, "S/3", Tuple{Int16,Int16}[(50, 3), (54, 5), (59, 1), (66, 5)])

(15, "D54", Tuple{Int16,Int16}[(49, 1), (56, 5), (61, 1), (66, 4)])

(3, "D", Tuple{Int16,Int16}[(49, 1), (56, 5), (61, 1), (65, 3)])

(18, "S/3", Tuple{Int16,Int16}[(50, 3), (54, 5), (66, 5), (71, 1)])

(18, "D", Tuple{Int16,Int16}[(49, 1), (56, 5), (65, 3), (73, 1)])

(9, "D7", Tuple{Int16,Int16}[(49, 1), (56, 5), (65, 3), (71, 7)])

(21, "T", Tuple{Int16,Int16}[(42, 1), (61, 5), (66, 1), (69, 3)])

(21, "T", Tuple{Int16,Int16}[(42, 1), (61, 5), (66, 1), (69, 3)])

##: Done. Total checked: 65234, Pruned: 77604, completed: 12, time: 1.4779999256134033, efficiency: 8.119080246245431
Results: bestval_func: 189, bestval_voices: 57
#Key: 7Scale: Minor
#Total time for optimisation of piece: 4.919000148773193
#Total cost of piece: 473
["T", "T", "S", "T/3", "S", "D7", "Ts", "Ts", "D", "S/3", "D64", "D", "T", "D7/3", "T", "T", "D/3", "T", "D7-1", "T", "Dm", "Dm", "S/3", "T/5", "S/3", "D54", "D", "S/3", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/SMP-03-chorl-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-16-chorl-nn.csv
[0 2 0 0 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 0; 0 1 0 1 0 0 0 1 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 2 0 0 0 0 0 0; 1 0 0 2 0 0 0 0 1 0 0 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 2 0 0 0 0 1 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 1 0 1 0 0 0; 1 2 0 1 0 0 0 0 0 0 0 0; 1 2 0 1 0 0 0 0 0 0 0 0; 0 1 0 2 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 1 0 1 0 0 0; 1 2 0 0 0 0 0 0 1 0 0 0; 0 1 0 2 0 1 0 0 0 0 0 0; 0 0 0 1 0 2 0 0 1 0 0 0; 1 1 0 1 0 1 0 0 0 0 0 0; 0 2 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 2 0 0 1 1 0 0; 1 0 0 0 0 0 0 0 1 1 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 0 2 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0]
Key Counter is [18 20 0 29 0 15 2 3 26 2 15 0]
Key Score is [38; 125; 27; 106; 79; 53; 107; 25; 126; 50; 82; 92]
Position Counter for 9 is [26 2 15 0 18 20 0 29 0 15 2 3]
Any[[9.0, 90.0, 1.0]]
[9, 90, 1]
9 G# Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 135
child voicing cost: 111
Best yet: 246
New solution
function cost: 135
child voicing cost: 110
Best yet: 245
New solution
function cost: 135
child voicing cost: 107
Best yet: 242
New solution
function cost: 147
child voicing cost: 92
Best yet: 239
New solution
function cost: 135
child voicing cost: 101
Best yet: 236
New solution
function cost: 150
child voicing cost: 84
Best yet: 234
New solution
function cost: 150
child voicing cost: 81
Best yet: 231
New solution
function cost: 120
child voicing cost: 106
Best yet: 226
New solution
function cost: 120
child voicing cost: 104
Best yet: 224
New solution
function cost: 153
child voicing cost: 66
Best yet: 219
New solution
function cost: 150
child voicing cost: 66
Best yet: 216
New solution
function cost: 135
child voicing cost: 76
Best yet: 211
New solution
function cost: 135
child voicing cost: 74
Best yet: 209
New solution
function cost: 135
child voicing cost: 64
Best yet: 199
##: Done. Total checked: 148978, Pruned: 184979, completed: 14, time: 3.0490000247955322, efficiency: 4.591669362462156
Results: bestval_func: 135, bestval_voices: 64
[0 2 0 0 0 0 0 0 1 0 1 0; 0 0 0 1 0 0 0 1 0 0 1 0; 0 1 0 1 0 0 0 1 0 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 0 1 0 0 0 2 0 0 0 0 0 0; 1 0 0 2 0 0 0 0 1 0 0 0; 1 0 0 2 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 1 0 1 0; 0 0 0 2 0 0 0 0 1 0 1 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 1 0 1 0 0 0; 1 2 0 1 0 0 0 0 0 0 0 0; 1 2 0 1 0 0 0 0 0 0 0 0; 0 1 0 2 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 0 0 0 2 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 0 0 1 0 0 0 0 2 0 0 0; 1 1 0 0 0 0 1 0 1 0 0 0; 1 2 0 0 0 0 0 0 1 0 0 0; 0 1 0 2 0 1 0 0 0 0 0 0; 0 0 0 1 0 2 0 0 1 0 0 0; 1 1 0 1 0 1 0 0 0 0 0 0; 0 2 0 0 0 1 0 0 0 0 1 0; 0 1 0 0 0 2 0 0 0 0 1 0; 0 0 0 0 0 2 0 0 1 1 0 0; 1 0 0 0 0 0 0 0 1 1 1 0; 1 0 0 1 0 1 0 0 0 0 1 0; 0 0 0 0 0 2 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 0 0 1 0]
Key Counter is [18 20 0 29 0 15 2 3 26 2 15 0]
Key Score is [38; 125; 27; 106; 79; 53; 107; 25; 126; 50; 82; 92]
Position Counter for 9 is [26 2 15 0 18 20 0 29 0 15 2 3]
Any[[9.0, 90.0, 1.0]]
[9, 90, 1]
9 G# Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 255
child voicing cost: 104
Best yet: 359
New solution
function cost: 255
child voicing cost: 101
Best yet: 356
New solution
function cost: 255
child voicing cost: 99
Best yet: 354
New solution
function cost: 255
child voicing cost: 93
Best yet: 348
New solution
function cost: 255
child voicing cost: 89
Best yet: 344
New solution
function cost: 258
child voicing cost: 83
Best yet: 341
New solution
function cost: 258
child voicing cost: 82
Best yet: 340
New solution
function cost: 258
child voicing cost: 80
Best yet: 338
New solution
function cost: 258
child voicing cost: 79
Best yet: 337
New solution
function cost: 249
child voicing cost: 86
Best yet: 335
New solution
function cost: 249
child voicing cost: 80
Best yet: 329
New solution
function cost: 234
child voicing cost: 81
Best yet: 315
New solution
function cost: 240
child voicing cost: 73
Best yet: 313
New solution
function cost: 234
child voicing cost: 77
Best yet: 311
New solution
function cost: 234
child voicing cost: 75
Best yet: 309
New solution
function cost: 213
child voicing cost: 92
Best yet: 305
New solution
function cost: 219
child voicing cost: 81
Best yet: 300
New solution
function cost: 213
child voicing cost: 85
Best yet: 298
New solution
function cost: 213
child voicing cost: 84
Best yet: 297
New solution
function cost: 213
child voicing cost: 82
Best yet: 295
New solution
function cost: 222
child voicing cost: 72
Best yet: 294
New solution
function cost: 213
child voicing cost: 80
Best yet: 293
New solution
function cost: 213
child voicing cost: 79
Best yet: 292
New solution
function cost: 213
child voicing cost: 75
Best yet: 288
New solution
function cost: 216
child voicing cost: 70
Best yet: 286
New solution
function cost: 207
child voicing cost: 75
Best yet: 282
New solution
function cost: 207
child voicing cost: 71
Best yet: 278

(15, "T", Tuple{Int16,Int16}[(56, 1), (56, 1), (63, 5), (72, 3)])

(0, "D", Tuple{Int16,Int16}[(51, 1), (55, 3), (63, 1), (70, 5)])

(0, "D7/7", Tuple{Int16,Int16}[(49, 7), (55, 3), (63, 1), (70, 5)])

(0, "T/3", Tuple{Int16,Int16}[(48, 3), (56, 1), (63, 5), (68, 1)])

(9, "S", Tuple{Int16,Int16}[(49, 1), (56, 5), (61, 1), (65, 3)])

(6, "D7-5", Tuple{Int16,Int16}[(51, 1), (55, 3), (61, 7), (63, 1)])

(15, "T", Tuple{Int16,Int16}[(44, 1), (56, 1), (60, 3), (63, 5)])

(9, "T", Tuple{Int16,Int16}[(44, 1), (51, 5), (60, 3), (68, 1)])

(3, "D/3", Tuple{Int16,Int16}[(43, 3), (51, 1), (58, 5), (70, 5)])

(0, "T", Tuple{Int16,Int16}[(44, 1), (56, 1), (60, 3), (63, 5)])

(15, "S65", Tuple{Int16,Int16}[(49, 1), (56, 5), (58, 6), (65, 3)])

(0, "T/5", Tuple{Int16,Int16}[(51, 5), (56, 1), (60, 3), (63, 5)])

(6, "S/3", Tuple{Int16,Int16}[(53, 3), (56, 5), (61, 1), (68, 5)])

(24, "D7", Tuple{Int16,Int16}[(51, 1), (55, 3), (61, 7), (70, 5)])

(33, "Ts", Tuple{Int16,Int16}[(53, 1), (56, 3), (60, 5), (68, 3)])

(15, "Ts", Tuple{Int16,Int16}[(53, 1), (56, 3), (60, 5), (65, 1)])

(9, "D7/3", Tuple{Int16,Int16}[(55, 3), (58, 5), (61, 7), (63, 1)])

(0, "T", Tuple{Int16,Int16}[(56, 1), (56, 1), (60, 3), (63, 5)])

(15, "D/3", Tuple{Int16,Int16}[(55, 3), (58, 5), (63, 1), (70, 5)])

(0, "T", Tuple{Int16,Int16}[(56, 1), (60, 3), (63, 5), (68, 1)])

(6, "S", Tuple{Int16,Int16}[(49, 1), (61, 1), (65, 3), (68, 5)])

(12, "Tm", Tuple{Int16,Int16}[(48, 1), (63, 3), (67, 5), (72, 1)])

(21, "D7/3", Tuple{Int16,Int16}[(43, 3), (63, 1), (70, 5), (73, 7)])

(9, "Ts", Tuple{Int16,Int16}[(41, 1), (60, 5), (68, 3), (77, 1)])

(15, "T/3", Tuple{Int16,Int16}[(48, 3), (63, 5), (68, 1), (75, 5)])

(6, "S", Tuple{Int16,Int16}[(49, 1), (65, 3), (68, 5), (73, 1)])

(12, "D7/3", Tuple{Int16,Int16}[(55, 3), (63, 1), (70, 5), (73, 7)])

(24, "T", Tuple{Int16,Int16}[(56, 1), (63, 5), (68, 1), (72, 3)])

(18, "D7-1", Tuple{Int16,Int16}[(58, 5), (61, 7), (67, 3), (70, 5)])

(9, "D7", Tuple{Int16,Int16}[(51, 1), (61, 7), (67, 3), (70, 5)])

(27, "T", Tuple{Int16,Int16}[(56, 1), (60, 3), (63, 5), (68, 1)])

(27, "T", Tuple{Int16,Int16}[(56, 1), (60, 3), (63, 5), (68, 1)])

##: Done. Total checked: 191663, Pruned: 213774, completed: 27, time: 3.7980000972747803, efficiency: 7.109004557259912
Results: bestval_func: 207, bestval_voices: 71
#Key: 9Scale: Major
#Total time for optimisation of piece: 8.013999938964844
#Total cost of piece: 477
["T", "D", "D7/7", "T/3", "S", "D7-5", "T", "T", "D/3", "T", "S65", "T/5", "S/3", "D7", "Ts", "Ts", "D7/3", "T", "D/3", "T", "S", "Tm", "D7/3", "Ts", "T/3", "S", "D7/3", "T", "D7-1", "D7", "T", "T"]
../../results/optimizer/pianoroll/SMP-16-chorl-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-21-chorl-nn.csv
[0 2 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 1 2 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 0 2 1 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 1 0 1 0; 0 0 0 1 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 2 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 0 0 2 0 0 1 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 2 0 0 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 2 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 0 0 2 0 0 1]
Key Counter is [1 20 0 19 29 1 11 1 29 6 3 12]
Key Score is [50; 84; 79; 54; 126; 41; 95; 60; 74; 107; 31; 123]
Position Counter for 5 is [29 1 11 1 29 6 3 12 1 20 0 19]
Any[[5.0, 81.0, 1.0]]
[5, 81, 1]
5 E Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 204
child voicing cost: 91
Best yet: 295
New solution
function cost: 204
child voicing cost: 87
Best yet: 291
New solution
function cost: 180
child voicing cost: 84
Best yet: 264
New solution
function cost: 180
child voicing cost: 76
Best yet: 256
New solution
function cost: 177
child voicing cost: 77
Best yet: 254
New solution
function cost: 177
child voicing cost: 70
Best yet: 247
New solution
function cost: 177
child voicing cost: 64
Best yet: 241
New solution
function cost: 174
child voicing cost: 66
Best yet: 240
New solution
function cost: 174
child voicing cost: 65
Best yet: 239
New solution
function cost: 174
child voicing cost: 64
Best yet: 238
New solution
function cost: 174
child voicing cost: 62
Best yet: 236
New solution
function cost: 165
child voicing cost: 69
Best yet: 234
New solution
function cost: 168
child voicing cost: 65
Best yet: 233
New solution
function cost: 159
child voicing cost: 72
Best yet: 231
New solution
function cost: 168
child voicing cost: 61
Best yet: 229
New solution
function cost: 159
child voicing cost: 68
Best yet: 227
New solution
function cost: 159
child voicing cost: 66
Best yet: 225
New solution
function cost: 165
child voicing cost: 59
Best yet: 224
New solution
function cost: 156
child voicing cost: 66
Best yet: 222
##: Done. Total checked: 87762, Pruned: 105590, completed: 19, time: 1.8519999980926514, efficiency: 10.25917927622453
Results: bestval_func: 156, bestval_voices: 66
[0 2 0 0 1 0 0 0 0 1 0 0; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 1 0 0 1 0 0 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 1 2 0 0 0 1 0 0 0; 0 0 0 1 0 0 0 0 2 1 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 1 0 1 0 0 1 0 1 0 0 0; 0 0 0 1 1 0 0 0 1 0 0 1; 0 0 0 1 1 0 0 0 1 0 1 0; 0 0 0 1 1 0 0 0 1 1 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 2 0 0 0 1 0 0 0; 0 1 0 0 1 0 0 0 1 0 0 1; 0 0 0 1 0 0 1 0 0 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 2 0 0 1 0 0 0 0 0 1 0; 0 0 0 1 1 0 1 0 1 0 0 0; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 0 0 2 0 0 1 0 0; 0 1 0 0 1 0 1 0 1 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 1 0 0 2 0 0 0 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 1 0 2 0 0 0 0 1 0 0 0; 0 1 0 1 0 0 0 1 1 0 0 0; 0 1 0 1 1 0 0 0 1 0 0 0; 0 0 0 2 0 0 1 0 1 0 0 0; 0 1 0 0 0 0 0 0 2 0 0 1]
Key Counter is [1 20 0 19 29 1 11 1 29 6 3 12]
Key Score is [50; 84; 79; 54; 126; 41; 95; 60; 74; 107; 31; 123]
Position Counter for 5 is [29 1 11 1 29 6 3 12 1 20 0 19]
Any[[5.0, 81.0, 1.0]]
[5, 81, 1]
5 E Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 153
child voicing cost: 94
Best yet: 247
New solution
function cost: 153
child voicing cost: 91
Best yet: 244
New solution
function cost: 153
child voicing cost: 85
Best yet: 238
New solution
function cost: 153
child voicing cost: 83
Best yet: 236
New solution
function cost: 153
child voicing cost: 77
Best yet: 230
New solution
function cost: 150
child voicing cost: 79
Best yet: 229
New solution
function cost: 150
child voicing cost: 76
Best yet: 226
New solution
function cost: 150
child voicing cost: 73
Best yet: 223
New solution
function cost: 138
child voicing cost: 75
Best yet: 213
New solution
function cost: 138
child voicing cost: 72
Best yet: 210

(18, "T", Tuple{Int16,Int16}[(52, 1), (52, 1), (59, 5), (68, 3)])

(6, "D7/3", Tuple{Int16,Int16}[(51, 3), (54, 5), (59, 1), (69, 7)])

(9, "Ts", Tuple{Int16,Int16}[(49, 1), (56, 5), (61, 1), (64, 3)])

(0, "D/3", Tuple{Int16,Int16}[(51, 3), (54, 5), (59, 1), (66, 5)])

(0, "T", Tuple{Int16,Int16}[(52, 1), (56, 3), (59, 5), (64, 1)])

(21, "D/3", Tuple{Int16,Int16}[(51, 3), (54, 5), (59, 1), (71, 1)])

(21, "T", Tuple{Int16,Int16}[(52, 1), (56, 3), (64, 1), (71, 5)])

(15, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (68, 3)])

(9, "D7/3", Tuple{Int16,Int16}[(51, 3), (59, 1), (66, 5), (69, 7)])

(3, "T", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (68, 3)])

(6, "T/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(9, "S", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(6, "T/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(6, "Ts", Tuple{Int16,Int16}[(49, 1), (61, 1), (68, 5), (76, 3)])

(30, "D", Tuple{Int16,Int16}[(47, 1), (63, 3), (71, 1), (78, 5)])

(15, "D", Tuple{Int16,Int16}[(59, 1), (63, 3), (71, 1), (78, 5)])

(0, "D7/7", Tuple{Int16,Int16}[(57, 7), (63, 3), (71, 1), (78, 5)])

(0, "T/3", Tuple{Int16,Int16}[(56, 3), (64, 1), (71, 5), (76, 1)])

(0, "T", Tuple{Int16,Int16}[(52, 1), (64, 1), (71, 5), (80, 3)])

(0, "T", Tuple{Int16,Int16}[(52, 1), (64, 1), (68, 3), (71, 5)])

(6, "Ts", Tuple{Int16,Int16}[(49, 1), (64, 3), (68, 5), (73, 1)])

(15, "D/3", Tuple{Int16,Int16}[(51, 3), (54, 5), (66, 5), (71, 1)])

(6, "S/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (76, 5)])

(15, "D7", Tuple{Int16,Int16}[(47, 1), (57, 7), (66, 5), (75, 3)])

(6, "Ts", Tuple{Int16,Int16}[(49, 1), (56, 5), (64, 3), (76, 3)])

(9, "D7/3", Tuple{Int16,Int16}[(51, 3), (57, 7), (66, 5), (71, 1)])

(6, "T", Tuple{Int16,Int16}[(52, 1), (56, 3), (64, 1), (71, 5)])

(6, "S/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (69, 1)])

(21, "D64", Tuple{Int16,Int16}[(47, 1), (59, 1), (64, 4), (68, 6)])

(18, "D", Tuple{Int16,Int16}[(47, 1), (59, 1), (63, 3), (66, 5)])

(9, "T", Tuple{Int16,Int16}[(40, 1), (59, 5), (64, 1), (68, 3)])

(9, "T", Tuple{Int16,Int16}[(40, 1), (59, 5), (64, 1), (68, 3)])

##: Done. Total checked: 59104, Pruned: 65847, completed: 10, time: 1.3589999675750732, efficiency: 7.358351904778529
Results: bestval_func: 138, bestval_voices: 72
#Key: 5Scale: Major
#Total time for optimisation of piece: 4.665999889373779
#Total cost of piece: 432
["T", "D7/3", "Ts", "D/3", "T", "D/3", "T", "T", "D7/3", "T", "T/3", "S", "T/3", "Ts", "D", "D", "D7/7", "T/3", "T", "T", "Ts", "D/3", "S/3", "D7", "Ts", "D7/3", "T", "S/3", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/SMP-21-chorl-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-23-chorl-nn.csv
[2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 0 1; 2 0 0 0 0 0 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 0 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 2 1 0 0 0 0 0 0 1 0; 0 0 1 1 0 1 0 0 0 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 0 0 2 0 0 1 0; 0 0 0 0 0 3 0 0 1 0 0 0; 1 0 0 0 2 0 0 0 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 1 0 1 0 0 0 0 1 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 0 1 1 0]
Key Counter is [23 0 11 19 2 22 0 14 13 1 26 1]
Key Score is [74; 103; 29; 128; 36; 99; 81; 52; 117; 28; 116; 61]
Position Counter for 4 is [19 2 22 0 14 13 1 26 1 23 0 11]
Any[[4.0, 83.75, 1.0]]
[4, 84, 1]
4 D# Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 192
child voicing cost: 78
Best yet: 270
New solution
function cost: 189
child voicing cost: 80
Best yet: 269
New solution
function cost: 180
child voicing cost: 84
Best yet: 264
New solution
function cost: 180
child voicing cost: 83
Best yet: 263
New solution
function cost: 180
child voicing cost: 81
Best yet: 261
New solution
function cost: 177
child voicing cost: 83
Best yet: 260
New solution
function cost: 180
child voicing cost: 78
Best yet: 258
New solution
function cost: 186
child voicing cost: 71
Best yet: 257
New solution
function cost: 189
child voicing cost: 65
Best yet: 254
New solution
function cost: 171
child voicing cost: 81
Best yet: 252
New solution
function cost: 171
child voicing cost: 76
Best yet: 247
Iterations done: 10000
Nodes in active set: 232
Lowest depth: 5 current depth: 13
Iterations done: 20000
Nodes in active set: 209
Lowest depth: 5 current depth: 11
New solution
function cost: 168
child voicing cost: 74
Best yet: 242
New solution
function cost: 159
child voicing cost: 81
Best yet: 240
New solution
function cost: 156
child voicing cost: 80
Best yet: 236
New solution
function cost: 159
child voicing cost: 72
Best yet: 231
New solution
function cost: 147
child voicing cost: 79
Best yet: 226
New solution
function cost: 132
child voicing cost: 92
Best yet: 224
##: Done. Total checked: 3963262, Pruned: 4288420, completed: 17, time: 76.99300003051758, efficiency: 0.22079929335474316
Results: bestval_func: 132, bestval_voices: 92
[2 0 0 1 0 0 0 0 1 0 0 0; 0 0 0 1 0 1 0 1 0 0 1 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 2 0 0 0 1 0 0 1 0; 0 0 0 2 0 0 0 1 0 0 0 1; 2 0 0 0 0 0 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 1 0 1 0; 1 0 0 0 0 2 0 0 1 0 0 0; 1 0 0 0 0 1 0 1 0 0 1 0; 1 0 0 1 0 0 0 1 0 0 1 0; 2 0 0 1 0 0 0 0 0 0 1 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 2 1 0 0 0 0 0 0 1 0; 0 0 1 1 0 1 0 0 0 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 0 0 1 0 0 1 0 0 1 0 1 0; 0 0 1 1 0 0 0 1 0 0 1 0; 1 0 0 0 0 0 0 2 0 0 1 0; 0 0 0 0 0 3 0 0 1 0 0 0; 1 0 0 0 2 0 0 0 1 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 2 0 0 0 0 1 0 0 1 0 0 0; 1 0 0 0 0 1 0 0 2 0 0 0; 1 0 0 1 0 1 0 0 1 0 0 0; 0 0 1 1 0 1 0 0 0 0 1 0; 1 0 1 1 0 0 0 0 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 0 0 1 0 0 1 0 0 0 0 2 0; 0 0 0 1 0 0 0 2 0 0 1 0; 0 0 0 1 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 0 1 1 0]
Key Counter is [23 0 11 19 2 22 0 14 13 1 26 1]
Key Score is [74; 103; 29; 128; 36; 99; 81; 52; 117; 28; 116; 61]
Position Counter for 4 is [19 2 22 0 14 13 1 26 1 23 0 11]
Any[[4.0, 83.75, 1.0]]
[4, 84, 1]
4 D# Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 177
child voicing cost: 91
Best yet: 268
New solution
function cost: 177
child voicing cost: 88
Best yet: 265
New solution
function cost: 177
child voicing cost: 85
Best yet: 262
New solution
function cost: 177
child voicing cost: 84
Best yet: 261
New solution
function cost: 180
child voicing cost: 77
Best yet: 257
New solution
function cost: 180
child voicing cost: 74
Best yet: 254
New solution
function cost: 180
child voicing cost: 72
Best yet: 252
New solution
function cost: 180
child voicing cost: 69
Best yet: 249
New solution
function cost: 180
child voicing cost: 67
Best yet: 247
New solution
function cost: 180
child voicing cost: 64
Best yet: 244
New solution
function cost: 150
child voicing cost: 83
Best yet: 233
New solution
function cost: 150
child voicing cost: 80
Best yet: 230
New solution
function cost: 147
child voicing cost: 82
Best yet: 229
New solution
function cost: 144
child voicing cost: 83
Best yet: 227
New solution
function cost: 153
child voicing cost: 69
Best yet: 222
New solution
function cost: 153
child voicing cost: 68
Best yet: 221

(18, "T", Tuple{Int16,Int16}[(51, 1), (63, 1), (67, 3), (70, 5)])

(6, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (67, 3), (75, 1)])

(0, "S65", Tuple{Int16,Int16}[(44, 1), (60, 3), (65, 6), (75, 5)])

(0, "D", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (74, 3)])

(15, "D/3", Tuple{Int16,Int16}[(50, 3), (58, 1), (65, 5), (77, 5)])

(3, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (67, 3), (75, 1)])

(15, "S", Tuple{Int16,Int16}[(44, 1), (60, 3), (68, 1), (75, 5)])

(15, "S", Tuple{Int16,Int16}[(44, 1), (60, 3), (63, 5), (68, 1)])

(6, "Ss", Tuple{Int16,Int16}[(41, 1), (56, 3), (65, 1), (72, 5)])

(0, "Ss", Tuple{Int16,Int16}[(41, 1), (56, 3), (68, 3), (72, 5)])

(12, "T/3", Tuple{Int16,Int16}[(43, 3), (51, 1), (58, 5), (70, 5)])

(9, "S", Tuple{Int16,Int16}[(44, 1), (51, 5), (60, 3), (68, 1)])

(18, "S/3", Tuple{Int16,Int16}[(48, 3), (51, 5), (56, 1), (68, 1)])

(6, "D/3", Tuple{Int16,Int16}[(50, 3), (53, 5), (58, 1), (65, 5)])

(18, "T", Tuple{Int16,Int16}[(51, 1), (55, 3), (58, 5), (63, 1)])

(9, "T", Tuple{Int16,Int16}[(51, 1), (55, 3), (63, 1), (70, 5)])

(3, "T/3", Tuple{Int16,Int16}[(55, 3), (58, 5), (63, 1), (70, 5)])

(0, "D7/5", Tuple{Int16,Int16}[(53, 5), (58, 1), (62, 3), (68, 7)])

(3, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (63, 1), (67, 3)])

(15, "D7/3", Tuple{Int16,Int16}[(50, 3), (58, 1), (65, 5), (68, 7)])

(30, "Ts", Tuple{Int16,Int16}[(48, 1), (63, 3), (67, 5), (75, 3)])

(6, "S/3", Tuple{Int16,Int16}[(48, 3), (63, 5), (68, 1), (75, 5)])

(15, "D7", Tuple{Int16,Int16}[(46, 1), (62, 3), (68, 7), (77, 5)])

(18, "Ts", Tuple{Int16,Int16}[(48, 1), (63, 3), (67, 5), (72, 1)])

(6, "D7-1", Tuple{Int16,Int16}[(53, 5), (56, 7), (65, 5), (74, 3)])

(15, "T", Tuple{Int16,Int16}[(51, 1), (58, 5), (67, 3), (75, 1)])

(6, "D/3", Tuple{Int16,Int16}[(50, 3), (58, 1), (70, 1), (77, 5)])

(9, "S/3", Tuple{Int16,Int16}[(48, 3), (63, 5), (68, 1), (80, 1)])

(0, "D64", Tuple{Int16,Int16}[(46, 1), (63, 4), (70, 1), (79, 6)])

(0, "D", Tuple{Int16,Int16}[(46, 1), (62, 3), (70, 1), (77, 5)])

(12, "T", Tuple{Int16,Int16}[(51, 1), (63, 1), (70, 5), (79, 3)])

(12, "T", Tuple{Int16,Int16}[(51, 1), (63, 1), (70, 5), (79, 3)])

##: Done. Total checked: 126534, Pruned: 140251, completed: 16, time: 2.510999917984009, efficiency: 6.371963569336084
Results: bestval_func: 153, bestval_voices: 68
#Key: 4Scale: Major
#Total time for optimisation of piece: 80.86199998855591
#Total cost of piece: 445
["T", "T", "S65", "D", "D/3", "T", "S", "S", "Ss", "Ss", "T/3", "S", "S/3", "D/3", "T", "T", "T/3", "D7/5", "T", "D7/3", "Ts", "S/3", "D7", "Ts", "D7-1", "T", "D/3", "S/3", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/SMP-23-chorl-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-38-chor-nn.csv
[1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 1 0 0 0 1 1 0; 0 0 1 0 0 1 0 0 1 0 0 0; 0 0 1 1 0 0 0 0 0 0 2 0; 1 0 0 1 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 2 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 2 0 0 0 0 0 1; 2 0 0 1 0 0 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 0 1; 0 0 0 0 0 0 0 2 0 0 2 0; 1 0 0 0 0 0 0 1 0 0 2 0; 1 0 0 2 0 0 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 1 1 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 2 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 0 0 0 0 0 1 0 0 3 0; 0 0 2 0 0 1 0 0 0 0 1 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 0 1 0 1 0 1 0 0 0 0; 2 0 1 0 0 0 0 1 0 0 0 0; 0 0 1 0 0 3 0 0 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 1 1 0 0 0 0 0 0 1 0; 1 0 1 0 0 0 0 0 0 1 1 0; 1 0 1 0 0 0 0 1 0 0 1 0; 1 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 1 0 1 0 0 0 0 1 0 0 1 0]
Key Counter is [22 0 23 7 0 25 2 15 1 9 25 2]
Key Score is [96; 82; 51; 118; 21; 119; 62; 73; 95; 37; 126; 37]
Position Counter for 11 is [25 2 22 0 23 7 0 25 2 15 1 9]
Any[[11.0, 81.0, 1.0]]
[11, 81, 1]
11 A# Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 153
child voicing cost: 72
Best yet: 225
New solution
function cost: 144
child voicing cost: 76
Best yet: 220
New solution
function cost: 144
child voicing cost: 75
Best yet: 219
New solution
function cost: 144
child voicing cost: 73
Best yet: 217
New solution
function cost: 141
child voicing cost: 69
Best yet: 210
New solution
function cost: 135
child voicing cost: 70
Best yet: 205
New solution
function cost: 135
child voicing cost: 69
Best yet: 204
##: Done. Total checked: 99158, Pruned: 114485, completed: 7, time: 2.068999767303467, efficiency: 3.3832773258950724
Results: bestval_func: 135, bestval_voices: 69
[1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 1 0 0 0 1 1 0; 0 0 1 0 0 1 0 0 1 0 0 0; 0 0 1 1 0 0 0 0 0 0 2 0; 1 0 0 1 0 1 0 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 2 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 1 0 0 1 0 0 0 0 2 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 2 0 0 0 0 0 1; 2 0 0 1 0 0 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 0 1; 0 0 0 0 0 0 0 2 0 0 2 0; 1 0 0 0 0 0 0 1 0 0 2 0; 1 0 0 2 0 0 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 1 0 0; 0 0 1 0 0 1 1 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 0 0 1 0 0 2 0 0 0 1 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 0 0 0 0 0 0 0 1 0 0 3 0; 0 0 2 0 0 1 0 0 0 0 1 0; 1 0 1 0 0 1 0 1 0 0 0 0; 1 0 0 1 0 1 0 1 0 0 0 0; 2 0 1 0 0 0 0 1 0 0 0 0; 0 0 1 0 0 3 0 0 0 0 0 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 1 1 0 0 0 0 0 0 1 0; 1 0 1 0 0 0 0 0 0 1 1 0; 1 0 1 0 0 0 0 1 0 0 1 0; 1 0 1 0 0 0 1 0 0 1 0 0; 1 0 1 0 0 0 0 1 0 0 1 0; 1 0 1 0 0 0 0 1 0 0 1 0]
Key Counter is [22 0 23 7 0 25 2 15 1 9 25 2]
Key Score is [96; 82; 51; 118; 21; 119; 62; 73; 95; 37; 126; 37]
Position Counter for 11 is [25 2 22 0 23 7 0 25 2 15 1 9]
Any[[11.0, 81.0, 1.0]]
[11, 81, 1]
11 A# Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 192
child voicing cost: 96
Best yet: 288
New solution
function cost: 192
child voicing cost: 95
Best yet: 287
New solution
function cost: 192
child voicing cost: 93
Best yet: 285
New solution
function cost: 192
child voicing cost: 92
Best yet: 284
New solution
function cost: 201
child voicing cost: 80
Best yet: 281
New solution
function cost: 195
child voicing cost: 84
Best yet: 279
New solution
function cost: 189
child voicing cost: 89
Best yet: 278
New solution
function cost: 183
child voicing cost: 82
Best yet: 265
New solution
function cost: 183
child voicing cost: 79
Best yet: 262
New solution
function cost: 183
child voicing cost: 74
Best yet: 257
New solution
function cost: 183
child voicing cost: 73
Best yet: 256
New solution
function cost: 186
child voicing cost: 68
Best yet: 254
New solution
function cost: 186
child voicing cost: 63
Best yet: 249
New solution
function cost: 186
child voicing cost: 62
Best yet: 248
New solution
function cost: 156
child voicing cost: 91
Best yet: 247
New solution
function cost: 162
child voicing cost: 84
Best yet: 246
New solution
function cost: 162
child voicing cost: 79
Best yet: 241
New solution
function cost: 162
child voicing cost: 78
Best yet: 240
New solution
function cost: 174
child voicing cost: 64
Best yet: 238
New solution
function cost: 174
child voicing cost: 63
Best yet: 237

(18, "T", Tuple{Int16,Int16}[(58, 1), (58, 1), (65, 5), (74, 3)])

(3, "T", Tuple{Int16,Int16}[(58, 1), (62, 3), (65, 5), (70, 1)])

(6, "D7/3", Tuple{Int16,Int16}[(57, 3), (63, 7), (65, 1), (72, 5)])

(6, "T", Tuple{Int16,Int16}[(58, 1), (62, 3), (65, 5), (70, 1)])

(0, "D7", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (75, 7)])

(0, "Ts", Tuple{Int16,Int16}[(55, 1), (58, 3), (70, 3), (74, 5)])

(12, "D", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(18, "D", Tuple{Int16,Int16}[(41, 1), (60, 5), (69, 3), (77, 1)])

(12, "S/3", Tuple{Int16,Int16}[(43, 3), (58, 5), (70, 5), (75, 1)])

(18, "T", Tuple{Int16,Int16}[(46, 1), (65, 5), (70, 1), (74, 3)])

(6, "D7-1", Tuple{Int16,Int16}[(48, 5), (63, 7), (69, 3), (72, 5)])

(12, "D7", Tuple{Int16,Int16}[(53, 1), (63, 7), (69, 3), (72, 5)])

(0, "Ts", Tuple{Int16,Int16}[(55, 1), (62, 5), (70, 3), (70, 3)])

(15, "D/3", Tuple{Int16,Int16}[(57, 3), (60, 5), (72, 5), (77, 1)])

(18, "T", Tuple{Int16,Int16}[(58, 1), (62, 3), (70, 1), (77, 5)])

(9, "T", Tuple{Int16,Int16}[(58, 1), (65, 5), (70, 1), (74, 3)])

(3, "D64", Tuple{Int16,Int16}[(53, 1), (65, 1), (70, 4), (74, 6)])

(9, "D", Tuple{Int16,Int16}[(53, 1), (65, 1), (69, 3), (72, 5)])

(3, "D7-5", Tuple{Int16,Int16}[(53, 1), (63, 7), (69, 3), (77, 1)])

(6, "T", Tuple{Int16,Int16}[(46, 1), (62, 3), (70, 1), (77, 5)])

(21, "S65", Tuple{Int16,Int16}[(51, 1), (60, 6), (70, 5), (79, 3)])

(9, "T/5", Tuple{Int16,Int16}[(53, 5), (58, 1), (70, 1), (74, 3)])

(15, "S/3", Tuple{Int16,Int16}[(55, 3), (58, 5), (70, 5), (75, 1)])

(6, "D7/3", Tuple{Int16,Int16}[(57, 3), (60, 5), (65, 1), (75, 7)])

(12, "Ts", Tuple{Int16,Int16}[(55, 1), (62, 5), (67, 1), (70, 3)])

(18, "D", Tuple{Int16,Int16}[(53, 1), (65, 1), (69, 3), (72, 5)])

(6, "D7/7", Tuple{Int16,Int16}[(51, 7), (65, 1), (69, 3), (72, 5)])

(12, "T/3", Tuple{Int16,Int16}[(50, 3), (65, 5), (70, 1), (77, 5)])

(18, "S", Tuple{Int16,Int16}[(51, 1), (63, 1), (70, 5), (79, 3)])

(12, "D7", Tuple{Int16,Int16}[(53, 1), (63, 7), (69, 3), (72, 5)])

(12, "T", Tuple{Int16,Int16}[(58, 1), (62, 3), (65, 5), (70, 1)])

(12, "T", Tuple{Int16,Int16}[(58, 1), (62, 3), (65, 5), (70, 1)])

##: Done. Total checked: 114671, Pruned: 125811, completed: 20, time: 2.4040000438690186, efficiency: 8.319467402260038
Results: bestval_func: 174, bestval_voices: 63
#Key: 11Scale: Major
#Total time for optimisation of piece: 5.690999984741211
#Total cost of piece: 441
["T", "T", "D7/3", "T", "D7", "Ts", "D", "D", "S/3", "T", "D7-1", "D7", "Ts", "D/3", "T", "T", "D64", "D", "D7-5", "T", "S65", "T/5", "S/3", "D7/3", "Ts", "D", "D7/7", "T/3", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/SMP-38-chor-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-44-chorl-nn.csv
[0 0 0 0 0 1 0 1 0 1 1 0; 1 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 0 0 0 0 0 1 0 0 1 0; 1 0 1 0 0 0 0 0 0 1 1 0; 0 0 0 0 0 0 0 2 0 0 2 0; 1 0 1 0 0 1 0 0 0 1 0 0; 1 0 2 0 0 1 0 0 0 0 0 0; 3 0 0 0 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 0 0 1 1 0; 1 0 1 0 0 0 0 0 0 0 2 0; 2 0 0 0 0 0 0 1 0 0 1 0; 0 0 2 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 2 0 0 0 0; 1 0 0 1 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 3 0 0 0 0 0 0 0 0 1 0 0; 1 0 0 0 0 0 0 0 0 1 2 0; 1 0 1 0 0 1 0 0 0 1 0 0; 1 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 2 0 0 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 0 0 0 2 0 1 0 1 0 0 0 0; 2 0 0 1 0 0 0 0 0 1 0 0; 0 0 1 0 0 1 1 0 0 0 1 0; 0 0 1 0 0 0 0 2 0 0 1 0; 0 0 2 0 0 0 0 0 0 1 1 0]
Key Counter is [27 0 18 4 4 21 1 20 0 12 22 0]
Key Score is [102; 75; 55; 112; 21; 124; 48; 82; 94; 35; 124; 31]
Position Counter for 6 is [21 1 20 0 12 22 0 27 0 18 4 4]
Position Counter for 11 is [22 0 27 0 18 4 4 21 1 20 0 12]
Any[[6.0, 86.5, 1.0], [11.0, 80.5, 0.0]]
[6, 86, 1]
6 F Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 192
child voicing cost: 94
Best yet: 286
New solution
function cost: 171
child voicing cost: 110
Best yet: 281
New solution
function cost: 171
child voicing cost: 109
Best yet: 280
New solution
function cost: 171
child voicing cost: 108
Best yet: 279
New solution
function cost: 171
child voicing cost: 100
Best yet: 271
New solution
function cost: 174
child voicing cost: 89
Best yet: 263
New solution
function cost: 147
child voicing cost: 115
Best yet: 262
New solution
function cost: 147
child voicing cost: 114
Best yet: 261
New solution
function cost: 147
child voicing cost: 110
Best yet: 257
New solution
function cost: 159
child voicing cost: 85
Best yet: 244
Iterations done: 10000
Nodes in active set: 83
Lowest depth: 2 current depth: 6
New solution
function cost: 141
child voicing cost: 101
Best yet: 242
New solution
function cost: 141
child voicing cost: 100
Best yet: 241
New solution
function cost: 141
child voicing cost: 99
Best yet: 240
New solution
function cost: 141
child voicing cost: 95
Best yet: 236
New solution
function cost: 147
child voicing cost: 81
Best yet: 228
New solution
function cost: 147
child voicing cost: 75
Best yet: 222
##: Done. Total checked: 1054187, Pruned: 1289259, completed: 16, time: 20.74500012397766, efficiency: 0.7712701809775718
Results: bestval_func: 147, bestval_voices: 75
[0 0 0 0 0 1 0 1 0 1 1 0; 1 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 0 0 0 0 0 1 0 0 1 0; 1 0 1 0 0 0 0 0 0 1 1 0; 0 0 0 0 0 0 0 2 0 0 2 0; 1 0 1 0 0 1 0 0 0 1 0 0; 1 0 2 0 0 1 0 0 0 0 0 0; 3 0 0 0 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 0 1 0 0 0 1 1 0; 1 0 1 0 0 0 0 0 0 0 2 0; 2 0 0 0 0 0 0 1 0 0 1 0; 0 0 2 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 2 0 0 0 0; 1 0 0 1 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 1 0 0 1 0; 3 0 0 0 0 0 0 0 0 1 0 0; 1 0 0 0 0 0 0 0 0 1 2 0; 1 0 1 0 0 1 0 0 0 1 0 0; 1 0 0 0 1 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 2 0 0 0 0 0 0; 0 0 1 0 1 0 0 1 0 0 1 0; 0 0 0 2 0 1 0 1 0 0 0 0; 2 0 0 1 0 0 0 0 0 1 0 0; 0 0 1 0 0 1 1 0 0 0 1 0; 0 0 1 0 0 0 0 2 0 0 1 0; 0 0 2 0 0 0 0 0 0 1 1 0]
Key Counter is [27 0 18 4 4 21 1 20 0 12 22 0]
Key Score is [102; 75; 55; 112; 21; 124; 48; 82; 94; 35; 124; 31]
Position Counter for 6 is [21 1 20 0 12 22 0 27 0 18 4 4]
Position Counter for 11 is [22 0 27 0 18 4 4 21 1 20 0 12]
Any[[6.0, 86.5, 1.0], [11.0, 80.5, 0.0]]
[6, 86, 1]
6 F Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 189
child voicing cost: 101
Best yet: 290
New solution
function cost: 159
child voicing cost: 96
Best yet: 255
New solution
function cost: 165
child voicing cost: 89
Best yet: 254
New solution
function cost: 165
child voicing cost: 86
Best yet: 251
New solution
function cost: 165
child voicing cost: 85
Best yet: 250
New solution
function cost: 150
child voicing cost: 98
Best yet: 248
New solution
function cost: 159
child voicing cost: 88
Best yet: 247
New solution
function cost: 159
child voicing cost: 87
Best yet: 246
New solution
function cost: 153
child voicing cost: 88
Best yet: 241
New solution
function cost: 159
child voicing cost: 81
Best yet: 240
New solution
function cost: 159
child voicing cost: 79
Best yet: 238
New solution
function cost: 165
child voicing cost: 72
Best yet: 237
New solution
function cost: 165
child voicing cost: 71
Best yet: 236
New solution
function cost: 156
child voicing cost: 79
Best yet: 235
New solution
function cost: 162
child voicing cost: 72
Best yet: 234
New solution
function cost: 153
child voicing cost: 80
Best yet: 233
New solution
function cost: 159
child voicing cost: 73
Best yet: 232
New solution
function cost: 153
child voicing cost: 78
Best yet: 231
New solution
function cost: 159
child voicing cost: 71
Best yet: 230

(12, "T", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(0, "D", Tuple{Int16,Int16}[(48, 1), (60, 1), (64, 3), (67, 5)])

(0, "D7/7", Tuple{Int16,Int16}[(46, 7), (60, 1), (64, 3), (67, 5)])

(0, "T/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (72, 5)])

(6, "S", Tuple{Int16,Int16}[(46, 1), (62, 3), (65, 5), (70, 1)])

(12, "D7/3", Tuple{Int16,Int16}[(52, 3), (60, 1), (67, 5), (70, 7)])

(21, "T", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(9, "T", Tuple{Int16,Int16}[(53, 1), (65, 1), (69, 3), (72, 5)])

(18, "S", Tuple{Int16,Int16}[(46, 1), (65, 5), (70, 1), (74, 3)])

(3, "D-5", Tuple{Int16,Int16}[(48, 1), (60, 1), (64, 3), (72, 1)])

(12, "S/3", Tuple{Int16,Int16}[(50, 3), (53, 5), (65, 5), (70, 1)])

(6, "T/5", Tuple{Int16,Int16}[(48, 5), (53, 1), (60, 5), (69, 3)])

(15, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (62, 3), (70, 1)])

(12, "D7", Tuple{Int16,Int16}[(48, 1), (52, 3), (58, 7), (67, 5)])

(21, "Ts", Tuple{Int16,Int16}[(50, 1), (53, 3), (57, 5), (65, 3)])

(12, "Ts", Tuple{Int16,Int16}[(50, 1), (53, 3), (57, 5), (62, 1)])

(9, "S", Tuple{Int16,Int16}[(46, 1), (53, 5), (58, 1), (62, 3)])

(3, "D7/7", Tuple{Int16,Int16}[(46, 7), (55, 5), (60, 1), (64, 3)])

(30, "T/3", Tuple{Int16,Int16}[(45, 3), (53, 1), (60, 5), (65, 1)])

(18, "S", Tuple{Int16,Int16}[(46, 1), (58, 1), (62, 3), (65, 5)])

(6, "T/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (72, 5)])

(0, "D7/5", Tuple{Int16,Int16}[(43, 5), (60, 1), (64, 3), (70, 7)])

(0, "T", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(3, "T", Tuple{Int16,Int16}[(41, 1), (57, 3), (65, 1), (72, 5)])

(0, "S65", Tuple{Int16,Int16}[(46, 1), (55, 6), (65, 5), (74, 3)])

(15, "D", Tuple{Int16,Int16}[(48, 1), (55, 5), (64, 3), (72, 1)])

(0, "Ts", Tuple{Int16,Int16}[(50, 1), (53, 3), (65, 3), (69, 5)])

(9, "S/3", Tuple{Int16,Int16}[(50, 3), (53, 5), (65, 5), (70, 1)])

(24, "D64", Tuple{Int16,Int16}[(48, 1), (60, 1), (65, 4), (69, 6)])

(9, "D", Tuple{Int16,Int16}[(48, 1), (60, 1), (64, 3), (67, 5)])

(12, "T", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(12, "T", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

##: Done. Total checked: 122393, Pruned: 138964, completed: 19, time: 2.568000078201294, efficiency: 7.398753668772542
Results: bestval_func: 159, bestval_voices: 71
#Key: 6Scale: Major
#Total time for optimisation of piece: 24.90000009536743
#Total cost of piece: 452
["T", "D", "D7/7", "T/3", "S", "D7/3", "T", "T", "S", "D-5", "S/3", "T/5", "S", "D7", "Ts", "Ts", "S", "D7/7", "T/3", "S", "T/3", "D7/5", "T", "T", "S65", "D", "Ts", "S/3", "D64", "D", "T", "T"]
../../results/optimizer/pianoroll/SMP-44-chorl-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-48-chorl-nn.csv
[0 0 2 0 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 1 0 0 0 1 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 0 0 1 0 0 2 0 0; 0 1 1 0 1 0 0 0 1 0 0 0; 0 2 0 0 1 0 1 0 0 0 0 0; 0 0 1 0 0 0 0 0 1 0 0 2; 0 1 0 0 2 0 0 0 1 0 0 0; 0 2 0 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 0 0 0 1 1 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 2 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 2 0 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 1 0 2 0 0 0 0 1 0 0; 0 1 0 0 0 0 2 0 0 1 0 0; 0 0 1 0 1 0 0 0 0 0 0 2; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 0 1 2 0 0; 0 0 0 0 1 0 2 0 0 1 0 0; 0 1 1 0 1 0 0 0 1 0 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 1 0 0]
Key Counter is [0 19 16 0 31 0 12 0 14 24 0 16]
Key Score is [87; 45; 118; 30; 116; 71; 61; 99; 33; 132; 40; 92]
Position Counter for 10 is [24 0 16 0 19 16 0 31 0 12 0 14]
Any[[10.0, 96.75, 1.0]]
[10, 97, 1]
10 A Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 129
child voicing cost: 112
Best yet: 241
New solution
function cost: 129
child voicing cost: 103
Best yet: 232
New solution
function cost: 129
child voicing cost: 101
Best yet: 230
New solution
function cost: 138
child voicing cost: 91
Best yet: 229
New solution
function cost: 138
child voicing cost: 90
Best yet: 228
New solution
function cost: 138
child voicing cost: 89
Best yet: 227
New solution
function cost: 123
child voicing cost: 96
Best yet: 219
New solution
function cost: 123
child voicing cost: 94
Best yet: 217
New solution
function cost: 129
child voicing cost: 87
Best yet: 216
New solution
function cost: 129
child voicing cost: 85
Best yet: 214
New solution
function cost: 126
child voicing cost: 85
Best yet: 211
New solution
function cost: 126
child voicing cost: 82
Best yet: 208
New solution
function cost: 117
child voicing cost: 90
Best yet: 207
New solution
function cost: 117
child voicing cost: 87
Best yet: 204
New solution
function cost: 117
child voicing cost: 84
Best yet: 201
New solution
function cost: 117
child voicing cost: 82
Best yet: 199
New solution
function cost: 108
child voicing cost: 90
Best yet: 198
New solution
function cost: 129
child voicing cost: 64
Best yet: 193
New solution
function cost: 102
child voicing cost: 90
Best yet: 192
New solution
function cost: 102
child voicing cost: 88
Best yet: 190
New solution
function cost: 105
child voicing cost: 82
Best yet: 187
New solution
function cost: 105
child voicing cost: 80
Best yet: 185
New solution
function cost: 105
child voicing cost: 79
Best yet: 184
New solution
function cost: 105
child voicing cost: 77
Best yet: 182
New solution
function cost: 105
child voicing cost: 75
Best yet: 180
New solution
function cost: 105
child voicing cost: 73
Best yet: 178
##: Done. Total checked: 160538, Pruned: 182341, completed: 26, time: 3.257999897003174, efficiency: 7.980356298941489
Results: bestval_func: 105, bestval_voices: 73
[0 0 2 0 0 0 1 0 0 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 1 0 0 0 1 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 0 0 1 0 0 2 0 0; 0 1 1 0 1 0 0 0 1 0 0 0; 0 2 0 0 1 0 1 0 0 0 0 0; 0 0 1 0 0 0 0 0 1 0 0 2; 0 1 0 0 2 0 0 0 1 0 0 0; 0 2 0 0 1 0 0 0 0 1 0 0; 0 0 1 0 0 0 0 0 1 1 0 1; 0 1 0 0 2 0 0 0 0 1 0 0; 0 2 0 0 1 0 0 0 0 1 0 0; 0 0 2 0 0 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 1 0 0 1 0 1 0 0 1 0 0; 0 0 0 0 2 0 0 0 1 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 2 0 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 0 0 1 0 0 1; 0 0 1 0 2 0 0 0 0 1 0 0; 0 1 0 0 0 0 2 0 0 1 0 0; 0 0 1 0 1 0 0 0 0 0 0 2; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 1 0 1 0 0 0 0 2 0 0; 0 0 0 0 1 0 0 0 1 2 0 0; 0 0 0 0 1 0 2 0 0 1 0 0; 0 1 1 0 1 0 0 0 1 0 0 0; 0 0 2 0 0 0 1 0 0 0 0 1; 0 0 1 0 0 0 2 0 0 1 0 0]
Key Counter is [0 19 16 0 31 0 12 0 14 24 0 16]
Key Score is [87; 45; 118; 30; 116; 71; 61; 99; 33; 132; 40; 92]
Position Counter for 10 is [24 0 16 0 19 16 0 31 0 12 0 14]
Any[[10.0, 96.75, 1.0]]
[10, 97, 1]
10 A Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 183
child voicing cost: 82
Best yet: 265
New solution
function cost: 183
child voicing cost: 79
Best yet: 262
New solution
function cost: 177
child voicing cost: 84
Best yet: 261
New solution
function cost: 177
child voicing cost: 81
Best yet: 258
New solution
function cost: 177
child voicing cost: 77
Best yet: 254
New solution
function cost: 180
child voicing cost: 73
Best yet: 253
New solution
function cost: 180
child voicing cost: 70
Best yet: 250
New solution
function cost: 165
child voicing cost: 82
Best yet: 247
New solution
function cost: 165
child voicing cost: 80
Best yet: 245
New solution
function cost: 165
child voicing cost: 78
Best yet: 243
New solution
function cost: 165
child voicing cost: 75
Best yet: 240
New solution
function cost: 162
child voicing cost: 76
Best yet: 238
New solution
function cost: 147
child voicing cost: 90
Best yet: 237
New solution
function cost: 147
child voicing cost: 87
Best yet: 234
New solution
function cost: 147
child voicing cost: 84
Best yet: 231
New solution
function cost: 147
child voicing cost: 82
Best yet: 229
New solution
function cost: 147
child voicing cost: 80
Best yet: 227
New solution
function cost: 141
child voicing cost: 75
Best yet: 216
New solution
function cost: 141
child voicing cost: 70
Best yet: 211
New solution
function cost: 141
child voicing cost: 67
Best yet: 208
New solution
function cost: 141
child voicing cost: 60
Best yet: 201
New solution
function cost: 141
child voicing cost: 57
Best yet: 198
New solution
function cost: 135
child voicing cost: 62
Best yet: 197
New solution
function cost: 135
child voicing cost: 59
Best yet: 194
New solution
function cost: 129
child voicing cost: 62
Best yet: 191
New solution
function cost: 129
child voicing cost: 59
Best yet: 188

(24, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(0, "D/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(0, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(9, "S/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (69, 5), (74, 1)])

(0, "D", Tuple{Int16,Int16}[(52, 1), (59, 5), (68, 3), (76, 1)])

(0, "D/3", Tuple{Int16,Int16}[(56, 3), (59, 5), (64, 1), (71, 5)])

(0, "T", Tuple{Int16,Int16}[(57, 1), (61, 3), (64, 5), (69, 1)])

(6, "T", Tuple{Int16,Int16}[(45, 1), (61, 3), (64, 5), (69, 1)])

(6, "D7/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (64, 1), (74, 7)])

(21, "T", Tuple{Int16,Int16}[(45, 1), (64, 5), (69, 1), (73, 3)])

(0, "D7-1", Tuple{Int16,Int16}[(47, 5), (62, 7), (68, 3), (71, 5)])

(18, "T", Tuple{Int16,Int16}[(45, 1), (61, 3), (69, 1), (76, 5)])

(3, "Tm", Tuple{Int16,Int16}[(49, 1), (61, 1), (68, 5), (76, 3)])

(15, "S", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (74, 1)])

(9, "D", Tuple{Int16,Int16}[(52, 1), (56, 3), (64, 1), (71, 5)])

(18, "D", Tuple{Int16,Int16}[(40, 1), (56, 3), (64, 1), (71, 5)])

(0, "D7-1", Tuple{Int16,Int16}[(47, 5), (59, 5), (62, 7), (68, 3)])

(0, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (69, 1)])

(9, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(0, "D/5", Tuple{Int16,Int16}[(47, 5), (56, 3), (64, 1), (71, 5)])

(0, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (69, 1)])

(12, "S", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(0, "D7/7", Tuple{Int16,Int16}[(50, 7), (59, 5), (64, 1), (68, 3)])

(3, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (69, 1)])

(0, "Ts", Tuple{Int16,Int16}[(42, 1), (57, 3), (66, 1), (73, 5)])

(9, "D7/3", Tuple{Int16,Int16}[(44, 3), (59, 5), (64, 1), (74, 7)])

(0, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(3, "T/3", Tuple{Int16,Int16}[(49, 3), (57, 1), (64, 5), (76, 5)])

(27, "S", Tuple{Int16,Int16}[(50, 1), (57, 5), (66, 3), (74, 1)])

(24, "D", Tuple{Int16,Int16}[(52, 1), (56, 3), (64, 1), (71, 5)])

(18, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

(18, "T", Tuple{Int16,Int16}[(45, 1), (57, 1), (64, 5), (73, 3)])

##: Done. Total checked: 227662, Pruned: 252201, completed: 26, time: 4.289000034332275, efficiency: 6.062019070150872
Results: bestval_func: 129, bestval_voices: 59
#Key: 10Scale: Major
#Total time for optimisation of piece: 8.882999897003174
#Total cost of piece: 366
["T", "D/3", "D", "S/3", "D", "D/3", "T", "T", "D7/3", "T", "D7-1", "T", "Tm", "S", "D", "D", "D7-1", "T/3", "T", "D/5", "T/3", "S", "D7/7", "T/3", "Ts", "D7/3", "T", "T/3", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/SMP-48-chorl-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-53-chorl-nn.csv
[0 0 1 0 0 0 0 1 0 0 0 2; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 0 0 0 0 1 0 0 2 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 0 1 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 1 0 0 1 0 1 1 0 0 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 2 0 0 1 0 1 0 0 0 0 0; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 1 0 1 0 0 0 0 0 0 2; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 1 0 0 0 0]
Key Counter is [0 8 38 0 14 0 20 19 1 21 1 10]
Key Score is [102; 30; 130; 59; 74; 93; 40; 122; 29; 112; 79; 54]
Position Counter for 3 is [38 0 14 0 20 19 1 21 1 10 0 8]
Any[[3.0, 97.0, 1.0]]
[3, 97, 1]
3 D Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 114
child voicing cost: 91
Best yet: 205
New solution
function cost: 114
child voicing cost: 87
Best yet: 201
New solution
function cost: 108
child voicing cost: 91
Best yet: 199
New solution
function cost: 108
child voicing cost: 89
Best yet: 197
##: Done. Total checked: 49544, Pruned: 61149, completed: 4, time: 1.1649999618530273, efficiency: 3.433476507276167
Results: bestval_func: 108, bestval_voices: 89
[0 0 1 0 0 0 0 1 0 0 0 2; 0 0 1 0 1 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 1 0 0 1 1; 0 0 1 0 0 0 1 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 1 0 0 2 0 0; 0 0 0 0 0 0 1 0 0 2 0 1; 0 1 0 0 1 0 0 0 0 2 0 0; 0 0 3 0 0 0 1 0 0 0 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 1 0 0 0 0 2 0 1 0 0; 0 0 2 0 0 0 0 1 0 1 0 0; 0 0 2 0 0 0 0 0 1 0 0 1; 0 1 1 0 1 0 0 0 0 1 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 1 0 0 1 0 1 1 0 0 0 0; 0 1 1 0 0 0 1 0 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 2 0 0 0 1 0 0 1 0 0; 0 0 0 0 1 0 1 1 0 1 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 2 0 0 0 1 1 0 0 0 0; 0 0 1 0 1 0 1 1 0 0 0 0; 0 2 0 0 1 0 1 0 0 0 0 0; 0 1 0 0 0 0 1 0 0 1 0 1; 0 0 1 0 1 0 0 0 0 0 0 2; 0 0 1 0 1 0 0 1 0 0 0 1; 0 0 2 0 0 0 1 1 0 0 0 0]
Key Counter is [0 8 38 0 14 0 20 19 1 21 1 10]
Key Score is [102; 30; 130; 59; 74; 93; 40; 122; 29; 112; 79; 54]
Position Counter for 3 is [38 0 14 0 20 19 1 21 1 10 0 8]
Any[[3.0, 97.0, 1.0]]
[3, 97, 1]
3 D Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 216
child voicing cost: 69
Best yet: 285
New solution
function cost: 216
child voicing cost: 66
Best yet: 282
New solution
function cost: 216
child voicing cost: 63
Best yet: 279
New solution
function cost: 216
child voicing cost: 62
Best yet: 278
New solution
function cost: 204
child voicing cost: 67
Best yet: 271
New solution
function cost: 204
child voicing cost: 64
Best yet: 268
New solution
function cost: 204
child voicing cost: 61
Best yet: 265
New solution
function cost: 204
child voicing cost: 60
Best yet: 264
New solution
function cost: 192
child voicing cost: 58
Best yet: 250
New solution
function cost: 192
child voicing cost: 57
Best yet: 249
New solution
function cost: 192
child voicing cost: 54
Best yet: 246
New solution
function cost: 192
child voicing cost: 51
Best yet: 243
New solution
function cost: 195
child voicing cost: 44
Best yet: 239
New solution
function cost: 195
child voicing cost: 43
Best yet: 238
New solution
function cost: 195
child voicing cost: 40
Best yet: 235
New solution
function cost: 171
child voicing cost: 62
Best yet: 233
New solution
function cost: 171
child voicing cost: 59
Best yet: 230
New solution
function cost: 183
child voicing cost: 46
Best yet: 229
New solution
function cost: 177
child voicing cost: 46
Best yet: 223
New solution
function cost: 177
child voicing cost: 45
Best yet: 222
New solution
function cost: 177
child voicing cost: 42
Best yet: 219
New solution
function cost: 183
child voicing cost: 35
Best yet: 218
New solution
function cost: 183
child voicing cost: 32
Best yet: 215
New solution
function cost: 171
child voicing cost: 43
Best yet: 214
New solution
function cost: 171
child voicing cost: 40
Best yet: 211
New solution
function cost: 165
child voicing cost: 43
Best yet: 208
New solution
function cost: 165
child voicing cost: 42
Best yet: 207
New solution
function cost: 165
child voicing cost: 39
Best yet: 204

(18, "T", Tuple{Int16,Int16}[(50, 1), (50, 1), (57, 5), (66, 3)])

(6, "D7/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (67, 7)])

(9, "Ts", Tuple{Int16,Int16}[(47, 1), (54, 5), (59, 1), (62, 3)])

(0, "D", Tuple{Int16,Int16}[(45, 1), (57, 1), (61, 3), (64, 5)])

(0, "T/3", Tuple{Int16,Int16}[(42, 3), (57, 5), (62, 1), (69, 5)])

(9, "S", Tuple{Int16,Int16}[(43, 1), (59, 3), (62, 5), (67, 1)])

(15, "D", Tuple{Int16,Int16}[(45, 1), (57, 1), (61, 3), (64, 5)])

(9, "D", Tuple{Int16,Int16}[(45, 1), (49, 3), (57, 1), (64, 5)])

(0, "T/3", Tuple{Int16,Int16}[(42, 3), (50, 1), (57, 5), (62, 1)])

(6, "Tm", Tuple{Int16,Int16}[(42, 1), (49, 5), (57, 3), (69, 3)])

(6, "D7/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (57, 1), (67, 7)])

(15, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(0, "T/3", Tuple{Int16,Int16}[(54, 3), (57, 5), (62, 1), (69, 5)])

(12, "D7/5", Tuple{Int16,Int16}[(52, 5), (57, 1), (61, 3), (67, 7)])

(3, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(18, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(6, "D/3", Tuple{Int16,Int16}[(49, 3), (52, 5), (64, 5), (69, 1)])

(12, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(3, "D7-1", Tuple{Int16,Int16}[(52, 5), (55, 7), (61, 3), (64, 5)])

(3, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(3, "D7/3", Tuple{Int16,Int16}[(49, 3), (55, 7), (64, 5), (69, 1)])

(0, "T", Tuple{Int16,Int16}[(50, 1), (54, 3), (62, 1), (69, 5)])

(15, "D7-1", Tuple{Int16,Int16}[(52, 5), (55, 7), (61, 3), (67, 7)])

(6, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(12, "D7-1", Tuple{Int16,Int16}[(52, 5), (55, 7), (61, 3), (64, 5)])

(6, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(12, "S", Tuple{Int16,Int16}[(43, 1), (59, 3), (62, 5), (67, 1)])

(12, "T/3", Tuple{Int16,Int16}[(42, 3), (57, 5), (62, 1), (69, 5)])

(21, "S", Tuple{Int16,Int16}[(43, 1), (59, 3), (62, 5), (67, 1)])

(12, "D", Tuple{Int16,Int16}[(45, 1), (57, 1), (61, 3), (64, 5)])

(27, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

(27, "T", Tuple{Int16,Int16}[(50, 1), (57, 5), (62, 1), (66, 3)])

##: Done. Total checked: 196040, Pruned: 213174, completed: 28, time: 3.683000087738037, efficiency: 7.602497782506589
Results: bestval_func: 165, bestval_voices: 39
#Key: 3Scale: Major
#Total time for optimisation of piece: 6.185999870300293
#Total cost of piece: 401
["T", "D7/3", "Ts", "D", "T/3", "S", "D", "D", "T/3", "Tm", "D7/3", "T", "T/3", "D7/5", "T", "T", "D/3", "T", "D7-1", "T", "D7/3", "T", "D7-1", "T", "D7-1", "T", "S", "T/3", "S", "D", "T", "T"]
../../results/optimizer/pianoroll/SMP-53-chorl-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-55-chorl-nn.csv
[0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 0 2 0 0; 0 0 0 0 1 0 0 0 0 2 0 1; 0 0 0 0 1 0 0 0 0 1 0 2; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 2 0 1 0 0 0 0 1; 0 0 0 0 2 0 1 0 0 0 0 1; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 0 0 0 1 0 0 0 0 3; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 1 1 0 0]
Key Counter is [0 9 1 0 36 0 24 0 18 9 3 32]
Key Score is [78; 54; 111; 22; 128; 49; 86; 102; 30; 129; 13; 122]
Position Counter for 10 is [9 3 32 0 9 1 0 36 0 24 0 18]
Any[[10.0, 81.0, 0.0]]
[10, 81, 0]
7 F# Minor
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 198
child voicing cost: 86
Best yet: 284
New solution
function cost: 198
child voicing cost: 83
Best yet: 281
New solution
function cost: 198
child voicing cost: 82
Best yet: 280
New solution
function cost: 198
child voicing cost: 79
Best yet: 277
New solution
function cost: 195
child voicing cost: 77
Best yet: 272
New solution
function cost: 186
child voicing cost: 83
Best yet: 269
New solution
function cost: 186
child voicing cost: 81
Best yet: 267
New solution
function cost: 183
child voicing cost: 82
Best yet: 265
New solution
function cost: 189
child voicing cost: 74
Best yet: 263
New solution
function cost: 177
child voicing cost: 83
Best yet: 260
New solution
function cost: 180
child voicing cost: 79
Best yet: 259
New solution
function cost: 180
child voicing cost: 75
Best yet: 255
New solution
function cost: 171
child voicing cost: 82
Best yet: 253
Iterations done: 10000
Nodes in active set: 169
Lowest depth: 2 current depth: 14
New solution
function cost: 168
child voicing cost: 84
Best yet: 252
Iterations done: 20000
Nodes in active set: 116
Lowest depth: 2 current depth: 11
Iterations done: 30000
Nodes in active set: 107
Lowest depth: 2 current depth: 10
Iterations done: 40000
Nodes in active set: 102
Lowest depth: 2 current depth: 11
New solution
function cost: 171
child voicing cost: 79
Best yet: 250
New solution
function cost: 168
child voicing cost: 81
Best yet: 249
Iterations done: 50000
Nodes in active set: 25
Lowest depth: 1 current depth: 9
##: Done. Total checked: 4506428, Pruned: 5291404, completed: 16, time: 88.78300023078918, efficiency: 0.18021468026996612
Results: bestval_func: 168, bestval_voices: 81
[0 1 0 0 0 0 2 0 0 0 1 0; 0 1 0 0 0 0 2 0 0 0 1 0; 0 0 0 0 1 0 0 0 1 0 0 2; 0 1 0 0 1 0 1 0 0 0 1 0; 0 0 1 0 1 0 1 0 0 0 0 1; 0 1 0 0 1 0 0 0 2 0 0 0; 0 1 0 0 0 0 1 0 0 2 0 0; 0 0 0 0 1 0 0 0 0 2 0 1; 0 0 0 0 1 0 0 0 0 1 0 2; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 0 0 2; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 1 0 0 0 0 1; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 2 0 1 0 0 0 0 1; 0 0 0 0 2 0 1 0 0 0 0 1; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 0 0 0 1 0 0 0 0 3; 0 0 0 0 1 0 1 0 1 0 0 1; 0 0 0 0 1 0 0 0 1 1 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 1 0 1 0 0 1; 0 1 0 0 1 0 2 0 0 0 0 0; 0 0 0 0 1 0 1 0 0 0 0 2; 0 0 0 0 1 0 2 0 0 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 2 0 0 0 1 0 0 1; 0 0 0 0 1 0 0 0 2 0 0 1; 0 1 0 0 1 0 1 0 0 1 0 0; 0 1 0 0 1 0 0 0 1 1 0 0]
Key Counter is [0 9 1 0 36 0 24 0 18 9 3 32]
Key Score is [78; 54; 111; 22; 128; 49; 86; 102; 30; 129; 13; 122]
Position Counter for 10 is [9 3 32 0 9 1 0 36 0 24 0 18]
Any[[10.0, 81.0, 0.0]]
[10, 81, 0]
7 F# Minor
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 255
child voicing cost: 91
Best yet: 346
New solution
function cost: 234
child voicing cost: 102
Best yet: 336
New solution
function cost: 234
child voicing cost: 101
Best yet: 335
New solution
function cost: 234
child voicing cost: 98
Best yet: 332
New solution
function cost: 222
child voicing cost: 105
Best yet: 327
New solution
function cost: 222
child voicing cost: 103
Best yet: 325
New solution
function cost: 222
child voicing cost: 97
Best yet: 319
New solution
function cost: 234
child voicing cost: 84
Best yet: 318
New solution
function cost: 222
child voicing cost: 94
Best yet: 316
New solution
function cost: 225
child voicing cost: 89
Best yet: 314
New solution
function cost: 225
child voicing cost: 82
Best yet: 307
New solution
function cost: 219
child voicing cost: 83
Best yet: 302
New solution
function cost: 219
child voicing cost: 78
Best yet: 297
New solution
function cost: 210
child voicing cost: 73
Best yet: 283
New solution
function cost: 210
child voicing cost: 71
Best yet: 281
New solution
function cost: 210
child voicing cost: 65
Best yet: 275
New solution
function cost: 210
child voicing cost: 62
Best yet: 272

(3, "T", Tuple{Int16,Int16}[(54, 1), (61, 5), (66, 1), (69, 3)])

(3, "T", Tuple{Int16,Int16}[(54, 1), (57, 3), (66, 1), (73, 5)])

(3, "D7-1", Tuple{Int16,Int16}[(56, 5), (59, 7), (65, 3), (71, 7)])

(9, "T", Tuple{Int16,Int16}[(54, 1), (61, 5), (66, 1), (69, 3)])

(6, "S/3", Tuple{Int16,Int16}[(50, 3), (59, 1), (66, 5), (71, 1)])

(3, "D/3", Tuple{Int16,Int16}[(53, 3), (56, 5), (68, 5), (73, 1)])

(9, "T", Tuple{Int16,Int16}[(54, 1), (57, 3), (66, 1), (73, 5)])

(21, "T", Tuple{Int16,Int16}[(54, 1), (61, 5), (66, 1), (69, 3)])

(15, "D7-1", Tuple{Int16,Int16}[(56, 5), (59, 7), (65, 3), (68, 5)])

(6, "D7-1", Tuple{Int16,Int16}[(44, 5), (59, 7), (59, 7), (65, 3)])

(21, "T", Tuple{Int16,Int16}[(42, 1), (57, 3), (61, 5), (66, 1)])

(9, "D7/3", Tuple{Int16,Int16}[(41, 3), (56, 5), (61, 1), (71, 7)])

(15, "T", Tuple{Int16,Int16}[(42, 1), (54, 1), (61, 5), (69, 3)])

(9, "D7", Tuple{Int16,Int16}[(49, 1), (53, 3), (59, 7), (68, 5)])

(21, "Ts", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (66, 3)])

(18, "Ts", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (62, 1)])

(18, "D7", Tuple{Int16,Int16}[(49, 1), (53, 3), (59, 7), (68, 5)])

(18, "Ts", Tuple{Int16,Int16}[(50, 1), (54, 3), (57, 5), (66, 3)])

(12, "S65", Tuple{Int16,Int16}[(47, 1), (54, 5), (62, 3), (68, 6)])

(18, "T/5", Tuple{Int16,Int16}[(49, 5), (54, 1), (61, 5), (69, 3)])

(12, "S/3", Tuple{Int16,Int16}[(50, 3), (54, 5), (59, 1), (71, 1)])

(12, "D/3", Tuple{Int16,Int16}[(53, 3), (56, 5), (61, 1), (68, 5)])

(21, "T", Tuple{Int16,Int16}[(54, 1), (57, 3), (61, 5), (66, 1)])

(0, "Dm", Tuple{Int16,Int16}[(52, 1), (59, 5), (64, 1), (68, 3)])

(12, "S/3", Tuple{Int16,Int16}[(50, 3), (59, 1), (66, 5), (71, 1)])

(18, "T/5", Tuple{Int16,Int16}[(49, 5), (57, 3), (66, 1), (73, 5)])

(6, "S", Tuple{Int16,Int16}[(47, 1), (59, 1), (66, 5), (74, 3)])

(6, "S/3", Tuple{Int16,Int16}[(50, 3), (54, 5), (66, 5), (71, 1)])

(18, "D", Tuple{Int16,Int16}[(49, 1), (56, 5), (65, 3), (73, 1)])

(12, "D7", Tuple{Int16,Int16}[(49, 1), (56, 5), (65, 3), (71, 7)])

(21, "T", Tuple{Int16,Int16}[(42, 1), (61, 5), (66, 1), (69, 3)])

(21, "T", Tuple{Int16,Int16}[(42, 1), (61, 5), (66, 1), (69, 3)])

##: Done. Total checked: 98369, Pruned: 111403, completed: 17, time: 2.0989999771118164, efficiency: 8.09909489536616
Results: bestval_func: 210, bestval_voices: 62
#Key: 7Scale: Minor
#Total time for optimisation of piece: 92.31500005722046
#Total cost of piece: 521
["T", "T", "D7-1", "T", "S/3", "D/3", "T", "T", "D7-1", "D7-1", "T", "D7/3", "T", "D7", "Ts", "Ts", "D7", "Ts", "S65", "T/5", "S/3", "D/3", "T", "Dm", "S/3", "T/5", "S", "S/3", "D", "D7", "T", "T"]
../../results/optimizer/pianoroll/SMP-55-chorl-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-63-chorl-nn.csv
[0 0 2 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 1 0 0 0 0 0 0 1 1 0; 2 0 0 0 0 0 0 0 0 0 2 0; 0 0 1 0 0 0 0 0 0 1 2 0; 1 0 1 0 0 0 0 1 0 0 1 0; 0 0 0 0 1 0 1 2 0 0 0 0; 1 0 0 0 0 0 0 1 0 1 1 0; 0 0 1 0 0 0 0 2 0 0 1 0; 0 0 1 1 0 0 0 0 0 1 1 0; 2 0 1 0 0 1 0 0 0 0 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 3 0 0 1 0 0 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 1 0 0; 2 0 0 0 0 0 0 1 0 0 1 0; 1 0 0 0 1 1 0 0 0 1 0 0; 1 0 0 0 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 0 2 0 0; 2 0 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 1 1 0 0 0 0 0 0; 0 0 0 0 1 1 0 0 0 1 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 1 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0]
Key Counter is [35 1 12 3 4 24 1 16 0 14 22 0]
Key Score is [105; 86; 48; 112; 23; 127; 51; 82; 101; 32; 126; 31]
Position Counter for 6 is [24 1 16 0 14 22 0 35 1 12 3 4]
Any[[6.0, 95.5, 1.0]]
[6, 96, 1]
6 F Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 198
child voicing cost: 96
Best yet: 294
New solution
function cost: 198
child voicing cost: 88
Best yet: 286
New solution
function cost: 192
child voicing cost: 93
Best yet: 285
New solution
function cost: 192
child voicing cost: 87
Best yet: 279
New solution
function cost: 195
child voicing cost: 81
Best yet: 276
New solution
function cost: 189
child voicing cost: 86
Best yet: 275
New solution
function cost: 189
child voicing cost: 84
Best yet: 273
New solution
function cost: 180
child voicing cost: 88
Best yet: 268
New solution
function cost: 171
child voicing cost: 96
Best yet: 267
New solution
function cost: 177
child voicing cost: 87
Best yet: 264
New solution
function cost: 177
child voicing cost: 86
Best yet: 263
New solution
function cost: 186
child voicing cost: 75
Best yet: 261
New solution
function cost: 186
child voicing cost: 74
Best yet: 260
New solution
function cost: 186
child voicing cost: 72
Best yet: 258
New solution
function cost: 186
child voicing cost: 71
Best yet: 257
New solution
function cost: 186
child voicing cost: 69
Best yet: 255
New solution
function cost: 186
child voicing cost: 67
Best yet: 253
##: Done. Total checked: 111474, Pruned: 132364, completed: 17, time: 2.311000108718872, efficiency: 7.356122544461555
Results: bestval_func: 186, bestval_voices: 67
[0 0 2 0 0 1 0 0 0 0 1 0; 1 0 0 0 0 1 0 0 0 2 0 0; 0 0 1 0 0 0 0 2 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 0 0 1 0 0 1 0 1 0 0 1 0; 2 0 0 0 0 0 0 1 0 0 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 1 0 0 0 0 0 0 1 1 0; 2 0 0 0 0 0 0 0 0 0 2 0; 0 0 1 0 0 0 0 0 0 1 2 0; 1 0 1 0 0 0 0 1 0 0 1 0; 0 0 0 0 1 0 1 2 0 0 0 0; 1 0 0 0 0 0 0 1 0 1 1 0; 0 0 1 0 0 0 0 2 0 0 1 0; 0 0 1 1 0 0 0 0 0 1 1 0; 2 0 1 0 0 1 0 0 0 0 0 0; 1 0 0 0 0 2 0 0 0 0 1 0; 2 0 0 0 0 1 0 1 0 0 0 0; 1 1 0 0 0 1 0 0 0 0 1 0; 3 0 0 1 0 0 0 0 0 0 0 0; 1 0 1 0 0 1 0 0 0 0 1 0; 2 0 0 0 0 1 0 0 0 1 0 0; 2 0 0 0 0 0 0 1 0 0 1 0; 1 0 0 0 1 1 0 0 0 1 0 0; 1 0 0 0 0 0 0 1 0 0 2 0; 1 0 0 0 0 1 0 0 0 2 0 0; 2 0 0 0 0 0 0 1 0 0 1 0; 2 0 0 0 1 1 0 0 0 0 0 0; 0 0 0 0 1 1 0 0 0 1 1 0; 1 0 0 0 0 2 0 0 0 1 0 0; 1 0 0 1 0 2 0 0 0 0 0 0; 2 0 0 0 0 1 0 1 0 0 0 0; 0 0 1 0 0 1 0 1 0 0 1 0]
Key Counter is [35 1 12 3 4 24 1 16 0 14 22 0]
Key Score is [105; 86; 48; 112; 23; 127; 51; 82; 101; 32; 126; 31]
Position Counter for 6 is [24 1 16 0 14 22 0 35 1 12 3 4]
Any[[6.0, 95.5, 1.0]]
[6, 96, 1]
6 F Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 147
child voicing cost: 104
Best yet: 251
New solution
function cost: 147
child voicing cost: 101
Best yet: 248
New solution
function cost: 147
child voicing cost: 98
Best yet: 245
New solution
function cost: 147
child voicing cost: 96
Best yet: 243
New solution
function cost: 147
child voicing cost: 94
Best yet: 241
New solution
function cost: 147
child voicing cost: 91
Best yet: 238
New solution
function cost: 147
child voicing cost: 88
Best yet: 235
New solution
function cost: 153
child voicing cost: 80
Best yet: 233
New solution
function cost: 153
child voicing cost: 78
Best yet: 231
New solution
function cost: 153
child voicing cost: 75
Best yet: 228
New solution
function cost: 153
child voicing cost: 72
Best yet: 225
New solution
function cost: 159
child voicing cost: 63
Best yet: 222
New solution
function cost: 159
child voicing cost: 60
Best yet: 219

(18, "T", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(12, "T", Tuple{Int16,Int16}[(53, 1), (65, 1), (69, 3), (72, 5)])

(0, "Ss", Tuple{Int16,Int16}[(55, 1), (62, 5), (67, 1), (70, 3)])

(0, "T/3", Tuple{Int16,Int16}[(57, 3), (60, 5), (65, 1), (72, 5)])

(0, "S65/6", Tuple{Int16,Int16}[(55, 6), (58, 1), (65, 5), (74, 3)])

(18, "D7-1", Tuple{Int16,Int16}[(55, 5), (58, 7), (67, 5), (76, 3)])

(0, "T", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(24, "T", Tuple{Int16,Int16}[(41, 1), (60, 5), (69, 3), (77, 1)])

(21, "Ss", Tuple{Int16,Int16}[(43, 1), (58, 3), (70, 3), (74, 5)])

(21, "T/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (72, 5)])

(12, "S", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (74, 3)])

(12, "D7-1", Tuple{Int16,Int16}[(43, 5), (58, 7), (67, 5), (76, 3)])

(12, "T/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (77, 1)])

(15, "S", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (74, 3)])

(21, "D", Tuple{Int16,Int16}[(48, 1), (55, 5), (64, 3), (72, 1)])

(18, "D", Tuple{Int16,Int16}[(48, 1), (60, 1), (64, 3), (67, 5)])

(3, "T", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(3, "D/5", Tuple{Int16,Int16}[(43, 5), (60, 1), (64, 3), (67, 5)])

(6, "T/3", Tuple{Int16,Int16}[(45, 3), (60, 5), (65, 1), (72, 5)])

(18, "D", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(6, "S/3", Tuple{Int16,Int16}[(50, 3), (58, 1), (65, 5), (70, 1)])

(0, "T/5", Tuple{Int16,Int16}[(48, 5), (60, 5), (65, 1), (69, 3)])

(18, "S", Tuple{Int16,Int16}[(46, 1), (62, 3), (65, 5), (70, 1)])

(3, "T", Tuple{Int16,Int16}[(41, 1), (57, 3), (65, 1), (72, 5)])

(12, "D7-1", Tuple{Int16,Int16}[(43, 5), (58, 7), (64, 3), (67, 5)])

(12, "T", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(12, "D7/3", Tuple{Int16,Int16}[(40, 3), (58, 7), (67, 5), (72, 1)])

(12, "T", Tuple{Int16,Int16}[(41, 1), (57, 3), (65, 1), (72, 5)])

(9, "S", Tuple{Int16,Int16}[(46, 1), (58, 1), (65, 5), (74, 3)])

(12, "D7", Tuple{Int16,Int16}[(48, 1), (58, 7), (64, 3), (67, 5)])

(18, "T", Tuple{Int16,Int16}[(53, 1), (57, 3), (60, 5), (65, 1)])

(18, "T", Tuple{Int16,Int16}[(53, 1), (57, 3), (60, 5), (65, 1)])

##: Done. Total checked: 185274, Pruned: 206467, completed: 13, time: 3.703000068664551, efficiency: 3.510666961636951
Results: bestval_func: 159, bestval_voices: 60
#Key: 6Scale: Major
#Total time for optimisation of piece: 7.57699990272522
#Total cost of piece: 472
["T", "T", "Ss", "T/3", "S65/6", "D7-1", "T", "T", "Ss", "T/3", "S", "D7-1", "T/3", "S", "D", "D", "T", "D/5", "T/3", "D", "S/3", "T/5", "S", "T", "D7-1", "T", "D7/3", "T", "S", "D7", "T", "T"]
../../results/optimizer/pianoroll/SMP-63-chorl-opt.csv
 End of file 
 
Optimising: ../../results/neuralnet/pianoroll/SMP-72-chorl-nn.csv
[1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 0 0 1 0 1; 1 0 0 0 2 0 0 1 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 2 0 0 0 0 0 0 1 0 0 0 1; 0 0 0 0 1 0 0 1 0 0 0 2; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 0 0 2 0 0 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 0 0 2 0 0; 0 0 2 1 0 0 0 0 0 1 0 0; 1 0 0 0 2 0 0 0 0 1 0 0; 1 0 0 0 0 0 0 2 0 0 0 1; 1 0 0 0 0 1 0 1 0 0 0 1; 1 0 1 0 0 1 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 2 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 1 0 0 0 2 0 0 0 0 1 0 0; 1 0 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 0 0 2 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 0 0 0 0 0 2 0 1 0 1 0 0; 1 0 0 0 2 0 0 1 0 0 0 0; 2 0 0 0 0 0 0 1 0 1 0 0; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 1 0 1 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 0 2 0 0 0 1]
Key Counter is [22 0 19 1 22 11 0 26 0 22 0 9]
Key Score is [131; 34; 98; 79; 54; 122; 21; 120; 60; 72; 101; 32]
Position Counter for 1 is [22 0 19 1 22 11 0 26 0 22 0 9]
Any[[1.0, 83.75, 1.0]]
[1, 84, 1]
1 C Major
Rhythm map: ["S", "W", "S", "W", "S", "C", "C", "C", "S", "W", "S", "W", "S", "C", "C", "C"] size: (16,)
Amount of timesteps to optimise: 16
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 165
child voicing cost: 116
Best yet: 281
New solution
function cost: 165
child voicing cost: 115
Best yet: 280
New solution
function cost: 165
child voicing cost: 104
Best yet: 269
New solution
function cost: 159
child voicing cost: 109
Best yet: 268
New solution
function cost: 159
child voicing cost: 107
Best yet: 266
New solution
function cost: 171
child voicing cost: 94
Best yet: 265
New solution
function cost: 171
child voicing cost: 93
Best yet: 264
New solution
function cost: 171
child voicing cost: 91
Best yet: 262
New solution
function cost: 171
child voicing cost: 86
Best yet: 257
New solution
function cost: 159
child voicing cost: 91
Best yet: 250
New solution
function cost: 153
child voicing cost: 95
Best yet: 248
New solution
function cost: 159
child voicing cost: 84
Best yet: 243
New solution
function cost: 159
child voicing cost: 83
Best yet: 242
New solution
function cost: 159
child voicing cost: 82
Best yet: 241
New solution
function cost: 159
child voicing cost: 81
Best yet: 240
New solution
function cost: 159
child voicing cost: 80
Best yet: 239
New solution
function cost: 144
child voicing cost: 89
Best yet: 233
New solution
function cost: 144
child voicing cost: 86
Best yet: 230
New solution
function cost: 144
child voicing cost: 80
Best yet: 224
##: Done. Total checked: 258267, Pruned: 336056, completed: 19, time: 5.144999980926514, efficiency: 3.692905747412359
Results: bestval_func: 144, bestval_voices: 80
[1 0 0 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 0 0 1 0 1; 1 0 0 0 2 0 0 1 0 0 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 2 0 0 1 0 0 0 0 0 1; 2 0 0 0 1 0 0 1 0 0 0 0; 2 0 0 0 0 0 0 1 0 0 0 1; 0 0 0 0 1 0 0 1 0 0 0 2; 2 0 0 0 1 0 0 1 0 0 0 0; 1 0 0 0 1 0 0 2 0 0 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 1 0 0 0 2 0 0; 0 0 2 1 0 0 0 0 0 1 0 0; 1 0 0 0 2 0 0 0 0 1 0 0; 1 0 0 0 0 0 0 2 0 0 0 1; 1 0 0 0 0 1 0 1 0 0 0 1; 1 0 1 0 0 1 0 1 0 0 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 1 0 0 1 0 1 0 0; 0 0 1 0 0 0 0 1 0 2 0 0; 0 0 1 0 1 0 0 1 0 0 0 1; 1 0 0 0 2 0 0 0 0 1 0 0; 1 0 0 0 1 0 0 0 0 2 0 0; 0 0 2 0 0 1 0 0 0 1 0 0; 0 0 0 0 2 1 0 1 0 0 0 0; 1 0 0 0 1 1 0 1 0 0 0 0; 0 0 0 0 0 2 0 1 0 1 0 0; 1 0 0 0 2 0 0 1 0 0 0 0; 2 0 0 0 0 0 0 1 0 1 0 0; 1 0 1 0 0 0 0 1 0 1 0 0; 1 0 0 0 1 0 0 1 0 1 0 0; 1 0 1 0 0 0 0 0 0 2 0 0; 0 0 1 0 0 0 0 2 0 0 0 1]
Key Counter is [22 0 19 1 22 11 0 26 0 22 0 9]
Key Score is [131; 34; 98; 79; 54; 122; 21; 120; 60; 72; 101; 32]
Position Counter for 1 is [22 0 19 1 22 11 0 26 0 22 0 9]
Any[[1.0, 83.75, 1.0]]
[1, 84, 1]
1 C Major
Rhythm map: ["W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "S", "W", "A", "A", "A", "A"] size: (17,)
Amount of timesteps to optimise: 17
Building lookup-table list...
Lookup-table built.
Initial function score upper bound: 499, voicing score upper bound: 499
Starting search...
New solution
function cost: 174
child voicing cost: 108
Best yet: 282
New solution
function cost: 174
child voicing cost: 100
Best yet: 274
New solution
function cost: 174
child voicing cost: 95
Best yet: 269
New solution
function cost: 174
child voicing cost: 92
Best yet: 266
New solution
function cost: 174
child voicing cost: 90
Best yet: 264
New solution
function cost: 174
child voicing cost: 89
Best yet: 263
New solution
function cost: 174
child voicing cost: 87
Best yet: 261
New solution
function cost: 174
child voicing cost: 85
Best yet: 259
New solution
function cost: 174
child voicing cost: 83
Best yet: 257
New solution
function cost: 174
child voicing cost: 80
Best yet: 254
New solution
function cost: 174
child voicing cost: 78
Best yet: 252
New solution
function cost: 174
child voicing cost: 77
Best yet: 251
New solution
function cost: 177
child voicing cost: 72
Best yet: 249
New solution
function cost: 174
child voicing cost: 74
Best yet: 248
New solution
function cost: 174
child voicing cost: 71
Best yet: 245
New solution
function cost: 174
child voicing cost: 69
Best yet: 243

(9, "T", Tuple{Int16,Int16}[(60, 1), (60, 1), (64, 3), (67, 5)])

(6, "D7/7", Tuple{Int16,Int16}[(53, 7), (59, 3), (62, 5), (67, 1)])

(9, "T/3", Tuple{Int16,Int16}[(52, 3), (60, 1), (67, 5), (72, 1)])

(15, "S", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(0, "D7-1", Tuple{Int16,Int16}[(50, 5), (62, 5), (65, 7), (71, 3)])

(0, "T", Tuple{Int16,Int16}[(48, 1), (64, 3), (67, 5), (72, 1)])

(27, "S", Tuple{Int16,Int16}[(53, 1), (65, 1), (69, 3), (72, 5)])

(18, "S", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(0, "T/3", Tuple{Int16,Int16}[(52, 3), (60, 1), (67, 5), (79, 5)])

(3, "Tm", Tuple{Int16,Int16}[(40, 1), (59, 5), (67, 3), (79, 3)])

(15, "S", Tuple{Int16,Int16}[(41, 1), (57, 3), (65, 1), (72, 5)])

(12, "D7", Tuple{Int16,Int16}[(43, 1), (62, 5), (65, 7), (71, 3)])

(15, "Ts", Tuple{Int16,Int16}[(45, 1), (60, 3), (64, 5), (72, 3)])

(6, "S", Tuple{Int16,Int16}[(41, 1), (60, 5), (65, 1), (69, 3)])

(6, "D", Tuple{Int16,Int16}[(43, 1), (59, 3), (62, 5), (67, 1)])

(12, "D", Tuple{Int16,Int16}[(55, 1), (59, 3), (62, 5), (67, 1)])

(3, "D7/7", Tuple{Int16,Int16}[(53, 7), (59, 3), (62, 5), (67, 1)])

(15, "T/3", Tuple{Int16,Int16}[(52, 3), (60, 1), (67, 5), (79, 5)])

(15, "S", Tuple{Int16,Int16}[(53, 1), (60, 5), (69, 3), (77, 1)])

(12, "D", Tuple{Int16,Int16}[(55, 1), (59, 3), (67, 1), (74, 5)])

(3, "D7/7", Tuple{Int16,Int16}[(53, 7), (59, 3), (67, 1), (74, 5)])

(15, "T/3", Tuple{Int16,Int16}[(52, 3), (60, 1), (67, 5), (72, 1)])

(0, "Ts", Tuple{Int16,Int16}[(45, 1), (60, 3), (69, 1), (76, 5)])

(0, "Ss", Tuple{Int16,Int16}[(50, 1), (65, 3), (69, 5), (74, 1)])

(18, "T/3", Tuple{Int16,Int16}[(52, 3), (60, 1), (67, 5), (72, 1)])

(9, "S", Tuple{Int16,Int16}[(53, 1), (60, 5), (65, 1), (69, 3)])

(15, "D7/7", Tuple{Int16,Int16}[(53, 7), (62, 5), (67, 1), (71, 3)])

(9, "T/3", Tuple{Int16,Int16}[(52, 3), (60, 1), (67, 5), (72, 1)])

(15, "D", Tuple{Int16,Int16}[(55, 1), (62, 5), (67, 1), (71, 3)])

(9, "D", Tuple{Int16,Int16}[(55, 1), (67, 1), (71, 3), (74, 5)])

(9, "T", Tuple{Int16,Int16}[(48, 1), (67, 5), (72, 1), (76, 3)])

(9, "T", Tuple{Int16,Int16}[(48, 1), (67, 5), (72, 1), (76, 3)])

##: Done. Total checked: 126479, Pruned: 137117, completed: 16, time: 2.57099986076355, efficiency: 6.223259769157759
Results: bestval_func: 174, bestval_voices: 69
#Key: 1Scale: Major
#Total time for optimisation of piece: 9.381999969482422
#Total cost of piece: 467
["T", "D7/7", "T/3", "S", "D7-1", "T", "S", "S", "T/3", "Tm", "S", "D7", "Ts", "S", "D", "D", "D7/7", "T/3", "S", "D", "D7/7", "T/3", "Ts", "Ss", "T/3", "S", "D7/7", "T/3", "D", "D", "T", "T"]
../../results/optimizer/pianoroll/SMP-72-chorl-opt.csv
 End of file 
 
